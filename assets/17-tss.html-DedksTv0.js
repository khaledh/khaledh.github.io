import{_ as n,c as a,e,o as t}from"./app-BEnvQN0t.js";const p={};function i(l,s){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="task-state-segment" tabindex="-1"><a class="header-anchor" href="#task-state-segment"><span>Task State Segment</span></a></h1><p>While running in user mode, an interrupt/exception or a system call causes the CPU to switch to kernel mode. This causes a change in privilege level (from CPL=3 to CPL=0). The CPU cannot use the user stack while in kernel mode, since the interrupt could have been caused by something that makes the stack unusable, e.g. a page fault caused by running out of stack space. So, the CPU needs to switch to a known good stack. This is where the Task State Segment (TSS) comes in.</p><p>The TSS originally was designed to support hardware task switching. This is a feature that allows the CPU to switch between multiple tasks (each having its own TSS) without software intervention. This feature is not used in modern operating systems, which rely on software task switching, but the TSS is still used to switch stacks when entering kernel mode.</p><p>The TSS on x64 contains two sets of stack pointers:</p><ul><li>One set holds three stack pointers, <code>RSP0</code>, <code>RSP1</code>, and <code>RSP2</code>, to use when switching to CPL=0, CPL=1, and CPL=2, respectively. Typically, only <code>RSP0</code> is used when switching from user mode to kernel mode, since rings 1 and 2 are not used in modern operating systems.</li><li>The other set holds the so-called Interrupt Stack Table, which can hold up to seven stack pointers, <code>IST1</code> through <code>IST7</code>, to use when handling interrupts. The decision to use one of those stacks is made by the Interrupt Descriptor Table entry for the interrupt. The stack pointer to use is stored in the <code>IST</code> field of the IDT entry. This means that different interrupts can use different stacks. If an IDT entry doesn&#39;t specify a stack, the CPU uses the stack pointed to by <code>RSP0</code>.</li></ul><p>Here&#39;s a diagram of the TSS structure:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">                 64-bit TSS Structure</span>
<span class="line">   31                                              00</span>
<span class="line">  ┌────────────────────────┬────────────────────────┐</span>
<span class="line">  │ I/O Map Base Address   │        Reserved        │ 100</span>
<span class="line">  ├────────────────────────┴────────────────────────┤</span>
<span class="line">  │                  Reserved                       │ 96</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  Reserved                       │ 92</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  IST7 (hi)                      │ 88</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  IST7 (lo)                      │ 84</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                     ...                         │</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  IST1 (hi)                      │ 40</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  IST1 (lo)                      │ 36</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  Reserved                       │ 32</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  Reserved                       │ 28</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  RSP2 (hi)                      │ 24</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  RSP2 (lo)                      │ 20</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  RSP1 (hi)                      │ 16</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  RSP1 (lo)                      │ 12</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  RSP0 (hi)                      │ 8</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  RSP0 (lo)                      │ 4</span>
<span class="line">  ├─────────────────────────────────────────────────┤</span>
<span class="line">  │                  Reserved                       │ 0</span>
<span class="line">  └─────────────────────────────────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, how does the CPU find the TSS? There&#39;s a special register called <code>TR</code> (Task Register) that holds the segment selector of the TSS. The CPU uses this selector to find the TSS in the GDT. So, what we need to do is to create a TSS and load its selector into <code>TR</code>.</p><h2 id="creating-a-tss" tabindex="-1"><a class="header-anchor" href="#creating-a-tss"><span>Creating a TSS</span></a></h2><p>Let&#39;s define the TSS structure in <code>src/kernel/gdt.nim</code></p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/kernel/gdt.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span></span>
<span class="line">  TaskStateSegment <span class="token punctuation">{.</span>packed<span class="token punctuation">.}</span> <span class="token operator">=</span> <span class="token keyword">object</span></span>
<span class="line">    reserved0<span class="token operator">:</span> uint32</span>
<span class="line">    rsp0<span class="token operator">:</span> uint64</span>
<span class="line">    rsp1<span class="token operator">:</span> uint64</span>
<span class="line">    rsp2<span class="token operator">:</span> uint64</span>
<span class="line">    reserved1<span class="token operator">:</span> uint64</span>
<span class="line">    ist1<span class="token operator">:</span> uint64</span>
<span class="line">    ist2<span class="token operator">:</span> uint64</span>
<span class="line">    ist3<span class="token operator">:</span> uint64</span>
<span class="line">    ist4<span class="token operator">:</span> uint64</span>
<span class="line">    ist5<span class="token operator">:</span> uint64</span>
<span class="line">    ist6<span class="token operator">:</span> uint64</span>
<span class="line">    ist7<span class="token operator">:</span> uint64</span>
<span class="line">    reserved2<span class="token operator">:</span> uint64</span>
<span class="line">    reserved3<span class="token operator">:</span> uint16</span>
<span class="line">    iomapBase<span class="token operator">:</span> uint16</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;ll need to define a new descriptor type for the TSS, so that we can add it to the GDT. This will be a system descriptor (as opposed to a code or data descriptor).</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/kernel/gdt.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span></span>
<span class="line">  TaskStateSegmentDescriptor <span class="token punctuation">{.</span>packed<span class="token punctuation">.}</span> <span class="token operator">=</span> <span class="token keyword">object</span></span>
<span class="line">    limit00<span class="token operator">:</span> uint16</span>
<span class="line">    base00<span class="token operator">:</span> uint16</span>
<span class="line">    base16<span class="token operator">:</span> uint8</span>
<span class="line">    <span class="token identifier"><span class="token punctuation">\`</span>type<span class="token punctuation">\`</span></span><span class="token operator">*</span> <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">4.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">0b1001</span>  <span class="token comment"># 64-bit TSS</span></span>
<span class="line">    s <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">1.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># System segment</span></span>
<span class="line">    dpl<span class="token operator">*</span> <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">2.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint8</span>
<span class="line">    p<span class="token operator">*</span> <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">1.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    limit16 <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">4.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint8</span>
<span class="line">    avl<span class="token operator">*</span> <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">1.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    zero1 <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">1.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    zero2 <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">1.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    g <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">1.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    base24<span class="token operator">:</span> uint8</span>
<span class="line">    base32<span class="token operator">:</span> uint32</span>
<span class="line">    reserved1<span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    zero3 <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">5.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    reserved2 <span class="token punctuation">{.</span>bitsize<span class="token operator">:</span> <span class="token number">19.</span><span class="token punctuation">}</span><span class="token operator">:</span> uint32 <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, let&#39;s create an instance of the TSS and a descriptor for it. Later, we&#39;ll create a kernel stack and set <code>RSP0</code> to point to it.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/kernel/gdt.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span></span>
<span class="line">  tss<span class="token operator">*</span> <span class="token operator">=</span> <span class="token function">TaskStateSegment</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span></span>
<span class="line">  tssDescriptor <span class="token operator">=</span> <span class="token function">TaskStateSegmentDescriptor</span><span class="token punctuation">(</span></span>
<span class="line">    dpl<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    base00<span class="token operator">:</span> <span class="token function">cast[uint16]</span><span class="token punctuation">(</span>tss<span class="token operator">.</span><span class="token keyword">addr</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    base16<span class="token operator">:</span> <span class="token function">cast[uint8]</span><span class="token punctuation">(</span><span class="token function">cast[uint64]</span><span class="token punctuation">(</span>tss<span class="token operator">.</span><span class="token keyword">addr</span><span class="token punctuation">)</span> <span class="token operator">shr</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    base24<span class="token operator">:</span> <span class="token function">cast[uint8]</span><span class="token punctuation">(</span><span class="token function">cast[uint64]</span><span class="token punctuation">(</span>tss<span class="token operator">.</span><span class="token keyword">addr</span><span class="token punctuation">)</span> <span class="token operator">shr</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    base32<span class="token operator">:</span> <span class="token function">cast[uint32]</span><span class="token punctuation">(</span><span class="token function">cast[uint64]</span><span class="token punctuation">(</span>tss<span class="token operator">.</span><span class="token keyword">addr</span><span class="token punctuation">)</span> <span class="token operator">shr</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    limit00<span class="token operator">:</span> <span class="token function">cast[uint16]</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span>tss<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    limit16<span class="token operator">:</span> <span class="token function">cast[uint8]</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span>tss<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">shr</span> <span class="token number">16</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line">  tssDescriptorLo <span class="token operator">=</span> <span class="token function">cast[uint64]</span><span class="token punctuation">(</span>tssDescriptor<span class="token punctuation">)</span></span>
<span class="line">  tssDescriptorHi <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">cast[ptr uint64]</span><span class="token punctuation">(</span><span class="token function">cast[uint64]</span><span class="token punctuation">(</span>tssDescriptor<span class="token operator">.</span><span class="token keyword">addr</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, let&#39;s add the descriptor to the GDT and define its selector. Notice that the GDT entry occupies two 64-bit slots (since the TSS descriptor is 128 bits long). The selector points to the first slot (the low 64 bits).</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/kernel/gdt.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span></span>
<span class="line">  KernelCodeSegmentSelector<span class="token operator">*</span> <span class="token operator">=</span> <span class="token number">0x08</span></span>
<span class="line">  DataSegmentSelector<span class="token operator">*</span>       <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">or</span> <span class="token number">3</span> <span class="token comment"># RPL = 3</span></span>
<span class="line">  UserCodeSegmentSelector<span class="token operator">*</span>   <span class="token operator">=</span> <span class="token number">0x18</span> <span class="token operator">or</span> <span class="token number">3</span> <span class="token comment"># RPL = 3</span></span>
<span class="line highlighted">  TaskStateSegmentSelector<span class="token operator">*</span>  <span class="token operator">=</span> <span class="token number">0x20</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">  gdtEntries <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    NullSegmentDescriptor<span class="token operator">.</span>value<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">CodeSegmentDescriptor</span><span class="token punctuation">(</span>dpl<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">.</span>value<span class="token punctuation">,</span> <span class="token comment"># Kernel code segment</span></span>
<span class="line">    <span class="token function">DataSegmentDescriptor</span><span class="token punctuation">(</span>dpl<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">.</span>value<span class="token punctuation">,</span> <span class="token comment"># Data segment (shared)</span></span>
<span class="line">    <span class="token function">CodeSegmentDescriptor</span><span class="token punctuation">(</span>dpl<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">.</span>value<span class="token punctuation">,</span> <span class="token comment"># User code segment</span></span>
<span class="line highlighted">    tssDescriptorLo<span class="token punctuation">,</span>                     <span class="token comment"># Task state segment (low 64 bits)</span></span>
<span class="line highlighted">    tssDescriptorHi<span class="token punctuation">,</span>                     <span class="token comment"># Task state segment (high 64 bits)</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loading-the-tss" tabindex="-1"><a class="header-anchor" href="#loading-the-tss"><span>Loading the TSS</span></a></h2><p>To tell the CPU to use the TSS, we need to load its selector into <code>TR</code> (Task Register). We&#39;ll do this as part of the <code>gdtInit</code> proc.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/kernel/gdt.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">gdtInit<span class="token operator">*</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{.</span>asmNoStackFrame<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line">  <span class="token keyword">asm</span> <span class="token string">&quot;&quot;&quot;</span>
<span class="line">    lgdt %0</span>
<span class="line"></span>
<span class="line highlighted">    mov ax, %3</span>
<span class="line highlighted">    ltr ax</span>
<span class="line"></span>
<span class="line">    # reload CS using a far return</span>
<span class="line">    ...</span>
<span class="line"></span>
<span class="line">    :</span>
<span class="line">    : &quot;m&quot;(\`gdtDescriptor\`),</span>
<span class="line">      &quot;i&quot;(\`KernelCodeSegmentSelector\`),</span>
<span class="line">      &quot;i&quot;(\`DataSegmentSelector\`),</span>
<span class="line highlighted">      &quot;i&quot;(\`TaskStateSegmentSelector\`)</span>
<span class="line">    : &quot;rax&quot; </span>
<span class="line">  &quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kernel-switch-stack" tabindex="-1"><a class="header-anchor" href="#kernel-switch-stack"><span>Kernel Switch Stack</span></a></h2><p>We now need to define a new stack to use when switching to kernel mode. Let&#39;s allocate a page for it, map it, and set the <code>RSP0</code> field of the TSS to point to it.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/kernel/main.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">KernelMain</span><span class="token punctuation">(</span>bootInfo<span class="token operator">:</span> <span class="token keyword">ptr</span> BootInfo<span class="token punctuation">)</span> <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># allocate and map user stack</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line highlighted">  <span class="token comment"># create a kernel switch stack and set tss.rsp0</span></span>
<span class="line highlighted">  debugln <span class="token string">&quot;kernel: Creating kernel switch stack&quot;</span></span>
<span class="line highlighted">  <span class="token keyword">let</span> switchStackPhysAddr <span class="token operator">=</span> <span class="token function">pmAlloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">.</span>get</span>
<span class="line highlighted">  <span class="token keyword">let</span> switchStackVirtAddr <span class="token operator">=</span> <span class="token function">p2v</span><span class="token punctuation">(</span>switchStackPhysAddr<span class="token punctuation">)</span></span>
<span class="line highlighted">  <span class="token function">mapRegion</span><span class="token punctuation">(</span></span>
<span class="line highlighted">    pml4 <span class="token operator">=</span> kpml4<span class="token punctuation">,</span></span>
<span class="line highlighted">    virtAddr <span class="token operator">=</span> switchStackVirtAddr<span class="token punctuation">,</span></span>
<span class="line highlighted">    physAddr <span class="token operator">=</span> switchStackPhysAddr<span class="token punctuation">,</span></span>
<span class="line highlighted">    pageCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    pageAccess <span class="token operator">=</span> paReadWrite<span class="token punctuation">,</span></span>
<span class="line highlighted">    pageMode <span class="token operator">=</span> pmSupervisor<span class="token punctuation">,</span></span>
<span class="line highlighted">  <span class="token punctuation">)</span></span>
<span class="line highlighted">  tss<span class="token operator">.</span>rsp0 <span class="token operator">=</span> <span class="token function">uint64</span><span class="token punctuation">(</span>switchStackVirtAddr <span class="token operator">+!</span> PageSize<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># create interrupt stack frame</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Everything is now ready for the switch to kernel mode. There are a few ways to try this out.</p><h2 id="switching-to-kernel-mode" tabindex="-1"><a class="header-anchor" href="#switching-to-kernel-mode"><span>Switching to Kernel Mode</span></a></h2><p>One way to test this is to have the user task try to execute a privileged instruction, such as <code>hlt</code>. This should cause a General Protection Fault exception, which will trigger the switch to kernel mode. Let&#39;s try this out.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/user/utask.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">UserMain<span class="token operator">*</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token function">NimMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">asm</span> <span class="token string">&quot;hlt&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s run and see what happens.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">kernel: Fusion Kernel</span>
<span class="line">...</span>
<span class="line">kernel: Creating kernel switch stack</span>
<span class="line">kernel: Creating interrupt stack frame</span>
<span class="line">            SS: 0x13</span>
<span class="line">           RSP: 0x50001000</span>
<span class="line">        RFLAGS: 0x202</span>
<span class="line">            CS: 0x1b</span>
<span class="line">           RIP: 0x40000000</span>
<span class="line">kernel: Switching to user mode</span>
<span class="line"></span>
<span class="line">CPU Exception: General Protection Fault</span>
<span class="line"></span>
<span class="line">Traceback (most recent call last)</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(53) KernelMain</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(185) KernelMainInner</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(65) cpuGeneralProtectionFaultHandler</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As expected, the CPU switched to kernel mode and executed the General Protection Fault handler! Let&#39;s try another way. Let&#39;s cause a page fault by trying to access a page that&#39;s not mapped.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/user/utask.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">UserMain<span class="token operator">*</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token function">NimMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># access illegal memory</span></span>
<span class="line">  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">cast[ptr int]</span><span class="token punctuation">(</span><span class="token number">0xdeadbeef</span><span class="token punctuation">)</span></span>
<span class="line">  x<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We should see a page fault exception at the address <code>0xdeadbeef</code>.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">...</span>
<span class="line">kernel: Switching to user mode</span>
<span class="line"></span>
<span class="line">CPU Exception: Page Fault</span>
<span class="line">    Faulting address: 0x00000000deadbeef</span>
<span class="line"></span>
<span class="line">Traceback (most recent call last)</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(53) KernelMain</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(185) KernelMainInner</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(57) cpuPageFaultHandler</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Great! OK, one more way. Let&#39;s try to access an address within kernel space. This should also cause a Page Fault exception, even though the address is mapped.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/user/utask.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">UserMain<span class="token operator">*</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token function">NimMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># access kernel memory</span></span>
<span class="line">  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">cast[ptr int]</span><span class="token punctuation">(</span><span class="token number">0xFFFF800000100000</span><span class="token punctuation">)</span>  <span class="token comment"># kernel entry point</span></span>
<span class="line">  x<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">42</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s see what happens.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">...</span>
<span class="line">kernel: Switching to user mode</span>
<span class="line"></span>
<span class="line">CPU Exception: Page Fault</span>
<span class="line">    Faulting address: 0xffff800000100000</span>
<span class="line"></span>
<span class="line">Traceback (most recent call last)</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(53) KernelMain</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(185) KernelMainInner</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(57) cpuPageFaultHandler</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Great! This demonstrates that kernel memory is protected from access by user code.</p><h2 id="invoking-interrupts-from-user-mode" tabindex="-1"><a class="header-anchor" href="#invoking-interrupts-from-user-mode"><span>Invoking Interrupts from User Mode</span></a></h2><p>Finally, let&#39;s try to invoke an interrupt from user mode. Let&#39;s reuse the <code>isr100</code> interrupt handler we used for testing earlier.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/kernel/idt.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">isr100</span><span class="token punctuation">(</span>frame<span class="token operator">:</span> pointer<span class="token punctuation">)</span> <span class="token punctuation">{.</span>cdecl<span class="token punctuation">,</span> codegenDecl<span class="token operator">:</span> <span class="token string">&quot;__attribute__ ((interrupt)) $# $#$#&quot;</span><span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  debugln <span class="token string">&quot;Hello from isr100&quot;</span></span>
<span class="line">  <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">idtInit<span class="token operator">*</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">installHandler</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> isr100<span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s execute the <code>int</code> instruction from user mode.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/user/utask.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">UserMain<span class="token operator">*</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token function">NimMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">asm</span> <span class="token string">&quot;int 100&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we try to run this, we are faced with a General Protection Fault exception.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">...</span>
<span class="line">kernel: Switching to user mode</span>
<span class="line"></span>
<span class="line">CPU Exception: General Protection Fault</span>
<span class="line"></span>
<span class="line">Traceback (most recent call last)</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(53) KernelMain</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(185) KernelMainInner</span>
<span class="line">/Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(66) cpuGeneralProtectionFaultHandler</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The reason has to do with the <code>DPL</code> of the interrupt gate. Recall that the <code>DPL</code> of the interrupt gate must be greater than or equal to the <code>CPL</code> of the code that invokes the interrupt. In this case, the <code>DPL</code> of the interrupt gate is 0, while the <code>CPL</code> of the user code is 3. So, the CPU raises a General Protection Fault exception.</p><p>Let&#39;s fix this by allowing the <code>isr100</code> handler to be called from user mode. We need to do a couple of modifications in the <code>idt.nim</code> module to allow setting the <code>dpl</code> field of the interrupt gate.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">proc</span> <span class="token function">newInterruptGate</span><span class="token punctuation">(</span>handler<span class="token operator">:</span> InterruptHandler<span class="token punctuation">,</span> dpl<span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> InterruptGate <span class="token operator">=</span></span>
<span class="line">  <span class="token keyword">let</span> offset <span class="token operator">=</span> <span class="token function">cast[uint64]</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span></span>
<span class="line">  result <span class="token operator">=</span> <span class="token function">InterruptGate</span><span class="token punctuation">(</span></span>
<span class="line">    offset00<span class="token operator">:</span> <span class="token function">uint16</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    offset16<span class="token operator">:</span> <span class="token function">uint16</span><span class="token punctuation">(</span>offset <span class="token operator">shr</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    offset32<span class="token operator">:</span> <span class="token function">uint32</span><span class="token punctuation">(</span>offset <span class="token operator">shr</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line highlighted">    dpl<span class="token operator">:</span> dpl<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">proc</span> <span class="token function">installHandler<span class="token operator">*</span></span><span class="token punctuation">(</span>vector<span class="token operator">:</span> uint8<span class="token punctuation">,</span> handler<span class="token operator">:</span> InterruptHandler<span class="token punctuation">,</span> dpl<span class="token operator">:</span> uint8 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line highlighted">  idtEntries<span class="token punctuation">[</span>vector<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newInterruptGate</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> dpl<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">idtInit<span class="token operator">*</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line highlighted">  <span class="token function">installHandler</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> isr100<span class="token punctuation">,</span> dpl <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s try again.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">kernel: Switching to user mode</span>
<span class="line">Hello from isr100</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Great! We can call interrupts from user mode. We&#39;re now ready to start looking into system calls.</p>`,51)])])}const o=n(p,[["render",i],["__file","17-tss.html.vue"]]),r=JSON.parse('{"path":"/osdev/17-tss.html","title":"Task State Segment","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Creating a TSS","slug":"creating-a-tss","link":"#creating-a-tss","children":[]},{"level":2,"title":"Loading the TSS","slug":"loading-the-tss","link":"#loading-the-tss","children":[]},{"level":2,"title":"Kernel Switch Stack","slug":"kernel-switch-stack","link":"#kernel-switch-stack","children":[]},{"level":2,"title":"Switching to Kernel Mode","slug":"switching-to-kernel-mode","link":"#switching-to-kernel-mode","children":[]},{"level":2,"title":"Invoking Interrupts from User Mode","slug":"invoking-interrupts-from-user-mode","link":"#invoking-interrupts-from-user-mode","children":[]}],"git":{"updatedTime":1745166318000},"filePathRelative":"osdev/17-tss.md","excerpt":"\\n<p>While running in user mode, an interrupt/exception or a system call causes the CPU to\\nswitch to kernel mode. This causes a change in privilege level (from CPL=3 to CPL=0). The\\nCPU cannot use the user stack while in kernel mode, since the interrupt could have been\\ncaused by something that makes the stack unusable, e.g. a page fault caused by running out\\nof stack space. So, the CPU needs to switch to a known good stack. This is where the Task\\nState Segment (TSS) comes in.</p>"}');export{o as comp,r as data};
