import{_ as n,c as a,e,o as i}from"./app-BEnvQN0t.js";const l={};function t(p,s){return i(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="targeting-uefi-part-1" tabindex="-1"><a class="header-anchor" href="#targeting-uefi-part-1"><span>Targeting UEFI (Part 1)</span></a></h1><p>Traditionally, booting an operating system on x86/x86_64 hardware has been done using the BIOS. The BIOS has been considered legacy for a long time, and has been replaced by UEFI (Unified Extensible Firmware Interface) on most modern hardware. We no longer have to write a boot sector in assembly and rely on BIOS interrupts to load the OS. In this section we will focus on cross-compiling to UEFI (we&#39;ll get to the actual booting part later).</p><p>Since there is no OS to target yet, we&#39;ll need to cross-compile to a <strong>freestanding</strong> environment (as opposed to an OS hosted environment), where only a subset of the C standard library and runtime is available. That means we can&#39;t use features from the standard library that rely on OS support like memory allocation, threads, IO, etc.</p><div class="hint-container tip"><p class="hint-container-title">Goal Build a minimal UEFI executable using Nim. The executable should assume a</p><p>freestanding environment and does nothing but return 0 from the entry point.</p></div><h2 id="building-a-pe32-executable" tabindex="-1"><a class="header-anchor" href="#building-a-pe32-executable"><span>Building a PE32+ executable</span></a></h2><p>The first hurdle we have to overcome is that the UEFI firmware expects a PE32+ executable (Portable Executable with 64-bit extension to the standard PE32 format), which is an executable format used by Windows. It also expects the executable to follow the Windows ABI x64 calling convention. But since we&#39;re developing on Linux, we&#39;ll need a way to cross-compile our bootloader to this format.</p><p>Let&#39;s forget about Nim for a moment. Can we cross-compile a simple C program to a freestanding PE32+ executable on Linux? This is why we installed <code>clang</code> earlier, which supports multiple targets. The target we&#39;re interested in is <code>x86_64-unknown-windows</code> (the <code>unknown</code> part is for the vendor, which is not important in our case). We also need to tell the compiler that we don&#39;t have a standard library by passing the <code>-ffreestanding</code> flag:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// main.c</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">clang <span class="token parameter variable">-c</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-target</span> x86_64-unknown-windows <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-ffreestanding</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-o</span> build/main.o <span class="token punctuation">\\</span></span>
<span class="line">    main.c</span></span></span>
<span class="line"></span>
<span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash"><span class="token function">file</span> build/main.o</span></span></span>
<span class="line"><span class="token output">build/main.o: Intel amd64 COFF object file, not stripped, 6 sections, symbol offset=0x143, 16 symbols, created Thu Nov 30 02:47:57 2023, 1st section name &quot;.text&quot;</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We have a COFF object file, which is what PE32+ executables are based on. Now let&#39;s link it by telling <code>clang</code> to use the <code>lld-link</code> linker (which is the <code>lld</code> linker flavor that targets Windows):</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">clang <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-target</span> x86_64-unknown-windows <span class="token punctuation">\\</span></span>
<span class="line">    -fuse-ld<span class="token operator">=</span>lld-link <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-o</span> build/main.exe <span class="token punctuation">\\</span></span>
<span class="line">    build/main.o</span></span></span>
<span class="line"><span class="token output">lld-link: error: could not open &#39;libcmt.lib&#39;: No such file or directory</span>
<span class="line">lld-link: error: could not open &#39;oldnames.lib&#39;: No such file or directory</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The linker is trying to statically link <code>libcmt.lib</code>, the native Windows CRT startup library, and <code>oldnames.lib</code>, a compatibility library for redirecting old function names to new ones. We&#39;re not going to rely on these default libraries, so we can tell the linker to exclude them by passing the <code>-nostdlib</code> flag:</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">clang <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-target</span> x86_64-unknown-windows <span class="token punctuation">\\</span></span>
<span class="line">    -fuse-ld<span class="token operator">=</span>lld-link <span class="token punctuation">\\</span></span>
<span class="line highlighted">    <span class="token parameter variable">-nostdlib</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-o</span> build/main.exe <span class="token punctuation">\\</span></span>
<span class="line">    build/main.o</span></span></span>
<span class="line"><span class="token output">lld-link: error: &lt;root&gt;: undefined symbol: mainCRTStartup</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The linker is unable to find the C runtime entry point, <code>mainCRTStartup</code>, which makes sense because we&#39;re not linking the startup library. We can tell the linker to use our <code>main</code> function as the entry point by passing the <code>-entry:main</code> flag:</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">clang <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-target</span> x86_64-unknown-windows <span class="token punctuation">\\</span></span>
<span class="line">    -fuse-ld<span class="token operator">=</span>lld-link <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-nostdlib</span> <span class="token punctuation">\\</span></span>
<span class="line highlighted">    -Wl,-entry:main <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-o</span> build/main.exe <span class="token punctuation">\\</span></span>
<span class="line">    build/main.o</span></span></span>
<span class="line"></span>
<span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash"><span class="token function">file</span> build/main.exe</span></span></span>
<span class="line"><span class="token output">build/main.exe: PE32+ executable (console) x86-64, for MS Windows</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Great! We have a PE32+ executable. But notice that it says <code>(console)</code>. This means that the executable is a console application, which cannot run on UEFI. We need to tell the linker to create a UEFI application instead by passing the <code>-subsystem:efi_application</code> flag:</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">clang <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-target</span> x86_64-unknown-windows <span class="token punctuation">\\</span></span>
<span class="line">    -fuse-ld<span class="token operator">=</span>lld-link <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-nostdlib</span> <span class="token punctuation">\\</span></span>
<span class="line">    -Wl,-entry:main <span class="token punctuation">\\</span></span>
<span class="line highlighted">    -Wl,-subsystem:efi_application <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-o</span> build/main.exe <span class="token punctuation">\\</span></span>
<span class="line">    build/main.o</span></span></span>
<span class="line"></span>
<span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash"><span class="token function">file</span> build/main.exe</span></span></span>
<span class="line"><span class="token output">build/main.exe: PE32+ executable (EFI application) x86-64, for MS Windows</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we have a true UEFI application.</p><h2 id="cross-compiling-nim-to-pe32" tabindex="-1"><a class="header-anchor" href="#cross-compiling-nim-to-pe32"><span>Cross-compiling Nim to PE32+</span></a></h2><p>Let&#39;s try to do the same thing with Nim. We&#39;ll port the C program to Nim:</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># main.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> int <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>{.exportc.}</code> pragma tells the Nim compiler to export the function name as is, without any mangling. We do this because we need to pass the entry point name to the linker, and we don&#39;t want the compiler to mangle it.</p><p>Before we port this to Nim, we need to understand that Nim itself supports multiple targets. There are three arguments that influence the compilation/linking to a specific target:</p><ul><li><code>--cpu</code>(architecture), which defaults to the host architecture (in my case this is <code>amd64</code>, i.e. x86_64)</li><li><code>--os</code>(operating system), which defaults to the host operating system (in my case this is <code>linux</code>)</li><li><code>--cc</code>(backend compiler), which defaults to <code>gcc</code> (on Windows it relies on MinGW, which is a port of GCC to Windows)</li></ul><p>Nim does support cross-compiling to Windows using the <code>-d:mingw</code> flag. However, while the executable we want is a Windows executable format, the target OS is not Windows, but UEFI. Nim doesn&#39;t have a target OS for UEFI, so we&#39;ll need to use the <code>--os:any</code> flag to tell the compiler to not use any OS-specific code (it only expects a handful of ANSI C library functions to be available).</p><p>So, to cross-compile to UEFI, we need to set these three flags to: <code>--cpu:amd64</code>, <code>--os:any</code>, and <code>--cc:clang</code>. We also pass the <code>clang</code> flags we used earlier to the compiler and linker using the <code>--passc</code> and <code>--passl</code> flags respectively.</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">nim c <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--nimcache:build</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--cpu:amd64</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--os:any</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--cc:clang</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passc:<span class="token string">&quot;-target x86_64-unknown-windows&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passc:<span class="token string">&quot;-ffreestanding&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-fuse-ld=lld-link&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-nostdlib&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-Wl,-entry:main&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-Wl,-subsystem:efi_application&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --out:build/main.exe <span class="token punctuation">\\</span></span>
<span class="line">    main.nim</span></span></span>
<span class="line"><span class="token output">.../lib/system/osalloc.nim(218, 10) Error: Port memory manager to your platform</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The compiler is complaining that it doesn&#39;t know how to allocate memory on this platform. This makes sense because we&#39;re not targeting any OS. Since we don&#39;t have an OS yet, we need a way to provide memory allocation primitives to the Nim compiler. The Nim docs say:</p><blockquote><p>The <code>-d:useMalloc</code> option configures Nim to use only the standard C memory manage primitives <code>malloc()</code>, <code>free()</code>, <code>realloc()</code>. If your platform does not provide these functions it should be trivial to provide an implementation for them and link these to your program.</p></blockquote><p>OK, at least we have a way to provide memory allocation primitives to Nim, instead of assuming they&#39;re provided by an existing OS (e.g. <code>mmap</code> on Linux or <code>VirtualAlloc</code> on Windows). Since we don&#39;t have an OS yet, let&#39;s implement a simple bump allocator backed by a fixed-size buffer. To keep things simple, we will not worry about freeing memory for now (we&#39;ll get to that later when we implement a proper memory manager).</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># malloc.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{.</span>used<span class="token punctuation">.}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span></span>
<span class="line">  heap<span class="token operator">*:</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span> byte<span class="token punctuation">]</span> <span class="token comment"># 1 MiB heap</span></span>
<span class="line">  heapBumpPtr<span class="token operator">*:</span> int <span class="token operator">=</span> <span class="token function">cast[int]</span><span class="token punctuation">(</span><span class="token keyword">addr</span> heap<span class="token punctuation">)</span></span>
<span class="line">  heapMaxPtr<span class="token operator">*:</span> int <span class="token operator">=</span> <span class="token function">cast[int]</span><span class="token punctuation">(</span><span class="token keyword">addr</span> heap<span class="token punctuation">)</span> <span class="token operator">+</span> heap<span class="token operator">.</span>high</span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">malloc<span class="token operator">*</span></span><span class="token punctuation">(</span>size<span class="token operator">:</span> csize_t<span class="token punctuation">)</span><span class="token operator">:</span> pointer <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token keyword">if</span> heapBumpPtr <span class="token operator">+</span> size<span class="token operator">.</span>int <span class="token operator">&gt;</span> heapMaxPtr<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">nil</span></span>
<span class="line"></span>
<span class="line">  result <span class="token operator">=</span> <span class="token function">cast[pointer]</span><span class="token punctuation">(</span>heapBumpPtr<span class="token punctuation">)</span></span>
<span class="line">  inc heapBumpPtr<span class="token punctuation">,</span> size<span class="token operator">.</span>int</span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">calloc<span class="token operator">*</span></span><span class="token punctuation">(</span>num<span class="token operator">:</span> csize_t<span class="token punctuation">,</span> size<span class="token operator">:</span> csize_t<span class="token punctuation">)</span><span class="token operator">:</span> pointer <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size <span class="token operator">*</span> num<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">realloc<span class="token operator">*</span></span><span class="token punctuation">(</span>p<span class="token operator">:</span> pointer<span class="token punctuation">,</span> new_size<span class="token operator">:</span> csize_t<span class="token punctuation">)</span><span class="token operator">:</span> pointer <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  result <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>new_size<span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">copyMem</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> p<span class="token punctuation">,</span> new_size<span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">free<span class="token operator">*</span></span><span class="token punctuation">(</span>p<span class="token operator">:</span> pointer<span class="token punctuation">)</span> <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token keyword">discard</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that I added the <code>{.used.}</code> pragma at the top of the file. This tells the compiler to consider the module as used, even if we don&#39;t call any of its procs directly. Otherwise, the compiler will consider it dead code and will eliminate it from the output.</p><p>For Nim to actually know about this module, we need to import it in our main module:</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># main.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> malloc</span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let&#39;s pass the <code>-d:useMalloc</code> flag to the compiler and try to compile again:</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">nim c <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--nimcache:build</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--cpu:amd64</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--os:any</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--cc:clang</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passc:<span class="token string">&quot;-target x86_64-unknown-windows&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passc:<span class="token string">&quot;-ffreestanding&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-fuse-ld=lld-link&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-nostdlib&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-Wl,-entry:main&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-Wl,-subsystem:efi_application&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line highlighted">    <span class="token parameter variable">-d:useMalloc</span> <span class="token punctuation">\\</span></span>
<span class="line">    --out:build/main.exe <span class="token punctuation">\\</span></span>
<span class="line">    main.nim</span></span></span>
<span class="line"><span class="token output">...</span>
<span class="line">/home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@sstd@sprivate@sdigitsutils.nim.c:8:10: fatal error: &#39;string.h&#39; file not found</span>
<span class="line">    8 | #include &lt;string.h&gt;</span>
<span class="line">      |          ^~~~~~~~~~</span>
<span class="line">/home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c:8:10: fatal error: &#39;setjmp.h&#39; file not found</span>
<span class="line">    8 | #include &lt;setjmp.h&gt;</span>
<span class="line">      |          ^~~~~~~~~~</span>
<span class="line">/home/khaled/.cache/nim/main_d/@mmain.nim.c:113:5: error: conflicting types for &#39;main&#39;</span>
<span class="line">  113 | int main(int argc, char** args, char** env) {</span>
<span class="line">      |     ^</span>
<span class="line">/home/khaled/.cache/nim/main_d/@mmain.nim.c:65:29: note: previous definition is here</span>
<span class="line">   65 | N_LIB_PRIVATE N_NIMCALL(NI, main)(void) {</span>
<span class="line">      |</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re getting a different error, which means that Nim is happy with our memory allocation primitives.</p><p>At first glance, it looks like we&#39;re missing some C headers. It turns out that <code>clang</code> needs to be told where to find the system headers. In my case, the headers are located in <code>/usr/include</code> (on macOS, the system headers are located at <code>\`xcrun --show-sdk-path\`/usr/include</code>), so we&#39;ll pass that to the compiler using the <code>-I</code> flag:</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">nim c <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--nimcache:build</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--cpu:amd64</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--os:any</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--cc:clang</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passc:<span class="token string">&quot;-target x86_64-unknown-windows&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passc:<span class="token string">&quot;-ffreestanding&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line highlighted">    --passc:<span class="token string">&quot;-I/usr/include&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-target x86_64-unknown-windows&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-fuse-ld=lld-link&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-nostdlib&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-Wl,-entry:main&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-Wl,-subsystem:efi_application&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-d:useMalloc</span> <span class="token punctuation">\\</span></span>
<span class="line">    --out:build/main.exe <span class="token punctuation">\\</span></span>
<span class="line">    main.nim</span></span></span>
<span class="line"><span class="token output">...</span>
<span class="line">/home/khaled/.cache/nim/main_d/@mmain.nim.c:113:5: error: conflicting types for &#39;main&#39;</span>
<span class="line">  113 | int main(int argc, char** args, char** env) {</span>
<span class="line">      |     ^</span>
<span class="line">/home/khaled/.cache/nim/main_d/@mmain.nim.c:65:29: note: previous definition is here</span>
<span class="line">   65 | N_LIB_PRIVATE N_NIMCALL(NI, main)(void) {</span>
<span class="line">      |</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Note</strong>: On macOS, the system headers are located at <code>\`xcrun --show-sdk-path\`/usr/include</code>, so you&#39;ll need to replace <code>/usr/include</code> with that path in the <code>--passc</code> flag. Also, you&#39;ll need to pass <code>--passc:&quot;-fgnuc-version=4.2.1&quot;</code> (which defines <code>__GNUC__</code>) to avoid any macOS-specific marcros and stick with the GNU C ones.</p></blockquote><p>In order to understand what&#39;s going on here it&#39;s important to note that, unlike C, Nim programs are not required to have a <code>main</code> function. You can have a file with code at the top level and it will be executed when the program starts. When we defined a <code>main</code> proc ( which, to Nim, is just another proc that has no special meaning), we caused a conflict with the <code>main</code> function that the Nim compiler generates by default. Since we&#39;re not going to rely on the C library startup code, we need to take over the startup process ourselves. We can tell Nim to not generate its own <code>main</code> function by passing the <code>--noMain:on</code> flag.</p><p>However, by doing so, we lose initialization of global variables done by the automatically generated <code>NimMain</code> function. We can get it back by forward importing <code>NimMain</code> and calling it from our <code>main</code> proc:</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># main.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">NimMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{.</span>importc<span class="token punctuation">.}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> int <span class="token punctuation">{.</span>exportc<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line">    <span class="token function">NimMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s try to compile again with the <code>--noMain:on</code> flag:</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">nim c <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--nimcache:build</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--cpu:amd64</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--os:any</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--cc:clang</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passc:<span class="token string">&quot;-target x86_64-unknown-windows&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passc:<span class="token string">&quot;-ffreestanding&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passc:<span class="token string">&quot;-I/usr/include&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-target x86_64-unknown-windows&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-fuse-ld=lld-link&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-nostdlib&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-Wl,-entry:main&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    --passl:<span class="token string">&quot;-Wl,-subsystem:efi_application&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-d:useMalloc</span> <span class="token punctuation">\\</span></span>
<span class="line highlighted">    <span class="token parameter variable">--noMain:on</span> <span class="token punctuation">\\</span></span>
<span class="line">    --out:build/main.exe <span class="token punctuation">\\</span></span>
<span class="line">    main.nim</span></span></span>
<span class="line"><span class="token output">...</span>
<span class="line">lld-link: error: undefined symbol: memcpy</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@sstd@sprivate@sdigitsutils.nim.c.o:(nimCopyMem)</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(nimCopyMem)</span>
<span class="line"></span>
<span class="line">lld-link: error: undefined symbol: stderr</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(raiseOutOfMem__system_u5532)</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(writeToStdErr__system_u3828)</span>
<span class="line"></span>
<span class="line">lld-link: error: undefined symbol: exit</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(raiseOutOfMem__system_u5532)</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(callDepthLimitReached__system_u4467)</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(signalHandler)</span>
<span class="line">&gt;&gt;&gt; referenced 1 more times</span>
<span class="line"></span>
<span class="line">lld-link: error: undefined symbol: fwrite</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(rawWrite)</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(rawWriteString)</span>
<span class="line"></span>
<span class="line">lld-link: error: undefined symbol: fflush</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(rawWrite)</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(rawWriteString)</span>
<span class="line"></span>
<span class="line">lld-link: error: undefined symbol: strlen</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(nimCStrLen)</span>
<span class="line"></span>
<span class="line">lld-link: error: undefined symbol: signal</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(registerSignalHandler__system_u4487)</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(registerSignalHandler__system_u4487)</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(registerSignalHandler__system_u4487)</span>
<span class="line">&gt;&gt;&gt; referenced 2 more times</span>
<span class="line"></span>
<span class="line">lld-link: error: undefined symbol: memset</span>
<span class="line">&gt;&gt;&gt; referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(nimSetMem__systemZmemory_u7)</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK, the linker is complaining that it can&#39;t find some C functions. This is because we&#39;re targeting <code>--os:any</code>, which expects a handful of ANSI C library functions to be available for Nim to use:</p><ul><li><code>memset</code> and <code>memcpy</code> for some memory operations</li><li><code>strlen</code> for string length</li><li><code>fwrite</code> and <code>fflush</code> for writing to a file descriptor</li><li><code>stderr</code> for printing to standard error (not a function, but a global variable)</li><li><code>signal</code> for signal handlers</li><li><code>exit</code> for exiting the program</li></ul><p>Since our OS won&#39;t be a POSIX system, we can disable signals by passing the <code>-d:noSignalHandler</code> flag. For the rest of the functions, we&#39;ll need to implement them ourselves. Also, Nim includes implementation of some memory functions, which we can leverage by passing the <code>-d:nimNoLibc</code> flag.</p><p>Before we go any further, let&#39;s move the compiler flags to a <strong>nim.cfg</strong> file in the project root, so we don&#39;t have to pass them every time we compile:</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># nim.cfg</span></span>
<span class="line"><span class="token key attr-name">--nimcache</span><span class="token punctuation">:</span><span class="token value attr-value">build</span></span>
<span class="line"><span class="token key attr-name">--noMain</span><span class="token punctuation">:</span><span class="token value attr-value">on</span></span>
<span class="line"><span class="token key attr-name">-d</span><span class="token punctuation">:</span><span class="token value attr-value">useMalloc</span></span>
<span class="line"><span class="token key attr-name">-d</span><span class="token punctuation">:</span><span class="token value attr-value">nimNoLibc</span></span>
<span class="line"><span class="token key attr-name">-d</span><span class="token punctuation">:</span><span class="token value attr-value">noSignalHandler</span></span>
<span class="line"><span class="token key attr-name">--cpu</span><span class="token punctuation">:</span><span class="token value attr-value">amd64</span></span>
<span class="line"><span class="token key attr-name">--os</span><span class="token punctuation">:</span><span class="token value attr-value">any</span></span>
<span class="line"><span class="token key attr-name">--cc</span><span class="token punctuation">:</span><span class="token value attr-value">clang</span></span>
<span class="line"><span class="token key attr-name">--passc</span><span class="token punctuation">:</span><span class="token value attr-value">&quot;-target x86_64-unknown-windows&quot;</span></span>
<span class="line"><span class="token key attr-name">--passc</span><span class="token punctuation">:</span><span class="token value attr-value">&quot;-ffreestanding&quot;</span></span>
<span class="line"><span class="token key attr-name">--passc</span><span class="token punctuation">:</span><span class="token value attr-value">&quot;-I/usr/include&quot;</span></span>
<span class="line"><span class="token key attr-name">--passl</span><span class="token punctuation">:</span><span class="token value attr-value">&quot;-target x86_64-unknown-windows&quot;</span></span>
<span class="line"><span class="token key attr-name">--passl</span><span class="token punctuation">:</span><span class="token value attr-value">&quot;-fuse-ld=lld-link&quot;</span></span>
<span class="line"><span class="token key attr-name">--passl</span><span class="token punctuation">:</span><span class="token value attr-value">&quot;-nostdlib&quot;</span></span>
<span class="line"><span class="token key attr-name">--passl</span><span class="token punctuation">:</span><span class="token value attr-value">&quot;-Wl,-entry:main&quot;</span></span>
<span class="line"><span class="token key attr-name">--passl</span><span class="token punctuation">:</span><span class="token value attr-value">&quot;-Wl,-subsystem:efi_application&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">nim c main.nim --out:build/main.exe</span></span></span>
<span class="line"><span class="token output">.../lib/std/typedthreads.nim(51, 10) Error: Threads not implemented for os:any. Please compile with --threads:off.</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This seems weird. The <code>--os:any</code> target should disable threads by default, which we know is true because we didn&#39;t get this error when we passed the flags on the command line. It turns out that Nim processes its default <code>nim.cfg</code> file (which turns off threads for <code>os:any</code>) <em>before</em> the project <code>nim.cfg</code> file (which defines <code>--os:any</code>). So by the time the project <code>nim.cfg</code> file is processed, threads are already enabled. We can technically disable threads in the project <code>nim.cfg</code> file using <code>--threads:off</code>, but since the default <code>nim.cfg</code> makes a lot of decisions based on the <code>os</code> flag, we&#39;ll need to pass this flag explicitly every time we compile.</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">nim c <span class="token parameter variable">--os:any</span> main.nim --out:build/main.exe</span></span></span>
<span class="line"><span class="token output">...</span>
<span class="line">lld-link: error: undefined symbol: stderr</span>
<span class="line">lld-link: error: undefined symbol: exit</span>
<span class="line">lld-link: error: undefined symbol: fwrite</span>
<span class="line">lld-link: error: undefined symbol: fflush</span>
<span class="line">...</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We get less linker errors now, thanks to the <code>--d:nimNoLibc</code> and <code>--d:noSignalHandler</code> flags. We still, however, need to implement <code>stderr</code>, <code>fwrite</code>, <code>fflush</code>, and <code>exit</code>.</p><p>This section is already too long, so we&#39;ll continue in the next section, where we&#39;ll implement the missing C functions.</p>`,55)])])}const c=n(l,[["render",t],["__file","03-targeting-uefi-p1.html.vue"]]),r=JSON.parse(`{"path":"/osdev/03-targeting-uefi-p1.html","title":"Targeting UEFI (Part 1)","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Building a PE32+ executable","slug":"building-a-pe32-executable","link":"#building-a-pe32-executable","children":[]},{"level":2,"title":"Cross-compiling Nim to PE32+","slug":"cross-compiling-nim-to-pe32","link":"#cross-compiling-nim-to-pe32","children":[]}],"git":{"updatedTime":1744638230000},"filePathRelative":"osdev/03-targeting-uefi-p1.md","excerpt":"\\n<p>Traditionally, booting an operating system on x86/x86_64 hardware has been done using the\\nBIOS. The BIOS has been considered legacy for a long time, and has been replaced by UEFI\\n(Unified Extensible Firmware Interface) on most modern hardware. We no longer have to\\nwrite a boot sector in assembly and rely on BIOS interrupts to load the OS. In this\\nsection we will focus on cross-compiling to UEFI (we'll get to the actual booting part\\nlater).</p>"}`);export{c as comp,r as data};
