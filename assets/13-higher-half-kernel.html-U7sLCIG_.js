import{_ as s,c as a,e,o as p}from"./app-BEnvQN0t.js";const t={};function l(o,n){return p(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="higher-half-kernel" tabindex="-1"><a class="header-anchor" href="#higher-half-kernel"><span>Higher Half Kernel</span></a></h1><p>The kernel is currently linked at address <code>0x100000</code>, not at the higher half of the address space. The UEFI environment does have paging enabled, but we need to build our own page tables, and map the kernel at the higher half of the address space. This needs to be done in the bootloader, before we jump to the kernel (since we&#39;ll change the kernel to be linked at the higher half). Once we&#39;re in the kernel, we can set up different page tables that fit our needs.</p><h2 id="linking-the-kernel" tabindex="-1"><a class="header-anchor" href="#linking-the-kernel"><span>Linking the kernel</span></a></h2><p>To link the kernel at the higher half of the address space, we need to change the base address of the kernel in the linker script. However, instead of linking the kernel at exactly <code>0xFFFF800000000000</code>, we&#39;ll link it at 1 MiB above that address, i.e. <code>0xFFFF800000100000</code>. This will make virtual addresses and physical addresses line up nicely, and we can compare them visually by just looking at the least significant bytes of the address, which makes debugging page table mappings easier.</p><div class="language-ld line-numbers-mode" data-highlighter="prismjs" data-ext="ld" data-title="ld"><pre><code><span class="line"><span class="token comment">/* src/kernel/kernel.ld */</span></span>
<span class="line"></span>
<span class="line">SECTIONS</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line highlighted">  <span class="token location-counter important">.</span> <span class="token operator">=</span> <span class="token number">0xFFFF800000100000</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token section keyword">.text</span>   <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">*</span>main<span class="token operator">*</span>.o<span class="token punctuation">(</span><span class="token location-counter important">.</span><span class="token operator">*</span>text.KernelMain<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span>main<span class="token operator">*</span>.o<span class="token punctuation">(</span><span class="token location-counter important">.</span><span class="token operator">*</span>text.<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token location-counter important">.</span><span class="token operator">*</span>text<span class="token operator">*</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token section keyword">.rodata</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token location-counter important">.</span><span class="token operator">*</span>rodata<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token section keyword">.data</span>   <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token location-counter important">.</span><span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token location-counter important">.</span><span class="token operator">*</span>bss<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token section keyword">.shstrtab</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token section keyword">.shstrtab</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token operator">/</span>DISCARD<span class="token operator">/</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we try to compile and link the kernel, we&#39;ll get a bunch of relocation errors:</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash">just kernel</span></span></span>
<span class="line"><span class="token output">ld.lld: error: .../fusion/build/@mmain.nim.c.o:(function KernelMainInner__main_u7: .text.KernelMainInner__main_u7+0x232): relocation R_X86_64_32S out of range: -140737488267184 is not in [-2147483648, 2147483647]; references section &#39;.rodata&#39;</span>
<span class="line">&gt;&gt;&gt; referenced by @mmain.nim.c</span>
<span class="line">...</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The problem here is that the compiler has something called a &quot;code model&quot;, which determines how it generates code. The default code model is <code>small</code>, which means that the compiler assumes that the code and data are linked in the lower 2 GiB of the address space. What we need here is the <code>large</code> code model, which assumes that the code and data are linked anywhere in the address space. We can specify the code model using the <code>-mcmodel</code> flag, so let&#39;s add it to the kernel&#39;s <code>nim.cfg</code> file.</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># src/kernel/nim.cfg</span></span>
<span class="line">...</span>
<span class="line"><span class="token key attr-name">--passc</span><span class="token punctuation">:</span><span class="token value attr-value">&quot;-mcmodel=large&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now the kernel should compile and link successfully. Let&#39;s take a quick look at the linker map.</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token command"><span class="token shell-symbol important">$</span> <span class="token bash language-bash"><span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> build/kernel.map</span></span></span>
<span class="line"><span class="token output">             VMA              LMA     Size Align Out     In      Symbol</span>
<span class="line">               0                0 ffff800000100000     1 . = 0xFFFF800000100000</span>
<span class="line">ffff800000100000 ffff800000100000    2048c    16 .text</span>
<span class="line">ffff800000100000 ffff800000100000      1ee    16         .../fusion/build/@mmain.nim.c.o:(.ltext.KernelMain)</span>
<span class="line">ffff800000100000 ffff800000100000      1ee     1                 KernelMain</span>
<span class="line">ffff8000001001f0 ffff8000001001f0     261f    16         .../fusion/build/@mmain.nim.c.o:(.ltext.KernelMainInner__main_u13)</span>
<span class="line">ffff8000001001f0 ffff8000001001f0     261f     1                 KernelMainInner__main_u13</span>
<span class="line">ffff800000102810 ffff800000102810       9b    16         .../fusion/build/@mmain.nim.c.o:(.ltext.nimFrame)</span>
<span class="line">ffff800000102810 ffff800000102810       9b     1                 nimFrame</span>
<span class="line">ffff8000001028b0 ffff8000001028b0       25    16         .../fusion/build/@mmain.nim.c.o:(.ltext.nimErrorFlag)</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Looks good. Before we start setting up paging, let&#39;s add a few utility procs to prepare the <code>BootInfo</code> structure with the physical memory map and the virtual memory map.</p><h2 id="preparing-bootinfo" tabindex="-1"><a class="header-anchor" href="#preparing-bootinfo"><span>Preparing BootInfo</span></a></h2><p>We need to pass a few things to the kernel, including:</p><ul><li>The physical memory map</li><li>The virtual memory map</li><li>The virtual address where physical memory is mapped</li></ul><p>We already have a <code>convertUefiMemoryMap</code> proc that converts the UEFI memory map to our own format. Let&#39;s add a proc to create a virtual memory map as well, which will contain the virtual address space regions that we&#39;ll map.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/boot/bootx64.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span></span>
<span class="line">  KernelPhysicalBase <span class="token operator">=</span> <span class="token number">0x10_0000&#39;u64</span></span>
<span class="line">  KernelVirtualBase <span class="token operator">=</span> <span class="token number">0xFFFF_8000_0000_0000&#39;u64</span> <span class="token operator">+</span> KernelPhysicalBase</span>
<span class="line"></span>
<span class="line">  KernelStackVirtualBase <span class="token operator">=</span> <span class="token number">0xFFFF_8001_0000_0000&#39;u64</span> <span class="token comment"># KernelVirtualBase + 4 GiB</span></span>
<span class="line">  KernelStackSize <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">1024&#39;u64</span></span>
<span class="line">  KernelStackPages <span class="token operator">=</span> KernelStackSize <span class="token operator">div</span> PageSize</span>
<span class="line"></span>
<span class="line">  BootInfoVirtualBase <span class="token operator">=</span> KernelStackVirtualBase <span class="token operator">+</span> KernelStackSize <span class="token comment"># after kernel stack</span></span>
<span class="line"></span>
<span class="line">  PhysicalMemoryVirtualBase <span class="token operator">=</span> <span class="token number">0xFFFF_8002_0000_0000&#39;u64</span> <span class="token comment"># KernelVirtualBase + 8 GiB</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">createVirtualMemoryMap</span><span class="token punctuation">(</span></span>
<span class="line">  kernelImagePages<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  physMemoryPages<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> seq<span class="token punctuation">[</span>MemoryMapEntry<span class="token punctuation">]</span> <span class="token operator">=</span></span>
<span class="line"></span>
<span class="line">  result<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">MemoryMapEntry</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">type</span><span class="token operator">:</span> KernelCode<span class="token punctuation">,</span></span>
<span class="line">    start<span class="token operator">:</span> KernelVirtualBase<span class="token punctuation">,</span></span>
<span class="line">    nframes<span class="token operator">:</span> kernelImagePages</span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  result<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">MemoryMapEntry</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">type</span><span class="token operator">:</span> KernelStack<span class="token punctuation">,</span></span>
<span class="line">    start<span class="token operator">:</span> KernelStackVirtualBase<span class="token punctuation">,</span></span>
<span class="line">    nframes<span class="token operator">:</span> KernelStackPages</span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  result<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">MemoryMapEntry</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">type</span><span class="token operator">:</span> KernelData<span class="token punctuation">,</span></span>
<span class="line">    start<span class="token operator">:</span> BootInfoVirtualBase<span class="token punctuation">,</span></span>
<span class="line">    nframes<span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  result<span class="token operator">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">MemoryMapEntry</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">type</span><span class="token operator">:</span> KernelData<span class="token punctuation">,</span></span>
<span class="line">    start<span class="token operator">:</span> PhysicalMemoryVirtualBase<span class="token punctuation">,</span></span>
<span class="line">    nframes<span class="token operator">:</span> physMemoryPages</span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, let&#39;s add a proc to prepare the <code>BootInfo</code> structure itself.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/boot/bootx64.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">createBootInfo</span><span class="token punctuation">(</span></span>
<span class="line">  bootInfoBase<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  kernelImagePages<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  physMemoryPages<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  physMemoryMap<span class="token operator">:</span> seq<span class="token punctuation">[</span>MemoryMapEntry<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  virtMemoryMap<span class="token operator">:</span> seq<span class="token punctuation">[</span>MemoryMapEntry<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">ptr</span> BootInfo <span class="token operator">=</span></span>
<span class="line">  <span class="token keyword">var</span> bootInfo <span class="token operator">=</span> <span class="token function">cast[ptr BootInfo]</span><span class="token punctuation">(</span>bootInfoBase<span class="token punctuation">)</span></span>
<span class="line">  bootInfo<span class="token operator">.</span>physicalMemoryVirtualBase <span class="token operator">=</span> PhysicalMemoryVirtualBase</span>
<span class="line"></span>
<span class="line">  <span class="token comment"># copy physical memory map entries to boot info</span></span>
<span class="line">  bootInfo<span class="token operator">.</span>physicalMemoryMap<span class="token operator">.</span>len <span class="token operator">=</span> physMemoryMap<span class="token operator">.</span>len<span class="token operator">.</span>uint</span>
<span class="line">  bootInfo<span class="token operator">.</span>physicalMemoryMap<span class="token operator">.</span>entries <span class="token operator">=</span></span>
<span class="line">    <span class="token keyword">cast</span><span class="token punctuation">[</span><span class="token keyword">ptr</span> UncheckedArray<span class="token punctuation">[</span>MemoryMapEntry<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>bootInfoBase <span class="token operator">+</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>BootInfo<span class="token punctuation">)</span><span class="token operator">.</span>uint64<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">for</span> i <span class="token operator">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> physMemoryMap<span class="token operator">.</span>len<span class="token operator">:</span></span>
<span class="line">    bootInfo<span class="token operator">.</span>physicalMemoryMap<span class="token operator">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> physMemoryMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">  <span class="token keyword">let</span> physMemoryMapSize <span class="token operator">=</span> physMemoryMap<span class="token operator">.</span>len<span class="token operator">.</span>uint64 <span class="token operator">*</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>MemoryMapEntry<span class="token punctuation">)</span><span class="token operator">.</span>uint64</span>
<span class="line"></span>
<span class="line">  <span class="token comment"># copy virtual memory map entries to boot info</span></span>
<span class="line">  bootInfo<span class="token operator">.</span>virtualMemoryMap<span class="token operator">.</span>len <span class="token operator">=</span> virtMemoryMap<span class="token operator">.</span>len<span class="token operator">.</span>uint</span>
<span class="line">  bootInfo<span class="token operator">.</span>virtualMemoryMap<span class="token operator">.</span>entries <span class="token operator">=</span></span>
<span class="line">    <span class="token keyword">cast</span><span class="token punctuation">[</span><span class="token keyword">ptr</span> UncheckedArray<span class="token punctuation">[</span>MemoryMapEntry<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>bootInfoBase <span class="token operator">+</span> <span class="token function">sizeof</span><span class="token punctuation">(</span>BootInfo<span class="token punctuation">)</span><span class="token operator">.</span>uint64 <span class="token operator">+</span> physMemoryMapSize<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">for</span> i <span class="token operator">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> virtMemoryMap<span class="token operator">.</span>len<span class="token operator">:</span></span>
<span class="line">    bootInfo<span class="token operator">.</span>virtualMemoryMap<span class="token operator">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> virtMemoryMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">  </span>
<span class="line">  result <span class="token operator">=</span> bootInfo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, we&#39;ll call these procs from <code>EfiMainInner</code>. We&#39;ll also get the <code>maxPhysAddr</code> (which is the highest usable physical address) and use it to calculate the number of physical memory pages.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/boot/bootx64.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">EfiMainInner</span><span class="token punctuation">(</span>imgHandle<span class="token operator">:</span> EfiHandle<span class="token punctuation">,</span> sysTable<span class="token operator">:</span> <span class="token keyword">ptr</span> EFiSystemTable<span class="token punctuation">)</span><span class="token operator">:</span> EfiStatus <span class="token operator">=</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># ======= NO MORE UEFI BOOT SERVICES =======</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> physMemoryMap <span class="token operator">=</span> <span class="token function">convertUefiMemoryMap</span><span class="token punctuation">(</span>memoryMap<span class="token punctuation">,</span> memoryMapSize<span class="token punctuation">,</span> memoryMapDescriptorSize<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># get max free physical memory address</span></span>
<span class="line">  <span class="token keyword">var</span> maxPhysAddr<span class="token operator">:</span> PhysAddr</span>
<span class="line">  <span class="token keyword">for</span> i <span class="token operator">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> physMemoryMap<span class="token operator">.</span>len<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">if</span> physMemoryMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">.</span><span class="token keyword">type</span> <span class="token operator">==</span> Free<span class="token operator">:</span></span>
<span class="line">      maxPhysAddr <span class="token operator">=</span> physMemoryMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">.</span>start<span class="token operator">.</span>PhysAddr <span class="token operator">+!</span> physMemoryMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">.</span>nframes <span class="token operator">*</span> PageSize</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> physMemoryPages<span class="token operator">:</span> uint64 <span class="token operator">=</span> maxPhysAddr<span class="token operator">.</span>uint64 <span class="token operator">div</span> PageSize</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> virtMemoryMap <span class="token operator">=</span> <span class="token function">createVirtualMemoryMap</span><span class="token punctuation">(</span>kernelImagePages<span class="token punctuation">,</span> physMemoryPages<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  debugln <span class="token operator">&amp;</span><span class="token string">&quot;boot: Preparing BootInfo&quot;</span></span>
<span class="line">  <span class="token keyword">let</span> bootInfo <span class="token operator">=</span> <span class="token function">createBootInfo</span><span class="token punctuation">(</span></span>
<span class="line">    bootInfoBase<span class="token punctuation">,</span></span>
<span class="line">    kernelImagePages<span class="token punctuation">,</span></span>
<span class="line">    physMemoryPages<span class="token punctuation">,</span></span>
<span class="line">    physMemoryMap<span class="token punctuation">,</span></span>
<span class="line">    virtMemoryMap<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bootloader-paging-setup" tabindex="-1"><a class="header-anchor" href="#bootloader-paging-setup"><span>Bootloader paging setup</span></a></h2><p>We know we need to map the kernel to the higher half. But since we&#39;re going to be changing the paging structures in the bootloader, we&#39;ll need to identity-map the bootloader image itself. The reason is that the bootloader code is currently running from the bootloader image, which is mapped to the lower half of the address space. If we change the page tables, the bootloader code will no longer be accessible, and we&#39;ll get a page fault. Here&#39;s a list of things we need to map:</p><ul><li>The bootloader image (identity-mapped)</li><li>The boot info structure</li><li>The kernel image</li><li>The kernel stack</li><li>All physical memory</li></ul><p>We&#39;ll create a new page table structure and map all of the above regions (including physical memory), and install it before jumping to the kernel. Let&#39;s create a new proc to do the mapping.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/boot/bootx64.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"><span class="token keyword">import</span> kernel<span class="token operator">/</span>pmm</span>
<span class="line"><span class="token keyword">import</span> kernel<span class="token operator">/</span>vmm</span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span></span>
<span class="line">  AlignedPage <span class="token operator">=</span> <span class="token keyword">object</span></span>
<span class="line">    data <span class="token punctuation">{.</span><span class="token function">align</span><span class="token punctuation">(</span>PageSize<span class="token punctuation">)</span><span class="token punctuation">.}</span><span class="token operator">:</span> array<span class="token punctuation">[</span>PageSize<span class="token punctuation">,</span> uint8<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">createPageTable</span><span class="token punctuation">(</span></span>
<span class="line">  bootloaderBase<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  bootloaderPages<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  kernelImageBase<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  kernelImagePages<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  kernelStackBase<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  kernelStackPages<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  bootInfoBase<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  bootInfoPages<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line">  physMemoryPages<span class="token operator">:</span> uint64<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">ptr</span> PML4Table <span class="token operator">=</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">proc</span> <span class="token function">bootAlloc</span><span class="token punctuation">(</span>nframes<span class="token operator">:</span> uint64<span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span>PhysAddr<span class="token punctuation">]</span> <span class="token operator">=</span></span>
<span class="line">    result <span class="token operator">=</span> <span class="token function">some</span><span class="token punctuation">(</span><span class="token function">cast[PhysAddr]</span><span class="token punctuation">(</span>new AlignedPage<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># initialize vmm using identity-mapped physical memory</span></span>
<span class="line">  <span class="token function">vmInit</span><span class="token punctuation">(</span>physMemoryVirtualBase <span class="token operator">=</span> <span class="token number">0&#39;u64</span><span class="token punctuation">,</span> physAlloc <span class="token operator">=</span> bootAlloc<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  debugln <span class="token operator">&amp;</span><span class="token string">&quot;boot: Creating new page tables&quot;</span></span>
<span class="line">  <span class="token keyword">var</span> pml4 <span class="token operator">=</span> <span class="token function">cast[ptr PML4Table]</span><span class="token punctuation">(</span><span class="token function">bootAlloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">.</span>get<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># identity-map bootloader image</span></span>
<span class="line">  debugln <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;boot:   {&quot;Identity-mapping bootloader\\:&quot;:&lt;30} base={bootloaderBase:#010x}, pages={bootloaderPages}&quot;&quot;&quot;</span></span>
<span class="line">  <span class="token function">identityMapRegion</span><span class="token punctuation">(</span>pml4<span class="token punctuation">,</span> bootloaderBase<span class="token operator">.</span>PhysAddr<span class="token punctuation">,</span> bootloaderPages<span class="token operator">.</span>uint64<span class="token punctuation">,</span> paReadWrite<span class="token punctuation">,</span> pmSupervisor<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># identity-map boot info</span></span>
<span class="line">  debugln <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;boot:   {&quot;Identity-mapping BootInfo\\:&quot;:&lt;30} base={bootInfoBase:#010x}, pages={bootInfoPages}&quot;&quot;&quot;</span></span>
<span class="line">  <span class="token function">identityMapRegion</span><span class="token punctuation">(</span>pml4<span class="token punctuation">,</span> bootInfoBase<span class="token operator">.</span>PhysAddr<span class="token punctuation">,</span> bootInfoPages<span class="token punctuation">,</span> paReadWrite<span class="token punctuation">,</span> pmSupervisor<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># map kernel to higher half</span></span>
<span class="line">  debugln <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;boot:   {&quot;Mapping kernel to higher half\\:&quot;:&lt;30} base={KernelVirtualBase:#010x}, pages={kernelImagePages}&quot;&quot;&quot;</span></span>
<span class="line">  <span class="token function">mapRegion</span><span class="token punctuation">(</span>pml4<span class="token punctuation">,</span> KernelVirtualBase<span class="token operator">.</span>VirtAddr<span class="token punctuation">,</span> kernelImageBase<span class="token operator">.</span>PhysAddr<span class="token punctuation">,</span> kernelImagePages<span class="token punctuation">,</span> paReadWrite<span class="token punctuation">,</span> pmSupervisor<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># map kernel stack</span></span>
<span class="line">  debugln <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;boot:   {&quot;Mapping kernel stack\\:&quot;:&lt;30} base={KernelStackVirtualBase:#010x}, pages={kernelStackPages}&quot;&quot;&quot;</span></span>
<span class="line">  <span class="token function">mapRegion</span><span class="token punctuation">(</span>pml4<span class="token punctuation">,</span> KernelStackVirtualBase<span class="token operator">.</span>VirtAddr<span class="token punctuation">,</span> kernelStackBase<span class="token operator">.</span>PhysAddr<span class="token punctuation">,</span> kernelStackPages<span class="token punctuation">,</span> paReadWrite<span class="token punctuation">,</span> pmSupervisor<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># map all physical memory; assume 128 MiB of physical memory</span></span>
<span class="line">  debugln <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;boot:   {&quot;Mapping physical memory\\:&quot;:&lt;30} base={PhysicalMemoryVirtualBase:#010x}, pages={physMemoryPages}&quot;&quot;&quot;</span></span>
<span class="line">  <span class="token function">mapRegion</span><span class="token punctuation">(</span>pml4<span class="token punctuation">,</span> PhysicalMemoryVirtualBase<span class="token operator">.</span>VirtAddr<span class="token punctuation">,</span> <span class="token number">0.</span>PhysAddr<span class="token punctuation">,</span> physMemoryPages<span class="token punctuation">,</span> paReadWrite<span class="token punctuation">,</span> pmSupervisor<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  result <span class="token operator">=</span> pml4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice the <code>AlignedPage</code> type and the inner proc <code>bootAlloc</code>. This is a temporary proc that we&#39;ll use to allow the VMM to allocate physical memory for the page tables (the pages must be aligned to 4 KiB, hence the <code>AlignedPage</code> type). It works because the UEFI environment is identity-mapped, so allocating using the <code>new</code> operator will return an address of a page that we can use for the page tables. In the kernel, we&#39;ll rely on the physical memory manager to allocate physical memory for the page tables.</p><p>Now, let&#39;s put everything together in <code>EfiMainInner</code>. Notice that we added an assembly instruction to load the new page tables into the <code>cr3</code> register. This is the register that holds the physical address of the PML4 table.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/boot/bootx64.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">EfiMainInner</span><span class="token punctuation">(</span>imgHandle<span class="token operator">:</span> EfiHandle<span class="token punctuation">,</span> sysTable<span class="token operator">:</span> <span class="token keyword">ptr</span> EFiSystemTable<span class="token punctuation">)</span><span class="token operator">:</span> EfiStatus <span class="token operator">=</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> physMemoryMap <span class="token operator">=</span> <span class="token function">convertUefiMemoryMap</span><span class="token punctuation">(</span>memoryMap<span class="token punctuation">,</span> memoryMapSize<span class="token punctuation">,</span> memoryMapDescriptorSize<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># get max free physical memory address</span></span>
<span class="line">  <span class="token keyword">var</span> maxPhysAddr<span class="token operator">:</span> PhysAddr</span>
<span class="line">  <span class="token keyword">for</span> i <span class="token operator">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> physMemoryMap<span class="token operator">.</span>len<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">if</span> physMemoryMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">.</span><span class="token keyword">type</span> <span class="token operator">==</span> Free<span class="token operator">:</span></span>
<span class="line">      maxPhysAddr <span class="token operator">=</span> physMemoryMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">.</span>start<span class="token operator">.</span>PhysAddr <span class="token operator">+!</span> physMemoryMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">.</span>nframes <span class="token operator">*</span> PageSize</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> physMemoryPages<span class="token operator">:</span> uint64 <span class="token operator">=</span> maxPhysAddr<span class="token operator">.</span>uint64 <span class="token operator">div</span> PageSize</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> virtMemoryMap <span class="token operator">=</span> <span class="token function">createVirtualMemoryMap</span><span class="token punctuation">(</span>kernelImagePages<span class="token punctuation">,</span> physMemoryPages<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  debugln <span class="token operator">&amp;</span><span class="token string">&quot;boot: Preparing BootInfo&quot;</span></span>
<span class="line">  <span class="token keyword">let</span> bootInfo <span class="token operator">=</span> <span class="token function">createBootInfo</span><span class="token punctuation">(</span></span>
<span class="line">    bootInfoBase<span class="token punctuation">,</span></span>
<span class="line">    kernelImagePages<span class="token punctuation">,</span></span>
<span class="line">    physMemoryPages<span class="token punctuation">,</span></span>
<span class="line">    physMemoryMap<span class="token punctuation">,</span></span>
<span class="line">    virtMemoryMap<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> bootloaderPages <span class="token operator">=</span> <span class="token punctuation">(</span>loadedImage<span class="token operator">.</span>imageSize<span class="token operator">.</span>uint <span class="token operator">+</span> <span class="token number">0xFFF</span><span class="token punctuation">)</span> <span class="token operator">div</span> <span class="token number">0x1000</span><span class="token operator">.</span>uint</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> pml4 <span class="token operator">=</span> <span class="token function">createPageTable</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">cast[uint64]</span><span class="token punctuation">(</span>loadedImage<span class="token operator">.</span>imageBase<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    bootloaderPages<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">cast[uint64]</span><span class="token punctuation">(</span>kernelImageBase<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    kernelImagePages<span class="token punctuation">,</span></span>
<span class="line">    kernelStackBase<span class="token punctuation">,</span></span>
<span class="line">    kernelStackPages<span class="token punctuation">,</span></span>
<span class="line">    bootInfoBase<span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment"># bootInfoPages</span></span>
<span class="line">    physMemoryPages<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># jump to kernel</span></span>
<span class="line">  <span class="token keyword">let</span> kernelStackTop <span class="token operator">=</span> KernelStackVirtualBase <span class="token operator">+</span> KernelStackSize</span>
<span class="line">  <span class="token keyword">let</span> cr3 <span class="token operator">=</span> <span class="token function">cast[uint64]</span><span class="token punctuation">(</span>pml4<span class="token punctuation">)</span></span>
<span class="line">  debugln <span class="token operator">&amp;</span><span class="token string">&quot;boot: Jumping to kernel at {cast[uint64](KernelVirtualBase):#010x}&quot;</span></span>
<span class="line">  <span class="token keyword">asm</span> <span class="token string">&quot;&quot;&quot;</span>
<span class="line">    mov rdi, %0  # bootInfo</span>
<span class="line">    mov cr3, %2  # PML4</span>
<span class="line">    mov rsp, %1  # kernel stack top</span>
<span class="line">    jmp %3       # kernel entry point</span>
<span class="line">    :</span>
<span class="line">    : &quot;r&quot;(\`bootInfoBase\`),</span>
<span class="line">      &quot;r&quot;(\`kernelStackTop\`),</span>
<span class="line">      &quot;r&quot;(\`cr3\`),</span>
<span class="line">      &quot;r&quot;(\`KernelVirtualBase\`)</span>
<span class="line">  &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment"># we should never get here</span></span>
<span class="line">  <span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="initializing-the-pmm-and-vmm" tabindex="-1"><a class="header-anchor" href="#initializing-the-pmm-and-vmm"><span>Initializing the PMM and VMM</span></a></h2><p>Now that physical memory is not identity-mapped anymore, we need to update the PMM to know about the new virtual address of physical memory. To access a <code>PMNode</code> as a physical address, we subtract the physical memory virtual base address from the pointer. To access a physical address as a <code>PMNode</code>, we add the physical memory virtual base address to the address.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/kernel/pmm.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span></span>
<span class="line">  head<span class="token operator">:</span> <span class="token keyword">ptr</span> PMNode</span>
<span class="line">  maxPhysAddr<span class="token operator">:</span> PhysAddr <span class="token comment"># exclusive</span></span>
<span class="line highlighted">  physicalMemoryVirtualBase<span class="token operator">:</span> uint64</span>
<span class="line">  reservedRegions<span class="token operator">:</span> seq<span class="token punctuation">[</span>PMRegion<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">proc</span> <span class="token function">pmInit<span class="token operator">*</span></span><span class="token punctuation">(</span>physMemoryVirtualBase<span class="token operator">:</span> uint64<span class="token punctuation">,</span> memoryMap<span class="token operator">:</span> MemoryMap<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line highlighted">  physicalMemoryVirtualBase <span class="token operator">=</span> physMemoryVirtualBase</span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">toPhysAddr</span><span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token keyword">ptr</span> PMNode<span class="token punctuation">)</span><span class="token operator">:</span> PhysAddr <span class="token punctuation">{.</span>inline<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line highlighted">  result <span class="token operator">=</span> <span class="token function">PhysAddr</span><span class="token punctuation">(</span><span class="token function">cast[uint64]</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> physicalMemoryVirtualBase<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">toPMNodePtr</span><span class="token punctuation">(</span>p<span class="token operator">:</span> PhysAddr<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">ptr</span> PMNode <span class="token punctuation">{.</span>inline<span class="token punctuation">.}</span> <span class="token operator">=</span></span>
<span class="line highlighted">  result <span class="token operator">=</span> <span class="token function">cast[ptr PMNode]</span><span class="token punctuation">(</span><span class="token function">cast[uint64]</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">+</span> physicalMemoryVirtualBase<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The VMM already takes a parameter for the physical memory virtual base (in the bootloader we set it to <code>0</code>, since physical memory is identity-mapped there). We just need to pass it from the kernel. Let&#39;s initialize both the PMM and the VMM with this parameter.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/kernel/main.nim</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">KernelMainInner</span><span class="token punctuation">(</span>bootInfo<span class="token operator">:</span> <span class="token keyword">ptr</span> BootInfo<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">  debugln <span class="token string">&quot;&quot;</span></span>
<span class="line">  debugln <span class="token string">&quot;kernel: Fusion Kernel&quot;</span></span>
<span class="line"></span>
<span class="line highlighted">  debug <span class="token string">&quot;kernel: Initializing physical memory manager &quot;</span></span>
<span class="line highlighted">  <span class="token function">pmInit</span><span class="token punctuation">(</span>bootInfo<span class="token operator">.</span>physicalMemoryVirtualBase<span class="token punctuation">,</span> bootInfo<span class="token operator">.</span>physicalMemoryMap<span class="token punctuation">)</span></span>
<span class="line highlighted">  debugln <span class="token string">&quot;[success]&quot;</span></span>
<span class="line highlighted"></span>
<span class="line highlighted">  debug <span class="token string">&quot;kernel: Initializing virtual memory manager &quot;</span></span>
<span class="line highlighted">  <span class="token function">vmInit</span><span class="token punctuation">(</span>bootInfo<span class="token operator">.</span>physicalMemoryVirtualBase<span class="token punctuation">,</span> pmm<span class="token operator">.</span>pmAlloc<span class="token punctuation">)</span></span>
<span class="line highlighted">  debugln <span class="token string">&quot;[success]&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s try to compile and run the kernel. We should see the following output:</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token output">kernel: Fusion Kernel</span>
<span class="line">kernel: Initializing physical memory manager [success]</span>
<span class="line">kernel: Initializing virtual memory manager [success]</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Looks good.</p><h2 id="print-memory-maps" tabindex="-1"><a class="header-anchor" href="#print-memory-maps"><span>Print memory maps</span></a></h2><p>Let&#39;s add a couple of procs to print the physical and virtual memory maps.</p><div class="language-nim line-numbers-mode" data-highlighter="prismjs" data-ext="nim" data-title="nim"><pre><code><span class="line"><span class="token comment"># src/kernel/main.nim</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">proc</span> <span class="token function">printFreeRegions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line highlighted">  debug <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;   {&quot;Start&quot;:&gt;16}&quot;&quot;&quot;</span></span>
<span class="line highlighted">  debug <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;   {&quot;Start (KB)&quot;:&gt;12}&quot;&quot;&quot;</span></span>
<span class="line highlighted">  debug <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;   {&quot;Size (KB)&quot;:&gt;11}&quot;&quot;&quot;</span></span>
<span class="line highlighted">  debug <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;   {&quot;#Pages&quot;:&gt;9}&quot;&quot;&quot;</span></span>
<span class="line highlighted">  debugln <span class="token string">&quot;&quot;</span></span>
<span class="line highlighted">  <span class="token keyword">var</span> totalFreePages<span class="token operator">:</span> uint64 <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line highlighted">  <span class="token function">for</span> <span class="token punctuation">(</span>start<span class="token punctuation">,</span> nframes<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token function">pmFreeRegions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span></span>
<span class="line highlighted">    debug <span class="token operator">&amp;</span><span class="token string">&quot;   {cast[uint64](start):&gt;#16x}&quot;</span></span>
<span class="line highlighted">    debug <span class="token operator">&amp;</span><span class="token string">&quot;   {cast[uint64](start) div 1024:&gt;#12}&quot;</span></span>
<span class="line highlighted">    debug <span class="token operator">&amp;</span><span class="token string">&quot;   {nframes * 4:&gt;#11}&quot;</span></span>
<span class="line highlighted">    debug <span class="token operator">&amp;</span><span class="token string">&quot;   {nframes:&gt;#9}&quot;</span></span>
<span class="line highlighted">    debugln <span class="token string">&quot;&quot;</span></span>
<span class="line highlighted">    totalFreePages <span class="token operator">+=</span> nframes</span>
<span class="line highlighted">  debugln <span class="token operator">&amp;</span><span class="token string">&quot;kernel: Total free: {totalFreePages * 4} KiB ({totalFreePages * 4 div 1024} MiB)&quot;</span></span>
<span class="line highlighted"></span>
<span class="line highlighted"><span class="token keyword">proc</span> <span class="token function">printVMRegions</span><span class="token punctuation">(</span>memoryMap<span class="token operator">:</span> MemoryMap<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line highlighted">  debug <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;   {&quot;Start&quot;:&gt;20}&quot;&quot;&quot;</span></span>
<span class="line highlighted">  debug <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;   {&quot;Type&quot;:12}&quot;&quot;&quot;</span></span>
<span class="line highlighted">  debug <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;   {&quot;VM Size (KB)&quot;:&gt;12}&quot;&quot;&quot;</span></span>
<span class="line highlighted">  debug <span class="token operator">&amp;</span><span class="token string">&quot;&quot;&quot;   {&quot;#Pages&quot;:&gt;9}&quot;&quot;&quot;</span></span>
<span class="line highlighted">  debugln <span class="token string">&quot;&quot;</span></span>
<span class="line highlighted">  <span class="token keyword">for</span> i <span class="token operator">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> memoryMap<span class="token operator">.</span>len<span class="token operator">:</span></span>
<span class="line highlighted">    <span class="token keyword">let</span> entry <span class="token operator">=</span> memoryMap<span class="token operator">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line highlighted">    debug <span class="token operator">&amp;</span><span class="token string">&quot;   {entry.start:&gt;#20x}&quot;</span></span>
<span class="line highlighted">    debug <span class="token operator">&amp;</span><span class="token string">&quot;   {entry.type:#12}&quot;</span></span>
<span class="line highlighted">    debug <span class="token operator">&amp;</span><span class="token string">&quot;   {entry.nframes * 4:&gt;#12}&quot;</span></span>
<span class="line highlighted">    debug <span class="token operator">&amp;</span><span class="token string">&quot;   {entry.nframes:&gt;#9}&quot;</span></span>
<span class="line highlighted">    debugln <span class="token string">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">proc</span> <span class="token function">KernelMainInner</span><span class="token punctuation">(</span>bootInfo<span class="token operator">:</span> <span class="token keyword">ptr</span> BootInfo<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">  debugln <span class="token string">&quot;&quot;</span></span>
<span class="line">  debugln <span class="token string">&quot;kernel: Fusion Kernel&quot;</span></span>
<span class="line"></span>
<span class="line">  debug <span class="token string">&quot;kernel: Initializing physical memory manager &quot;</span></span>
<span class="line">  <span class="token function">pmInit</span><span class="token punctuation">(</span>bootInfo<span class="token operator">.</span>physicalMemoryVirtualBase<span class="token punctuation">,</span> bootInfo<span class="token operator">.</span>physicalMemoryMap<span class="token punctuation">)</span></span>
<span class="line">  debugln <span class="token string">&quot;[success]&quot;</span></span>
<span class="line"></span>
<span class="line">  debug <span class="token string">&quot;kernel: Initializing virtual memory manager &quot;</span></span>
<span class="line">  <span class="token function">vmInit</span><span class="token punctuation">(</span>bootInfo<span class="token operator">.</span>physicalMemoryVirtualBase<span class="token punctuation">,</span> pmm<span class="token operator">.</span>pmAlloc<span class="token punctuation">)</span></span>
<span class="line">  debugln <span class="token string">&quot;[success]&quot;</span></span>
<span class="line"></span>
<span class="line highlighted">  debugln <span class="token string">&quot;kernel: Physical memory free regions &quot;</span></span>
<span class="line highlighted">  <span class="token function">printFreeRegions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line highlighted"></span>
<span class="line highlighted">  debugln <span class="token string">&quot;kernel: Virtual memory regions &quot;</span></span>
<span class="line highlighted">  <span class="token function">printVMRegions</span><span class="token punctuation">(</span>bootInfo<span class="token operator">.</span>virtualMemoryMap<span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let&#39;s compile and run the kernel. If everything goes well, we should see the following output:</p><div class="language-sh-session line-numbers-mode" data-highlighter="prismjs" data-ext="sh-session" data-title="sh-session"><pre><code><span class="line"><span class="token output">kernel: Fusion Kernel</span>
<span class="line">kernel: Initializing physical memory manager [success]</span>
<span class="line">kernel: Initializing virtual memory manager [success]</span>
<span class="line">kernel: Physical memory free regions</span>
<span class="line">              Start     Start (KB)     Size (KB)      #Pages</span>
<span class="line">                0x0              0           640         160</span>
<span class="line">           0x222000           2184          6008        1502</span>
<span class="line">           0x808000           8224            12           3</span>
<span class="line">           0x80c000           8240            16           4</span>
<span class="line">           0x900000           9216         90276       22569</span>
<span class="line">          0x6235000         100564          1248         312</span>
<span class="line">          0x6372000         101832         17900        4475</span>
<span class="line">          0x77ff000         122876          7124        1781</span>
<span class="line">kernel: Total free: 123224 KiB (120 MiB)</span>
<span class="line">kernel: Virtual memory regions</span>
<span class="line">                  Start   Type           VM Size (KB)      #Pages</span>
<span class="line">     0xffff800000100000   KernelCode             1160         290</span>
<span class="line">     0xffff800100000000   KernelStack              16           4</span>
<span class="line">     0xffff800100004000   KernelData                4           1</span>
<span class="line">     0xffff800200000000   KernelData           130000       32500</span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Great! Our kernel is now running at the higher half of the address space. This is another big milestone.</p><p>There are many things we can tackle next, but one important thing we need to take care of before we add more code is handling CPU exceptions. The reason is that sooner or later our kernel will crash, and we won&#39;t know why. Handling CPU exceptions gives us a way to print a debug message and halt the CPU, so we can see what went wrong.</p><p>But before we can do that, we need to set up the <strong>Global Descriptor Table</strong> (GDT), which we&#39;ll look at in the next section.</p>`,45)])])}const c=s(t,[["render",l],["__file","13-higher-half-kernel.html.vue"]]),r=JSON.parse(`{"path":"/osdev/13-higher-half-kernel.html","title":"Higher Half Kernel","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Linking the kernel","slug":"linking-the-kernel","link":"#linking-the-kernel","children":[]},{"level":2,"title":"Preparing BootInfo","slug":"preparing-bootinfo","link":"#preparing-bootinfo","children":[]},{"level":2,"title":"Bootloader paging setup","slug":"bootloader-paging-setup","link":"#bootloader-paging-setup","children":[]},{"level":2,"title":"Initializing the PMM and VMM","slug":"initializing-the-pmm-and-vmm","link":"#initializing-the-pmm-and-vmm","children":[]},{"level":2,"title":"Print memory maps","slug":"print-memory-maps","link":"#print-memory-maps","children":[]}],"git":{"updatedTime":1744638230000},"filePathRelative":"osdev/13-higher-half-kernel.md","excerpt":"\\n<p>The kernel is currently linked at address <code>0x100000</code>, not at the higher half of the\\naddress space. The UEFI environment does have paging enabled, but we need to build our own\\npage tables, and map the kernel at the higher half of the address space. This needs to be\\ndone in the bootloader, before we jump to the kernel (since we'll change the kernel to be\\nlinked at the higher half). Once we're in the kernel, we can set up different page tables\\nthat fit our needs.</p>"}`);export{c as comp,r as data};
