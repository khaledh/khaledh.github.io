import{_ as n,c as t,e as o,o as i}from"./app-BEnvQN0t.js";const a="/assets/intellij-plugin-dev-BQ_DOeUj.png",l={};function r(s,e){return i(),t("div",null,[...e[0]||(e[0]=[o('<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h1><p>Nim is my favourite programming language. For a long time I&#39;ve relied on VS Code for my Nim development, since the effort around Nim tooling has focused on that editor. However, JetBrains IDEs have been my development environment of choice for many years, and I&#39;ve yet to find a comparable experience anywhere else.</p><p>Unfortunately, the official Nim plugin for JetBrains leaves a lot to be desired: closed source, its development seem to have stagnated, and it doesn&#39;t perform some of the basic features I&#39;ve come to expect from a JetBrains IDE. I thought to myself: how hard could it be to make my own? I went through the <a href="https://plugins.jetbrains.com/docs/intellij/" target="_blank" rel="noopener noreferrer">IntelliJ Platform Plugin SDK</a> documentation, and was overwhelmed both by the complexity and richness of the platform. So, as I usually do when I encounter a complex topic, I ignore all the warning signs and jump in head first. This is the story of that journey.</p><h2 id="developing-a-language-plugin" tabindex="-1"><a class="header-anchor" href="#developing-a-language-plugin"><span>Developing a Language Plugin</span></a></h2><p>We&#39;ll use the IntelliJ IDE itself to develop the plugin in Kotlin. To run the plugin, IntelliJ uses a sandboxed version of itself, which is a separate installation of the IDE that loads the plugin. The following diagram shows the two instances of the IDEs, and what plugins are loaded in each.</p><p><img src="'+a+'" alt="IntelliJ Plugin Development"></p><p>In the development IDE, we have the following plugins:</p><ul><li><strong>Gradle</strong>: to manage the project and dependencies. Gradle itself has a number of plugins that are used to build the project: <ul><li><strong>IntelliJ Platform</strong> Gradle Plugin (for building IntelliJ plugins)</li><li><strong>Kotlin</strong> Gradle Plugin (for compiling Kotlin code)</li><li><strong>Grammar-Kit</strong> Gradle Plugin (for generating the lexer and parser during the build)</li></ul></li><li><strong>Plugin DevKit</strong>: to provide the necessary tools to develop a plugin.</li><li><strong>Grammar-Kit</strong>: to provide JFlex and BNF authoring support, and to generate the lexer and parser.</li></ul><p>The sandboxed IDE will host the plugin we&#39;re developing, and any other plugins we choose to install. The sandboxed IDE is run in <a href="https://plugins.jetbrains.com/docs/intellij/enabling-internal.html" target="_blank" rel="noopener noreferrer">Internal Mode</a>, which enables many additional features through the <strong>Tools | Internal Actions</strong> menu. It also enables the built-in PSI viewer, which we will use to inspect the PSI tree of the code we&#39;re working with (more on PSI later).</p><p>In the next section, we&#39;ll set up the development environment and create a new plugin project.</p>',10)])])}const g=n(l,[["render",r],["__file","01-intro.html.vue"]]),h=JSON.parse(`{"path":"/nimjet/01-intro.html","title":"Introduction","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Developing a Language Plugin","slug":"developing-a-language-plugin","link":"#developing-a-language-plugin","children":[]}],"git":{"updatedTime":1725168053000},"filePathRelative":"nimjet/01-intro.md","excerpt":"\\n<p>Nim is my favourite programming language. For a long time I've relied on VS Code for\\nmy Nim development, since the effort around Nim tooling has focused on that editor.\\nHowever, JetBrains IDEs have been my development environment of choice for many years,\\nand I've yet to find a comparable experience anywhere else.</p>"}`);export{g as comp,h as data};
