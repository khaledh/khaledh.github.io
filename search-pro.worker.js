const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":255,\"nextId\":255,\"documentIds\":{\"0\":\"0\",\"1\":\"0#fusion-os\",\"2\":\"0#computing-acronyms\",\"3\":\"1\",\"4\":\"1#software-architecture\",\"5\":\"1#software-design\",\"6\":\"1#software-engineering\",\"7\":\"1#web-development\",\"8\":\"1#programming-languages\",\"9\":\"1#programming\",\"10\":\"1#compilers\",\"11\":\"1#operating-systems\",\"12\":\"1#document-markup\",\"13\":\"1#file-formats\",\"14\":\"1#data-encodings\",\"15\":\"1#data-formats-interchange\",\"16\":\"1#data-formats-compression-archival\",\"17\":\"1#data-processing\",\"18\":\"1#artificial-intelligence\",\"19\":\"1#reliability-operations\",\"20\":\"1#performance-metrics\",\"21\":\"1#networking-protocols\",\"22\":\"1#security\",\"23\":\"1#privacy\",\"24\":\"1#infrastructure\",\"25\":\"1#hardware-architecture\",\"26\":\"1#hardware-cpu-general\",\"27\":\"1#hardware-cpu-arm\",\"28\":\"1#hardware-cpu-x86\",\"29\":\"1#hardware-memory\",\"30\":\"1#hardware-buses-interfaces\",\"31\":\"1#hardware-storage\",\"32\":\"1#hardware-video-displays\",\"33\":\"1#hardware-general\",\"34\":\"1#firmware\",\"35\":\"1#culture-misc\",\"36\":\"1#organizations\",\"37\":\"1#licensing-open-source\",\"38\":\"2\",\"39\":\"3\",\"40\":\"4\",\"41\":\"4#developing-a-language-plugin\",\"42\":\"5\",\"43\":\"5#new-plugin-project\",\"44\":\"5#plugin-configuration\",\"45\":\"5#running-the-plugin\",\"46\":\"6\",\"47\":\"6#file-type-and-language\",\"48\":\"6#registering-the-file-type\",\"49\":\"6#testing-the-file-type\",\"50\":\"7\",\"51\":\"7#the-lexer-interface\",\"52\":\"7#lexer-components\",\"53\":\"7#lexer-specification\",\"54\":\"7#generating-the-lexer\",\"55\":\"7#automating-the-lexer-generation\",\"56\":\"8\",\"57\":\"8#overview\",\"58\":\"8#ast-structure\",\"59\":\"8#psi-structure\",\"60\":\"9\",\"61\":\"9#token-element-and-psi-types\",\"62\":\"9#lexer\",\"63\":\"9#parser\",\"64\":\"9#parser-definition\",\"65\":\"9#testing-the-parser\",\"66\":\"9#error-handling\",\"67\":\"10\",\"68\":\"10#the-bnf-file\",\"69\":\"10#generating-the-parser\",\"70\":\"10#a-simple-nim-bnf\",\"71\":\"10#generating-the-nim-parser\",\"72\":\"11\",\"73\":\"11#updating-the-grammar\",\"74\":\"11#reference-mixin\",\"75\":\"11#declaration-mixin\",\"76\":\"12\",\"77\":\"12#tree-walk-up\",\"78\":\"12#scope-processor\",\"79\":\"12#processing-declarations\",\"80\":\"12#testing-scope-resolution\",\"81\":\"13\",\"82\":\"13#supporting-rename\",\"83\":\"13#in-place-rename\",\"84\":\"13#testing-in-place-rename\",\"85\":\"14\",\"86\":\"14#indentation-tokens\",\"87\":\"14#lexer-state-machine\",\"88\":\"14#parsing-top-level-code\",\"89\":\"14#parsing-blocks\",\"90\":\"15\",\"91\":\"15#let-var-and-const-sections\",\"92\":\"15#meta-rules\",\"93\":\"15#psi-cleanup\",\"94\":\"16\",\"95\":\"16#lexing-comments\",\"96\":\"16#multiline-comments\",\"97\":\"16#documentation-comments\",\"98\":\"17\",\"99\":\"17#lexer-changes\",\"100\":\"17#grammar-changes\",\"101\":\"17#custom-numeric-literals\",\"102\":\"18\",\"103\":\"18#nim-operators\",\"104\":\"18#lexing-operators\",\"105\":\"18#parsing-expressions\",\"106\":\"18#unary-operators\",\"107\":\"18#sigil-like-operators\",\"108\":\"18#parentheses\",\"109\":\"18#right-associativity\",\"110\":\"18#handling-indentation\",\"111\":\"19\",\"112\":\"19#fileviewprovider\",\"113\":\"20\",\"114\":\"21\",\"115\":\"21#introduction\",\"116\":\"21#fusion-os\",\"117\":\"22\",\"118\":\"22#nim-compiler\",\"119\":\"22#llvm-toolchain\",\"120\":\"22#qemu\",\"121\":\"22#creating-the-project\",\"122\":\"23\",\"123\":\"23#building-a-pe32-executable\",\"124\":\"23#cross-compiling-nim-to-pe32\",\"125\":\"24\",\"126\":\"24#c-library-functions\",\"127\":\"24#fwrite\",\"128\":\"24#fflush\",\"129\":\"24#stdout-stderr\",\"130\":\"24#exit\",\"131\":\"24#linking-the-c-library\",\"132\":\"25\",\"133\":\"25#entry-point\",\"134\":\"25#ovmf-uefi-firmware\",\"135\":\"25#loading-the-bootloader\",\"136\":\"25#build-tool\",\"137\":\"26\",\"138\":\"26#uefi-system-table\",\"139\":\"26#printing-to-the-screen\",\"140\":\"26#using-echo\",\"141\":\"26#handling-exceptions\",\"142\":\"27\",\"143\":\"27#project-structure\",\"144\":\"27#debug-output\",\"145\":\"27#entry-point\",\"146\":\"27#c-compiler-options\",\"147\":\"27#linking-the-kernel\",\"148\":\"27#building-a-raw-binary\",\"149\":\"28\",\"150\":\"28#uefi-boot-services\",\"151\":\"28#boot-device-handle\",\"152\":\"28#file-system\",\"153\":\"28#root-directory\",\"154\":\"28#kernel-image-file\",\"155\":\"29\",\"156\":\"29#allocate-memory\",\"157\":\"29#read-kernel-image\",\"158\":\"29#close-open-files\",\"159\":\"29#get-memory-map\",\"160\":\"29#exit-boot-services\",\"161\":\"30\",\"162\":\"30#convert-uefi-memory-map\",\"163\":\"30#pass-bootinfo-to-kernel\",\"164\":\"30#calling-convention\",\"165\":\"30#print-memory-map\",\"166\":\"30#handling-nim-exceptions\",\"167\":\"31\",\"168\":\"31#free-list\",\"169\":\"31#initialization\",\"170\":\"31#allocating-frames\",\"171\":\"31#freeing-frames\",\"172\":\"32\",\"173\":\"32#virtual-address-space\",\"174\":\"32#page-tables-structure\",\"175\":\"32#defining-page-tables\",\"176\":\"32#accessing-page-tables\",\"177\":\"32#mapping-pages\",\"178\":\"33\",\"179\":\"33#linking-the-kernel\",\"180\":\"33#preparing-bootinfo\",\"181\":\"33#bootloader-paging-setup\",\"182\":\"33#initializing-the-pmm-and-vmm\",\"183\":\"33#print-memory-maps\",\"184\":\"34\",\"185\":\"34#segment-descriptors\",\"186\":\"34#segment-selectors\",\"187\":\"34#global-descriptor-table\",\"188\":\"34#loading-the-gdt\",\"189\":\"35\",\"190\":\"35#interrupt-descriptors\",\"191\":\"35#defining-interrupt-handlers\",\"192\":\"35#handling-cpu-exceptions\",\"193\":\"35#page-fault-handler\",\"194\":\"36\",\"195\":\"36#preparing-for-user-mode\",\"196\":\"36#user-program\",\"197\":\"36#loading-the-user-program\",\"198\":\"36#user-page-table\",\"199\":\"36#interrupt-stack-frame\",\"200\":\"36#switching-to-user-mode\",\"201\":\"37\",\"202\":\"37#creating-a-tss\",\"203\":\"37#loading-the-tss\",\"204\":\"37#kernel-switch-stack\",\"205\":\"37#switching-to-kernel-mode\",\"206\":\"37#invoking-interrupts-from-user-mode\",\"207\":\"38\",\"208\":\"38#system-call-interface\",\"209\":\"38#initialization\",\"210\":\"38#invoking-system-calls\",\"211\":\"38#switching-stacks\",\"212\":\"38#system-call-handler\",\"213\":\"38#system-call-table\",\"214\":\"38#argument-validation\",\"215\":\"38#the-exit-system-call\",\"216\":\"39\",\"217\":\"39#task-definition\",\"218\":\"39#address-space-abstraction\",\"219\":\"39#kernel-address-space\",\"220\":\"39#creating-a-task\",\"221\":\"39#switching-to-a-task\",\"222\":\"39#trying-it-out\",\"223\":\"39#tracking-the-current-task\",\"224\":\"40\",\"225\":\"40#what-is-pic-and-pie\",\"226\":\"40#generating-a-static-pie\",\"227\":\"40#trying-it-out\",\"228\":\"40#understanding-relocations\",\"229\":\"40#raw-binary-with-relocations\",\"230\":\"40#applying-the-relocations\",\"231\":\"40#dynamic-virtual-memory-allocation\",\"232\":\"41\",\"233\":\"41#elf-format\",\"234\":\"41#building-an-elf-binary\",\"235\":\"41#elf-reader\",\"236\":\"42\",\"237\":\"42#loading-elf\",\"238\":\"43\",\"239\":\"43#scheduling\",\"240\":\"43#context-switching\",\"241\":\"43#yield-system-call\",\"242\":\"43#handling-task-exits\",\"243\":\"43#running-multiple-tasks\",\"244\":\"44\",\"245\":\"44#writing-the-library\",\"246\":\"44#using-the-library\",\"247\":\"45\",\"248\":\"45#local-apic\",\"249\":\"45#initializing-the-apic\",\"250\":\"46\",\"251\":\"46#screenshots\",\"252\":\"46#features\",\"253\":\"46#planned\",\"254\":\"47\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,19],\"1\":[1,33],\"2\":[1,13],\"3\":[2,42],\"4\":[2,360],\"5\":[2,400],\"6\":[2,519],\"7\":[2,448],\"8\":[2,263],\"9\":[1,1038],\"10\":[1,682],\"11\":[2,1378],\"12\":[2,186],\"13\":[2,386],\"14\":[2,253],\"15\":[4,328],\"16\":[5,264],\"17\":[2,636],\"18\":[2,264],\"19\":[2,111],\"20\":[2,223],\"21\":[2,1622],\"22\":[1,745],\"23\":[1,117],\"24\":[1,416],\"25\":[3,443],\"26\":[4,193],\"27\":[4,93],\"28\":[4,133],\"29\":[3,346],\"30\":[4,516],\"31\":[3,394],\"32\":[4,357],\"33\":[3,445],\"34\":[1,298],\"35\":[2,738],\"36\":[1,453],\"37\":[3,90],\"38\":[2,1],\"39\":[1,13],\"40\":[1,109],\"41\":[4,110],\"42\":[2,47],\"43\":[3,128],\"44\":[2,120],\"45\":[3,127],\"46\":[2,61],\"47\":[4,103],\"48\":[4,84],\"49\":[4,67],\"50\":[1,55],\"51\":[3,113],\"52\":[2,119],\"53\":[2,211],\"54\":[3,95],\"55\":[4,115],\"56\":[1,39],\"57\":[1,123],\"58\":[2,211],\"59\":[2,138],\"60\":[2,49],\"61\":[5,139],\"62\":[1,75],\"63\":[1,176],\"64\":[2,151],\"65\":[3,63],\"66\":[2,194],\"67\":[2,51],\"68\":[3,105],\"69\":[3,156],\"70\":[4,134],\"71\":[4,138],\"72\":[3,178],\"73\":[3,98],\"74\":[2,186],\"75\":[2,207],\"76\":[2,92],\"77\":[3,250],\"78\":[2,184],\"79\":[2,215],\"80\":[3,105],\"81\":[2,28],\"82\":[2,190],\"83\":[3,169],\"84\":[4,94],\"85\":[1,201],\"86\":[2,101],\"87\":[3,288],\"88\":[4,214],\"89\":[2,349],\"90\":[2,107],\"91\":[5,66],\"92\":[2,178],\"93\":[2,65],\"94\":[1,142],\"95\":[2,203],\"96\":[2,229],\"97\":[2,248],\"98\":[2,114],\"99\":[2,167],\"100\":[2,65],\"101\":[3,123],\"102\":[1,138],\"103\":[2,135],\"104\":[2,226],\"105\":[2,241],\"106\":[2,218],\"107\":[3,126],\"108\":[1,70],\"109\":[2,143],\"110\":[2,266],\"111\":[1],\"112\":[1,39],\"113\":[1,24],\"114\":[5],\"115\":[1,72],\"116\":[2,169],\"117\":[2,43],\"118\":[2,55],\"119\":[2,37],\"120\":[1,27],\"121\":[3,83],\"122\":[5,110],\"123\":[4,202],\"124\":[5,508],\"125\":[5,23],\"126\":[3],\"127\":[1,78],\"128\":[1,39],\"129\":[1,43],\"130\":[1,90],\"131\":[4,119],\"132\":[5,37],\"133\":[2,154],\"134\":[3,119],\"135\":[3,263],\"136\":[2,87],\"137\":[5,27],\"138\":[3,100],\"139\":[4,150],\"140\":[1,156],\"141\":[2,232],\"142\":[2,50],\"143\":[2,156],\"144\":[2,125],\"145\":[2,65],\"146\":[3,139],\"147\":[3,615],\"148\":[4,188],\"149\":[6,33],\"150\":[3,116],\"151\":[3,303],\"152\":[2,84],\"153\":[2,128],\"154\":[3,141],\"155\":[6,31],\"156\":[2,116],\"157\":[3,56],\"158\":[3,59],\"159\":[3,140],\"160\":[3,189],\"161\":[6,135],\"162\":[4,228],\"163\":[4,111],\"164\":[2,186],\"165\":[3,206],\"166\":[3,150],\"167\":[2,44],\"168\":[2,197],\"169\":[1,222],\"170\":[2,218],\"171\":[2,281],\"172\":[2,84],\"173\":[3,114],\"174\":[3,168],\"175\":[3,174],\"176\":[3,128],\"177\":[2,317],\"178\":[3,51],\"179\":[3,192],\"180\":[2,156],\"181\":[3,244],\"182\":[5,106],\"183\":[3,212],\"184\":[2,60],\"185\":[2,327],\"186\":[2,259],\"187\":[3,267],\"188\":[3,416],\"189\":[1,70],\"190\":[2,261],\"191\":[3,204],\"192\":[3,381],\"193\":[3,193],\"194\":[2,179],\"195\":[4,132],\"196\":[2,208],\"197\":[4,288],\"198\":[3,125],\"199\":[3,114],\"200\":[4,298],\"201\":[3,205],\"202\":[3,155],\"203\":[3,52],\"204\":[3,78],\"205\":[4,136],\"206\":[5,150],\"207\":[2,75],\"208\":[3,133],\"209\":[1,231],\"210\":[3,278],\"211\":[2,135],\"212\":[3,206],\"213\":[3,158],\"214\":[2,142],\"215\":[3,152],\"216\":[1,49],\"217\":[2,109],\"218\":[3,161],\"219\":[3,78],\"220\":[3,174],\"221\":[4,71],\"222\":[3,119],\"223\":[4,206],\"224\":[3,62],\"225\":[6,143],\"226\":[4,249],\"227\":[3,223],\"228\":[2,469],\"229\":[4,283],\"230\":[3,264],\"231\":[4,188],\"232\":[5,91],\"233\":[2,74],\"234\":[4,392],\"235\":[2,351],\"236\":[5,40],\"237\":[2,332],\"238\":[2,90],\"239\":[1,206],\"240\":[2,170],\"241\":[2,85],\"242\":[3,75],\"243\":[3,129],\"244\":[2,42],\"245\":[3,103],\"246\":[3,146],\"247\":[2,95],\"248\":[2,349],\"249\":[3,214],\"250\":[2,45],\"251\":[1,21],\"252\":[1,53],\"253\":[1,20],\"254\":[1,3]},\"averageFieldLength\":[2.588235294117647,187.20559436777188],\"storedFields\":{\"0\":{\"h\":\"Khaled Hammouda\",\"t\":[\"Welcome to my little corner on the web. Here, you will find some of my software projects and tutorials.\"]},\"1\":{\"h\":\"\",\"t\":[\"This is both a documentation of my journey and a tutorial for building a modern x64 operating system from scratch in Nim. You can find the source code on GitHub: https://github.com/khaledh/fusion\"]},\"2\":{\"h\":\"\",\"t\":[\"A growing glossary of computing acronyms and initialisms with concise definitions and examples.\"]},\"3\":{\"h\":\"Computing Acronyms\",\"t\":[\"Acronyms common in computing, hacker culture, and everyday software engineering conversations. This section collects concise definitions and quick examples to help you grok the jargon fast. A note about the legacy/historical subsections:\",\"Legacy: outdated but still in use.\",\"Historical: obsolete, mostly of historical interest.\"]},\"4\":{\"h\":\"Software Architecture\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"C4\",\"Context–Container–Component–Code — lightweight hierarchical diagramming model for communicating software architecture at multiple levels of abstraction.\",\"Draw a system Context and Container diagram for a web app; break a service into Components; optionally add Code-level diagrams.\",\"CQRS\",\"Command Query Responsibility Segregation — separate writes/reads.\",\"Write model emits events; read model is a projection.\",\"ECS\",\"Entity Component System — decompose game and simulation logic into data-only components processed by systems operating on matching entities.\",\"Game engine with Position/Velocity components updated by a PhysicsSystem; rendering system consumes Mesh components.\",\"EDA\",\"Event-Driven Architecture — async event-based systems.\",\"Publish domain events to Kafka; services react.\",\"ES\",\"Event Sourcing — persist state changes as an append‑only log of events and rebuild current state by replaying them.\",\"Order aggregate applies OrderPlaced/ItemAdded events; projections update read models.\",\"SOA\",\"Service-Oriented Architecture — collaborating services.\",\"Decompose monolith into services.\",\"Legacy\",\"COM\",\"Component Object Model — Microsoft binary-interface standard for reusable components with reference counting and interface-based polymorphism.\",\"Query IUnknown/IDispatch; register COM servers; Office automation via COM.\",\"COM+\",\"Component Services — evolution of COM/DCOM on Windows that adds declarative transactions, role-based security, queued components, and pooled object activation managed by the OS.\",\"Configure COM+ applications in Component Services MMC; legacy enterprise apps use COM+ transactions and queued components before .NET.\",\"DCOM\",\"Distributed COM — extension of COM for inter-process and cross-machine communication using RPC.\",\"Remote COM server activation/config over the network using DCOMCNFG.\",\"DDE\",\"Dynamic Data Exchange — legacy Windows message-based mechanism for applications to exchange data and commands via shared memory conversations; superseded by OLE/COM automation.\",\"Early Windows apps used DDE for live spreadsheet/word processor links; replaced by OLE automation and modern IPC.\",\"EJB\",\"Enterprise JavaBeans — server-side component model for building distributed, transactional applications in Java; heavyweight and largely superseded by lighter frameworks.\",\"Session Beans, Entity Beans, MDBs in a Java EE/Jakarta EE application server.\",\"ESB\",\"Enterprise Service Bus — centralized integration/message bus with mediation, routing, and governance typical of classic SOA; considered heavyweight today.\",\"Hub‑and‑spoke integration; replaced by microservices and event streaming (Kafka).\",\"MAPI\",\"Messaging Application Programming Interface — Windows component API for email, calendaring, and messaging integration, primarily used by Microsoft Exchange/Outlook clients.\",\"Outlook talks to Exchange via Extended MAPI; legacy apps used Simple MAPI to open/send mail through the default client.\",\"MOM\",\"Message-Oriented Middleware — infrastructure for asynchronous communication between distributed systems via messages and queues, decoupling producers and consumers.\",\"IBM MQ, TIBCO, MSMQ; modern equivalents include Kafka and RabbitMQ.\",\"MSMQ\",\"Microsoft Message Queuing — durable asynchronous messaging middleware built into Windows that provides store-and-forward queues with transactional and secure delivery.\",\"Legacy enterprise apps used MSMQ to decouple services; integrates with COM+, WCF, and bridge adapters for REST/HTTP.\",\"OCX\",\"OLE Control Extension — a legacy Microsoft standard for reusable software components based on COM/OLE, the predecessor to ActiveX controls.\",\"Embedding third-party UI controls (.ocx files) in Visual Basic 6 applications.\",\"SOAP\",\"XML-based messaging protocol for web services.\",\"Enterprise integrations over SOAP.\",\"WCF\",\"Windows Communication Foundation — a legacy .NET framework for building service-oriented applications.\",\"Superseded by gRPC and ASP.NET Core Web API.\",\"WF\",\"Windows Workflow Foundation — a legacy .NET framework for building workflow-based applications.\",\"State machine or sequential workflows in older .NET applications.\",\"Historical\",\"CORBA\",\"Common Object Request Broker Architecture — OMG standard for language- and platform-neutral distributed objects communicating via an Object Request Broker.\",\"Define interfaces in IDL; ORB uses IIOP for interop between stubs and skeletons.\",\"DCE\",\"Distributed Computing Environment — OSF framework for distributed applications providing RPC, security (Kerberos), directory, and threading services.\",\"Build client/server apps with DCE RPC; secure with GSSAPI; use CDS for naming.\"]},\"5\":{\"h\":\"Software Design\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AoS\",\"Array of Structs — contiguous collection where each element stores all fields, offering good spatial locality for per-entity operations.\",\"struct Particle { float x, y, z; } particles[N]; iterate once to update position/velocity.\",\"CPS\",\"Continuation-Passing Style — express control flow by passing an explicit continuation function instead of returning normally.\",\"f(x, k) calls k(result); enables tail calls, trampolines, async composition.\",\"CSP\",\"Communicating Sequential Processes — formal concurrency model where independent processes interact solely via message‑passing over channels (no shared memory).\",\"Go channels/select and occam are CSP‑inspired; model systems as processes and rendezvous on channels.\",\"DDD\",\"Domain-Driven Design — model around the domain.\",\"Ubiquitous language in code and docs.\",\"DI\",\"Dependency Injection — provide dependencies from the outside rather than creating them inside.\",\"Pass a Logger to a service constructor instead of instantiating it.\",\"DIP\",\"Dependency Inversion Principle — depend on abstractions, not concretions.\",\"Accept a Logger interface, not a concrete ConsoleLogger.\",\"DRY\",\"Don't Repeat Yourself — avoid duplicating knowledge in code and docs.\",\"Extract a function instead of pasting the same block twice.\",\"DTO\",\"Data Transfer Object — simple data container.\",\"Map entities to DTOs for API responses.\",\"FRP\",\"Functional Reactive Programming — model time‑varying values and event streams with functional operators.\",\"UI state as RxJS Observables using map/merge/switchMap.\",\"ISP\",\"Interface Segregation Principle — prefer many small, client‑specific interfaces.\",\"Use Readable/Writable instead of a bloated File interface.\",\"KISS\",\"Keep It Simple, Stupid — prefer simple solutions that meet requirements.\",\"Use a plain function instead of a custom class hierarchy.\",\"LSP\",\"Liskov Substitution Principle — subtypes must be substitutable for their base.\",\"A subclass shouldn't strengthen preconditions or weaken postconditions.\",\"MVC\",\"Model–View–Controller — separate data, presentation, and control flow.\",\"Controllers orchestrate; Views render; Models hold domain data.\",\"MVVM\",\"Model–View–ViewModel — bind UI to a ViewModel that exposes state/actions.\",\"Two-way binding in front-end frameworks.\",\"OCP\",\"Open/Closed Principle — open for extension, closed for modification.\",\"Add a new strategy class instead of editing a switch.\",\"SDI\",\"Single-Document Interface — application model where each document is opened in its own separate top-level window.\",\"Web browsers, VS Code; each window is an independent instance.\",\"SoA\",\"Struct of Arrays — layout that keeps each field in its own contiguous array to enable SIMD/vectorization and cache-friendly columnar processing.\",\"Separate x[N], y[N], z[N] arrays for particles to update components with wide vector loads.\",\"SoC\",\"Separation of Concerns — isolate responsibilities into distinct modules.\",\"Keep validation, business logic, and persistence in separate layers.\",\"SOLID\",\"Five OO design principles: SRP, OCP, LSP, ISP, DIP.\",\"Extract interfaces and inject dependencies via constructors.\",\"SRP\",\"Single Responsibility Principle — one reason to change.\",\"Split parsing and rendering into separate classes.\",\"UML\",\"Unified Modeling Language — notation to visualize/design systems.\",\"Class and sequence diagrams for architecture and behavior.\",\"WET\",\"Write Everything Twice — tongue-in-cheek opposite of DRY.\",\"Duplicate code rather than refactor.\",\"WIMP\",\"Windows, Icons, Menus, Pointer — classic graphical user interface paradigm built around overlapping windows, iconography, menu bars, and a pointing device.\",\"Xerox Star and Apple Macintosh popularized WIMP desktops; modern desktop OSes retain the model.\",\"YAGNI\",\"You Aren't Gonna Need It — don't build features until necessary.\",\"Skip a caching layer until profiling shows the need.\",\"Legacy\",\"MDI\",\"Multiple-Document Interface — application model where multiple child windows are contained within a single parent window.\",\"Classic desktop apps (early Photoshop/Office); child windows for each document.\"]},\"6\":{\"h\":\"Software Engineering\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"BDD\",\"Behavior-Driven Development — specify behavior in examples (Given/When/Then).\",\"Feature files drive implementation and acceptance tests.\",\"BDUF\",\"Big Design Up Front — invest in upfront architecture/design before implementation.\",\"Comprehensive UML/specs prior to coding (vs iterative/agile).\",\"CD\",\"Continuous Delivery/Deployment — automated release pipeline to ship safely.\",\"Tagging main triggers a production deploy.\",\"CI\",\"Continuous Integration — frequently merge to main with automated tests.\",\"Every PR runs unit and integration tests in CI.\",\"CI/CD\",\"Combined practice of Continuous Integration and Delivery/Deployment.\",\"Build, test, artifact, deploy stages in one pipeline.\",\"DSC\",\"Desired State Configuration — declarative configuration management approach that defines the target state and lets tooling converge systems to it continually.\",\"PowerShell DSC or Azure Automanage enforces web server configs by applying declarative manifests and reporting drift.\",\"DX\",\"Developer Experience — overall quality of tools, workflows, and docs that make developers productive and happy.\",\"One‑command setup, fast feedback loops, clear errors, great CLIs.\",\"E2E\",\"End-to-End — tests or flows that cover the full user journey across systems and components.\",\"Cypress/Playwright tests from UI through API to DB.\",\"EOL\",\"End Of Life — product/version no longer supported with fixes or updates; plan upgrades before EOL to remain secure and compliant.\",\"Ubuntu 20.04 reaches EOL → migrate to 22.04 LTS.\",\"GA\",\"General Availability — broad production release status following beta/RC; officially supported.\",\"Mark v1.0 as GA and enable default rollout.\",\"HCI\",\"Human-Computer Interaction — discipline focused on designing, evaluating, and implementing user interfaces and human-centered systems.\",\"Usability studies, prototyping flows, accessibility reviews for a new feature.\",\"I18N\",\"Internationalization — design for multiple languages/locales.\",\"Externalize strings; ICU formatting; locale-aware dates/numbers.\",\"ICU\",\"International Components for Unicode — a mature and widely used set of C/C++ and Java libraries for Unicode support, internationalization, and globalization.\",\"Use ICU for collation, date/time formatting, and character set conversion.\",\"KPI\",\"Key Performance Indicator — metric tracking performance toward a goal.\",\"Conversion rate, p95 latency, crash-free sessions.\",\"L10N\",\"Localization — adapt an internationalized product for a locale.\",\"Translate resources; RTL layout; localized units/images.\",\"LTS\",\"Long-Term Support — release line maintained with security/critical fixes for an extended period.\",\"Choose Node.js LTS for production; receive patches without feature churn.\",\"MQ\",\"Merge Queue — automation that sequences merges and runs required checks on up-to-date commits so main stays green.\",\"GitHub/GitLab merge queue rebases the next PR onto main, runs CI, and auto-merges when green.\",\"MVP\",\"Minimum Viable Product — smallest thing to deliver value/learning.\",\"Ship a CLI prototype before a full GUI.\",\"OKR\",\"Objectives and Key Results — align goals and track outcomes.\",\"Company-level objectives with measurable KRs.\",\"PoC\",\"Proof of Concept — quick prototype to validate feasibility.\",\"Spike code to test a new database driver.\",\"PR\",\"Pull Request — propose code change for review/merge.\",\"Open a PR for CI checks and team review.\",\"QA\",\"Quality Assurance — practices to ensure product quality via process and testing.\",\"Test plans, manual/exploratory testing, and sign-off before release.\",\"RAD\",\"Rapid Application Development — iterative, prototyping‑focused approach emphasizing quick delivery and user feedback over heavy upfront planning.\",\"Build a working prototype with low‑code/4GL tools and iterate with users.\",\"RC\",\"Release Candidate — build believed to be release‑ready, pending final validation.\",\"Ship RC to staging for UAT and smoke tests.\",\"RFC\",\"Request For Comments — proposal/spec for feedback before adoption.\",\"RFC for a breaking API change.\",\"SCM\",\"Source Control Management — processes/tools for tracking changes to source code and related assets; often used interchangeably with VCS.\",\"Git as an SCM; branching strategies, code reviews, and CI integration.\",\"SDLC\",\"Software Development Life Cycle — structured process for planning, designing, building, testing, deploying, and maintaining software.\",\"Phases: requirements → design → implementation → testing → deployment → maintenance.\",\"SWE\",\"Software Engineer — practitioner who designs, builds, tests, and maintains software systems.\",\"Full‑stack SWE implementing features, writing tests, and doing code reviews.\",\"TDD\",\"Test-Driven Development — write a failing test, pass it, refactor.\",\"Red → Green → Refactor per behavior.\",\"UAT\",\"User Acceptance Testing — end users validate requirements.\",\"Business stakeholders test before release.\",\"UI\",\"User Interface — the visual and interactive surface users operate.\",\"Screens, components, and controls in web/mobile apps.\",\"UX\",\"User Experience — usability and satisfaction.\",\"Research, UX writing, usability testing.\",\"VCS\",\"Version Control System — track changes to code and collaborate.\",\"Git (branches, commits, PRs), Mercurial.\",\"WIP\",\"Work In Progress — items in progress; limit to improve flow.\",\"Cap WIP per Kanban column.\",\"XP\",\"Extreme Programming — agile practices emphasizing feedback/simplicity.\",\"Pair programming, CI, refactoring, and TDD.\",\"Legacy\",\"CVS\",\"Concurrent Versions System — an early, influential client-server version control system that popularized features like branching and merging.\",\"Superseded by Subversion (SVN) and later Git.\",\"Historical\",\"Y2K\",\"Year 2000 problem — class of bugs related to storing years with two digits, causing issues with dates in and after the year 2000.\",\"Remediation projects to expand date fields and fix date logic.\"]},\"7\":{\"h\":\"Web Development\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AJAX\",\"Asynchronous JavaScript and XML — async HTTP from the browser.\",\"Fetch data without full page reload.\",\"ARIA\",\"Accessible Rich Internet Applications — a W3C specification for making web content and applications more accessible to people with disabilities.\",\"Use role=\\\"button\\\" and aria-label to make a <div> accessible as a button.\",\"ASGI\",\"Asynchronous Server Gateway Interface — the modern, async-capable successor to WSGI for Python web applications.\",\"Run a FastAPI or Django 3+ app with Uvicorn.\",\"ASP.NET\",\"Active Server Pages .NET — Microsoft's web application framework for building dynamic web sites and services with languages like C#.\",\"Build web APIs and Razor Pages with ASP.NET Core.\",\"CMS\",\"Content Management System — application for creating, managing, and publishing website content, often with roles, workflows, and plugins; headless CMS expose content via APIs.\",\"WordPress/Drupal; headless CMS like Contentful/Sanity.\",\"CSR\",\"Client-Side Rendering — render in the browser via JS.\",\"React SPA renders views on the client.\",\"CSS\",\"Cascading Style Sheets — style language for HTML.\",\"Tailwind/vanilla CSS styles pages.\",\"DOM\",\"Document Object Model — tree for HTML/XML.\",\"document.querySelector() manipulates nodes.\",\"ES\",\"ECMAScript — JavaScript specification.\",\"ES2023 features.\",\"GraphQL\",\"Query language/runtime for typed APIs.\",\"Client requests specific fields only.\",\"HTML\",\"HyperText Markup Language — web markup.\",\"<div>, <a>, <section> structure pages.\",\"IIS\",\"Internet Information Services — Microsoft's web server software for Windows.\",\"Host ASP.NET applications on Windows Server with IIS.\",\"JS\",\"JavaScript — language of the web.\",\"Frontend apps, Node.js scripts.\",\"LTR\",\"Left-To-Right — text direction where writing proceeds from left to right; default for Latin scripts.\",\"HTML dir=\\\"ltr\\\"; ensure proper bidi handling with Unicode markers where needed.\",\"NPM\",\"Node Package Manager — default package manager and registry client for Node.js, distributing JavaScript packages and managing project dependencies/scripts.\",\"npm install react adds dependencies; package.json defines scripts run via npm run build.\",\"OpenAPI\",\"Standard to describe HTTP APIs (Swagger).\",\"Generate clients from openapi.yaml.\",\"PWA\",\"Progressive Web App — offline/installable web app.\",\"Add service worker and manifest.\",\"REST\",\"Representational State Transfer — resource APIs.\",\"GET /posts/42 returns a Post.\",\"RTL\",\"Right-To-Left — text direction where writing proceeds from right to left; used by scripts like Arabic and Hebrew.\",\"HTML dir=\\\"rtl\\\"; use logical CSS properties (margin-inline-start) for bidi layouts.\",\"SEO\",\"Search Engine Optimization — improve visibility/traffic.\",\"Add metadata; optimize content.\",\"SPA\",\"Single Page Application — dynamic single page.\",\"React/Vue app with client routing.\",\"SSR\",\"Server-Side Rendering — render HTML on server.\",\"Next.js SSR pages.\",\"TS\",\"TypeScript — typed superset of JavaScript that compiles to plain JS.\",\"Add static types/interfaces; transpile with tsc or bundlers.\",\"UA\",\"User Agent — identifier string a client sends describing the software, version, and sometimes device/OS.\",\"HTTP User-Agent header; spoof/rotate UA for testing/scraping.\",\"URI\",\"Uniform Resource Identifier — generic identifier for names/addresses of resources; includes URLs (locators) and URNs (names).\",\"mailto:hello@example.com, urn:isbn:9780143127796, https://example.com/.\",\"URL\",\"Uniform Resource Locator — reference (address) to resources on a network using a scheme, host, and path.\",\"https://example.com/docs/index.html.\",\"URN\",\"Uniform Resource Name — a URI that names a resource without specifying its location; persistent, location‑independent identifiers.\",\"urn:isbn:9780143127796, urn:uuid:123e4567-e89b-12d3-a456-426614174000.\",\"WASM\",\"WebAssembly — portable fast binary format.\",\"Run Rust/C++ in the browser.\",\"WCAG\",\"Web Content Accessibility Guidelines — the primary international standard for web accessibility, published by the W3C.\",\"Aim for WCAG 2.1 AA compliance with sufficient color contrast and keyboard navigation.\",\"WSGI\",\"Web Server Gateway Interface — the standard interface between Python web applications and web servers.\",\"Gunicorn/uWSGI running a Flask/Django app via a WSGI callable.\",\"WWW\",\"World Wide Web — system of interlinked hypertext documents and resources accessed via the internet using HTTP(S) and URLs.\",\"Browse websites over HTTPS with a web browser.\",\"Legacy\",\"ASP\",\"Active Server Pages — Microsoft's first server-side script engine for dynamically generated web pages; superseded by ASP.NET.\",\"Classic ASP with VBScript (<% ... %>) on IIS.\",\"CGI\",\"Common Gateway Interface — standard for web servers to execute external programs and generate dynamic content.\",\"Apache invoking a CGI script to render a page.\",\"IE\",\"Internet Explorer — Microsoft's legacy web browser, superseded by Edge.\",\"IE11 compatibility mode; legacy intranet sites requiring ActiveX.\",\"JSP\",\"Jakarta Server Pages (JavaServer Pages) — a technology for creating dynamically generated web pages with Java code embedded in HTML.\",\".jsp files compiled into servlets on a Java application server.\",\"WSDL\",\"Web Services Description Language — an XML-based interface definition language for describing the functionality of a SOAP web service.\",\"Generate a client proxy from a .wsdl file; ?wsdl endpoint on a SOAP service.\",\"XHR\",\"XMLHttpRequest — legacy browser API for making HTTP requests from JavaScript (superseded by fetch).\",\"xhr.open('GET', '/api'); handle onreadystatechange.\"]},\"8\":{\"h\":\"Programming Languages\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"PHP\",\"PHP: Hypertext Preprocessor — a widely-used open source general-purpose scripting language that is especially suited for web development.\",\"WordPress, Laravel, and Symfony are built with PHP.\",\"VB.NET\",\"Visual Basic .NET — the modern, object-oriented successor to classic VB, running on the .NET platform.\",\"Build Windows Forms or ASP.NET applications with VB.NET.\",\"VBA\",\"Visual Basic for Applications — the scripting language for Microsoft Office, used for automation and macros.\",\"Automate Excel reports with VBA macros in the VBE.\",\"Legacy\",\"APL\",\"A Programming Language — an array-oriented language known for its concise syntax using a special character set.\",\"Financial modeling and data manipulation with APL's vector and matrix operations.\",\"AWK\",\"Aho, Weinberger, and Kernighan — a domain-specific language for text processing, typically used for data extraction and reporting.\",\"awk '{print $1}' file.txt to print the first column of a file.\",\"BASIC\",\"Beginner's All-purpose Symbolic Instruction Code — simple, interactive language designed for accessibility, popular on microcomputers.\",\"10 PRINT \\\"HELLO\\\", 20 GOTO 10; Microsoft BASIC, Dartmouth BASIC.\",\"COBOL\",\"COmmon Business-Oriented Language — verbose, English-like language for business, finance, and administrative systems on mainframes.\",\"IDENTIFICATION DIVISION., PERFORM ... UNTIL ...; legacy financial systems.\",\"FORTRAN\",\"FORmula TRANslation — pioneering compiled language for numeric and scientific computing.\",\"DO loops, GOTO, COMMON blocks; used in HPC and scientific libraries.\",\"LISP\",\"LISt Processing — early, influential high-level language family based on lambda calculus, pioneering many FP concepts and featuring code-as-data (homoiconicity).\",\"(defun factorial (n) ...) in Common Lisp/Scheme; Emacs Lisp.\",\"ML\",\"MetaLanguage — an influential family of functional programming languages known for its static type system, type inference, and algebraic data types.\",\"Standard ML (SML) and OCaml are popular dialects; influenced F#, Rust, and Haskell.\",\"PL/I\",\"Programming Language One — an imperative language developed by IBM for scientific, engineering, and business applications, combining features from FORTRAN and COBOL.\",\"Legacy applications on IBM mainframes (z/OS).\",\"RPG\",\"Report Program Generator — a high-level language for business applications, primarily on IBM i (AS/400) systems.\",\"Business logic in fixed-format RPG IV on an IBM iSeries server.\",\"SML\",\"Standard ML — a popular dialect of the ML programming language, known for its formal definition and use in language research.\",\"SML/NJ and MLton are common compilers; used in theorem provers.\",\"VB\",\"Visual Basic (Classic) — event-driven language and IDE for rapid application development on Windows before .NET.\",\"VB6 applications with COM components and ADO database connections.\",\"Historical\",\"ALGOL\",\"ALGOrithmic Language — influential early family of imperative languages that introduced block structure, lexical scope, and formal grammar definition (BNF).\",\"ALGOL 60/68 influenced Pascal, C, and many other languages.\"]},\"9\":{\"h\":\"Programming\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AAA\",\"Arrange–Act–Assert — unit testing pattern that structures tests into setup (arrange inputs/fixtures), execution (act), and verification (assert expected outcomes).\",\"Arrange a service and mocks; Act by calling the method; Assert on result and interactions.\",\"ADT\",\"Abstract Data Type — specification of behavior independent of implementation.\",\"Stack/queue ADTs with array- or list-based implementations.\",\"ADT\",\"Algebraic Data Type — composite types formed by sums (variants) and products (fields), enabling expressive, type-safe modeling.\",\"Rust enums/Haskell data types; Option/Either in FP.\",\"AIO\",\"Asynchronous I/O — a form of I/O processing that permits other processing to continue before the transmission has finished.\",\"Linux io_uring or Windows IOCP for high-performance servers.\",\"API\",\"Application Programming Interface — a defined surface for one piece of software to interact with another.\",\"POSIX file APIs, a graphics library API, or an HTTP endpoint.\",\"ASM\",\"Assembly Language — low-level programming language with a strong correspondence between instructions and the machine's architecture.\",\"Write syscall wrappers in ASM; optimize hot loops with SIMD intrinsics or inline assembly.\",\"AVL\",\"Adelson-Velsky and Landis tree — self‑balancing binary search tree that maintains height balance via rotations to ensure O(log n) search/insert/delete.\",\"Implement an ordered map/set with AVL rotations (LL/LR/RL/RR).\",\"BAR\",\"Base Address Register — PCI/PCIe register that stores the base address and size of a device resource so the host can map memory-mapped I/O or port ranges into the system address space.\",\"GPUs/network cards expose VRAM or control registers via BARs; \\\"Resizable BAR\\\" allows mapping full GPU memory on modern systems.\",\"BCL\",\"Base Class Library — the standard library of core types and functions in the .NET Framework and its successors.\",\"Use types from System namespace like String, List<T>, and HttpClient.\",\"BEAM\",\"Bogdan's Erlang Abstract Machine — the virtual machine at the core of the Erlang and Elixir ecosystems, known for its concurrency and fault tolerance.\",\"The BEAM VM powers highly concurrent systems like WhatsApp.\",\"BFS\",\"Breadth-First Search — graph/tree traversal that visits neighbors level by level using a queue; finds shortest paths in unweighted graphs.\",\"Level-order traversal of a tree; BFS from a source to compute distances/parents.\",\"BSP\",\"Binary Space Partitioning — recursively subdivide space with hyperplanes (planes in 3D, lines in 2D) to organize geometry for visibility, rendering order, and collision queries.\",\"Classic FPS engines (e.g., Quake) use BSP trees for visibility/culling and painter's algorithm ordering.\",\"BST\",\"Binary Search Tree — ordered binary tree supporting average O(log n) search/insert/delete when balanced; worst‑case O(n) if unbalanced.\",\"Implement sets/maps; inorder traversal yields keys in sorted order.\",\"CAS\",\"Compare-And-Swap — atomic operation that updates a memory location only if it still equals an expected value; foundation for lock‑free algorithms.\",\"CAS loop for a lock‑free stack push; beware the ABA problem.\",\"CLI\",\"Command-Line Interface — text-based commands.\",\"git, kubectl, custom CLIs.\",\"CLI\",\"Common Language Infrastructure — the open specification (ECMA-335) for the .NET runtime environment.\",\"The .NET CLR is an implementation of the CLI standard.\",\"CLR\",\"Common Language Runtime — .NET VM.\",\"Runs C# assemblies.\",\"CRUD\",\"Create, Read, Update, Delete — basic data ops.\",\"REST endpoints map to CRUD on users.\",\"CUI\",\"Character User Interface — text/character-based UI typically rendered in terminals with limited graphics; overlaps with TUI.\",\"Installer wizards and ncurses-style menus in a terminal.\",\"DAG\",\"Directed Acyclic Graph — directed graph with no cycles; commonly used to model dependencies and enable topological ordering in compilers, build systems, and task scheduling.\",\"Topologically sort to order compilation units; represent dependencies in build graphs or AST passes.\",\"DFS\",\"Depth-First Search — graph/tree traversal that explores as far as possible along each branch before backtracking; typically implemented with recursion or an explicit stack.\",\"Topological sort, cycle detection, connected components, subtree times.\",\"DSL\",\"Domain-Specific Language — tailored language.\",\"SQL, Regex, build DSLs.\",\"EOF\",\"End Of File — no more data to read.\",\"Read returns EOF on file end.\",\"FASM/MASM/NASM/TASM\",\"Flat Assembler / Microsoft Macro Assembler / Netwide Assembler / Turbo Assembler — popular assemblers for the x86 architecture.\",\"Writing bootloaders or optimizing code with x86 assembly.\",\"FFI\",\"Foreign Function Interface — mechanism to call functions across language/ABI boundaries.\",\"Rust extern \\\"C\\\" to call C; Python ctypes/cffi bindings.\",\"FIFO\",\"First In, First Out — queue discipline.\",\"Message queues processing order.\",\"FP\",\"Functional Programming — pure functions/immutability.\",\"Map/filter/reduce pipelines.\",\"FSM\",\"Finite State Machine — computational model with a finite number of states and transitions driven by inputs/events.\",\"UI workflows, protocol handlers, and parsers modeled as FSMs.\",\"GADT\",\"Generalized Algebraic Data Type — ADT whose constructors can refine the result type, enabling more precise typing and safer pattern matches.\",\"Haskell/OCaml GADTs for typed ASTs; matching narrows types.\",\"GC\",\"Garbage Collection — automatic memory management.\",\"JVM/CLR collectors free unused objects.\",\"gRPC\",\"High-performance RPC over HTTP/2 with Protobuf.\",\"Define .proto; generate client/server stubs.\",\"GUI\",\"Graphical User Interface — visual interaction.\",\"Desktop app windows, buttons.\",\"I/O\",\"Input/Output — transfer of data to/from a program and external systems or devices.\",\"File I/O, network I/O; blocking vs non‑blocking/async I/O.\",\"IDE\",\"Integrated Development Environment — all-in-one dev app.\",\"IntelliJ, VS Code (w/ extensions).\",\"IDL\",\"Interface Definition Language — specification language to describe interfaces and data types for generating cross-language bindings and IPC stubs.\",\"Define COM interfaces in MIDL or CORBA IDL; generate proxies/stubs for RPC.\",\"IIFE\",\"Immediately Invoked Function Expression.\",\"(function(){ })() in JS.\",\"JDBC\",\"Java Database Connectivity — DB API.\",\"DriverManager.getConnection(...).\",\"JDK\",\"Java Development Kit — Java dev tools.\",\"javac, jar.\",\"JRE\",\"Java Runtime Environment — run Java apps.\",\"java -jar app.jar.\",\"JVM\",\"Java Virtual Machine — runs bytecode.\",\"JVM-based languages (Kotlin, Scala).\",\"LINQ\",\"Language-Integrated Query — a .NET feature that adds native data querying capabilities to languages like C#.\",\"Use LINQ to query collections, databases (via EF), and XML.\",\"LRU\",\"Least Recently Used — cache eviction policy that discards the least recently accessed items first.\",\"LRU caches/maps in memory-constrained systems.\",\"LSB\",\"Least Significant Bit — the bit with the lowest positional value in a binary number (2^0); determines odd/even and is affected first by increment.\",\"In 0b1011, the LSB is 1; little‑endian stores LSB byte first.\",\"LSP\",\"Language Server Protocol — standard JSON-RPC protocol between editors and language servers for code intelligence.\",\"VS Code/Neovim language servers for hover, completion, diagnostics.\",\"MSB\",\"Most Significant Bit — the bit with the highest positional value; often used as the sign bit in signed integers.\",\"In 0b1011, the MSB is 1; big‑endian stores MSB byte first.\",\"MST\",\"Minimum Spanning Tree — subset of edges that connects all vertices in a weighted, undirected graph with minimum total weight and no cycles.\",\"Compute MST with Kruskal (sort edges + DSU) or Prim (priority queue).\",\"NaN\",\"Not a Number — IEEE 754 floating‑point special value representing undefined/invalid results; propagates through computations and is unordered (not equal to any value, including itself).\",\"0.0/0.0 or sqrt(-1.0) produce NaN; NaN != NaN is true; use isnan() to test.\",\"NOP\",\"No Operation — instruction or operation that intentionally does nothing; used for timing, alignment, patching, or as a placeholder.\",\"CPU NOP instruction; inserting a no‑op in pipelines or bytecode.\",\"NPE\",\"Null Pointer Exception — runtime error arising from dereferencing a null reference/pointer in languages with nullable references.\",\"Java NullPointerException, C# NullReferenceException; avoid with null checks, Option/Optional, or null‑safety features.\",\"ODBC\",\"Open Database Connectivity — cross-platform C API and driver model for accessing relational databases.\",\"Configure DSNs; apps connect via ODBC drivers to SQL Server/MySQL/Postgres.\",\"OLE\",\"Object Linking and Embedding — Microsoft technology (built on COM) for embedding and linking documents/objects between applications.\",\"Embed an Excel sheet in a Word doc; OLE automation for Office apps.\",\"OOM\",\"Out Of Memory — condition where available memory is exhausted and allocations fail.\",\"Linux OOM killer terminates processes; runtime throws OOM error.\",\"OOP\",\"Object-Oriented Programming — encapsulation/inheritance/polymorphism.\",\"Classes, interfaces, virtual methods.\",\"ORM\",\"Object-Relational Mapping — map objects to relational tables.\",\"ORM entities and repositories.\",\"OTP\",\"Open Telecom Platform — the standard library, design principles, and set of tools for building robust, concurrent systems in Erlang/Elixir.\",\"gen_server and supervisor are key OTP behaviours.\",\"PCRE\",\"Perl Compatible Regular Expressions — regex libraries and syntax compatible with Perl's regex engine (PCRE/PCRE2).\",\"grep -P, nginx, PHP use PCRE/PCRE2 for advanced regex features.\",\"RAII\",\"Resource Acquisition Is Initialization — lifetime control.\",\"C++ locks released at scope end.\",\"Regex\",\"Regular Expression — declarative pattern syntax for matching, searching, and transforming strings; available in most languages and tooling with varying feature levels (POSIX, PCRE, etc.).\",\"Use /^foo.*bar$/ to validate inputs; run `rg --ignore-case 'error\",\"REPL\",\"Read–Eval–Print Loop — interactive shell.\",\"Python/Node REPL.\",\"RPC\",\"Remote Procedure Call — call functions on a service.\",\"gRPC CreateUser method.\",\"RPN\",\"Reverse Polish Notation — postfix notation for arithmetic expressions that eliminates parentheses and associates operators with operands directly; naturally evaluated with a stack.\",\"Evaluate 3 4 + 2 * with a stack; HP calculators and some compilers/VMs use RPN internally.\",\"SDK\",\"Software Development Kit — tools/libs for a platform.\",\"AWS SDK for programmatic access.\",\"SICP\",\"Structure and Interpretation of Computer Programs — seminal MIT textbook that teaches computer science fundamentals through Scheme, abstraction, and metalinguistic evaluation.\",\"Work through the SICP exercises, building interpreters and analyzers to internalize recursion, higher-order procedures, and data-driven design.\",\"SUT\",\"System Under Test — the specific component or boundary being exercised by a test, often isolated from collaborators via test doubles.\",\"Unit test drives the SUT (a service class) while stubbing its repository and asserting outputs/interactions.\",\"TLS\",\"Thread-Local Storage — per-thread storage for data that gives each thread its own instance of a variable.\",\"C/C++ thread_local/__thread, POSIX pthread_key_create; Rust thread_local!.\",\"TUI\",\"Text-based User Interface — terminal UI.\",\"htop, ncurses apps.\",\"UB\",\"Undefined Behaviour — program operations for which the language standard imposes no requirements, allowing compilers to assume they never happen and enabling aggressive optimizations.\",\"C/C++ out‑of‑bounds access, use‑after‑free, signed overflow; can lead to unpredictable results; use sanitizers to detect.\",\"UTC\",\"Coordinated Universal Time — global time standard.\",\"Timestamps/logs in UTC.\",\"UWP\",\"Universal Windows Platform — a platform for creating apps that run across Windows devices.\",\"Build a Windows Store app with UWP and XAML.\",\"VBE\",\"Visual Basic Editor — the integrated development environment for writing and editing VBA code within Microsoft Office.\",\"Press Alt+F11 in Excel to open the VBE.\",\"VS\",\"Visual Studio — Microsoft's integrated development environment (IDE) for .NET and C++ development on Windows.\",\"Develop, debug, and deploy applications with the Visual Studio IDE.\",\"WPF\",\"Windows Presentation Foundation — a UI framework for building Windows desktop applications with XAML.\",\"Modern desktop apps with data binding and hardware acceleration.\",\"WYSIWYG\",\"What You See Is What You Get — direct-manipulation editor.\",\"Rich text editors.\",\"XAML\",\"Extensible Application Markup Language — a declarative markup language used by Microsoft UI frameworks like WPF and UWP.\",\"Define UI layouts and data bindings in .xaml files.\",\"Historical {colspan=-3}\",\"RMI\",\"Remote Method Invocation — Java's distributed objects technology enabling method calls on remote JVMs via stubs/skeletons over JRMP (or IIOP for RMI‑IIOP).\",\"Early Java distributed systems; largely supplanted by HTTP/REST, gRPC, and message queues.\"]},\"10\":{\"h\":\"Compilers\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"ANTLR\",\"ANother Tool for Language Recognition — a popular parser generator for reading, processing, executing, or translating structured text or binary files.\",\"Generate a parser from a grammar file for a custom language.\",\"AOT\",\"Ahead-Of-Time compilation — compile before runtime.\",\"Angular AOT compiles templates during build.\",\"AST\",\"Abstract Syntax Tree — structured tree representation of parsed source code used by compilers and tooling.\",\"AST nodes for statements/expressions in parsers/linters.\",\"BNF\",\"Backus–Naur Form — notation for expressing context‑free grammars used to define programming language syntax.\",\"Language specs define grammar productions in BNF or EBNF.\",\"CFG\",\"Context‑Free Grammar — formal grammar class used to define programming language syntax; typically expressed in BNF/EBNF and parsed by LL/LR/GLR/PEG parsers.\",\"Write grammar productions; generate parsers with yacc/bison/ANTLR.\",\"CFG\",\"Control Flow Graph — directed graph of basic blocks and edges representing possible control transfers within a function/program; foundation for data‑flow analysis and many optimizations.\",\"Build CFG to compute dominators/loops; enable DCE, SSA construction, and liveness.\",\"CIL\",\"Common Intermediate Language — the bytecode language for the .NET runtime (CLR), to which languages like C# and VB.NET compile.\",\"ildasm to inspect the CIL of a .NET assembly; also known as MSIL.\",\"CSE\",\"Common Subexpression Elimination — remove repeated identical expressions by computing once and reusing the value within a region.\",\"Within a block, compute x+y once and reuse; global variants extend across blocks.\",\"DCE\",\"Dead Code Elimination — remove code shown by analysis to have no effect on program outputs/side effects, improving size and performance.\",\"Eliminate unused assignments/branches after liveness/constant propagation; -O2 passes in LLVM/GCC.\",\"DFA\",\"Data Flow Analysis — family of static analyses that compute facts about program variables/paths over a control flow graph using lattice/transfer functions (e.g., reaching definitions, liveness, constant propagation).\",\"Run forward/backward analyses on a CFG; feed results to optimizations like DCE, CSE, and register allocation.\",\"DFA\",\"Deterministic Finite Automaton — finite-state machine with exactly one transition per symbol for each state; used in lexers/pattern matching.\",\"Tokenizer state machine generated from regular languages.\",\"DWARF\",\"Debug With Arbitrary Record Format — standardized debugging information format for compiled programs (types, symbols, line tables, call frames) used across platforms.\",\"GCC/Clang emit DWARF in ELF/Mach-O; inspect with readelf --debug-dump or llvm-dwarfdump; GDB/LLDB consume DWARF.\",\"EBNF\",\"Extended Backus–Naur Form — BNF with additional operators (repetition, optional, grouping) for more concise grammar specifications.\",\"{ } repetition, [ ] optional; used in many language grammars and docs.\",\"FAM\",\"Flexible Array Member — language/ABI feature where a struct’s last field is a size‑unspecified array used to tail‑allocate variable‑length data; not counted in sizeof and requires custom allocation/copy logic.\",\"In C (C99+): struct S{size_t n; int a[];}; allocate with malloc(sizeof(struct S)+n*sizeof(int)); a occupies trailing storage.\",\"GCC\",\"GNU Compiler Collection — suite of compilers for C/C++/Fortran and more.\",\"gcc/g++ toolchains for building software.\",\"GL\",\"Graphics Library — SGI's proprietary immediate-mode 3D graphics API for IRIS workstations; precursor to the portable OpenGL standard.\",\"Develop IRIS GL applications on SGI hardware; OpenGL later standardized much of the API for cross-platform use.\",\"GLSL\",\"OpenGL Shading Language — high-level C-like language for writing programmable shaders targeting OpenGL and Vulkan (via SPIR-V).\",\"Write vertex/fragment/compute shaders compiled by drivers or offline to SPIR-V for Vulkan pipelines.\",\"GVN\",\"Global Value Numbering — discover semantically equivalent computations (beyond syntactic equality) to eliminate redundancies across the dominator tree.\",\"Treat t=x; z=t+y as x+y; coalesce values through copies/φ nodes in SSA.\",\"HLSL\",\"High-Level Shading Language — Microsoft’s shader language for DirectX that compiles to DXIL/DXBC and can be cross-compiled to SPIR-V for Vulkan.\",\"Author shaders in HLSL for Direct3D 11/12; use DXC/FXC or SPIRV-Cross for other runtimes.\",\"HM\",\"Hindley–Milner — a classical type inference algorithm that automatically deduces the types of expressions in some statically typed languages.\",\"The basis for type inference in ML-family languages and Haskell.\",\"IR\",\"Intermediate Representation — compiler/transformation-friendly program form between source and machine code.\",\"LLVM IR, SSA-based IRs used for optimization.\",\"JIT\",\"Just-In-Time compilation — runtime optimization.\",\"HotSpot JIT compiles hot methods.\",\"LICM\",\"Loop-Invariant Code Motion — hoist computations whose operands don’t change within a loop to preheaders, and sink post‑loop where safe.\",\"Move len(arr)/c*2 out of the loop body to reduce work.\",\"LLVM\",\"Low Level Virtual Machine — modular compiler toolchain and IR used by many languages.\",\"Clang/LLVM backends, llc, opt, and LLVM IR.\",\"LTO\",\"Link Time Optimization — whole‑program optimization performed at link time across translation units, typically by linking IR/bitcode and running interprocedural passes.\",\"-flto in Clang/GCC; enables cross‑TU inlining, DCE, devirtualization, ICF/WPO.\",\"MLIR\",\"Multi-Level Intermediate Representation — an extensible compiler infrastructure in LLVM that models programs across dialects to enable reusable transformations for domain-specific compilers and accelerators.\",\"Use MLIR dialects (Linalg, GPU, Tensor) to lower ML programs toward LLVM IR or hardware-specific codegen.\",\"NFA\",\"Nondeterministic Finite Automaton — automaton model for regular languages allowing ε‑transitions and multiple possible next states; typically converted to an equivalent DFA for efficient matching.\",\"Build NFA from regex via Thompson's construction; convert to DFA by subset construction for lexers.\",\"NRVO\",\"Named Return Value Optimization — compiler optimization that elides copies/moves by constructing a named local return object directly in the caller’s storage.\",\"T f(){ T x; return x; } constructs x in the caller (C++); differs from RVO on unnamed temporaries.\",\"OBJ\",\"Object File — intermediate binary produced by compilers/assemblers containing machine code, data, relocation records, and symbol tables to be linked into executables or libraries.\",\"Build foo.o/foo.obj then link with ld/link.exe; inspect with objdump, otool, or llvm-objdump.\",\"PEG\",\"Parsing Expression Grammar — recognition‑based grammar formalism with ordered (prioritized) choice and unlimited lookahead; often parsed via packrat parsing with memoization for linear time.\",\"Define a PEG for a language and parse with PEG.js/pest/PEGTL; use ordered choice instead of ambiguous CFGs.\",\"PRE\",\"Partial Redundancy Elimination — inserts computations to make partially redundant expressions fully redundant, then removes duplicates (often via Lazy Code Motion/SSA-PRE).\",\"If a+b happens on some paths and later unconditionally, place it optimally so all uses share one computed value.\",\"RTTI\",\"Run-Time Type Information — runtime facility to query an object's dynamic type and perform safe downcasts/instance checks in languages with polymorphism.\",\"In C++, use dynamic_cast<Base*> and typeid; in Java/C#, use instanceof/is and reflection APIs.\",\"RVO\",\"Return Value Optimization — compiler optimization that elides copies/moves by constructing a returned temporary directly in the caller’s storage.\",\"T f(){ return T(); } constructs the T in the caller; guaranteed in C++17 (copy elision rules).\",\"SPIR-V\",\"Standard Portable Intermediate Representation — Khronos binary intermediate language for GPU compute/graphics shaders used by Vulkan, OpenCL, and WebGPU toolchains.\",\"Compile GLSL/HLSL to SPIR-V for Vulkan pipelines; emit SPIR-V from MLIR/LLVM for compute shaders.\",\"SSA\",\"Static Single Assignment — IR form where each variable is assigned exactly once, using φ (phi) functions at merge points; simplifies data‑flow analysis and optimization.\",\"Convert to SSA to enable efficient DCE, copy propagation, and value numbering; SSA in LLVM IR.\",\"TCO\",\"Tail Call Optimization — reuse the current stack frame for a tail call to avoid stack growth and enable efficient tail recursion.\",\"Compilers transform tail-recursive functions into loops; mandated in some languages (Scheme), optional in others.\",\"UFCS\",\"Uniform Function Call Syntax — language feature that allows calling free/extension functions with method-call syntax by implicitly passing the receiver as the first argument.\",\"D/Scala/Rust desugar x.f(y) to f(x, y); extension methods in C#/Kotlin/Swift.\"]},\"11\":{\"h\":\"Operating Systems\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"ABI\",\"Application Binary Interface — low-level contract governing calling conventions, data layout, and linkage between compiled code and the OS/runtime.\",\"x86‑64 System V ABI, Windows x64 ABI; stable FFI boundaries.\",\"APK\",\"Android Package Kit — archived bundle (ZIP with AndroidManifest.xml, resources, and compiled bytecode) used to distribute and install Android apps.\",\"Build app-release.apk, sign it, and install with adb install or upload to Play.\",\"ASLR\",\"Address Space Layout Randomization — security technique that randomizes process address spaces (stack/heap/ASLR-enabled libs) to make memory corruption exploits less reliable.\",\"cat /proc/sys/kernel/randomize_va_space; Windows system-wide ASLR.\",\"BAT\",\"Batch file — Windows Command Prompt script file executed by cmd.exe; commonly .bat or .cmd.\",\"Automation scripts using built-ins like echo, set, if, for.\",\"BSD\",\"Berkeley Software Distribution — family of UNIX-like operating systems descended from research UNIX at UC Berkeley, known for its permissive license.\",\"FreeBSD, OpenBSD, NetBSD used in servers and embedded systems.\",\"BSS\",\"Block Started by Symbol — segment for zero‑initialized or uninitialized static/global data that occupies memory at load/runtime but takes no space in the object file beyond metadata (size).\",\"C static int buf[4096]; goes to .bss; reduces binary size versus storing zeros.\",\"CMD\",\"Windows Command Prompt — command-line interpreter (cmd.exe) for Windows providing batch scripting (.bat/.cmd) and built-in shell commands.\",\"Run cmd.exe; use dir, copy, set and %PATH%; legacy scripts for automation.\",\"COW\",\"Copy-On-Write — share pages or objects until a write occurs, then copy to preserve isolation; reduces memory/IO and enables efficient forks/snapshots.\",\"fork() shares pages COW; VM snapshots; filesystem COW in ZFS/Btrfs.\",\"DLL\",\"Dynamic-Link Library — shared library format on Windows loaded at runtime into a process address space.\",\"foo.dll loaded via LoadLibrary; shared code/plugins.\",\"DPC\",\"Deferred Procedure Call — mechanism (notably in Windows) to queue a function for execution at a lower IRQL than the ISR that scheduled it, enabling faster interrupt handling.\",\"A network driver's ISR queues a DPC to process incoming packets.\",\"DSO\",\"Dynamic Shared Object — generic term for a shared library (.so, .dll, .dylib) loaded at runtime and linked into a process's address space.\",\"Use dlopen to load a DSO and dlsym to resolve symbols from it.\",\"DYLIB\",\"Dynamic Library — macOS shared library format loaded by the dynamic linker.\",\"libfoo.dylib via dyld; install_name_tool/rpaths for relocation.\",\"ELF\",\"Executable and Linkable Format — standard binary format for executables, object files, and shared libraries on Unix-like systems.\",\"Linux binaries with sections/segments; inspect with readelf/objdump.\",\"EXE\",\"Executable file — Windows program file using the Portable Executable (PE) format for executables and DLLs.\",\"Launch .exe apps; inspect PE headers with dumpbin/objdump.\",\"FS\",\"File System — on-disk or logical structure and set of rules the OS uses to organize, store, and retrieve files/directories, including metadata and allocation.\",\"ext4, NTFS, APFS, ZFS; mount/unmount volumes; permissions and journaling.\",\"FUSE\",\"Filesystem in Userspace — kernel interface to implement filesystems in user space processes.\",\"Mount sshfs/rclone via FUSE; custom FS without kernel modules.\",\"GDT\",\"Global Descriptor Table — a core data structure in the x86 architecture that defines memory segments for the CPU.\",\"Kernel setup of GDT for code/data segments in protected mode.\",\"GNOME\",\"GNU Network Object Model Environment — free, open‑source desktop environment for UNIX-like systems, part of the GNU Project.\",\"Default desktop on many Linux distributions; GNOME Shell with Wayland/X11.\",\"HAL\",\"Hardware Abstraction Layer — OS layer that hides hardware specifics behind a uniform API so drivers/system code can run across platforms.\",\"Windows HAL; OS kernels providing common driver interfaces across architectures.\",\"IDT\",\"Interrupt Descriptor Table — x86 data structure that associates interrupt vectors with the addresses of their interrupt service routines (ISRs).\",\"OS populates the IDT to handle hardware interrupts and exceptions.\",\"IFS\",\"Installable File System — an API in an operating system that allows new file systems to be loaded dynamically.\",\"Windows IFS for NTFS, FAT32, and third-party file systems; OS/2's IFS.\",\"IPC\",\"Inter-Process Communication — exchange/coordinate between processes.\",\"Pipes, sockets, shared memory, signals.\",\"ISR\",\"Interrupt Service Routine — function invoked by the OS in response to an interrupt to handle the event and acknowledge the controller.\",\"Keyboard ISR on IRQ1 reads scancode; timer ISR updates ticks and EOIs the APIC.\",\"KDE\",\"K Desktop Environment (now the KDE community and Plasma desktop) — free, open‑source desktop environment and software suite for UNIX-like systems.\",\"KDE Plasma on Linux/BSD; highly configurable desktop with KWin and Qt apps.\",\"L4\",\"L4 microkernel family — influential second-generation microkernel design emphasizing minimality, high performance, and user-space servers.\",\"seL4 (verified secure); Fiasco.OC; used in secure embedded systems and virtualization.\",\"Mach-O\",\"Mach Object — executable/object file format used by macOS/iOS for binaries and libraries.\",\"Inspect with otool/lldb; libfoo.dylib and foo.app/Contents/MacOS/foo.\",\"MSI\",\"Microsoft Installer — an installer package file format and API for Windows.\",\".msi packages for installing software on Windows.\",\"NDIS\",\"Network Driver Interface Specification — a Microsoft API for network card drivers, forming a layer between the protocol stack and the hardware driver.\",\"Writing an NDIS miniport driver; the standard for Windows network drivers.\",\"NTFS\",\"New Technology File System — Windows journaling filesystem with ACLs, alternate data streams, compression, and quotas.\",\"Format a Windows system volume as NTFS; set ACLs with icacls.\",\"OS\",\"Operating System — system software that manages hardware resources and provides common services for programs.\",\"Linux, Windows, macOS; kernel, drivers, processes, filesystems.\",\"PCB\",\"Process Control Block — kernel data structure containing the state of a process (registers, PID, scheduling info, memory maps).\",\"The OS saves/restores the PCB during a context switch.\",\"PE\",\"Portable Executable — Windows binary format for executables, DLLs, and object files.\",\"Inspect with dumpbin/objdump; sections, import/export tables.\",\"PID\",\"Process Identifier — numeric ID assigned by the kernel to a process.\",\"pid=1 init/systemd; ps -o pid,comm.\",\"POSIX\",\"Portable OS Interface — Unix-like standard APIs.\",\"fork, exec, pthread APIs.\",\"PTY\",\"Pseudo Terminal — virtual terminal pair (master/slave) used by terminal emulators and remote sessions to emulate a real TTY.\",\"/dev/pts/*, ssh -t, forkpty, tmux.\",\"QNX\",\"QNX Neutrino RTOS — commercial Unix-like real-time operating system with a microkernel architecture, widely used in embedded systems.\",\"Automotive infotainment (BlackBerry IVY), industrial controllers, medical devices.\",\"RCU\",\"Read-Copy-Update — synchronization mechanism allowing lock-free reads by deferring updates/reclamation until all readers in a grace period complete.\",\"Linux kernel uses RCU for highly concurrent data structures in networking/VFS.\",\"RPM\",\"RPM Package Manager (originally Red Hat Package Manager) — a package management system used by many Linux distributions.\",\"rpm -i package.rpm; yum/dnf use RPM packages.\",\"RTOS\",\"Real-Time Operating System — OS designed for deterministic response and bounded latency, with priority-based scheduling and real-time primitives.\",\"FreeRTOS, Zephyr, VxWorks on microcontrollers/embedded systems; hard vs soft real-time.\",\"SO\",\"Shared Object — Unix/Linux shared library format loaded by the dynamic linker.\",\"libfoo.so via ld.so/dlopen; sonames and rpaths.\",\"SUS\",\"Single UNIX Specification — standard defining UNIX interfaces and behavior maintained by The Open Group, ensuring POSIX compliance and application portability.\",\"SUS/POSIX APIs (unistd.h, signals, threads); conformant systems like AIX, HP-UX, macOS.\",\"TCB\",\"Thread Control Block — kernel data structure that stores the state of a thread, including its registers, stack pointer, and scheduling information.\",\"Analogous to a PCB but for a thread; managed by the scheduler.\",\"TID\",\"Thread Identifier — numeric ID for a thread (often equals PID for single-threaded processes; Linux has per-thread TIDs).\",\"gettid() on Linux; pthread_self() maps to a TID.\",\"TPF\",\"Transaction Processing Facility — IBM's high-performance successor to ACP, optimized for nonstop, large-scale transaction processing on mainframes in aviation, finance, and hospitality.\",\"Airlines, card networks, and hotels run IBM ZTPF/TPF on IBM Z to process reservations and payments at extreme throughput.\",\"TTY\",\"Teletype/Terminal — character device for text I/O; terminal sessions.\",\"/dev/tty, PTY in shells.\",\"Legacy\",\"AIX\",\"IBM's UNIX (Advanced Interactive eXecutive) for POWER systems, featuring LPARs, SMIT, JFS2, and enterprise tooling.\",\"IBM Power Systems running AIX on POWER9/POWER10; manage with SMIT/VIOS.\",\"COM\",\"DOS executable — simple flat binary loaded at offset 0x100 with ~64KB segment limit and no header.\",\"Classic .COM utilities/programs on MS‑DOS/PC‑DOS; tiny loaders/stubs.\",\"IVT\",\"Interrupt Vector Table — x86 real‑mode table at 0x0000:0000 with 256 interrupt pointers; superseded by IDT in protected/long mode.\",\"Bootloaders may patch IVT entries before switching modes.\",\"JCL\",\"Job Control Language — scripting language used on IBM mainframes to control batch job execution.\",\"//SYSIN DD * statements in a JCL deck to submit a batch job.\",\"MCP\",\"Master Control Program — Unisys mainframe OS in the Burroughs large‑systems line, featuring a stack machine architecture and strong language support; still in use but niche.\",\"Unisys ClearPath MCP systems (Burroughs B5000 lineage) running enterprise workloads.\",\"NT\",\"New Technology — Microsoft’s NT family/architecture underlying Windows NT and its successors (2000/XP/Vista/7/8/10/11), featuring a hybrid kernel, HAL, NTFS, and Win32/NT native subsystems.\",\"Windows NT lineage; ver shows NT versioning; services/session model and security based on NT architecture.\",\"UAC\",\"User Account Control — Windows elevation and consent mechanism to limit silent privilege escalation.\",\"Admin tasks prompt for consent; split‑token admin accounts.\",\"UDS\",\"Unix Domain Socket — IPC mechanism using socket endpoints on the local host with filesystem pathnames or abstract namespace.\",\"/var/run/docker.sock; faster than TCP on localhost.\",\"VDSO\",\"virtual Dynamic Shared Object — small shared library exposed by the kernel and mapped into user processes to provide fast, syscall-free access to certain kernel routines.\",\"gettimeofday() calls on Linux are often implemented via the vDSO to avoid context switches.\",\"VFAT\",\"Virtual FAT — an extension to the FAT filesystem that introduced long filename support in Windows 95.\",\"Enabled filenames longer than the 8.3 DOS convention.\",\"VFS\",\"Virtual File System — OS abstraction layer that provides a uniform API over different filesystems and devices.\",\"Linux VFS layer exposes common inode/dentry APIs across ext4, XFS, NFS, FUSE.\",\"VM\",\"Virtual Memory — OS abstraction that gives processes isolated address spaces mapped to physical memory via paging/segmentation.\",\"Per‑process address spaces, page tables, demand paging, copy‑on‑write.\",\"X11\",\"X Window System (Version 11) — network‑transparent windowing system and protocol for bitmap displays on UNIX‑like systems.\",\"Xorg/XWayland on Linux; XQuartz on macOS; ssh -X X11 forwarding.\",\"z/OS\",\"IBM's mainframe operating system for IBM Z, successor to OS/390 and MVS; provides JES2/3, RACF security, JCL batch, and UNIX System Services (POSIX environment).\",\"Enterprise workloads on IBM Z mainframes; partitioned datasets, CICS/IMS, and USS shells.\",\"ZFS\",\"Zettabyte File System — advanced filesystem/volume manager with snapshots, checksums, compression, and COW semantics.\",\"Create ZFS datasets/pools; instant snapshots/zfs send replication.\",\"Historical\",\"A/UX\",\"Apple UNIX — Apple's early implementation of Unix for their 68k-based Macintosh computers, featuring a Mac-like GUI.\",\"An early attempt to merge the Mac GUI with a POSIX-compliant Unix kernel.\",\"ACP\",\"Airline Control Program — IBM's specialized high-throughput transaction processing operating system for System/360 and System/370, engineered for airline reservations and other real-time industries; predecessor to TPF.\",\"Run on IBM mainframes to power reservation systems; later evolved into the Transaction Processing Facility (TPF).\",\"CDE\",\"Common Desktop Environment — classic UNIX desktop environment based on Motif and the X Window System; widely used on commercial UNIX workstations in the 1990s.\",\"HP‑UX, Solaris, AIX shipped CDE as the default desktop; superseded by GNOME/KDE.\",\"COFF\",\"Common Object File Format — early, influential format for executables and object files on Unix-like systems.\",\"Predecessor to ELF and PE; used in early System V.\",\"CP/CMS\",\"Control Program / Cambridge Monitor System — IBM's experimental virtualization-focused time-sharing system for the System/360 Model 67, pairing a hypervisor (CP) with per-user CMS interactive environments.\",\"Demonstrated full virtual machines hosting guest OSes; evolved into VM/370 and laid the groundwork for modern IBM mainframe virtualization.\",\"CP/M\",\"Control Program for Microcomputers — early microcomputer OS preceding MS‑DOS.\",\"1970s/80s 8‑bit systems running CP/M.\",\"CTSS\",\"Compatible Time-Sharing System — pioneering time-sharing OS developed at MIT for the IBM 7090/7094; introduced concepts like password logins and interactive command shells; precursor to MULTICS.\",\"MIT Project MAC on IBM 7094; early 1960s interactive computing.\",\"DG/UX\",\"Data General's UNIX for AViiON servers/workstations; SVR4-based, multi-processor support; discontinued.\",\"DG AViiON systems running DG/UX; enterprise UNIX of the 1990s.\",\"DOS\",\"Disk Operating System — family of disk‑based OSes.\",\"MS‑DOS, PC‑DOS, DR‑DOS.\",\"DTSS\",\"Dartmouth Time-Sharing System — early time-sharing operating system co-developed with the Dartmouth BASIC language to provide interactive computing access to students and faculty.\",\"Students logged into DTSS terminals to run BASIC programs; influenced later educational and commercial time-sharing services.\",\"EMS\",\"Expanded Memory Specification — paged memory technique (bank switching) to access >1MB of RAM on 8086/286 PCs in real mode via a 64KB page frame in the UMA.\",\"Lotus/Intel/Microsoft (LIM) EMS; configure with EMM386.EXE for DOS games/apps.\",\"GCOS\",\"General Comprehensive Operating System — Honeywell/Bull mainframe OS originally launched as GECOS (General Electric Comprehensive Operating Supervisor), known for robust batch and transaction processing.\",\"Unix /etc/passwd \\\"gecos\\\" field traces back to GCOS interoperability; enterprises still run GCOS on Bull mainframes.\",\"GEM\",\"Graphics Environment Manager — a WIMP-style GUI from Digital Research, used on the Atari ST and Amstrad PCs.\",\"The GEM desktop environment; competitor to early Mac OS and Windows.\",\"GEOS\",\"Graphic Environment Operating System — a GUI-based operating system for 8-bit home computers and later for PCs.\",\"Popular on the Commodore 64; PC/GEOS was an alternative to early Windows.\",\"HMA\",\"High Memory Area — the first ~64KB of extended memory, made accessible in real mode on 286+ CPUs by manipulating the A20 line.\",\"Load DOS into the HMA (DOS=HIGH) to free up conventional memory.\",\"IRIX\",\"SGI's UNIX for MIPS workstations/servers; renowned for graphics and the original home of XFS; discontinued.\",\"SGI Octane/Onyx systems running IRIX; MIPSpro toolchain; legacy SGI graphics stacks.\",\"ITS\",\"Incompatible Timesharing System — MIT's hacker-centric time-sharing OS for the PDP-6 and PDP-10 that introduced extensible systems, open access, and influential developer culture.\",\"Hackers ran ITS on MIT AI Lab PDP-10s; today enthusiasts explore it via SIMH/KA/KI/KL emulators.\",\"LM\",\"LAN Manager — a network operating system (NOS) developed by Microsoft and 3Com, a predecessor to Windows NT Server.\",\"Competed with Novell NetWare; ran on OS/2.\",\"MFT\",\"Multiprogramming with a Fixed number of Tasks — an early configuration of IBM's OS/360 that managed a fixed number of concurrent jobs in static memory partitions.\",\"One of the primary OS/360 options alongside MVT (Variable number of Tasks).\",\"MP/M\",\"Multiprogramming Monitor for Microprocessors — a multi-user version of the CP/M operating system.\",\"Early 8-bit multi-user business systems; predecessor to Concurrent CP/M.\",\"MULTICS\",\"Multiplexed Information and Computing Service — ambitious time-sharing OS jointly developed by MIT, Bell Labs, and GE, pioneering concepts like hierarchical file systems, ring-based security, and dynamic linking.\",\"Ran on GE-645/Honeywell machines; inspired UNIX and modern OS designs; notable for shared memory segments and user ring protection.\",\"MULTICS\",\"Multiplexed Information and Computing Service — influential time‑sharing OS from MIT/GE/Bell Labs that inspired many UNIX concepts.\",\"1960s/70s mainframes; security and modular design influenced Unix.\",\"MVS\",\"Multiple Virtual Storage — mainstream IBM mainframe OS from the System/370 era onward, providing robust batch and transaction processing; evolved into OS/390 and z/OS.\",\"Run CICS/IMS transactions; submit JCL batch jobs; manage DASD with VSAM.\",\"MVT\",\"Multiprogramming with a Variable number of Tasks — a configuration of IBM's OS/360 that was a precursor to MVS, allowing for a dynamic number of concurrent jobs.\",\"One of the primary OS/360 options alongside MFT (Fixed number of Tasks).\",\"NLM\",\"NetWare Loadable Module — a server module (driver, application, or utility) that could be dynamically loaded and unloaded in the Novell NetWare operating system.\",\".NLM files for drivers and server applications on a NetWare server.\",\"OS/2\",\"IBM/Microsoft then IBM OS succeeding DOS.\",\"OS/2 Warp on 1990s PCs.\",\"OS/360\",\"Operating System/360 — IBM's influential mainframe OS for the System/360, introducing concepts like JCL, partitioned datasets, and a family of compatible systems.\",\"Run batch jobs with JCL; manage datasets on DASD; MFT/MVT variants.\",\"OS/370\",\"Operating System/370 — successor to OS/360 for System/370 mainframes, introducing virtual memory (SVS/MVS).\",\"MVS (Multiple Virtual Storage) became the mainstream OS/370 version.\",\"OS/390\",\"Successor to MVS/ESA, integrating UNIX services (USS) and other modern features into the core mainframe OS; predecessor to z/OS.\",\"Run UNIX and batch workloads on the same system; prepare for Y2K.\",\"OSF/1\",\"Open Software Foundation's UNIX, later Digital UNIX/Tru64; SVR4-based with Mach kernel components and advanced features.\",\"DEC Alpha systems running Digital UNIX; TruCluster high-availability.\",\"PLATO\",\"Programmed Logic for Automatic Teaching Operations — pioneering computer-based education system with touch-enabled terminals, graphical courseware, and early online community features (forums, chat).\",\"University of Illinois' PLATO IV terminals delivered interactive lessons and multiplayer games; influenced modern e-learning and social computing.\",\"RISC OS\",\"Acorn's desktop operating system for ARM-based Archimedes and Risc PC machines, featuring a WIMP interface and cooperative multitasking.\",\"Run on Acorn Archimedes/Risc PC systems; modern builds run RISC OS Open on Raspberry Pi.\",\"RSTS\",\"Resource Sharing Time-Sharing — DEC's multi-user PDP-11 operating system that merged RT-11 friendliness with RSX services for schools and business computing.\",\"Boot RSTS/E on a PDP-11 or under SIMH to run BASIC, COBOL, and timeshared workloads.\",\"RSX\",\"Real-Time System Executive — DEC's multi-user, multitasking real-time operating system family for PDP-11 minicomputers.\",\"Run RSX-11M/RSX-11M-Plus on PDP-11 hardware or via SIMH for industrial control and retrocomputing.\",\"RT-11\",\"Real-Time 11 — DEC's single-user real-time operating system for PDP-11 minicomputers, optimized for lab automation and embedded control.\",\"Load RT-11 from floppy/disk on PDP-11 hardware or run under SIMH for vintage development.\",\"SABRE\",\"Semi-Automated Business Research Environment — American Airlines/IBM's pioneering real-time airline reservation system derived from SAGE concepts.\",\"Early 1960s SABRE mainframes booked flights via networked agent terminals; evolved into modern Sabre GDS platforms.\",\"SAGE\",\"Semi-Automatic Ground Environment — Cold War-era air defense system combining massive AN/FSQ-7 computers, radar feeds, and real-time command software to track aircraft and coordinate intercepts.\",\"1950s USAF direction centers ran SAGE consoles and radar plots; preserved today via simulations and museum restorations.\",\"SVR4\",\"System V Release 4 — AT&T/Sun UNIX unifying System V, BSD, and Xenix features; foundation for many 1990s commercial UNIXes.\",\"Solaris 2.x and UnixWare derive from SVR4 with STREAMS networking and SVR4 package tools.\",\"TENEX\",\"TEN Executive — BBN's influential PDP-10 time-sharing operating system introducing demand paging, virtual memory, and ARPANET innovations that fed directly into DEC's TOPS-20.\",\"Early ARPANET nodes ran TENEX; features like the Exec shell, JSYS calls, and paging hardware shaped later TOPS-20 and other networked OSes.\",\"TOPS\",\"Total Operating System — DEC's time-sharing operating systems for the PDP-10/DECsystem-10 (TOPS-10) and DECsystem-20 (TOPS-20), foundational during the ARPANET era.\",\"Explore TOPS-10/TOPS-20 on emulated DECsystem hardware; develop with ITS-style monitors and early networking tools.\",\"TSR\",\"Terminate and Stay Resident — DOS resident utility/program.\",\"Keyboard macros/clock TSRs in MS-DOS.\",\"TSS/360\",\"Time Sharing System/360 — IBM's ambitious but troubled time-sharing operating system for the System/360 Model 67, introducing virtual memory and interactive access; lessons informed later VM/370.\",\"Provided remote terminal access on S/360-67 with DAT hardware; performance/complexity issues led IBM to focus on successor systems.\",\"UMA\",\"Upper Memory Area — the memory block between 640KB and 1MB on PCs, used for system BIOS, option ROMs, and video memory; free portions (UMBs) could map drivers/TSRs.\",\"Load drivers high with DEVICEHIGH in CONFIG.SYS to free conventional memory.\",\"VAXELN\",\"VAX Embedded Local Network — DEC's real-time operating system for VAX systems that provided networked, event-driven control applications with VMS tooling.\",\"Build VAXELN images on VMS hosts and deploy to VAX hardware or emulators for industrial automation use cases.\",\"VM/370\",\"Virtual Machine/370 — IBM's first official release of the VM hypervisor for the System/370, a landmark in virtualization.\",\"Predecessor to later VM/ESA and z/VM systems.\",\"VM/CMS\",\"Virtual Machine / Conversational Monitor System — the combination of the VM hypervisor and its single-user interactive CMS operating system.\",\"The primary user experience on IBM mainframe time-sharing systems.\",\"VMS\",\"Virtual Memory System — DEC's operating system for VAX (later Alpha/Itanium as OpenVMS), featuring robust clustering and security.\",\"VAX/VMS in enterprises; OpenVMS clusters with RMS/DCL.\",\"WAITS\",\"Stanford's timesharing system — derived from SAIL's modifications to DEC's TOPS-10 for PDP-10s, adding advanced editing, graphics, and music tooling that influenced interactive computing.\",\"Hosted SAIL's AI research tools, graphical displays, and early computer music systems; many WAITS ideas migrated back into TOPS-10/TOPS-20 ecosystems.\",\"WfW\",\"Windows for Workgroups — an early version of Microsoft Windows that integrated peer-to-peer networking directly into the OS.\",\"Windows 3.11 for Workgroups with File and Print Sharing.\",\"XMS\",\"Extended Memory Specification — standard for DOS programs to access extended memory (>1MB) on 286+ CPUs via a driver (HIMEM.SYS) and A20 gate control.\",\"Load DOS high (DOS=HIGH); use XMS for RAM disks and apps needing large buffers.\"]},\"12\":{\"h\":\"Document Markup\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"LaTeX\",\"Document preparation system built on TeX that provides high‑level markup for typesetting complex documents (sections, figures, bibliographies) with excellent math support.\",\"Write papers/books with LaTeX classes/packages; pdflatex/xelatex build pipelines.\",\"MD\",\"Markdown — lightweight plain‑text markup language for formatting documents with simple syntax for headings, lists, emphasis, links, and code.\",\"README.md, GitHub Flavored Markdown; code fences and tables in docs/blogs.\",\"RST\",\"reStructuredText — plaintext markup language used in the Python ecosystem and Sphinx documentation generator; emphasizes readable source and structured directives.\",\"Sphinx .rst docs with directives/roles; PyPI/ReadTheDocs project documentation.\",\"TeX\",\"Low‑level typesetting system designed by Donald Knuth providing precise control over layout and mathematics; foundation for LaTeX and many formats.\",\"Typeset math-heavy documents; plain TeX macros; outputs DVI/PDF via engines like pdfTeX/XeTeX/LuaTeX.\",\"XML\",\"Extensible Markup Language — verbose structured data.\",\"XML configs, SOAP payloads.\",\"XSLT\",\"Extensible Stylesheet Language Transformations — declarative language for transforming XML documents using template rules, XPath selection, and functions.\",\"Transform DocBook/XML to HTML/PDF with Saxon/Xalan; XSLT 1.0/2.0/3.0.\",\"Legacy\",\"DTD\",\"Document Type Definition — schema language defining the legal structure/elements/attributes of SGML/XML documents.\",\"Validate XML with a DTD; <!DOCTYPE ...> declarations; legacy vs XML Schema/Relax NG.\",\"XSD\",\"XML Schema Definition — the W3C standard for defining the structure and data types of XML documents; the powerful successor to DTD.\",\"Validate XML against an .xsd schema; generate code from schemas.\",\"Historical\",\"SGML\",\"Standard Generalized Markup Language — meta-language for defining markup languages; foundation for HTML/XML; rarely used directly today.\",\"SGML-based HTML 2.0/3.2 era; modern stacks use XML/HTML5 instead.\"]},\"13\":{\"h\":\"File Formats\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AAC\",\"Advanced Audio Coding — a lossy audio compression format that is the successor to MP3, offering better quality at similar bitrates.\",\"Standard audio format for YouTube, Apple devices, and digital video broadcasting.\",\"CAB\",\"Cabinet archive — Microsoft compressed archive format that supports embedded digital signatures and is commonly used to bundle Windows drivers, updates, and setup payloads.\",\"Windows Update distributions and driver packages ship .cab files; expand or DISM extracts them.\",\"CHM\",\"Compiled HTML Help — Microsoft compressed archive format packaging HTML, images, and navigation for offline help files, typically viewed via the WinHelp system.\",\"Windows applications shipped .chm manuals; hh.exe opens them; security hardening blocks untrusted CHMs.\",\"DVI\",\"Device Independent file format — TeX's output format describing pages and typeset content in a device‑agnostic way, later converted to PostScript/PDF or displayed via drivers.\",\"Generate .dvi from TeX; view/convert with dvips, dvipdfmx, or viewers like xdvi.\",\"EPUB\",\"Electronic Publication — a popular open standard for e-books, using web technologies like HTML, CSS, and SVG.\",\"Read .epub files on an e-reader or with a software viewer.\",\"ICO\",\"Icon file format — container for one or more images in various sizes/color depths, used for favicons and application icons.\",\"favicon.ico in the web root; Windows .exe icon resources.\",\"INF\",\"Setup Information file — plain-text configuration scripts that drive Windows installation and configuration of drivers, services, and components.\",\"Windows driver packages ship .inf files consumed by SetupAPI; pnputil adds or stages them.\",\"INI\",\"Initialization file — simple key/value configuration format organized into sections for Windows applications and many cross-platform tools.\",\".ini files under %WINDIR% or alongside apps; parsed by GetPrivateProfileString/config libraries.\",\"MSI\",\"Microsoft Installer package — database-backed installation package format used by Windows Installer to deploy applications, updates, and patches.\",\"Enterprise software ships .msi packages; msiexec installs/uninstalls with logging and transforms.\",\"OTF\",\"OpenType Font — cross-platform font format that can contain PostScript or TrueType outlines and supports advanced typographic features.\",\".otf fonts for professional typography; supersedes PostScript Type 1.\",\"PNG\",\"Portable Network Graphics — lossless raster image format with DEFLATE compression, alpha transparency, and gamma/metadata support.\",\".png UI assets/screenshots; better compression than BMP; supports transparency.\",\"PS\",\"PostScript — page description language and programming language used primarily in desktop publishing and printing workflows.\",\"Generate vector/print-ready .ps files; printers interpret PostScript directly; PDF evolved from it.\",\"SVG\",\"Scalable Vector Graphics — XML-based vector image format for resolution-independent graphics.\",\"Inline icons/diagrams in HTML; CSS/SMIL animations.\",\"TOML\",\"Tom's Obvious, Minimal Language — minimal configuration format with clear semantics.\",\"pyproject.toml, Cargo.toml tool configs.\",\"TTF\",\"TrueType Font — outline font format using quadratic Bézier curves; widely supported across operating systems and browsers.\",\".ttf fonts for desktop/web (often inside .ttc collections or wrapped as WOFF/WOFF2 for the web).\",\"WOFF\",\"Web Open Font Format — compressed container format for web fonts (TrueType/OpenType), enabling faster delivery; WOFF2 offers improved compression.\",\"Serve .woff2 with a .woff fallback for modern web typography.\",\"YAML\",\"Human-friendly serialization format.\",\"docker-compose.yml files.\",\"Legacy\",\"BMP\",\"Bitmap Image File — raster image format (Device‑Independent Bitmap) storing pixel data with optional RLE compression.\",\".bmp screenshots/icons; large files compared to PNG/JPEG.\",\"GIF\",\"Graphics Interchange Format — legacy lossless raster image format limited to 256 colors, best known for supporting simple animations.\",\"Animated memes; superseded by PNG for static images and APNG/video for complex animations.\",\"MP3\",\"MPEG-1 Audio Layer III — a popular lossy audio compression format that revolutionized digital music.\",\".mp3 files for music; superseded by AAC but still widely used.\",\"RTF\",\"Rich Text Format — plain-text document format with markup (control words and groups) for character/paragraph styling; widely supported across editors.\",\"Save/export .rtf from word processors to interchange formatted text.\"]},\"14\":{\"h\":\"Data Encodings\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"ASCII\",\"American Standard Code for Information Interchange — 7‑bit character encoding defining codes 0–127; subset of UTF‑8.\",\"Plain ASCII text files; printable characters and control codes.\",\"BOM\",\"Byte Order Mark — optional Unicode signature at the start of a text stream indicating endianness/encoding (UTF‑8/UTF‑16/UTF‑32).\",\"Avoid UTF‑8 BOM in Unix scripts; UTF‑16 LE files start with FE FF.\",\"CRLF\",\"Carriage Return + Line Feed — sequence \\\\r\\\\n used by Windows and many network protocols as a line terminator.\",\"HTTP headers and CSV on Windows use CRLF line endings.\",\"DER\",\"Distinguished Encoding Rules — binary ASN.1 encoding used for certificates/keys.\",\".cer/.der X.509 certs; binary form of ASN.1 structures.\",\"EBCDIC\",\"Extended Binary Coded Decimal Interchange Code — 8‑bit character encoding used primarily on IBM mainframes; incompatible with ASCII.\",\"Converting EBCDIC files to ASCII/UTF‑8 when integrating with mainframe systems.\",\"GUID\",\"Globally Unique Identifier — Microsoft’s term for UUID.\",\"{3F25...C3301} COM-style format.\",\"LF\",\"Line Feed — newline control character (0x0A) used by Unix/Linux/macOS to terminate lines.\",\"\\\\n in text files; contrast with CR (0x0D) and CRLF (\\\\r\\\\n).\",\"MIME\",\"Multipurpose Internet Mail Extensions — standardized media types and encoding for content on the internet.\",\"Content-Type: application/json; multipart/form-data with boundaries.\",\"PEM\",\"Privacy-Enhanced Mail — Base64 (PEM) encoding with header/footer lines for certs/keys.\",\"-----BEGIN CERTIFICATE----- blocks; .pem/.crt/.key files.\",\"UCS\",\"Universal Character Set — ISO/IEC 10646 standard defining the full repertoire of Unicode code points; Unicode is kept synchronized with UCS.\",\"UCS-2/UCS-4 historical encodings map to UTF‑16/UTF‑32; code points vs encodings distinction.\",\"UTF\",\"Unicode Transformation Format — encodings of Unicode code points (e.g., UTF‑8/UTF‑16/UTF‑32).\",\"UTF‑8 is the dominant encoding on the web and in APIs.\",\"UUID\",\"Universally Unique Identifier — 128-bit unique ID.\",\"UUID v4 random, v5 namespace.\",\"Legacy\",\"BCD\",\"Binary-Coded Decimal — encoding that represents each decimal digit with its own binary nibble (4 bits), enabling precise decimal arithmetic.\",\"Packed BCD in financial systems; CPU decimal adjust instructions (DAA/DAS).\",\"MBCS\",\"Multi-Byte Character Set — legacy variable-length encodings that use one or more bytes per character (often DBCS for CJK) prior to widespread Unicode adoption.\",\"Windows \\\"ANSI\\\" code pages (Shift_JIS, EUC‑JP); prefer UTF‑8 today.\",\"Historical\",\"CR\",\"Carriage Return — control character (0x0D) historically used to move the print head to column 0; used by classic Mac OS as line terminator.\",\"\\\\r in classic Mac text files; pairs with LF in CRLF on Windows.\"]},\"15\":{\"h\":\"Data Formats (Interchange)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"BSON\",\"Binary JSON — binary serialization format with typed fields and efficient encoding designed for fast traversal and in-place updates.\",\"MongoDB wire/storage format; supports types like ObjectId, Date, binary; drivers encode/decode BSON.\",\"CBOR\",\"Concise Binary Object Representation — compact, schema-optional binary data format designed for small code and message size (RFC 8949).\",\"IoT/API payloads with maps/arrays; COSE for CBOR Object Signing and Encryption; diagnostic notation for debugging.\",\"CSV\",\"Comma-Separated Values — plain text tabular format.\",\"users.csv exports/imports.\",\"HDF5\",\"Hierarchical Data Format version 5 — portable file format and library for storing large, complex, heterogeneous scientific data with groups/datasets and rich metadata.\",\"Store arrays/tables/images with chunking/compression; used in scientific computing and ML datasets.\",\"JSON\",\"JavaScript Object Notation — data format.\",\"{ \\\"id\\\": 1 } payloads.\",\"JSON-LD\",\"JSON for Linking Data — JSON‑based serialization for Linked Data/RDF that uses @context to map terms to IRIs and add semantics to JSON documents.\",\"Embed schema.org with <script type=\\\"application/ld+json\\\"> on web pages; exchange RDF graphs in JSON for knowledge graphs/APIs.\",\"JSONL\",\"JSON Lines — newline‑delimited JSON records for streaming/append‑friendly logs and datasets (aka NDJSON).\",\"One JSON object per line; easy to process with line‑oriented tools.\",\"netCDF\",\"Network Common Data Form — self‑describing, portable data formats and libraries for array‑oriented scientific data; supports classic (CDF), 64‑bit offset, and netCDF‑4/HDF5.\",\"Earth science datasets (grids/time series); interoperable with many scientific tools.\",\"ORC\",\"Optimized Row Columnar — columnar storage format optimized for analytics with predicate pushdown, compression, and statistics.\",\"Store big data tables in ORC on Hadoop/Spark; efficient scans and compression.\",\"OWL\",\"Web Ontology Language — a family of knowledge representation languages for authoring ontologies, based on RDF and standardized by the W3C.\",\"Define classes, properties, and relationships for a domain in an ontology.\",\"RDF\",\"Resource Description Framework — W3C model for describing and linking data using triples (subject–predicate–object), often serialized as Turtle/RDF/XML/JSON‑LD.\",\"Knowledge graphs, linked data; schema.org markup via JSON‑LD.\",\"RDFS\",\"RDF Schema — a vocabulary for defining classes and properties for RDF data, providing a basic ontology framework.\",\"rdfs:Class, rdfs:subClassOf, rdfs:domain, rdfs:range.\",\"SKOS\",\"Simple Knowledge Organization System — a W3C standard for representing knowledge organization systems like thesauruses and taxonomies.\",\"Define concepts with skos:Concept and relationships like skos:broader.\",\"SPARQL\",\"SPARQL Protocol and RDF Query Language — the standard query language for RDF databases (triple stores).\",\"SELECT ?s ?p ?o WHERE { ?s ?p ?o } to query a graph.\",\"TSV\",\"Tab-Separated Values — plain text tabular format using tabs as delimiters.\",\"users.tsv exports with tab‑delimited fields.\",\"Legacy\",\"FOAF\",\"Friend of a Friend — one of the earliest and most famous Semantic Web ontologies, used to describe people and their relationships.\",\"Define a person's profile using foaf:Person, foaf:name, foaf:knows.\",\"JSONP\",\"JSON with Padding — legacy technique to circumvent same‑origin policy by wrapping JSON in a callback for script tags.\",\"callback({ ... }) responses consumed via <script>; replaced by CORS.\",\"MARC\",\"Machine-Readable Cataloging — a standard for the representation and communication of bibliographic and related information in machine-readable form.\",\"Library automation systems use MARC records to manage catalogs.\",\"RSS\",\"Really Simple Syndication — XML-based web feed format for publishing updates.\",\"Blog feed at /feed.xml; subscribe in a feed reader.\"]},\"16\":{\"h\":\"Data Formats (Compression & Archival)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"7z\",\"7‑Zip archive format — open archive container supporting solid compression, advanced filters, and high ratios via LZMA/LZMA2 and others.\",\"Create/extract with 7z a archive.7z files/ and 7z x; widely used for high‑ratio packaging.\",\"BZIP2\",\"Burrows–Wheeler block-sorting compressor — high compression ratio with moderate CPU cost; slower than gzip, faster than xz in many cases.\",\"Compress archives/logs: bzip2 file, tar -cjf archive.tar.bz2 dir/; .bz2 packages.\",\"DEFLATE\",\"Lossless compression format combining LZ77 sliding‑window dictionary with Huffman coding; ubiquitous in ZIP, gzip, and PNG.\",\"Compress HTTP responses (Content‑Encoding: gzip/deflate), ZIP entries, and PNG image data.\",\"GZIP\",\"GNU Zip — widely used lossless compression format using DEFLATE (LZ77+Huffman); good balance of speed and ratio.\",\"Compress streams/files: gzip file, tar -czf archive.tar.gz dir/; HTTP Content-Encoding: gzip.\",\"JAR\",\"Java ARchive — ZIP‑based archive format for packaging Java classes/resources and metadata (META-INF/MANIFEST.MF); supports signing and class‑path entries.\",\"Build/run .jar apps (jar cfm app.jar MANIFEST.MF -C out/ .); libraries on the classpath; fat/uber JARs bundle deps.\",\"LZ4\",\"Extremely fast lossless compression algorithm optimized for speed with modest compression ratios.\",\"Compress logs/IPC payloads with LZ4 for low latency; .lz4 frames.\",\"LZ77\",\"Lempel–Ziv 1977 — dictionary-based lossless compression using a sliding window and back‑references (length, distance) to past data.\",\"Foundation for DEFLATE (gzip/ZIP) and many formats; emits literals and copy tokens.\",\"LZMA\",\"Lempel–Ziv–Markov chain Algorithm — high‑ratio lossless compression with larger memory use and slower speeds than DEFLATE; foundation for 7z and XZ (LZMA2).\",\"Create 7z archives with LZMA/LZMA2; xz uses LZMA2 for .xz/.tar.xz.\",\"RAR\",\"Roshal Archive — proprietary archive format supporting solid compression, recovery records, and strong encryption; widely used but not fully open.\",\"Create/extract with WinRAR/rar/unrar; .rar multi‑part volumes; consider 7z/zip for openness.\",\"RLE\",\"Run-Length Encoding — simple lossless compression that replaces runs of repeated symbols with a count and value.\",\"Bitmap/scanline compression (e.g., BMP RLE, fax/CCITT variants); good for large uniform areas.\",\"TAR\",\"Tape ARchive — stream/archive format that bundles multiple files/directories with metadata into a single sequential archive; often compressed (e.g., .tar.gz/.tgz).\",\"Create/extract backups: tar -czf backup.tgz dir/; used for packaging and distribution.\",\"XZ\",\"XZ Utils format — high‑ratio lossless compression using LZMA2 with solid archives and strong compression at the cost of CPU/time.\",\"Compress release artifacts/logs: tar -cJf, xz -T0 file; .tar.xz packages in Linux distros.\",\"ZIP\",\"ZIP archive format — ubiquitous container supporting per‑file compression (typically DEFLATE), random access, and metadata; widely supported on all platforms.\",\".zip files; zip/unzip; JAR/APK/Office Open XML use ZIP containers.\",\"ZSTD\",\"Zstandard — modern fast lossless compression algorithm offering high ratios with very high decompression speed; supports dictionaries.\",\"Compress artifacts/logs with zstd; .zst files; use dictionaries for small data.\",\"Legacy\",\"LZW\",\"Lempel–Ziv–Welch — dictionary-based lossless compression algorithm historically used in GIF and some TIFF variants; now patent-free.\",\"Classic GIF image compression; replace with PNG for lossless images.\"]},\"17\":{\"h\":\"Data Processing\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"ACID\",\"Atomicity, Consistency, Isolation, Durability — transaction guarantees.\",\"Bank transfer completes fully or not at all.\",\"ADO.NET\",\"ActiveX Data Objects .NET — the modern data access framework for the .NET platform, succeeding classic ADO.\",\"SqlConnection and DataSet for database operations in C#/VB.NET.\",\"BASE\",\"Basically Available, Soft state, Eventual consistency — distributed tradeoff.\",\"Eventual consistency across regions.\",\"BI\",\"Business Intelligence — processes/tools to analyze business data for insights and decision‑making.\",\"Dashboards and reports in Looker/Power BI over a warehouse.\",\"BLOB\",\"Binary Large Object — large binary field in a DB.\",\"Store images/files as BLOBs or in object storage.\",\"CAP\",\"Consistency, Availability, Partition tolerance — favor two under partition.\",\"AP systems may return stale data during splits.\",\"CBO\",\"Cost-Based Optimizer — query planner that chooses execution plans by estimating cost using statistics.\",\"Analyze stats; planner picks index scan vs full scan.\",\"CDC\",\"Change Data Capture — stream DB changes.\",\"Debezium publishes events to Kafka.\",\"CRDT\",\"Conflict-free Replicated Data Type — data structures that merge deterministically without coordination for eventual consistency.\",\"LWW-Element-Set, G-Counter; collaborative docs with Automerge/Yjs.\",\"CTE\",\"Common Table Expression — named temporary result set referenced within a statement.\",\"WITH recent AS (SELECT ...) SELECT * FROM recent WHERE ....\",\"DB\",\"Database — organized data managed by a DBMS.\",\"Postgres/MySQL database with tables, indexes, and transactions.\",\"DB2\",\"DB2 — IBM's family of relational database management systems (RDBMS) running on platforms from Linux/Unix/Windows to mainframes (z/OS).\",\"Enterprise data warehousing and OLTP on DB2 for z/OS or LUW.\",\"DBMS\",\"Database Management System — software that manages databases, provides storage, query, and transaction processing.\",\"PostgreSQL, MySQL, SQLite, Oracle, SQL Server.\",\"DDL\",\"Data Definition Language — SQL for defining/modifying schema objects.\",\"CREATE TABLE, ALTER TABLE, CREATE INDEX.\",\"DLQ\",\"Dead Letter Queue — holding queue/topic for messages/events that could not be processed or delivered after retries, isolating poison messages for inspection and remediation.\",\"SQS redrive policy sends failed messages to a DLQ; Kafka error/\\\"-dlq\\\" topic.\",\"DML\",\"Data Manipulation Language — SQL for querying and changing data.\",\"SELECT, INSERT, UPDATE, DELETE.\",\"DW\",\"Data Warehouse — centralized, integrated repository optimized for analytics.\",\"Snowflake/BigQuery/Redshift with star/snowflake schemas.\",\"EF\",\"Entity Framework — Microsoft's object-relational mapping (ORM) framework for .NET.\",\"Map database tables to C# objects with EF Core; use LINQ to query data.\",\"ELT\",\"Extract, Load, Transform — load raw data then transform in the warehouse.\",\"Modern ELT with dbt/BigQuery.\",\"ERD\",\"Entity Relationship Diagram — visual schema modeling notation that captures entities, their attributes, and relationships/cardinalities before implementing a database.\",\"Sketch an ERD in crow's-foot notation to model Customer–Order–OrderLine relationships prior to creating tables.\",\"ETL\",\"Extract, Transform, Load — data integration pipeline.\",\"Batch load to data warehouse.\",\"FK\",\"Foreign Key — constraint that enforces referential integrity by requiring values to exist in a referenced table.\",\"orders.user_id references users.id; ON DELETE CASCADE.\",\"GIS\",\"Geographic Information System — system for capturing, storing, analyzing, and managing spatial or geographic data.\",\"Analyze spatial data with ArcGIS or QGIS; build location-aware apps.\",\"HLL\",\"HyperLogLog — probabilistic algorithm for cardinality (distinct count) estimation that uses fixed, small memory with tunable relative error via stochastic averaging of leading-zero counts.\",\"Approximate unique users/events with ~1–2% error using kilobytes of memory; streaming distinct counts in analytics pipelines.\",\"LSMT\",\"Log-Structured Merge-Tree — write-optimized indexing/storage structure that buffers writes in memory and flushes them as sorted runs (SSTables) to disk, with background compaction/merging; lowers random writes at the cost of read/space amplification.\",\"Used by LevelDB/RocksDB; LSM-based stores like Cassandra and HBase.\",\"MQ\",\"Message Queue — durable, asynchronous messaging channel that buffers messages between producers and consumers to decouple services and smooth load.\",\"RabbitMQ/SQS enqueue events; workers consume from the queue to process jobs off the critical path.\",\"MVCC\",\"Multi-Version Concurrency Control — concurrency control that lets readers and writers proceed by keeping multiple row versions and using snapshot visibility rules.\",\"PostgreSQL snapshot reads; VACUUM removes obsolete versions.\",\"NoSQL\",\"Non-relational DBs: documents, key-values, graphs, wide columns.\",\"MongoDB, Redis, Cassandra.\",\"OLAP\",\"Online Analytical Processing — read-heavy analytics.\",\"BI cubes, columnar stores.\",\"OLTP\",\"Online Transaction Processing — write-heavy transactions.\",\"Order processing systems.\",\"PK\",\"Primary Key — unique, non-null identifier for a table row.\",\"users(id UUID PRIMARY KEY); composite keys across columns.\",\"RDBMS\",\"Relational Database Management System — DBMS based on the relational model using tables, rows, and SQL with constraints and ACID transactions.\",\"PostgreSQL, MySQL, SQL Server, Oracle; normalized schemas and joins.\",\"RDD\",\"Resilient Distributed Dataset — fault-tolerant distributed collection in Apache Spark enabling parallel transformations across partitions with lineage-based recovery.\",\"Spark job transforms an RDD with rdd.map()/filter() and caches it via persist() for reuse.\",\"SQL\",\"Structured Query Language — query/manage relational DBs.\",\"SELECT * FROM users.\",\"WAL\",\"Write-Ahead Logging — durability mechanism that writes log records before data pages.\",\"PostgreSQL WAL for crash recovery and replication.\",\"Legacy\",\"ADO\",\"ActiveX Data Objects — a legacy Microsoft data access framework for connecting to databases from languages like classic VB and ASP.\",\"ADODB.Connection and Recordset objects for database queries.\",\"CICS\",\"Customer Information Control System — IBM mainframe transaction processing monitor that provides high-volume, secure, and reliable online transaction processing.\",\"Legacy banking and airline systems running CICS transactions.\",\"CODASYL\",\"Conference/Committee on Data Systems Languages — consortium behind COBOL and the DBTG network database model that specified schemas, subschemas, and navigation APIs for early DBMS.\",\"CODASYL DBTG specs defined the network data model adopted by IDS, IDMS, and other mainframe DBMSs.\",\"DAO\",\"Data Access Objects — a legacy Microsoft data access API primarily used for accessing Jet (Microsoft Access) databases.\",\"Predecessor to ADO; used heavily in classic VB applications.\",\"IDMS\",\"Integrated Database Management System — commercial network database derived from IDS, providing CODASYL DBTG-compliant data/navigation on IBM mainframes.\",\"CA-IDMS on IBM z/OS runs core enterprise apps using CODASYL sets and schemas.\",\"IDS\",\"Integrated Data Store — Charles Bachman’s pioneering network database management system for GE mainframes, influencing CODASYL DBTG standards and later products like IDMS.\",\"Run IDS/II on GE 600/635 systems to model hierarchical/network data; precursor to commercial IDMS releases.\",\"IMS\",\"Information Management System — IBM's combined hierarchical database and transaction manager for mainframes, a precursor to relational databases.\",\"High-performance transaction processing on z/OS; IMS DB/DC.\",\"OLE DB\",\"Object Linking and Embedding, Database — a low-level Microsoft API for accessing a wide variety of data sources.\",\"The underlying interface for ADO; connect to SQL Server via the OLE DB provider.\",\"RDO\",\"Remote Data Objects — a legacy Microsoft data access API for remote relational databases, superseded by ADO.\",\"Early client-server applications in Visual Basic connecting to SQL Server.\",\"VSAM\",\"Virtual Storage Access Method — the primary data storage method on IBM z/OS for structured data.\",\"Key-sequenced datasets (KSDS) used by CICS and batch applications.\"]},\"18\":{\"h\":\"Artificial Intelligence\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AI\",\"Artificial Intelligence — techniques that enable machines to perform tasks associated with human intelligence (learning, perception, reasoning).\",\"Use ML/DL models to power AI features like recommendations.\",\"ANN\",\"Artificial Neural Network — computational model inspired by biological neurons, used for function approximation and pattern recognition.\",\"MLPs for tabular data; feedforward nets for classification.\",\"CNN\",\"Convolutional Neural Network — neural network architecture specialized for grid‑like data using convolutional filters.\",\"Image classification/segmentation models.\",\"CoT\",\"Chain-of-Thought — prompting technique to elicit step-by-step reasoning.\",\"\\\"Let's think step by step\\\" to improve math/logic.\",\"GPT\",\"Generative Pre-trained Transformer — transformer-based LLM architecture pre-trained on large text corpora and fine-tuned for tasks.\",\"GPT-4 class models for chat, code, and reasoning.\",\"LLM\",\"Large Language Model — NLP model for generation/reasoning.\",\"GPT/Llama used via APIs or locally.\",\"MCP\",\"Model Context Protocol — open protocol to expose tools/data to LLM clients via standardized servers.\",\"Run an MCP server to provide DB/filesystem tools to an LLM client.\",\"MoE\",\"Mixture of Experts — sparse expert routing to scale parameters with near-constant compute.\",\"Router selects top‑k experts per token (Switch-Transformer).\",\"NER\",\"Named Entity Recognition — extract and label entities in text.\",\"Tag PERSON/ORG/LOC from documents.\",\"NLP\",\"Natural Language Processing — techniques for understanding and generating human language.\",\"Text classification, NER, summarization, translation.\",\"OCR\",\"Optical Character Recognition — convert images/scans of text into machine‑encoded text using computer vision and sequence models.\",\"Tesseract or deep‑learning OCR to extract text from documents/receipts.\",\"RAG\",\"Retrieval-Augmented Generation — ground model outputs by retrieving external knowledge at query time.\",\"Retrieve top‑k docs from a vector store and include them in the prompt.\",\"RL\",\"Reinforcement Learning — learning by interaction with an environment via rewards.\",\"Q‑learning, policy gradients; RLHF for model alignment.\",\"RLHF\",\"Reinforcement Learning from Human Feedback — align models using human preference signals via a learned reward model.\",\"Collect preference pairs, train a reward model, then fine‑tune with PPO.\",\"RNN\",\"Recurrent Neural Network — sequence model with recurrent connections.\",\"LSTM/GRU for language modeling and time series.\",\"SFT\",\"Supervised Fine-Tuning — fine‑tune a pretrained model on labeled input–output pairs to specialize behavior.\",\"Fine‑tune a base LLM on instruction datasets before RLHF.\",\"TTS\",\"Text-to-Speech — synthesize speech audio from text.\",\"Generate spoken responses from a chatbot.\",\"VLM\",\"Vision-Language Model — jointly processes images and text.\",\"CLIP, BLIP, LLaVA for captioning and VQA.\"]},\"19\":{\"h\":\"Reliability & Operations\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"DR\",\"Disaster Recovery — restore service after catastrophic failure.\",\"DR runbooks; backup restore drills.\",\"HA\",\"High Availability — design to minimize downtime.\",\"Multi-zone deployment with failover.\",\"MTTR\",\"Mean Time To Repair/Recover — restore time after failure.\",\"Track MTTR per incident.\",\"RCA\",\"Root Cause Analysis — identify underlying cause.\",\"Postmortem documents.\",\"RPO\",\"Recovery Point Objective — max acceptable data loss.\",\"5-minute RPO via frequent backups.\",\"RTO\",\"Recovery Time Objective — target restore time.\",\"30-minute RTO for tier-1 services.\",\"SLA\",\"Service Level Agreement — contractual target.\",\"99.9% monthly uptime.\",\"SLI\",\"Service Level Indicator — measured metric.\",\"Request success rate, p95 latency.\",\"SLO\",\"Service Level Objective — internal target.\",\"99.95% quarterly availability.\",\"SPOF\",\"Single Point Of Failure — outage if it fails.\",\"Single DB primary without replica.\",\"SRE\",\"Site Reliability Engineering — SWE meets ops.\",\"Error budgets, toil reduction.\"]},\"20\":{\"h\":\"Performance & Metrics\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"Apdex\",\"Application Performance Index — satisfaction score based on latency thresholds.\",\"Apdex ≥ 0.9 target.\",\"APM\",\"Application Performance Monitoring — traces/metrics/errors for apps.\",\"Distributed tracing spans across services.\",\"CLS\",\"Cumulative Layout Shift — visual stability (Web Vitals).\",\"CLS < 0.1.\",\"FLOPS\",\"Floating-Point Operations Per Second — measure of compute performance for CPUs/GPUs/accelerators.\",\"GPU rated at 30 TFLOPS; benchmark sustained vs peak GFLOPS.\",\"FPS\",\"Frames Per Second — render/update frequency for graphics/video; higher is smoother within latency/refresh constraints.\",\"Games target 60+ FPS; VR aims for 90–120 FPS.\",\"INP\",\"Interaction to Next Paint — user input responsiveness (Web Vitals).\",\"INP < 200 ms.\",\"IOPS\",\"Input/Output Operations Per Second — storage throughput measurement.\",\"NVMe SSD sustaining 500k+ random read IOPS.\",\"IPC\",\"Instructions Per Clock/Cycle — measure of a CPU's architectural efficiency, independent of clock speed.\",\"A CPU with higher IPC can be faster than one with a higher clock rate.\",\"LCP\",\"Largest Contentful Paint — main content render time (Web Vitals).\",\"LCP < 2.5 s.\",\"LoC\",\"Lines of Code — simple size metric counting source lines; can indicate scope but is a poor proxy for complexity or value.\",\"Compare module sizes; avoid using LoC alone for productivity.\",\"MIPS\",\"Million Instructions Per Second — rough measure of integer instruction throughput; varies widely by ISA and instruction complexity.\",\"Historical CPU comparisons; not comparable across architectures/workloads.\",\"P50/P95/P99\",\"Latency percentiles — response time distribution.\",\"P95 latency under 250 ms.\",\"RPS/QPS\",\"Requests/Queries Per Second — service throughput.\",\"API serves 2k RPS at peak.\",\"RUM\",\"Real User Monitoring — measurements from real users.\",\"In-browser beacons for Web Vitals.\",\"TPS\",\"Transactions Per Second — business-level throughput.\",\"Payments at 150 TPS during sale.\",\"TTFB\",\"Time To First Byte — time to first response byte.\",\"Aim for TTFB < 200 ms.\",\"TTI\",\"Time To Interactive — page becomes reliably usable.\",\"TTI ~ 3.0 s.\"]},\"21\":{\"h\":\"Networking & Protocols\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AMQP\",\"Advanced Message Queuing Protocol — open standard for asynchronous messaging between applications, enabling reliable, interoperable, and feature-rich communication.\",\"RabbitMQ/ActiveMQ brokers implementing AMQP 0-9-1 or 1.0 for queuing and routing.\",\"ARP\",\"Address Resolution Protocol — map IP addresses to MAC addresses on a LAN.\",\"ARP cache; gratuitous ARP.\",\"AS\",\"Autonomous System — a collection of IP networks under a single administrative control, identified by an ASN and used in BGP routing.\",\"An ISP, a university, or a large tech company's network.\",\"ASN\",\"Autonomous System Number — a globally unique identifier for a network, used in BGP routing.\",\"ISP route announcements include their ASN; AS15169 is Google's ASN.\",\"BGP\",\"Border Gateway Protocol — inter-domain routing protocol of the internet.\",\"ISP peering and route advertisements.\",\"BIND\",\"Berkeley Internet Name Domain — a widely used, open-source DNS server.\",\"Configure zones in named.conf; query a BIND server with dig.\",\"BPF\",\"Berkeley Packet Filter — kernel-level virtual machine for packet filtering/observability (eBPF on modern kernels).\",\"Capture packets with tcpdump; eBPF programs for tracing.\",\"CIDR\",\"Classless Inter-Domain Routing — notation for IP prefixes and aggregation.\",\"10.0.0.0/16 VPC; subnetting /24; route summarization.\",\"CNAME\",\"Canonical Name — DNS record that aliases one hostname to another.\",\"www CNAME to example.com; avoid at zone apex without ALIAS/ANAME.\",\"CLNP\",\"Connectionless Network Protocol — OSI layer 3 datagram protocol (ISO/IEC 8473) that provides connectionless packet delivery using NSAP addressing within OSI stacks.\",\"DECnet/OSI and X.25 backbones carried CLNP traffic with IS-IS routing NSAP-addressed packets between hosts.\",\"NSAP\",\"Network Service Access Point — OSI network-layer address format carrying AFI/IDI and DSP fields used by CLNP/IS-IS instead of IP addresses.\",\"An OSI host might use NSAP 49.0001.1921.6800.1001.00 with IS-IS routing NSAP prefixes across an OSI backbone.\",\"CR-LDP\",\"Constraint-Based Routed Label Distribution Protocol — MPLS TE signaling that extends LDP with constraint advertisement and explicit route objects to set up engineered LSPs without RSVP.\",\"Some carriers historically deployed CR-LDP to establish bandwidth-guaranteed LSPs before migrating to RSVP-TE.\",\"CRC\",\"Cyclic Redundancy Check — an error-detecting code used to detect accidental changes to digital data.\",\"Ethernet frame check sequence (FCS); CRC-32 in ZIP/PNG files.\",\"DHCP\",\"Dynamic Host Configuration Protocol — automatic IP configuration.\",\"DHCP assigns IP/gateway/DNS.\",\"DHT\",\"Distributed Hash Table — decentralized key-value store that partitions data across a peer-to-peer network, enabling scalable lookups without a central server.\",\"BitTorrent Mainline DHT for peer discovery; IPFS for content addressing.\",\"DoH\",\"DNS over HTTPS — perform DNS resolution over HTTPS for privacy/integrity.\",\"https://dns.google/dns-query DoH endpoint.\",\"DWDM\",\"Dense Wavelength Division Multiplexing — optical multiplexing technique that carries many tightly spaced light wavelengths on a single fiber pair to massively increase backbone capacity.\",\"Telco long-haul links stack 100G/400G channels with DWDM mux/demux gear and optical amplifiers.\",\"FC\",\"Fibre Channel — high‑speed serial transport for storage networking (SANs) with switched fabrics, typically 8/16/32 Gbit/s, carrying SCSI/FCP.\",\"Connect hosts to SAN arrays over FC via HBAs and switches; zoning and LUN masking.\",\"FDDI\",\"Fiber Distributed Data Interface — ANSI token-ring LAN standard operating at 100 Mbit/s over dual counter-rotating fiber rings with timed token passing and built-in redundancy; once popular for campus backbones before Fast/Gigabit Ethernet.\",\"Interconnect building LANs via FDDI dual rings, with automatic wrap-around on fiber breaks to maintain service.\",\"HDLC\",\"High-Level Data Link Control — ISO bit-oriented layer 2 protocol using frame flag delimiters, bit stuffing, and sliding-window ARQ; foundation for derivatives like SDLC, LAPB, PPP, and Frame Relay.\",\"Serial WAN links encapsulating packets in HDLC frames; routers using Cisco HDLC or LAPD signaling over ISDN.\",\"HTTP\",\"Hypertext Transfer Protocol — web application protocol.\",\"GET /index.html over TCP.\",\"HTTPS\",\"HTTP over TLS — encrypted HTTP.\",\"Padlock in browsers.\",\"ICMP\",\"Internet Control Message Protocol — diagnostics/control.\",\"ping uses Echo Request/Reply.\",\"IMAP\",\"Internet Message Access Protocol — email retrieval/sync.\",\"Mail clients syncing mailboxes.\",\"IP\",\"Internet Protocol — addressing/routing (IPv4/IPv6).\",\"Packet delivery across networks.\",\"IPsec\",\"Internet Protocol Security — suite of protocols for authenticating and encrypting IP packets at the network layer (AH/ESP) with key exchange via IKE.\",\"Site-to-site or remote-access VPNs using IKEv2 with ESP in tunnel mode; transport mode for host-to-host.\",\"iSCSI\",\"Internet Small Computer Systems Interface — block storage protocol that encapsulates SCSI commands over TCP/IP.\",\"Connect initiators to targets on port 3260; boot from SAN; map LUNs over the network.\",\"ISP\",\"Internet Service Provider — company that provides internet connectivity and related services.\",\"Residential broadband, business fiber links, and transit.\",\"L2TP\",\"Layer 2 Tunneling Protocol — encapsulates PPP frames to create tunnels across IP networks, typically paired with IPsec for encryption/authentication.\",\"Remote-access VPN uses L2TP over IPsec (UDP 1701/500/4500) to tunnel client traffic through a secure gateway.\",\"LAN\",\"Local Area Network — network covering a limited geographic area such as a home, office, or campus.\",\"Ethernet/Wi‑Fi LAN with switches and access points.\",\"LDAP\",\"Lightweight Directory Access Protocol — protocol for accessing and managing directory services.\",\"Authenticate/lookup users and groups in an LDAP directory.\",\"LDP\",\"Label Distribution Protocol — MPLS control plane that advertises label bindings between neighbors to build label-switched paths based on IGP routes without explicit traffic engineering.\",\"ISPs run LDP over their IGP so MPLS L3VPNs follow OSPF/IS-IS shortest paths by default.\",\"LSP\",\"Label-Switched Path — the unidirectional MPLS forwarding path created by label bindings that steer packets hop by hop through an MPLS network.\",\"Traffic for a VPN flows along an LSP signaled by LDP or RSVP-TE from ingress PE to egress PE.\",\"MAC\",\"Media Access Control — data-link sublayer that governs medium access, framing, and addressing on LANs.\",\"Ethernet MAC handles frame delimiting, MAC addressing, and channel access.\",\"MPLS\",\"Multiprotocol Label Switching — high-performance packet forwarding that uses short labels to make traffic-engineered L2.5 paths across provider cores.\",\"ISP backbone uses MPLS L3VPNs/TE to steer customer traffic and provide QoS across the WAN.\",\"MPLS-TE\",\"MPLS Traffic Engineering — extensions that compute constraint-based LSPs using RSVP-TE/CR-LDP to steer traffic along engineered paths that meet bandwidth, affinity, and protection requirements.\",\"Carriers pin backup-capable label-switched paths around congested links using RSVP-TE with fast reroute.\",\"MQTT\",\"Message Queuing Telemetry Transport — lightweight publish-subscribe protocol for constrained devices and low-bandwidth, high-latency networks; widely used in IoT.\",\"IoT sensors publishing telemetry to an MQTT broker; mobile push notifications.\",\"MTU\",\"Maximum Transmission Unit — largest payload size (in bytes) that can be sent in a single layer‑2 frame without fragmentation.\",\"Ethernet MTU 1500; jumbo frames MTU 9000; Path MTU Discovery avoids fragmentation.\",\"MX\",\"Mail Exchanger — DNS record that specifies the mail servers responsible for accepting email for a domain, with preferences for priority/failover.\",\"example.com. MX 10 mail1.example.com. and MX 20 mail2.example.com. as backup.\",\"NAT\",\"Network Address Translation — remap private to public addresses.\",\"Home routers performing PAT.\",\"NFS\",\"Network File System — distributed file system protocol for sharing files over a network.\",\"Mount remote directories via NFSv3/NFSv4.\",\"NS\",\"Name Server — DNS server authoritative for a zone; also the DNS record type that delegates to authoritative servers.\",\"NS records pointing to ns1.example.com for a domain.\",\"NTP\",\"Network Time Protocol — synchronize clocks over networks using a hierarchy of time sources.\",\"chrony/ntpd syncing to NTP servers (stratum levels).\",\"OSI\",\"Open Systems Interconnection — conceptual seven‑layer networking reference model for describing protocols and interoperability (Layers 1–7: Physical→Application).\",\"Map protocols to layers (e.g., Ethernet=L2, IP=L3, TCP=L4, HTTP=L7); teaching/troubleshooting taxonomy.\",\"OSPF\",\"Open Shortest Path First — interior gateway routing protocol.\",\"Multi-area OSPF in enterprises.\",\"OTN\",\"Optical Transport Network — ITU-T G.709 digital wrapper standard that multiplexes client signals into optical channels with forward error correction and management for carrier backbones.\",\"Carriers groom Ethernet/SONET traffic into ODUk containers and transport them over OTU4 wavelengths with OTN switches.\",\"P2P\",\"Peer-to-Peer — decentralized communication model where nodes act as both clients and servers without a central coordinator.\",\"BitTorrent swarms; WebRTC data channels; DHT-based peer discovery.\",\"PoE\",\"Power over Ethernet — standard for providing electrical power through Ethernet cables to devices like IP cameras, VoIP phones, and wireless access points.\",\"802.3af/at/bt standards for PoE/PoE+/PoE++.\",\"QoS\",\"Quality of Service — mechanisms that classify and prioritize traffic to meet latency, jitter, and loss requirements.\",\"Configure DiffServ/DSCP queues on routers to give voice and video higher priority than bulk data.\",\"QUIC\",\"Quick UDP Internet Connections — encrypted, multiplexed transport over UDP.\",\"HTTP/3 runs over QUIC.\",\"RDP\",\"Remote Desktop Protocol — a proprietary protocol from Microsoft for remote access to a graphical user interface on a Windows machine.\",\"Connect to a Windows server with an RDP client; mstsc.exe.\",\"RSVP-TE\",\"Resource Reservation Protocol - Traffic Engineering — MPLS control-plane signaling that establishes label-switched paths with bandwidth reservations using RSVP extensions for constraints, fast reroute, and preemption.\",\"Configure RSVP-TE tunnels between provider edge routers to reserve 10 Gbit/s paths with explicit hop lists and standby LSPs.\",\"SDH\",\"Synchronous Digital Hierarchy — ITU-T optical transport standard harmonizing SONET internationally with STM/STM-N rates, VC containers, and automatic protection switching for carrier backbones.\",\"European telcos running STM-16/STM-64 rings that interop with SONET via gateways; metro networks reroute around fiber faults in <50 ms.\",\"SFTP\",\"SSH File Transfer Protocol — file transfer over SSH.\",\"sftp user@host uploads/downloads.\",\"SMB\",\"Server Message Block — network file/printer sharing protocol used mainly by Windows; modern versions (SMBv2/v3) support signing/encryption.\",\"Mount \\\\\\\\server\\\\share; Samba on Unix; avoid SMBv1 due to security issues.\",\"SMTP\",\"Simple Mail Transfer Protocol — send email.\",\"MTA relaying messages.\",\"SNMP\",\"Simple Network Management Protocol — protocol for monitoring and managing networked devices via a hierarchical MIB of OIDs, supporting polling and asynchronous traps/informs.\",\"Poll interfaces/CPU via GET/GETNEXT/GETBULK; receive traps; v1/v2c (community) and v3 (auth/privacy).\",\"SONET\",\"Synchronous Optical Network — ANSI fiber transport standard using time-division multiplexed frames (STS/OC rates) with built-in protection switching; interoperable internationally via ITU-T SDH.\",\"Telco backbones delivering OC-3/OC-12/OC-192 rings for voice/data; metro rings that auto-switch on fiber cuts.\",\"SR-MPLS\",\"Segment Routing over MPLS — control plane that encodes segment routing label stacks in MPLS to replace LDP/RSVP, enabling source-routed paths, traffic engineering, and fast reroute with simplified signaling.\",\"Deploy SR-MPLS in a service provider core so ingress routers push segment lists to steer L3VPN traffic without RSVP-TE.\",\"SRv6\",\"Segment Routing over IPv6 — segment routing data plane that encodes instruction lists in IPv6 Segment Routing Headers (SRH), enabling source-routed paths, service chaining, and traffic engineering without MPLS labels.\",\"Use SRv6 in a SP core so packets carry SID lists (2001:db8::A, ::B) to steer flows through specific functions or nodes; integrate with SRv6 TE and network programming.\",\"SSE\",\"Server-Sent Events — HTTP-based server→client stream.\",\"EventSource('/events').\",\"STP\",\"Spanning Tree Protocol — network protocol that ensures a loop-free topology for bridged Ethernet networks.\",\"Switches running STP/RSTP to prevent broadcast storms.\",\"TCP\",\"Transmission Control Protocol — reliable byte stream.\",\"HTTP, TLS use TCP.\",\"TCP/IP\",\"Transmission Control Protocol / Internet Protocol — foundational internet protocol suite encompassing transport, network, and related layers.\",\"Classic network stack model; \\\"TCP/IP networking\\\" on UNIX systems.\",\"TLD\",\"Top-Level Domain — the highest level in the DNS hierarchy, forming the rightmost label of a domain name.\",\".com, .org, country-code TLDs like .uk; ICANN-managed root zone.\",\"TTL\",\"Time To Live — lifetime for packets/cached records.\",\"DNS TTL controls cache duration.\",\"UDP\",\"User Datagram Protocol — connectionless, low-latency.\",\"DNS, streaming.\",\"UNC\",\"Universal Naming Convention — Windows network path notation for accessing resources by server/share.\",\"\\\\\\\\\\\\\\\\server\\\\\\\\share\\\\\\\\folder\\\\\\\\file.txt; used with SMB.\",\"VLAN\",\"Virtual Local Area Network — Layer 2 network segmentation on a switch, isolating broadcast domains; tagging via IEEE 802.1Q.\",\"VLAN 10/20 on access/trunk ports; tagged vs untagged frames.\",\"WAN\",\"Wide Area Network — network spanning large geographic areas interconnecting LANs over provider links or the public internet.\",\"MPLS links, SD‑WAN, site‑to‑site VPN between offices.\",\"WebRTC\",\"Web Real-Time Communication — a framework providing browsers and mobile applications with real-time communication (RTC) capabilities via simple APIs.\",\"Peer-to-peer video conferencing, screen sharing, and data channels in the browser.\",\"WHOIS\",\"WHOIS protocol — query/response protocol for retrieving registration information about internet resources such as domain names and IP address allocations.\",\"whois example.com to get registrar/registrant data; RDAP is the modern HTTP-based successor.\",\"WS\",\"WebSocket — full-duplex over single TCP connection.\",\"ws://example.com/socket.\",\"WSS\",\"WebSocket Secure — WebSocket over TLS.\",\"wss://example.com/socket.\",\"Legacy\",\"ADSL\",\"Asymmetric Digital Subscriber Line — a common type of DSL where download speeds are faster than upload speeds.\",\"Consumer broadband over telephone lines.\",\"CSU\",\"Channel Service Unit — legacy telco/customer-premises device that terminates a digital leased circuit, provides line conditioning/loopback diagnostics, and hands off a clean interface to a paired DSU or router.\",\"Standalone CSU on a T1 line or integrated CSU/DSU modules in enterprise routers delivering telco-managed point-to-point links.\",\"DCE\",\"Data Circuit-terminating Equipment — provides clocking, signal conversion, and circuit termination for serial/WAN links so attached DTEs can communicate.\",\"CSU/DSU, cable/DSL modems, and telco demarc gear act as the DCE in leased-line setups.\",\"DSL\",\"Digital Subscriber Line — a family of technologies for transmitting digital data over telephone lines.\",\"ADSL, SDSL, VDSL are all types of DSL.\",\"DSU\",\"Data Service Unit — legacy digital modem that converts the CSU-provided line signal into synchronous serial presented to DTE gear, completing the CSU/DSU pair on leased circuits.\",\"External DSUs or router interface cards carrying T1/E1 circuits expose V.35/RS-449 ports for routers/terminals.\",\"DTE\",\"Data Terminal Equipment — end device that connects to a DCE to originate or receive data on a serial/WAN circuit, typically providing clocking recovery from the DCE.\",\"Routers, terminals, or customer-edge gear plugging into a CSU/DSU; use show controllers serial to verify DTE/DCE role via cable pinout.\",\"FTP\",\"File Transfer Protocol — legacy, unencrypted by default.\",\"ftp client for file transfers.\",\"FTPS\",\"FTP over TLS — encrypted FTP.\",\"Implicit/explicit FTPS modes.\",\"iPXE\",\"Open-source network boot firmware/bootloader extending PXE with HTTP(S), iSCSI, FCoE, AoE, scripts, and TLS.\",\"Chainload iPXE via PXE; fetch an HTTPS boot script to load kernel/initrd.\",\"IRC\",\"Internet Relay Chat — real-time text messaging protocol and networks for group channels and direct messages.\",\"Join #project on Libera Chat using irssi or WeeChat.\",\"NBT\",\"NetBIOS over TCP/IP — transport that carries NetBIOS name, datagram, and session traffic over TCP/UDP (ports 137–139) so legacy NetBIOS applications work on IP networks.\",\"Keep NBT only for backward compatibility with old Windows clients/printers; disable when moving fully to DNS/SMB over TCP 445.\",\"NetBEUI\",\"NetBIOS Extended User Interface — non-routable, broadcast-heavy transport protocol for NetBIOS communications on small LANs; superseded by NBT/TCP/IP.\",\"Early Windows peer-to-peer networking used NetBEUI; administrators removed it when migrating to TCP/IP-based SMB.\",\"NetBIOS\",\"Network Basic Input/Output System — legacy API and naming services that provided session/datagram communication atop early LAN transports (NetBEUI, IPX/SPX, later NBT).\",\"DOS/Windows for Workgroups apps used NetBIOS names for SMB file/print sharing; modern AD domains phase out NetBIOS names in favor of DNS.\",\"NIS\",\"Network Information Service — a legacy Unix directory service for distributing system configuration data like user and host names between computers on a network.\",\"Originally known as Yellow Pages (YP); superseded by LDAP.\",\"NNTP\",\"Network News Transfer Protocol — application protocol for distributing, querying, and posting Usenet articles over TCP.\",\"Connect to Usenet servers on 119 (or 563 for NNTPS) to read/post news.\",\"POP3\",\"Post Office Protocol v3 — simple email retrieval.\",\"Fetch-and-delete mailbox flow.\",\"PPP\",\"Point-to-Point Protocol — data link layer protocol for encapsulating network traffic over serial links; supports authentication, compression, and multilink.\",\"Dial-up links; PPPoE for broadband; CHAP/PAP authentication.\",\"PPTP\",\"Point-to-Point Tunneling Protocol — legacy VPN tunneling protocol that encapsulates PPP over GRE with MPPE encryption; considered insecure and deprecated.\",\"Historical Windows VPNs using PPTP; replace with IPsec/OpenVPN/WireGuard/L2TP over IPsec.\",\"PXE\",\"Preboot Execution Environment — standard for network booting clients using DHCP/BOOTP to obtain boot info and TFTP/HTTP to fetch boot loaders/images.\",\"PXE boot a workstation from a provisioning server into an installer.\",\"RIP\",\"Routing Information Protocol — distance-vector interior gateway protocol using hop count as its metric with periodic full-table updates.\",\"RIP v2 on small LANs; max 15 hops; split horizon/poison reverse to mitigate loops.\",\"RLOGIN\",\"Remote Login — BSD plaintext remote login protocol; superseded by SSH.\",\"rlogin host for interactive sessions on legacy UNIX systems.\",\"RSH\",\"Remote Shell — BSD plaintext remote command execution; superseded by SSH.\",\"rsh host command on legacy UNIX; avoid due to lack of security.\",\"TFTP\",\"Trivial File Transfer Protocol — simple UDP-based file transfer protocol commonly used for network boot and configuration.\",\"PXE firmware downloads boot images via TFTP; no auth/encryption.\",\"UPnP\",\"Universal Plug and Play — discovery and control protocols for devices/services on a local network; includes IGD for NAT port mappings.\",\"Home routers auto‑open ports via UPnP IGD; device discovery/control on LANs.\",\"VDSL\",\"Very-high-bit-rate Digital Subscriber Line — a faster version of DSL, often used for fiber-to-the-curb deployments.\",\"Higher speeds over shorter distances than ADSL.\",\"WINS\",\"Windows Internet Name Service — Microsoft's legacy database-backed NetBIOS name resolution service that replicates between servers and integrates with DHCP for old Windows clients.\",\"Maintain WINS servers in mixed Active Directory environments; DHCP option 44/46 hands out WINS server IPs to legacy nodes.\",\"XMPP\",\"Extensible Messaging and Presence Protocol — open, federated XML-based protocol for instant messaging and presence.\",\"Jabber, Google Talk (legacy); used in federated chat and IoT.\",\"Historical\",\"AIM\",\"AOL Instant Messenger — a pioneering instant messaging service from AOL, popular in the late 1990s and 2000s.\",\"Buddy Lists, away messages, and chat sounds.\",\"ARPANET\",\"Advanced Research Projects Agency Network — pioneering packet‑switched network and direct precursor to the modern Internet.\",\"1969 UCLA–SRI link; IMPs; 1983 cutover from NCP to TCP/IP.\",\"ATM\",\"Asynchronous Transfer Mode — a telecommunications standard for cell-based switching, designed for high-speed voice, video, and data.\",\"Used in telco backbones and for DSL; superseded by IP-based networks.\",\"BBS\",\"Bulletin Board System — pre‑web dial‑up systems.\",\"Modem dial‑ins for forums/files before the web.\",\"BITNET\",\"Because It’s Time Network — early academic store-and-forward network linking universities via leased lines using IBM’s RSCS protocol; provided email, file transfer, and LISTSERV mailing lists.\",\"Colleges connected mainframes to BITNET in the 1980s; LISTSERV communities flourished before widespread internet access.\",\"USENET\",\"User Network — decentralized, distributed discussion system operating via the UUCP and later NNTP protocols, enabling newsgroups and threaded conversations across servers worldwide.\",\"1980s/1990s communities exchanged posts in comp.*, sci.*, alt.* newsgroups replicated between sites; content accessible via NNTP readers.\",\"BOOTP\",\"Bootstrap Protocol — assigns IP configuration to diskless clients at boot, predecessor to DHCP.\",\"Network boot ROM requests IP/gateway/TFTP server; largely replaced by DHCP.\",\"CSMA/CD\",\"Carrier-Sense Multiple Access with Collision Detection — media access control method used by early Ethernet on a shared bus.\",\"Half-duplex hubs; nodes listen before transmitting and detect collisions.\",\"CSNET\",\"Computer Science Network — an early computer network that provided services to university computer science departments, funded by the NSF.\",\"A key stepping stone between ARPANET and the modern internet.\",\"CYCLADES\",\"French research packet-switching network (CYCLADES project) that pioneered datagrams, host responsibility for reliability, and end-to-end design principles that influenced TCP/IP.\",\"1970s French R&D network connecting CYCLADES hosts via CIGALE routers; experience informed the Internet's datagram model.\",\"DECnet\",\"Digital Equipment Corporation's proprietary network protocol suite for DEC systems; largely superseded by TCP/IP.\",\"VAX/VMS clusters and DEC systems communicating over DECnet Phase IV/V.\",\"ICQ\",\"\\\"I Seek You\\\" — one of the first internet-wide instant messaging services.\",\"User identification numbers (UINs) and the \\\"uh-oh!\\\" sound.\",\"JANET\",\"Joint Academic Network — the UK’s national research and education network providing high-speed connectivity and services for universities, colleges, and research institutions.\",\"JANET interconnects UK campuses, data centers, and global research networks via the backbone operated by Jisc.\",\"IPX\",\"Internetwork Packet Exchange — Novell's network-layer protocol used with SPX and NetWare; replaced by IP in modern networks.\",\"Legacy NetWare LANs using IPX addressing and routing.\",\"ISDN\",\"Integrated Services Digital Network — circuit‑switched digital telephony offering voice and data over PSTN with separate bearer/signaling channels.\",\"BRI (2B+D) for small sites; PRI (23B+D NA / 30B+D EU) for trunks.\",\"MILNET\",\"Military Network — the DoD-operated segment of the ARPANET split off in 1983 to carry unclassified military traffic while academic research continued on the remaining ARPANET.\",\"MILNET backbone connected defense sites and gateways, later evolving into the Defense Data Network and precursors to NIPRNet.\",\"MSN\",\"The Microsoft Network — an early online service and ISP from Microsoft, later known for its web portal and instant messenger.\",\"MSN Messenger was a major competitor to AIM and ICQ.\",\"NCP\",\"NetWare Core Protocol — Novell NetWare file/print service protocol suite running over IPX/SPX (later IP).\",\"Legacy NetWare clients mapping drives/printers via NCP.\",\"NCP\",\"Network Control Program — early ARPANET host protocol providing a transport layer and flow control prior to the adoption of TCP/IP.\",\"Used until the 1983 flag day cutover to TCP/IP; sockets over NCP.\",\"NDS\",\"Novell Directory Services — directory service for managing identities, resources, and access in Novell NetWare environments (later evolved into eDirectory).\",\"Centralized users/groups/policies across NetWare; replaced/renamed as eDirectory.\",\"NSFNET\",\"National Science Foundation Network — U.S. government-funded backbone that expanded academic access to the ARPANET successor, catalyzing the transition to today’s commercial internet before its 1995 decommissioning.\",\"Regional networks connected to NSFNET T1/T3 backbones; commercial ISPs emerged as NSFNET traffic opened to broader use.\",\"PAD\",\"Packet Assembler/Disassembler — X.25-era device that buffered character-stream or async terminal traffic and converted it to packets for a public data network (and vice versa).\",\"Retail POS terminals or green-screen async devices connected through a PAD to reach hosts over public X.25 services.\",\"PUP\",\"PARC Universal Packet — early internetworking protocol suite developed at Xerox PARC that influenced XNS and later networking concepts.\",\"Historical LAN internetworking; precursor to concepts adopted in later stacks.\",\"RARP\",\"Reverse Address Resolution Protocol — legacy protocol for discovering an IP address given a MAC address.\",\"Early diskless boot; superseded by BOOTP/DHCP.\",\"SDLC\",\"Synchronous Data Link Control — IBM's bit-oriented data link layer protocol for SNA networks, using poll/select over multi-drop lines; superseded by HDLC-derived standards and TCP/IP transports.\",\"Host mainframes controlling remote 3270/3780 cluster controllers across leased lines via SDLC.\",\"SLIP\",\"Serial Line Internet Protocol — simple encapsulation of IP over serial links; lacks features like authentication, negotiation, and error detection.\",\"Early dial-up IP connectivity; superseded by PPP.\",\"SNA\",\"Systems Network Architecture — IBM's proprietary networking architecture for mainframes and enterprise networks; largely superseded by TCP/IP.\",\"IBM 3270/5250 terminals and LU types; later SNA over IP via Enterprise Extender.\",\"SPX\",\"Sequenced Packet Exchange — Novell's transport-layer protocol running over IPX, analogous to TCP; superseded by TCP/IP.\",\"NetWare clients/servers using IPX/SPX for file/print services.\",\"UUCP\",\"Unix-to-Unix Copy Protocol — store-and-forward system for transferring files, email, and netnews over dial-up/serial links; pre-internet era networking.\",\"Early email/news via bang paths (uucp!host!user); largely replaced by SMTP/NNTP over IP.\",\"UUNET\",\"Unix-to-Unix Network — one of the first commercial internet service providers, evolving from a Usenet feed service into a major backbone operator that helped commercialize internet access.\",\"Provided UUCP/Usenet feeds, then IP transit and dial-up services before mergers into MCI/WorldCom.\",\"WAIS\",\"Wide Area Information Servers — early distributed document indexing/search and retrieval system predating modern web search; used client/server over Z39.50.\",\"1990s internet search across WAIS servers before mainstream web engines.\",\"X.25\",\"ITU-T legacy packet-switched WAN protocol using virtual circuits over carrier networks; superseded by Frame Relay/ATM/IP.\",\"Early bank/pos/leased-line links using X.25 PADs and PVC/SVC connections.\",\"XNS\",\"Xerox Network Systems — Xerox's network protocol suite from PARC that influenced later protocols (e.g., IPX/SPX, AppleTalk).\",\"Historical LAN stack alongside SNA/DECnet; precursor ideas to modern networking.\"]},\"22\":{\"h\":\"Security\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"2FA\",\"Two-Factor Authentication — two independent proofs of identity.\",\"Password + TOTP device.\",\"ABAC\",\"Attribute-Based Access Control — attribute-driven permissions.\",\"Policies on user/resource attributes.\",\"ACL\",\"Access Control List — list of permissions attached to an object specifying which principals are allowed which operations.\",\"Filesystem/network ACLs granting read/write/execute or allow/deny rules.\",\"AES\",\"Advanced Encryption Standard — widely used symmetric block cipher (Rijndael) with 128‑bit blocks and 128/192/256‑bit keys.\",\"AES‑GCM for TLS and at‑rest encryption.\",\"BYOD\",\"Bring Your Own Device — policy allowing use of personal devices for work, requiring security controls and management.\",\"Enforce MDM, device compliance, and conditional access for email/apps.\",\"BYOK\",\"Bring Your Own Key — customer-managed encryption keys used with a cloud provider’s services instead of provider‑managed keys.\",\"Store CMKs in KMS/HSM; configure services to use them; rotate regularly.\",\"CA\",\"Certificate Authority — issues digital certificates (X.509).\",\"Let's Encrypt TLS certs.\",\"CFI\",\"Control-Flow Integrity — restricts indirect branches/returns to valid targets to thwart code‑reuse attacks (ROP/JOP).\",\"LLVM/Clang CFI, Intel CET/IBT, ARM Pointer Authentication (PAC) harden control flow.\",\"CORS\",\"Cross-Origin Resource Sharing — control cross-site requests.\",\"Allow specific origins/headers.\",\"CSP\",\"Content Security Policy — control resource loading; mitigate XSS.\",\"default-src 'self'.\",\"CSRF\",\"Cross-Site Request Forgery — unintended actions by a victim.\",\"CSRF tokens, same-site cookies.\",\"CVE\",\"Common Vulnerabilities and Exposures — public identifier for disclosed security issues.\",\"CVE-2024-XXXXX referenced in advisories and patches.\",\"DAST\",\"Dynamic App Security Testing — test running apps.\",\"Zap/Burp scans.\",\"DDoS\",\"Distributed Denial of Service — many-source DoS.\",\"Botnet floods traffic.\",\"DKIM\",\"DomainKeys Identified Mail — cryptographic email authentication using domain-signed headers.\",\"Receivers verify DKIM-Signature with the sender's DNS key.\",\"DMARC\",\"Domain-based Message Authentication, Reporting, and Conformance — email authentication policy leveraging SPF and DKIM with alignment and reporting.\",\"Publish v=DMARC1; p=quarantine; rua=mailto:dmarc@example.com.\",\"DoS\",\"Denial of Service — make a service unavailable.\",\"Single-source flood.\",\"DRM\",\"Digital Rights Management — technologies to control access, copying, and usage of digital content via encryption and licensing.\",\"Browser EME with Widevine/PlayReady; app checks license server before playback.\",\"GPG\",\"GNU Privacy Guard — OpenPGP implementation.\",\"gpg --sign --encrypt file.\",\"HMAC\",\"Hash-based Message Authentication Code — keyed hash for message integrity and authenticity.\",\"HMAC‑SHA256 for API request signing; JWT HS256.\",\"HSM\",\"Hardware Security Module — tamper‑resistant hardware appliance or cloud service for secure key generation, storage, and cryptographic operations with strong access controls and auditing.\",\"Use an HSM/KMS to generate and store TLS/CA private keys; perform signing inside the module.\",\"HSTS\",\"HTTP Strict Transport Security — force HTTPS for a period.\",\"Strict-Transport-Security header.\",\"IAM\",\"Identity and Access Management — users/roles/permissions.\",\"Cloud IAM policies.\",\"IDS\",\"Intrusion Detection System — monitors networks/hosts for malicious activity or policy violations, generating alerts for investigation.\",\"Network IDS like Zeek/Snort; host IDS like OSSEC/Wazuh; alert to SIEM.\",\"IPS\",\"Intrusion Prevention System — inline security control that inspects traffic/events and can automatically block or remediate detected threats.\",\"IPS mode in next‑gen firewalls; Snort/Suricata inline dropping malicious packets.\",\"JWT\",\"JSON Web Token — compact auth/claims token.\",\"Authorization: Bearer <jwt>.\",\"MAC\",\"Message Authentication Code — short, fixed-length tag produced from a message and secret key that enables verification of message integrity and authenticity.\",\"Compute an AES-CMAC or HMAC-SHA256 over API payloads; receivers recompute the MAC to detect tampering.\",\"MDM\",\"Mobile Device Management — administer and secure mobile/end-user devices via policies, enrollment, and remote actions.\",\"Enforce passcodes, disk encryption, app whitelists; remote wipe on loss.\",\"MFA\",\"Multi-Factor Authentication — 2+ factors.\",\"Password + hardware key.\",\"MITM\",\"Man-In-The-Middle — intercept/alter comms.\",\"Rogue Wi-Fi AP sniffing.\",\"mTLS\",\"Mutual TLS — both client and server present certificates.\",\"Service-to-service auth in meshes.\",\"NX\",\"No-eXecute bit — CPU feature that marks memory pages as non-executable to prevent code execution from data segments like the stack and heap.\",\"OS sets the NX bit on the stack to mitigate buffer overflows; also known as DEP/XD/W^X.\",\"OAuth\",\"Delegated authorization protocol.\",\"Access token for API calls.\",\"OIDC\",\"OpenID Connect — identity layer over OAuth 2.0.\",\"ID token for login.\",\"OTP\",\"One-Time Password — short‑lived code used for authentication; delivered or generated per login.\",\"App‑generated TOTP/HOTP codes; avoid SMS OTP when possible.\",\"PGP\",\"Pretty Good Privacy — encryption/signing format.\",\"Email encryption/signing.\",\"PKCS\",\"Public-Key Cryptography Standards — RSA-led standards defining formats and algorithms used in public-key crypto.\",\"PKCS #1 (RSA), #7/CMS (cryptographic messages), #8 (private keys), #12 (PFX/P12), #5 (PBES), #10 (CSR).\",\"PKI\",\"Public Key Infrastructure — system of CAs, certs, keys, and policies.\",\"Issue and validate X.509 certs.\",\"PoLP\",\"Principle of Least Privilege — grant only the minimum permissions necessary for a user or system to perform its function.\",\"IAM roles with narrowly scoped permissions; run services as non-root users.\",\"RBAC\",\"Role-Based Access Control — role-granted permissions.\",\"Admin/Editor/Viewer roles.\",\"RCE\",\"Remote Code Execution — run arbitrary code remotely.\",\"Deserialization exploit.\",\"ROP\",\"Return-Oriented Programming — code reuse attack that chains existing instruction sequences (\\\"gadgets\\\") ending in ret to execute arbitrary code, bypassing DEP/NX.\",\"Chain ROP gadgets from loaded libraries to call mprotect and make the stack executable.\",\"RSA\",\"Rivest–Shamir–Adleman — widely used public‑key cryptosystem for encryption and signatures.\",\"2048‑bit RSA keys; RSA‑PKCS#1 signatures; TLS certs.\",\"SAM\",\"Security Accounts Manager — the database in Windows that stores user passwords (as hashes) and security principals.\",\"The SAM file (%SystemRoot%/system32/config/SAM); lsass.exe protects it.\",\"SAST\",\"Static App Security Testing — analyze code/binaries.\",\"SAST pipeline checks.\",\"SBOM\",\"Software Bill of Materials — inventory of components, dependencies, and versions in software artifacts for transparency and vulnerability management.\",\"Generate CycloneDX/SPDX SBOMs in CI; scan against CVEs.\",\"SFI\",\"Software Fault Isolation — security technique that sandboxes untrusted code by rewriting its machine code to prevent it from accessing memory or calling functions outside its designated region.\",\"Google Native Client (NaCl) uses SFI to safely run native code in the browser.\",\"SHA\",\"Secure Hash Algorithm — family of cryptographic hash functions (SHA‑2/256/512; SHA‑3/Keccak).\",\"TLS cert signatures, file integrity checks; Git moving from SHA‑1 to SHA‑256.\",\"SPF\",\"Sender Policy Framework — DNS-based mechanism to authorize mail servers for a domain.\",\"v=spf1 ip4:203.0.113.0/24 -all record.\",\"SQLi\",\"SQL Injection — inject SQL via input.\",\"Parameterized queries prevent it.\",\"SSH\",\"Secure Shell — encrypted remote login/exec.\",\"ssh user@host.\",\"SSO\",\"Single Sign-On — authenticate once, access many apps.\",\"SAML/OIDC-based SSO.\",\"SSRF\",\"Server-Side Request Forgery — trick server to make requests.\",\"Block metadata endpoints.\",\"TLS\",\"Transport Layer Security — secure comms.\",\"HTTPS uses TLS.\",\"TOTP\",\"Time-Based One-Time Password — time-synced one-time codes.\",\"Authenticator app 6-digit codes.\",\"XSRF\",\"Alternate name for CSRF in some frameworks.\",\"Angular XSRF-TOKEN cookie/header.\",\"XSS\",\"Cross-Site Scripting — script injection into pages.\",\"Output encoding, CSP.\",\"Legacy\",\"MD5\",\"Message Digest Algorithm 5 — legacy 128-bit cryptographic hash function; cryptographically broken (collisions) and unsuitable for security, but still used for checksums.\",\"md5sum file.iso to verify integrity; avoid for passwords/signatures.\",\"NTLM\",\"NT LAN Manager — a legacy Microsoft authentication protocol suite, superseded by Kerberos.\",\"Windows workgroup authentication; fallback when Kerberos is unavailable.\",\"RACF\",\"Resource Access Control Facility — the primary security system on IBM mainframes (z/OS), controlling access to datasets, applications, and system resources.\",\"Define user profiles and grant dataset access with RACF commands.\",\"Historical\",\"SSL\",\"Secure Sockets Layer — legacy to TLS.\",\"Deprecated; use TLS.\"]},\"23\":{\"h\":\"Privacy\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"CCPA\",\"California Consumer Privacy Act — US privacy law granting rights to access, delete, and opt out of sale of personal data.\",\"Add Do Not Sell link; handle access/deletion requests.\",\"CPRA\",\"California Privacy Rights Act — amends/expands CCPA with new rights (correction), sensitive data category, and the CPPA regulator.\",\"Honor opt-out for sharing; handle sensitive PI with limits.\",\"DSAR\",\"Data Subject Access Request — request by an individual to access, correct, delete, or obtain a copy of their personal data.\",\"Process access/erasure/portability requests within statutory timelines.\",\"GDPR\",\"General Data Protection Regulation — EU law governing personal data protection, rights, and obligations.\",\"Lawful basis, DPO, DPIA; data subject rights (access/erasure/portability).\",\"HIPAA\",\"Health Insurance Portability and Accountability Act — US law setting privacy/security standards for protected health information (PHI).\",\"Covered entities sign BAAs; apply the HIPAA Privacy/Security Rules.\",\"PII\",\"Personally Identifiable Information — data that can identify an individual; subject to privacy laws and safeguards.\",\"Names, emails, SSNs; apply minimization, masking, and access controls.\"]},\"24\":{\"h\":\"Infrastructure\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AD\",\"Active Directory — Microsoft identity directory service.\",\"Centralized auth/authorization.\",\"CDN\",\"Content Delivery Network — globally distributed cache.\",\"Faster static asset delivery.\",\"DNS\",\"Domain Name System — resolve names to IPs.\",\"A, AAAA, CNAME records.\",\"DNSSEC\",\"Domain Name System Security Extensions — adds origin authentication and data integrity to DNS using digital signatures (RRSIG) validated via a chain of trust from signed zones and DS records.\",\"Sign zones with ZSK/KSK; validators check RRSIGs and DS chain from the root; prevents cache poisoning/spoofing.\",\"FaaS\",\"Function as a Service — serverless functions.\",\"AWS Lambda handlers.\",\"FQDN\",\"Fully Qualified Domain Name — complete, absolute domain name that specifies all labels up to the root.\",\"host1.db.eu-west.example.com. (trailing dot optional in practice).\",\"HPC\",\"High-Performance Computing — parallel, large-scale compute using clusters/supercomputers for scientific/engineering workloads.\",\"Run MPI/Slurm jobs on a GPU/CPU cluster with InfiniBand.\",\"IaaS\",\"Infrastructure as a Service — virtual compute/storage/network.\",\"EC2/Compute Engine.\",\"IaC\",\"Infrastructure as Code — manage infrastructure with code and VCS.\",\"Use Terraform to provision cloud resources via PRs.\",\"IoT\",\"Internet of Things — networked embedded devices and sensors that collect data and interact with the physical world.\",\"MQTT devices sending telemetry to an IoT hub.\",\"K8S\",\"Kubernetes — container orchestration.\",\"kubectl get pods.\",\"KMS\",\"Key Management Service — managed key storage and cryptographic operations.\",\"AWS KMS for envelope encryption and key rotation.\",\"KVM\",\"Kernel-based Virtual Machine — Linux kernel virtualization enabling VMs with hardware acceleration via KVM modules.\",\"Run QEMU with KVM for near-native performance; manage with libvirt/virt-manager.\",\"LB\",\"Load Balancer — distributes traffic across multiple backends for scalability and resilience.\",\"AWS ALB/NLB, HAProxy/Nginx with health checks and stickiness.\",\"LXC\",\"Linux Containers — OS-level virtualization using cgroups/namespaces to isolate processes.\",\"Run lightweight containers without a separate kernel per instance.\",\"MPI\",\"Message Passing Interface — standardized API for distributed-memory parallel programming using processes that communicate via messages.\",\"Launch ranks with mpirun (OpenMPI/MPICH); use collectives like MPI_Bcast/MPI_Reduce.\",\"NAS\",\"Network-Attached Storage — dedicated file storage accessible over a network.\",\"Home/SMB NAS appliances exposing NFS/SMB shares.\",\"OCI\",\"Open Container Initiative — specs for container images and runtimes.\",\"OCI Image format and OCI Runtime (runc).\",\"PaaS\",\"Platform as a Service — deploy apps without infra mgmt.\",\"Heroku, App Engine.\",\"QEMU\",\"Quick EMUlator — open-source machine emulator and virtualizer supporting full-system emulation and hardware-accelerated virtualization across many architectures.\",\"Boot ARM or RISC-V guests with qemu-system-*; pair with KVM for x86 virtualization on Linux hosts.\",\"SaaS\",\"Software as a Service — subscription-based software.\",\"Hosted CRM/Email.\",\"SAN\",\"Storage Area Network — high-speed network providing block-level storage access to servers.\",\"Fibre Channel/iSCSI SAN for shared volumes.\",\"SIMH\",\"Simulator for Historical Computers — open-source emulator suite for classic minicomputers/mainframes (PDP-11, VAX, IBM 1401, etc.), preserving vintage software environments.\",\"Boot a PDP-11 running RT-11/RSX or a VAX/VMS system image for retrocomputing and software archaeology.\",\"TCG\",\"Tiny Code Generator — QEMU's dynamic binary translation engine that recompiles guest CPU instructions into host machine code at runtime when hardware acceleration isn't available.\",\"Run QEMU in pure emulation mode; TCG translates ARM guest opcodes to x86 host instructions on the fly.\",\"UPS\",\"Uninterruptible Power Supply — device providing battery-backed power to keep equipment running through short outages and allow graceful shutdown.\",\"Rack UPS for servers/network gear; runtime and VA/W ratings.\",\"VM\",\"Virtual Machine — emulated hardware environment to run OS instances.\",\"KVM/Hyper-V VMs for isolation.\",\"VPC\",\"Virtual Private Cloud — isolated virtual network.\",\"Subnets, route tables, SGs.\",\"VPN\",\"Virtual Private Network — secure tunnel.\",\"Site-to-site/client VPN.\"]},\"25\":{\"h\":\"Hardware (Architecture)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AMD64\",\"64-bit x86 architecture introduced by AMD (aka x86-64, adopted by Intel as Intel 64) extending IA-32 with 64-bit registers, more general-purpose registers, and long mode.\",\"Build for x86_64/amd64; Linux System V AMD64 ABI; Windows x64 with WOW64 for 32-bit apps.\",\"ARM\",\"Advanced RISC Machines — 32-bit RISC architecture (AArch32) originating from Acorn, spanning ARMv1-v7 cores widely used in mobile, embedded, and microcontroller systems.\",\"Cross-compile for armv7/armhf; run 32-bit ARM Linux on Raspberry Pi models or Cortex-M firmware.\",\"ARM64\",\"64-bit ARM architecture (aka AArch64, ARMv8-A and later) with a new instruction set and execution state distinct from 32-bit ARM (AArch32).\",\"Build for arm64/aarch64; Apple Silicon Macs, AWS Graviton/Neoverse servers, Android flagship SoCs.\",\"ASIC\",\"Application-Specific Integrated Circuit — a chip customized for a particular use, rather than for general-purpose use like a CPU.\",\"Bitcoin mining ASICs; Google TPU for machine learning.\",\"CHERI\",\"Capability Hardware Enhanced RISC Instructions — architectural extensions that add tagged, unforgeable capabilities to enforce fine‑grained memory safety and compartmentalization.\",\"CHERI‑RISC‑V/MIPS; pointers carry bounds/permissions; safer C/C++ and sandboxing.\",\"CISC\",\"Complex Instruction Set Computer — CPU design approach featuring larger, more complex, and variable‑length instructions, often implemented with microcode.\",\"x86/x86‑64 architectures; REP MOVS, string ops, rich addressing modes.\",\"CUDA\",\"Compute Unified Device Architecture — NVIDIA's parallel computing platform and programming model for GPUs.\",\"Launch kernels in CUDA C++; PyTorch/TensorFlow GPU ops.\",\"EM64T\",\"Extended Memory 64 Technology — Intel’s original branding for its AMD64‑compatible 64‑bit x86 implementation, now marketed as Intel 64.\",\"Intel Core/Xeon CPUs report Intel 64; target x86_64 in toolchains.\",\"IA-32\",\"32‑bit Intel architecture — the classic 32‑bit x86 ISA (i386 and successors) with protected mode, paging, and SSE-era extensions; predecessor to x86‑64.\",\"Build for x86/i386/i686; 32‑bit OSes/apps, WOW64 on Windows x64, multilib on Linux.\",\"ISA\",\"Instruction Set Architecture — contract describing a CPU’s instructions, registers, memory model, and privilege levels; distinct from microarchitecture.\",\"x86‑64, ARMv8‑A; RISC‑V RV64GC with optional extensions.\",\"MIPS\",\"Microprocessor without Interlocked Pipeline Stages — classic RISC architecture used in embedded systems, networking gear, and historically in workstations/servers.\",\"MIPS32/MIPS64 in routers and embedded devices; historical SGI workstations/IRIX.\",\"NUMA\",\"Non-Uniform Memory Access — architecture where memory access latency and bandwidth vary depending on whether memory is local to a CPU socket/node or remote.\",\"Pin threads and allocate memory per NUMA node (e.g., numactl) to reduce cross-socket traffic.\",\"PA-RISC\",\"Precision Architecture RISC — Hewlett‑Packard’s RISC architecture used in HP 9000 servers/workstations, largely superseded by Itanium and then x86‑64.\",\"HP‑UX on PA‑RISC systems (e.g., PA‑8700/8900); historical HP 9000 platforms.\",\"POWER\",\"IBM Performance Optimization With Enhanced RISC — IBM’s RISC architecture family used in servers/workstations (POWER4+), distinct but related to the PowerPC lineage.\",\"IBM Power Systems running AIX/IBM i/Linux; POWER9/POWER10 CPUs.\",\"PPC\",\"PowerPC — RISC CPU architecture developed by the AIM alliance (Apple–IBM–Motorola), used in desktops historically and widely in embedded/console systems.\",\"PowerPC 32/64‑bit (POWER/PowerPC); GameCube/Wii/PS3; embedded/controllers.\",\"RISC\",\"Reduced Instruction Set Computer — CPU design philosophy emphasizing a small, simple instruction set and efficient pipelines.\",\"ARM and RISC-V architectures.\",\"RISC-V\",\"Open standard RISC instruction set architecture with modular extensions (e.g., I/M/A/F/D/V) and 32/64/128‑bit variants (RV32/64/128); free to implement without licensing.\",\"Microcontrollers to servers; Linux on RV64GC; chips from SiFive, Andes; SBCs and accelerators.\",\"SMP\",\"Symmetric Multiprocessing — architecture where multiple identical CPUs/cores share the same memory and OS, enabling parallel execution of threads/processes.\",\"Multi-core x86/ARM systems; OS scheduler runs threads across cores with shared memory.\",\"SPARC\",\"Scalable Processor ARChitecture — RISC CPU architecture originally developed by Sun Microsystems, widely used in servers/workstations and embedded systems.\",\"SPARC V8/V9 (32/64‑bit); UltraSPARC/Oracle SPARC running Solaris/illumos.\",\"X86-64\",\"Generic name for the 64‑bit x86 ISA (defined by AMD as AMD64 and implemented by Intel as Intel 64/EM64T); adds 64‑bit mode and more registers over IA‑32.\",\"Build for x86_64; 64‑bit OSes and apps on AMD/Intel processors.\",\"Historical\",\"AT\",\"Advanced Technology — the IBM PC/AT was the successor to the XT, introducing the 16-bit ISA bus, the 286 processor, and the AT keyboard connector.\",\"The AT form factor and motherboard design influenced PCs for years.\",\"CD-i\",\"Compact Disc Interactive — a multimedia CD player and platform developed by Philips and Sony.\",\"Known for its games and educational titles in the early 1990s.\",\"IA-64\",\"Intel Itanium architecture — 64‑bit EPIC (Explicitly Parallel Instruction Computing) ISA developed by Intel/HP; distinct from x86/x86‑64 and now discontinued.\",\"Itanium servers/workstations running HP‑UX, OpenVMS, and legacy Windows Server for Itanium‑based systems.\",\"MSX\",\"Machines with Software eXchangeability — a standardized home computer architecture from the 1980s.\",\"Popular in Japan and Europe; Konami games on MSX.\",\"PDP\",\"Programmed Data Processor — DEC minicomputer line before VAX.\",\"PDP‑8, PDP‑11 systems.\",\"VAX\",\"Virtual Address eXtension — DEC 32‑bit minicomputer architecture.\",\"VAX/VMS systems in universities and industry.\",\"XT\",\"Extended Technology — the IBM PC XT was an early version of the PC that included a hard drive.\",\"The 8-bit bus architecture of the PC/XT.\"]},\"26\":{\"h\":\"Hardware (CPU / General)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"ALU\",\"Arithmetic Logic Unit — digital circuit in the CPU that performs integer arithmetic and bitwise operations.\",\"Add, subtract, AND/OR/XOR, shifts/rotates executed by the ALU pipelines.\",\"AP\",\"Application Processor — any non‑bootstrap CPU core in an SMP system that is brought online by the BSP to run the OS scheduler and workloads.\",\"OS sends INIT/SIPI to start APs after BSP init; threads scheduled across APs.\",\"BSP\",\"Bootstrap Processor — on multi-processor systems (e.g., x86 SMP), the primary CPU core that starts executing firmware/boot code and brings up the OS, which then initializes the remaining cores as Application Processors (APs).\",\"Firmware runs on the BSP first; OS sends INIT/SIPI to start APs.\",\"CPU\",\"Central Processing Unit — main processor that executes instructions.\",\"x86-64 CPUs with multiple cores/threads and SIMD.\",\"FPU\",\"Floating Point Unit — hardware for floating-point arithmetic.\",\"IEEE 754 operations, SIMD extensions.\",\"L1/L2/L3\",\"Level 1/2/3 Cache — hierarchical caches in a CPU that store frequently accessed data to reduce latency to main memory.\",\"L1 is fastest/smallest (per-core I/D); L2 is larger (per-core); L3 is largest (shared).\",\"MMU\",\"Memory Management Unit — hardware for virtual memory and address translation.\",\"x86-64 paging with TLBs.\",\"NMI\",\"Non-Maskable Interrupt — high-priority hardware interrupt that cannot be disabled by normal interrupt masking, used for critical fault or watchdog conditions.\",\"Watchdog parity/ECC errors trigger NMI; OS NMI handler logs/diagnoses hangs.\",\"SIMD\",\"Single Instruction, Multiple Data — vector parallelism executing the same instruction across multiple data lanes.\",\"SSE/AVX on x86, NEON on ARM.\",\"TLB\",\"Translation Lookaside Buffer — small cache of virtual→physical address translations used by the MMU.\",\"TLB hits speed up paging; TLB flush on context switch.\"]},\"27\":{\"h\":\"Hardware (CPU / ARM)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"EL0/1/2/3\",\"Exception Levels — ARMv8 privilege levels: EL0 (unprivileged), EL1 (OS kernel), EL2 (hypervisor), EL3 (secure monitor).\",\"User apps run at EL0; the kernel at EL1; KVM at EL2.\",\"GIC\",\"Generic Interrupt Controller — standard ARM architecture for managing interrupts, routing them from peripherals to CPU cores.\",\"GICv2/v3/v4; the ARM equivalent of x86's APIC.\",\"NEON\",\"ARM's advanced SIMD (Single Instruction, Multiple Data) architecture extension for accelerating multimedia and signal processing.\",\"NEON intrinsics for video encoding; equivalent to x86 SSE/AVX.\",\"SVE\",\"Scalable Vector Extension — next-generation SIMD instruction set for ARM AArch64, designed for HPC with vector-length agnostic programming.\",\"High-performance computing workloads on ARM servers.\"]},\"28\":{\"h\":\"Hardware (CPU / x86)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AMX\",\"Advanced Matrix Extensions — x86 instruction set extensions providing tiled matrix operations accelerated in hardware.\",\"Intel AMX for deep‑learning inference/training (tile registers, TMUL).\",\"APIC\",\"Advanced Programmable Interrupt Controller — modern local/IO APICs providing scalable interrupt delivery in SMP systems.\",\"LAPIC per core and IOAPIC for external IRQs on x86.\",\"AVX\",\"Advanced Vector Extensions — x86 SIMD instruction set extensions for wide vector operations (256/512-bit in AVX/AVX-512).\",\"AVX2 for integer ops; AVX-512 for HPC workloads.\",\"SSE\",\"Streaming SIMD Extensions — x86 SIMD instruction set extensions for parallel vector operations.\",\"SSE2/SSE4 intrinsics; compiler autovectorization for math/graphics.\",\"VMX\",\"Virtual Machine Extensions — Intel x86 virtualization extensions (VT‑x) that add CPU modes/instructions (VMX root/non‑root, VMXON/VMXOFF, VMLAUNCH/VMRESUME) and a VMCS for hardware‑assisted virtualization.\",\"Enable VT‑x in firmware; KVM/Hyper‑V/VMware use VMX to run guests with hardware assist.\",\"xAPIC\",\"Extended APIC — the default operational mode for the modern x86 APIC, using MMIO for register access.\",\"The OS maps the LAPIC's MMIO region to send IPIs and manage local interrupts.\",\"Historical\",\"MMX\",\"MultiMedia eXtensions — early x86 SIMD instruction set for integer vector operations.\",\"Legacy MMX ops predating SSE on Pentium-era CPUs.\"]},\"29\":{\"h\":\"Hardware (Memory)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"DDR\",\"Double Data Rate — class of synchronous DRAM that transfers data on both clock edges for higher bandwidth.\",\"DDR4/DDR5 SDRAM in modern systems.\",\"DIMM\",\"Dual Inline Memory Module — standardized memory module form factor for SDRAM.\",\"288‑pin DDR4/DDR5 DIMMs.\",\"DRAM\",\"Dynamic Random Access Memory — volatile memory storing bits in capacitors that require periodic refresh.\",\"Main system memory (SDRAM/DDR).\",\"ECC\",\"Error-Correcting Code memory — memory modules/chipsets that detect and correct single‑bit errors (and detect some multi‑bit errors) to improve reliability.\",\"ECC UDIMMs/RDIMMs in servers/workstations; machine check logs corrected errors.\",\"EEPROM\",\"Electrically Erasable Programmable Read-Only Memory — non-volatile memory that can be electrically erased and reprogrammed at the byte/page level; used for small configuration storage and microcontroller data.\",\"I²C/SPI EEPROMs (24xx/25xx series); MCU calibration data; distinct from flash (block erase).\",\"GDDR\",\"Graphics Double Data Rate — high‑bandwidth memory variants optimized for GPUs and graphics workloads.\",\"GDDR6/GDDR6X on modern GPUs; wide buses and high data rates.\",\"HBM\",\"High Bandwidth Memory — stacked memory connected via wide interfaces on‑package for very high bandwidth and energy efficiency.\",\"HBM2/HBM3 on AI/ML accelerators and high‑end GPUs.\",\"LPDDR\",\"Low-Power DDR — mobile/embedded DRAM optimized for low power with deep power states and wide IO at low voltage.\",\"LPDDR4/4X/5/5X in smartphones, tablets, ultrabooks, and SoCs.\",\"NVRAM\",\"Non-Volatile RAM — memory that retains data without power; implemented via flash, EEPROM, or battery‑backed SRAM; often stores firmware variables/settings.\",\"UEFI variables in NVRAM; macOS NVRAM for boot args and device settings.\",\"RAM\",\"Random Access Memory — volatile memory used for working data and code.\",\"DDR4/DDR5 DIMMs.\",\"ROM\",\"Read-Only Memory — non-volatile memory storing firmware or static data.\",\"Boot ROM, option ROMs.\",\"SDRAM\",\"Synchronous Dynamic Random Access Memory — DRAM synchronized with the system clock, enabling pipelined access and higher throughput versus asynchronous DRAM.\",\"PC100/PC133 SDRAM; basis for modern DDR (DDR/DDR2/3/4/5).\",\"SO-DIMM\",\"Small Outline Dual Inline Memory Module — compact memory module form factor used in laptops and small form-factor systems; electrically similar to DIMMs but physically smaller and not interchangeable.\",\"DDR4/DDR5 SO‑DIMMs in laptops/NUCs; shorter modules with different keying.\",\"SRAM\",\"Static Random Access Memory — volatile memory using flip-flops; fast and does not need refresh.\",\"CPU caches (L1/L2/L3) implemented with SRAM.\",\"Historical\",\"EDO\",\"Extended Data Out DRAM — improved asynchronous DRAM that allows the data output to remain valid longer, enabling slightly higher performance than FPM before SDRAM became mainstream.\",\"Mid‑1990s 486/Pentium systems with EDO SIMMs; replaced by SDRAM.\",\"EPROM\",\"Erasable Programmable Read-Only Memory — UV-erasable ROM chips with a quartz window; erased under UV light and reprogrammed with a programmer.\",\"27xx-series EPROMs in retro computers/arcade boards; UV eraser tools.\",\"FPM\",\"Fast Page Mode DRAM — asynchronous DRAM access mode that speeds up accesses within the same row/page compared to plain DRAM; predecessor to EDO and SDRAM.\",\"Early 1990s SIMM modules using FPM; superseded by EDO/SDRAM.\",\"PROM\",\"Programmable Read-Only Memory — one-time programmable ROM that can be programmed once after manufacturing and cannot be erased.\",\"82S/27S series PROMs used for microcode/firmware; fuse/antifuse technologies.\",\"RDRAM\",\"Rambus DRAM — high‑bandwidth DRAM technology from Rambus used with RIMM modules and a packetized, narrow bus; briefly mainstream on Pentium 4 before being displaced by DDR SDRAM.\",\"RIMM modules in Intel i850/i850E chipsets; now obsolete in favor of DDR/DDR2+.\",\"RIMM\",\"Rambus Inline Memory Module — module form factor for RDRAM with continuity requirements (CRIMMs in empty slots) and heat spreaders; used briefly in early‑2000s PCs/servers.\",\"Populate paired RIMMs on i850 boards; install CRIMMs in unused slots; now obsolete.\",\"SIMM\",\"Single Inline Memory Module — older memory module form factor with a single set of contacts; used with FPM/EDO/early SDRAM.\",\"30‑pin/72‑pin SIMMs on 386/486/Pentium-era systems.\"]},\"30\":{\"h\":\"Hardware (Buses & Interfaces)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AHB\",\"Advanced High-performance Bus — an AMBA bus protocol for connecting lower-performance peripherals.\",\"Part of the on-chip bus fabric in an ARM SoC.\",\"AMBA\",\"Advanced Microcontroller Bus Architecture — a family of on-chip interconnect specifications for connecting functional blocks in an SoC.\",\"AMBA protocols include AXI, AHB, and APB.\",\"APB\",\"Advanced Peripheral Bus — a low-bandwidth AMBA bus protocol for simple peripherals.\",\"Connecting UARTs, GPIO, and timers in an SoC.\",\"AXI\",\"Advanced eXtensible Interface — a high-performance AMBA bus protocol for demanding components like CPUs, GPUs, and memory controllers.\",\"The main high-speed bus in a modern ARM SoC.\",\"CCIX\",\"Cache Coherent Interconnect for Accelerators — an industry standard for coherent interconnects between processors and accelerators.\",\"Connecting FPGAs or GPUs to an ARM server CPU.\",\"CMN\",\"Coherent Mesh Network — ARM's high-performance mesh interconnect for connecting components within an SoC and between multiple SoCs.\",\"The socket-to-socket interconnect in multi-socket ARM servers.\",\"DMI\",\"Direct Media Interface — Intel's proprietary link between a CPU and the Platform Controller Hub (PCH).\",\"DMI 3.0/4.0 providing bandwidth for peripherals connected to the PCH.\",\"GPIO\",\"General-Purpose Input/Output — configurable digital pins on microcontrollers/SoCs used for reading inputs and driving outputs; often support pull‑ups/downs and interrupts.\",\"Toggle Raspberry Pi GPIO with libgpiod; configure pin mode and edge interrupts.\",\"HBA\",\"Host Bus Adapter — adapter that connects a host system to storage or network devices over a high‑speed bus/fabric (e.g., SAS, Fibre Channel).\",\"FC/SAS HBAs in servers to attach SAN/storage arrays; visible via lspci.\",\"HCI\",\"Host Controller Interface — standardized command/event interface between a host stack and a hardware controller (notably in Bluetooth; also USB xHCI).\",\"Capture Bluetooth HCI packets with btmon; interact via UART/USB HCI.\",\"I2C\",\"Inter-Integrated Circuit — a synchronous, multi-controller, multi-peripheral serial bus used for attaching low-speed peripherals to a motherboard or embedded system.\",\"Connect sensors/EEPROMs to a microcontroller (SDA/SCL lines).\",\"JTAG\",\"Joint Test Action Group — industry standard for on-chip debugging, programming, and testing of integrated circuits.\",\"Use a JTAG debugger to halt a CPU, inspect registers, and flash firmware.\",\"MIDI\",\"Musical Instrument Digital Interface — standard protocol/interface for transmitting musical performance data between instruments, controllers, and computers.\",\"5‑pin DIN or USB‑MIDI; Note On/Off, Control Change; DAW controlling a synth.\",\"PCI\",\"Peripheral Component Interconnect — hardware bus standard for attaching peripherals.\",\"PCI devices enumerated by bus/device/function.\",\"PCIe\",\"PCI Express — high-speed serial successor to PCI with lanes and links.\",\"x16 GPU slot; NVMe drives over PCIe.\",\"PS/2\",\"Personal System/2 — legacy Mini‑DIN interface for keyboards and mice on PCs.\",\"PS/2 keyboard/mouse ports on motherboards/KVMs; supports NKRO without USB polling.\",\"SPI\",\"Serial Peripheral Interface — synchronous serial bus with master/slave (controller/peripheral) and separate data lines for full-duplex transfers.\",\"Connect sensors/flash to microcontrollers (MOSI/MISO/SCLK/CS); higher speed than I²C.\",\"UART\",\"Universal Asynchronous Receiver-Transmitter — hardware for serial communication using asynchronous framing (start/stop bits) over TTL/RS-232 levels.\",\"Debug console on microcontrollers; /dev/ttyS*//dev/ttyUSB*; 115200 8N1.\",\"UPI\",\"Ultra Path Interconnect — Intel's current point-to-point processor interconnect for server CPUs, successor to QPI.\",\"High-speed link between sockets on multi-processor Xeon systems.\",\"USB\",\"Universal Serial Bus — standard for cables and connectors between computers and peripherals.\",\"USB 3.x devices; HID, storage, and serial classes.\",\"Legacy\",\"COM\",\"Serial COM port — PC designation for RS‑232 serial interfaces (COM1/COM2/...), typically provided by 16550‑class UARTs on DB‑9 connectors.\",\"Connect via null‑modem/USB‑serial; Windows COM3:; Linux /dev/ttyS0 serial consoles.\",\"LPC\",\"Low Pin Count — a bus used on PC-compatible motherboards to connect low-bandwidth devices to the southbridge.\",\"Connects the Super I/O chip, BIOS ROM, and TPM.\",\"QPI\",\"QuickPath Interconnect — Intel's point-to-point processor interconnect that replaced the FSB; superseded by UPI.\",\"High-speed link between CPU and I/O hub on Nehalem/Sandy Bridge-E systems.\",\"Historical\",\"BNC\",\"Bayonet Neill-Concelman — coaxial RF connector with a quarter-turn bayonet lock, historically common for thin Ethernet, video, and instrumentation signals.\",\"10BASE2 networks daisy-chained via BNC T-connectors with 50-ohm terminators; oscilloscopes and signal generators using BNC jacks.\",\"EISA\",\"Extended Industry Standard Architecture — 32-bit ISA-compatible bus developed by a consortium as an open alternative to MCA; supported bus mastering and IRQ sharing.\",\"Server-class 486 systems with EISA expansion cards; later replaced by PCI.\",\"FSB\",\"Front-Side Bus — the main interface between the CPU and the northbridge in older PC architectures, superseded by on-chip memory controllers and point-to-point interconnects.\",\"Pentium 4 on an 800MHz FSB; overclocking by raising the FSB speed.\",\"ISA\",\"Industry Standard Architecture — legacy 8/16‑bit PC expansion bus.\",\"Sound/IO cards on 286/386 era PCs.\",\"LPT\",\"Line Printer port — PC parallel printer interface (Centronics/IEEE 1284), addressed as LPT1/LPT2; largely obsolete.\",\"Parallel printers and hardware dongles; DB‑25 connectors; IEEE 1284 SPP/EPP/ECP modes.\",\"MCA\",\"Micro Channel Architecture — IBM's proprietary 32‑bit bus introduced with PS/2 systems as a successor to ISA; offered bus mastering and improved throughput but lacked industry adoption.\",\"IBM PS/2 expansion cards; supplanted by EISA/PCI.\",\"PCMCIA\",\"Personal Computer Memory Card International Association — the standard for laptop expansion cards (e.g., modems, network cards) before USB and ExpressCard.\",\"Also known as PC Card; Type I/II/III cards.\",\"Q-BUS\",\"DEC Q‑bus — asynchronous multiplexed address/data bus used in later PDP‑11 and early MicroVAX systems; lower-cost successor to Unibus with fewer signals.\",\"Q‑bus backplanes/peripherals in PDP‑11/23 and MicroVAX; legacy DEC minicomputers.\",\"Unibus\",\"DEC Unibus — early synchronous shared backplane bus interconnecting CPU, memory, and peripherals in PDP‑11 systems; predecessor to Q‑bus.\",\"PDP‑11 Unibus backplanes/peripherals; historical DEC minicomputers.\",\"VLB\",\"VESA Local Bus — high‑speed local bus before PCI.\",\"486 motherboards with VLB video/IO cards.\",\"VME\",\"VMEbus (Versa Module Europa) — parallel backplane bus standard (IEEE 1014) widely used in embedded/industrial systems with Eurocard form factors (3U/6U) and modular CPU/I/O cards.\",\"VME chassis in telecom, industrial control, and defense; CPU cards and I/O modules on a shared backplane.\"]},\"31\":{\"h\":\"Hardware (Storage)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AHCI\",\"Advanced Host Controller Interface — standard programming interface for SATA host controllers enabling features like NCQ, hot-plug, and native command queuing.\",\"OS uses the AHCI driver; set SATA mode to AHCI in firmware for modern OS installs.\",\"GPT\",\"GUID Partition Table — modern disk partitioning scheme that supports large disks and many partitions, part of the UEFI standard.\",\"Disks initialized with GPT instead of legacy MBR.\",\"HDD\",\"Hard Disk Drive — magnetic storage device with spinning platters and moving heads.\",\"3.5\\\"/2.5\\\" SATA HDDs for bulk storage; higher latency than SSDs.\",\"LBA\",\"Logical Block Addressing — linear addressing scheme for block devices that replaces legacy CHS (Cylinder/Head/Sector) geometry.\",\"512‑byte/4K sectors addressed by LBA; used by SATA/SCSI/NVMe.\",\"LTO\",\"Linear Tape-Open — open tape storage format for data backup/archive with generational roadmap (LTO‑1..LTO‑9), high capacity, and LTFS support.\",\"LTO‑8/LTO‑9 tape drives/libraries in enterprise backups; use LTFS for file‑like access.\",\"LUN\",\"Logical Unit Number — identifier addressing a logical unit (virtual disk) within a SCSI/iSCSI/Fibre Channel target, used for mapping storage to hosts.\",\"Present LUNs from a SAN array to servers; host multipath to the same LUN.\",\"NCQ\",\"Native Command Queuing — SATA feature allowing a drive to accept and reorder multiple outstanding requests to optimize head movement and throughput.\",\"AHCI/SATA HDDs/SSDs improving random I/O by reordering commands.\",\"NVMe\",\"Non-Volatile Memory Express — interface protocol for SSDs over PCIe.\",\"M.2 NVMe SSD with high IOPS/low latency.\",\"RAID\",\"Redundant Array of Independent Disks — combine multiple drives for redundancy and/or performance.\",\"RAID 1 mirroring; RAID 5 parity; RAID 10 stripe+mirror.\",\"SAS\",\"Serial Attached SCSI — point‑to‑point serial interface for enterprise storage.\",\"12Gb/s SAS HDDs/SSDs; SAS expanders/backplanes.\",\"SATA\",\"Serial ATA — interface for connecting storage devices.\",\"2.5\\\" SATA SSDs and HDDs.\",\"SD\",\"Secure Digital — flash memory card format with variants (SD/SDHC/SDXC) commonly used in portable devices; typically formatted with FAT32 or exFAT.\",\"Cameras, handheld consoles, and phones; microSD cards with adapters.\",\"SMART\",\"Self-Monitoring, Analysis and Reporting Technology — monitoring system in disk drives to detect and report on indicators of drive reliability.\",\"smartctl to read SMART data and predict drive failure.\",\"SSD\",\"Solid-State Drive — storage device using flash memory (no moving parts), offering low latency and high throughput.\",\"NVMe SSDs for fast boot and build times.\",\"Legacy\",\"EIDE\",\"Enhanced IDE — extensions to IDE/PATA.\",\"Support for larger drives and ATAPI.\",\"IDE/PATA\",\"Integrated Drive Electronics / Parallel ATA — legacy parallel disk interface.\",\"40/80‑wire ribbon cables for HDD/optical drives.\",\"MBR\",\"Master Boot Record — legacy partitioning scheme and first 512 bytes of a disk containing boot code and a partition table.\",\"BIOS boots from MBR; up to 4 primary partitions or extended/logical.\",\"UDMA\",\"Ultra Direct Memory Access — ATA/IDE DMA transfer modes providing higher throughput and lower CPU usage than PIO; modes UDMA/33/66/100/133 (higher modes require 80‑wire cables).\",\"PATA drive negotiates UDMA/5 (ATA/100); Linux dmesg shows UDMA/133.\",\"WORM\",\"Write Once, Read Many — non‑rewritable archival storage media.\",\"Optical WORM jukeboxes for compliance archives.\",\"Historical\",\"CHS\",\"Cylinder/Head/Sector — legacy disk geometry addressing scheme used by BIOS/MBR era systems; limited capacity and translation quirks.\",\"1024‑cylinder limit; CHS/LBA translation in BIOS; superseded by LBA.\",\"DDS\",\"Digital Data Storage — magnetic tape data storage format derived from DAT (Digital Audio Tape), widely used for backups in the 1990s–2000s (DDS‑1..4, DDS‑DC, DAT72).\",\"DAT/DDS tape drives and media for server/workstation backups; largely obsolete today.\",\"DLT\",\"Digital Linear Tape — half‑inch magnetic tape storage format popular in the 1990s–2000s for enterprise backups; superseded by LTO.\",\"DLT/SDLT drives and media in tape libraries; largely obsolete now.\",\"FDD\",\"Floppy Disk Drive — magnetic removable storage.\",\"5.25\\\" and 3.5\\\" floppies.\",\"MFM\",\"Modified Frequency Modulation — legacy disk encoding scheme.\",\"Early HDDs and floppies using MFM/RLL.\",\"QIC\",\"Quarter-Inch Cartridge — magnetic tape data storage format using 1/4\\\" tape in cartridges; common for backups on PCs/workstations in the 1980s–1990s (e.g., QIC-80/150, Travan).\",\"Tape backup drives and cartridges; largely obsolete today.\",\"RLL\",\"Run Length Limited — denser successor to MFM for magnetic storage.\",\"RLL controllers for higher HDD capacity.\",\"SCSI\",\"Small Computer System Interface — parallel peripheral bus widely used pre‑SATA/USB.\",\"External SCSI disks and scanners on workstations.\"]},\"32\":{\"h\":\"Hardware (Video & Displays)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"DP\",\"DisplayPort — digital display interface with high bandwidth, daisy‑chaining via MST, and adaptive sync support.\",\"DP 1.4/2.0 to high‑refresh monitors; USB‑C DP Alt Mode; MST hub.\",\"DPI\",\"Dots Per Inch — measure of print/display resolution; colloquially used for screens though PPI is more precise.\",\"300‑DPI print quality; “Retina” displays around ~220 PPI.\",\"EDID\",\"Extended Display Identification Data — data structure provided by a display to describe its capabilities (e.g., resolution, timings) to a video source.\",\"GPU reads monitor's EDID over DDC to configure the display mode.\",\"GPU\",\"Graphics Processing Unit — highly parallel processor optimized for graphics and compute.\",\"CUDA/OpenCL workloads; 3D rendering.\",\"HD\",\"High Definition — 720p (1280×720) and 1080i/p (1920×1080) resolution classes.\",\"1080p monitor; HD streaming.\",\"HDCP\",\"High-bandwidth Digital Content Protection — copy protection scheme to prevent copying of digital audio/video content as it travels across connections.\",\"HDMI/DisplayPort connections requiring HDCP for protected content playback.\",\"HDMI\",\"High-Definition Multimedia Interface — digital audio/video interface for connecting sources to displays.\",\"HDMI 2.0/2.1 to monitors/TVs; HDCP for protected content.\",\"LCD\",\"Liquid Crystal Display — flat‑panel display technology that uses liquid crystals modulated by a backlight to produce images.\",\"IPS/TN/VA LCD panels; requires LED backlight.\",\"LED\",\"Light‑Emitting Diode — semiconductor light source; in monitors/TVs, often shorthand for LED‑backlit LCDs (not emissive per‑pixel).\",\"Status indicator LEDs; LED‑backlit LCD monitors/TVs.\",\"OLED\",\"Organic Light‑Emitting Diode — emissive display technology where each pixel emits light for high contrast and true blacks.\",\"AMOLED smartphone screens; per‑pixel dimming on TVs/phones.\",\"PPI\",\"Pixels Per Inch — measure of display pixel density; often confused with DPI which is for print.\",\"326‑PPI phone display; ~220‑PPI “Retina” laptop panels.\",\"QHD\",\"Quad High Definition — 2560×1440 (1440p) resolution at 16:9; roughly 4× 720p and about half the pixels of 4K UHD.\",\"27\\\" 1440p monitors; competitive gaming displays.\",\"RGB\",\"Red, Green, Blue — additive color model used in displays and imaging.\",\"sRGB color space; RGB LED subpixels in LCD/OLED panels.\",\"RGBA\",\"Red, Green, Blue, Alpha — RGB color with an additional alpha (opacity) channel for transparency.\",\"CSS rgba(255, 0, 0, 0.5); PNG images with alpha channel.\",\"UHD\",\"Ultra High Definition — 4K UHD (3840×2160) consumer resolution class; sometimes extends to 8K (7680×4320).\",\"4K 2160p TV/monitor; UHD streaming.\",\"VESA\",\"Video Electronics Standards Association — industry group that defines and maintains display and related interface standards.\",\"DisplayHDR, DP standards, EDID/DMT timing standards.\",\"VRAM\",\"Video RAM — memory used by GPUs/display controllers to store framebuffers, textures, and render targets; historically specialized types (e.g., SGRAM, GDDR).\",\"Dedicated GDDR6 on discrete GPUs; shared system memory on iGPUs.\",\"Legacy\",\"SD\",\"Standard Definition — legacy video resolution class around 480i/480p (NTSC) or 576i/576p (PAL), typically 4:3 aspect.\",\"DVD 480p; SDTV broadcast.\",\"SVGA\",\"Super VGA — VESA extensions beyond VGA.\",\"800×600 and higher resolutions.\",\"VGA\",\"Video Graphics Array — de facto PC graphics standard.\",\"640×480 16‑color; mode 13h 320×200×256.\",\"Historical\",\"AGP\",\"Accelerated Graphics Port — dedicated graphics slot pre‑PCIe.\",\"AGP 4×/8× graphics cards.\",\"CGA\",\"Color Graphics Adapter — IBM PC color graphics standard.\",\"320×200 4‑color modes on early PCs.\",\"CRT\",\"Cathode Ray Tube — vacuum tube display technology that steers electron beams across a phosphor‑coated screen to form images.\",\"Legacy CRT monitors/TVs; scanlines, phosphor persistence, high refresh at lower resolutions.\",\"EGA\",\"Enhanced Graphics Adapter — improved IBM graphics adapter.\",\"640×350 16‑color graphics.\",\"MDA\",\"Monochrome Display Adapter — the original text-only video card for the IBM PC.\",\"80x25 character mode with a green or amber phosphor monitor.\"]},\"33\":{\"h\":\"Hardware (General)\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"ATX\",\"Advanced Technology eXtended — PC motherboard and power supply form factor standard defining board sizes, mounting, I/O shield, and power connectors.\",\"ATX/mATX/ITX cases; 24‑pin ATX, 8‑pin EPS12V, PCIe 6/8‑pin/12VHPWR.\",\"CMOS\",\"Complementary Metal‑Oxide‑Semiconductor — low‑power technology used for chips; in PCs, also refers to the small battery‑backed RAM storing firmware settings.\",\"Replace CMOS battery; clear CMOS to reset BIOS/UEFI settings.\",\"DMA\",\"Direct Memory Access — device-initiated memory transfers without CPU involvement.\",\"NICs use DMA for packet buffers.\",\"FPGA\",\"Field-Programmable Gate Array — reconfigurable semiconductor device consisting of programmable logic blocks and interconnects configured by a bitstream to implement custom digital circuits.\",\"Prototype/accelerate designs; soft CPUs and hardware offload over PCIe; tools like Vivado/Quartus using HDL/RTL.\",\"HID\",\"Human Interface Device — USB device class for human input/output peripherals using structured HID reports.\",\"USB keyboards, mice, gamepads; HID report descriptors parsed by OS.\",\"HPET\",\"High Precision Event Timer — modern hardware timer with multiple high-resolution counters/comparators, providing precise periodic interrupts and timestamps that supersede legacy PIT/RTC timers in PCs.\",\"Program HPET registers via MMIO to drive scheduler ticks, high-resolution timers, or multimedia clocks with microsecond accuracy.\",\"IRQ\",\"Interrupt Request — a hardware signal line used by devices to interrupt the CPU for service.\",\"Timer, keyboard, NIC raise IRQs; OS dispatches to ISRs.\",\"KVM\",\"Keyboard–Video–Mouse switch — hardware device to control multiple computers with a single keyboard, monitor, and mouse.\",\"Toggle between two PCs with a USB/HDMI KVM switch.\",\"MMIO\",\"Memory-Mapped I/O — device registers mapped into the CPU address space for control/status.\",\"Writing to MMIO addresses to control PCIe device registers.\",\"NIC\",\"Network Interface Controller — hardware that connects a computer to a network.\",\"Ethernet adapters; 10/25/40/100GbE NICs with offloads.\",\"OEM\",\"Original Equipment Manufacturer — company that produces components or products that are marketed by another company; also denotes vendor‑specific builds/licenses.\",\"OEM Windows licenses preinstalled on PCs; OEM parts used by system integrators.\",\"PC\",\"Personal Computer — general-purpose computer intended for individual use; commonly refers to IBM‑PC compatible systems running Windows/Linux.\",\"Desktop/tower PC with x86‑64 CPU and discrete GPU.\",\"PCH\",\"Platform Controller Hub — the modern Intel chipset, handling I/O functions for peripherals.\",\"The Z690 PCH provides USB, SATA, and additional PCIe lanes.\",\"PSU\",\"Power Supply Unit — converts AC mains to regulated DC rails to power computer components; rated by wattage and efficiency.\",\"ATX PSUs providing +12V/+5V/+3.3V; 80 PLUS efficiency tiers; modular cabling.\",\"RTC\",\"Real-Time Clock — hardware clock that keeps time across reboots/power cycles, often backed by a battery.\",\"System reads RTC (CMOS/ACPI) at boot to set the OS clock.\",\"SBC\",\"Single-Board Computer — complete computer on a single circuit board integrating CPU, memory, storage, and I/O.\",\"Raspberry Pi, BeagleBone; runs Linux for embedded/edge.\",\"SIMT\",\"Single Instruction, Multiple Threads — GPU execution model where groups of threads execute the same instruction on different data.\",\"NVIDIA warp execution; branch divergence reduces efficiency.\",\"SMBIOS\",\"System Management BIOS — firmware tables that describe hardware to the OS.\",\"DMI/SMBIOS tables expose model, memory, and slots.\",\"SoC\",\"System on Chip — integrated circuit that consolidates CPU cores, GPU, memory controllers, and I/O peripherals on a single die/package.\",\"Smartphone/tablet SoCs (Apple M‑series, Qualcomm Snapdragon); embedded ARM SoCs.\",\"TPM\",\"Trusted Platform Module — hardware-based security chip for keys and attestation.\",\"TPM 2.0 used by Secure Boot and disk encryption.\",\"VHDL\",\"VHSIC Hardware Description Language — a hardware description language used in electronic design automation to describe digital and mixed-signal systems.\",\"Design FPGAs and ASICs with VHDL; entity, architecture, process.\",\"Historical\",\"PDA\",\"Personal Digital Assistant — a handheld device that combined computing, telephone/fax, and networking features; a precursor to the smartphone.\",\"Palm Pilot, Apple Newton, Windows CE devices.\",\"PIC\",\"Programmable Interrupt Controller — legacy interrupt controller (e.g., Intel 8259A) that routes hardware IRQs to the CPU.\",\"Classic x86 uses dual 8259 PICs remapped during OS init.\",\"PIT\",\"Programmable Interval Timer — legacy timer chip (e.g., Intel 8253/8254) that divides a ~1.193182 MHz input clock to produce periodic interrupts for task scheduling and timekeeping.\",\"Configure PIT channel 0 to generate IRQ0 for early OS scheduler ticks; retained as a fallback timer during boot.\"]},\"34\":{\"h\":\"Firmware\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"ACPI\",\"Advanced Configuration and Power Interface — standard for power management and device configuration via tables provided by firmware.\",\"ACPI tables (DSDT/SSDT) describe devices and power states to the OS.\",\"AML\",\"ACPI Machine Language — pseudo-code bytecode interpreted by the OS to evaluate ACPI objects and methods from the DSDT/SSDTs.\",\"AML interpreter in the kernel executes methods to handle power events.\",\"DSDT\",\"Differentiated System Description Table — primary ACPI table from firmware containing the base definition of devices and power objects in AML.\",\"The OS loads and interprets the DSDT at boot to enumerate devices.\",\"FADT\",\"Fixed ACPI Description Table — ACPI table that provides pointers to other tables and defines fixed hardware register blocks.\",\"Contains addresses for power management timers and SCI interrupt info.\",\"GRUB\",\"GRand Unified Bootloader — a popular bootloader from the GNU project, used by most Linux distributions.\",\"The GRUB menu for selecting an OS to boot; grub.cfg configuration.\",\"MADT\",\"Multiple APIC Description Table — ACPI table that describes all the interrupt controllers (APICs, IOAPICs) in the system.\",\"The OS uses the MADT to initialize CPUs and route interrupts in an SMP system.\",\"PnP\",\"Plug and Play — automatic device detection, enumeration, and configuration by the OS/firmware, minimizing manual setup and IRQ/DMA conflicts.\",\"ACPI/PCI PnP; USB devices enumerated and drivers auto‑loaded.\",\"PSCI\",\"Power State Coordination Interface — ARM standard for power management, allowing an OS to request power state changes from system firmware.\",\"OS uses PSCI calls for CPU hotplug, idle, and system shutdown.\",\"RSDP\",\"Root System Description Pointer — firmware structure that locates the main ACPI tables (RSDT/XSDT) in memory for the OS.\",\"The OS scans for the \\\"RSD PTR \\\" signature in low memory to find the RSDP.\",\"RSDT\",\"Root System Description Table — 32-bit ACPI table that contains pointers to all other description tables.\",\"Superseded by the 64-bit XSDT on modern systems.\",\"SBI\",\"Supervisor Binary Interface — standard interface between a RISC‑V supervisor OS and machine‑mode firmware providing services (timers, IPIs, power, console) via SBI calls; commonly implemented by OpenSBI.\",\"Boot flow: ROM/FSBL → OpenSBI (SBI firmware) → U‑Boot/Linux; OS issues ecall to SBI for privileged services.\",\"SCI\",\"System Control Interrupt — a dedicated interrupt used by ACPI to signal power management and other system events to the OS.\",\"ACPI SCI handler for lid open/close or power button events.\",\"SMI\",\"System Management Interrupt — a high-priority interrupt that causes the CPU to enter System Management Mode (SMM).\",\"Triggered by hardware or firmware to handle platform-specific events.\",\"SMM\",\"System Management Mode — a special-purpose CPU mode in x86 for handling system-wide functions like power management and proprietary OEM code, transparent to the OS.\",\"SMI handler for power button events; legacy USB keyboard emulation.\",\"SSDT\",\"Secondary System Description Table — additional ACPI tables containing AML definitions that supplement or modify the DSDT.\",\"Used for device-specific configuration or hot-plug support.\",\"UEFI\",\"Unified Extensible Firmware Interface — modern firmware replacing legacy BIOS with a flexible boot and runtime services model.\",\"UEFI boot managers, GPT disks, Secure Boot.\",\"XSDT\",\"Extended System Description Table — 64-bit version of the RSDT that contains pointers to all other ACPI description tables.\",\"Used by modern 64-bit operating systems to find ACPI tables.\",\"Legacy\",\"CSM\",\"Compatibility Support Module — UEFI component that provides legacy BIOS services to boot non‑UEFI OSes and option ROMs; phased out on modern systems.\",\"Enable CSM to boot legacy MBR media or old GPUs with legacy option ROMs.\",\"Historical\",\"APM\",\"Advanced Power Management — legacy firmware interface for power management, superseded by ACPI.\",\"APM BIOS calls for sleep/shutdown on pre-ACPI systems.\",\"BIOS\",\"Basic Input/Output System — legacy PC firmware that initializes hardware and boots the OS.\",\"PC firmware POST and boot sequence on legacy/CSM systems.\",\"POST\",\"Power-On Self-Test — diagnostic sequence run by firmware (esp. legacy BIOS) at startup to check hardware integrity.\",\"Beep codes on failure; memory/drive checks during boot.\"]},\"35\":{\"h\":\"Culture & Misc\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AFAICT\",\"As Far As I Can Tell — based on current understanding.\",\"“AFAICT, the bug only affects Safari.”\",\"AFAIK\",\"As Far As I Know — indicates incomplete knowledge.\",\"“AFAIK, we don't support Windows 7 anymore.”\",\"AFK\",\"Away From Keyboard — temporarily unavailable.\",\"“AFK 10 mins, brb.”\",\"ASAP\",\"As Soon As Possible — urgent request or prioritization; avoid ambiguity by specifying a concrete timeframe when possible.\",\"“Please review ASAP” → “Please review by EOD.”\",\"ATM\",\"At The Moment — current status may change.\",\"“ATM we're blocked on upstream changes.”\",\"BDFL\",\"Benevolent Dictator For Life — long-term project leader.\",\"Python’s BDFL history.\",\"BOFH\",\"Bastard Operator From Hell — cynical sysadmin trope.\",\"Humor in ops culture.\",\"BRB\",\"Be Right Back — brief step away.\",\"“BRB, grabbing coffee.”\",\"BTW\",\"By The Way — add side note/context.\",\"“BTW, the API changed in v2.”\",\"DM\",\"Direct Message — private one-to-one message in chat/social platforms.\",\"“Send me a DM with the logs.”\",\"ELI5\",\"Explain Like I'm Five — request for simple explanation.\",\"“ELI5 how RSA works.”\",\"EOD\",\"End Of Day — end of a working day; common deadline shorthand.\",\"“I'll have a draft ready by EOD.”\",\"EOW\",\"End Of Week — end of the current work week; deadline shorthand.\",\"“Targeting EOW for the feature toggle rollout.”\",\"EOY\",\"End Of Year — end of the calendar or fiscal year; deadline shorthand.\",\"“Let's target EOY for GA after extended beta.”\",\"ETA\",\"Estimated Time of Arrival — expected completion/arrival time.\",\"“ETA for fix is 3pm.”\",\"FFS\",\"For F***'s Sake — expression of frustration or exasperation; avoid in formal communication.\",\"“FFS, the build broke again.”\",\"FOMO\",\"Fear Of Missing Out — anxiety about missing experiences or opportunities others are having.\",\"“Skip the release party? FOMO is real.”\",\"FTW\",\"For The Win — enthusiastic endorsement or celebration of something that worked well.\",\"“Feature flags FTW — painless rollback.”\",\"FUD\",\"Fear, Uncertainty, Doubt — disinformation tactic.\",\"Competitor FUD.\",\"FWIW\",\"For What It's Worth — modest preface to share input without asserting authority.\",\"“FWIW, retry with exponential backoff.”\",\"FYI\",\"For Your Information — share info without requiring action.\",\"“FYI: maintenance window Sunday 2am.”\",\"GTK\",\"Good To Know — acknowledges helpful info.\",\"“Rate limit resets hourly — GTK.”\",\"HN\",\"Hacker News — tech news and discussion site run by Y Combinator.\",\"Post a launch on news.ycombinator.com; join the discussion.\",\"HTH\",\"Hope This Helps — friendly sign‑off when providing assistance or an answer.\",\"“HTH! Ping me if you need more details.”\",\"ICYMI\",\"In Case You Missed It — pointer to noteworthy info shared earlier.\",\"“ICYMI, the outage postmortem is posted.”\",\"IDK\",\"I Don't Know — lack of information.\",\"“IDK the root cause yet; investigating.”\",\"IIRC\",\"If I Recall Correctly — hedged memory.\",\"“IIRC, that was fixed in 1.2.”\",\"IIUC\",\"If I Understand Correctly — confirm interpretation.\",\"“IIUC, only a config change is needed.”\",\"IMHO\",\"In My Humble Opinion — opinion preface.\",\"“IMHO, we should simplify.”\",\"IMO\",\"In My Opinion — opinion preface; a slightly less self-deprecating variant of IMHO.\",\"“IMO, we should ship feature‑flagged.”\",\"IRL\",\"In Real Life — referring to the physical/offline world as opposed to online/virtual contexts.\",\"“Let's meet IRL next week.”\",\"LGTM\",\"Looks Good To Me — code review approval.\",\"“LGTM, ship it.”\",\"LMGTFY\",\"Let Me Google That For You — snarky suggestion to search the web first; use sparingly as it can come across as dismissive.\",\"“LMGTFY: how to clear npm cache.”\",\"LMK\",\"Let Me Know — request a follow-up.\",\"“LMK if the deploy finishes.”\",\"MAME\",\"Multiple Arcade Machine Emulator — a free and open-source emulator designed to recreate the hardware of arcade game systems in software.\",\"Preserve gaming history by playing classic arcade games with MAME.\",\"MOTD\",\"Message Of The Day — login banner/notice.\",\"/etc/motd on login.\",\"NBD\",\"No Big Deal — indicates something is minor or not worth worrying about.\",\"“Missed the standup — NBD.”\",\"NIH\",\"Not Invented Here — bias to build your own instead of using existing solutions.\",\"Replacing a mature library with custom code.\",\"NP\",\"No Problem — acknowledgment that a request is fine or a task is acceptable.\",\"“NP, I can take this.”\",\"NSFW\",\"Not Safe For Work — content that may be inappropriate for professional settings.\",\"“NSFW: explicit language/images; open privately.”\",\"OOO\",\"Out Of Office — unavailable for work/response.\",\"“OOO until Monday.”\",\"OP\",\"Original Poster — thread/issue creator.\",\"“Per OP’s repro steps …”\",\"OT\",\"Off Topic — content not related to the main subject/thread.\",\"“OT: anyone tried the new keyboard switches?”\",\"OTOH\",\"On The Other Hand — introduces a contrasting point or alternative perspective.\",\"“We can optimize now; OTOH, premature optimization adds risk.”\",\"PEBKAC\",\"Problem Exists Between Keyboard And Chair — user error.\",\"Misconfigured client settings.\",\"PITA\",\"Pain In The Ass — something annoying or cumbersome; avoid in formal communication.\",\"“That migration was a PITA.”\",\"PTO\",\"Paid Time Off — time away from work.\",\"“On PTO next week.”\",\"QQ\",\"Quick Question — brief, low‑effort question or nudge for a short answer.\",\"“QQ: is staging using the new DB URL?”\",\"RIP\",\"Rest In Peace — tongue-in-cheek epitaph for a feature, service, or idea that just failed or was deprecated.\",\"“RIP staging cluster after that migration.”\",\"RPG\",\"Role-Playing Game — a game in which players assume the roles of characters in a fictional setting.\",\"Tabletop RPGs like D&D; computer RPGs like Final Fantasy.\",\"RTFM\",\"Read The F***ing Manual — read docs first.\",\"git rebase --help.\",\"SME\",\"Subject-Matter Expert — domain expert.\",\"Security SME review.\",\"SMH\",\"Shaking My Head — expresses disappointment or disbelief.\",\"“Prod creds in a script? SMH.”\",\"SO\",\"Stack Overflow — popular Q&A site for programming and software development.\",\"Link to an accepted SO answer for a solution/workaround.\",\"TANSTAAFL\",\"There Ain't No Such Thing As A Free Lunch — highlights that every choice has trade‑offs or hidden costs; nothing is truly free.\",\"“TANSTAAFL: caching speeds reads but adds complexity/invalidation.”\",\"TBA\",\"To Be Announced — details later.\",\"Rollout date TBA.\",\"TBD\",\"To Be Determined — not finalized.\",\"Owner TBD after planning.\",\"TBH\",\"To Be Honest — candid preface.\",\"“TBH, refactor first.”\",\"TFA\",\"The F***ing Article — read the article.\",\"TFA explains REST vs RPC.\",\"TIA\",\"Thanks In Advance — polite sign‑off indicating appreciation for help to come; consider whether it pressures recipients.\",\"“TIA for reviewing the PR.”\",\"TIL\",\"Today I Learned — sharing a new fact or insight just learned.\",\"“TIL git worktree simplifies multi-branch checkouts.”\",\"TL;DR\",\"Too Long; Didn't Read — summary.\",\"TL;DR: Use approach B.\",\"TLA\",\"Three-Letter Acronym — meta-acronym.\",\"“Another TLA.”\",\"TTYL\",\"Talk To You Later — casual sign-off indicating you’ll continue the conversation later.\",\"“Gotta run — TTYL.”\",\"WCGW\",\"What Could Go Wrong — tongue-in-cheek before risk.\",\"“Deploy Friday, WCGW?”\",\"WFH\",\"Work From Home — remote from home.\",\"“WFH today.”\",\"WTF\",\"What The F*** — expression of surprise, confusion, or frustration; avoid in formal communication.\",\"“WTF happened to the build pipeline?”\",\"YMMV\",\"Your Mileage May Vary — results differ.\",\"Different env outcomes.\",\"YOLO\",\"You Only Live Once — humorously justifies taking a risk; use with care.\",\"\\\"YOLO deploy\\\" on Friday — probably don't.\",\"Legacy\",\"MUD\",\"Multi-User Dungeon — a text-based, online multiplayer role-playing game; a precursor to MMORPGs.\",\"Connect via Telnet; DikuMUD, LPMud, MUSH/MUCK/MOO variants.\"]},\"36\":{\"h\":\"Organizations\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"ACM\",\"Association for Computing Machinery — international learned society for computing, publishing journals, conferences, curricula, and best practices.\",\"ACM SIGs (SIGGRAPH, SIGPLAN), ACM Digital Library, Turing Award.\",\"ANSI\",\"American National Standards Institute — U.S. standards organization that oversees and coordinates standards development and accredits standards bodies.\",\"ANSI C (C89/C90) standardization; coordinates U.S. positions in ISO/IEC JTC 1.\",\"ASF\",\"Apache Software Foundation — non‑profit that supports Apache open source projects and communities.\",\"Apache HTTP Server, Hadoop, Kafka, Spark under the ASF.\",\"BBN\",\"Bolt Beranek and Newman — pioneering research and engineering firm (now BBN Technologies) that built the ARPANET IMPs, advanced routing research, and contributed foundational internet and defense networking work.\",\"BBN designed ARPANET IMPs, hosted early TCP/IP research, and continued DARPA-funded networking projects.\",\"CNCF\",\"Cloud Native Computing Foundation — part of the Linux Foundation hosting cloud‑native projects and standards.\",\"Kubernetes, Prometheus, Envoy; CNCF landscape and graduation levels.\",\"ECMA\",\"Ecma International — industry association for information and communication systems standards.\",\"ECMAScript (JavaScript), C# (ECMA-334), CLI (ECMA-335).\",\"EFF\",\"Electronic Frontier Foundation — a non-profit organization defending civil liberties in the digital world.\",\"Advocates for privacy, free speech, and innovation online.\",\"FSF\",\"Free Software Foundation — GNU/GPL steward.\",\"Publishes GPL family.\",\"GNU\",\"GNU’s Not Unix — FSF project and philosophy.\",\"GNU toolchain/userland.\",\"IANA\",\"Internet Assigned Numbers Authority — coordinates global IP addressing, DNS root zone management (with ICANN), and protocol parameter registries (ports, DHCP options, etc.).\",\"Port numbers and protocol parameters registries; root zone management with ICANN.\",\"NIC\",\"Network Information Center — organization responsible for domain registration, IP allocation, and directory services in early networks; historically includes SRI-NIC (ARPANET) and national NICs.\",\"SRI's NIC handled ARPANET hostnames and RFC distribution; modern NICs manage ccTLDs (e.g., RIPE NCC, AFRINIC roles).\",\"ICANN\",\"Internet Corporation for Assigned Names and Numbers — oversees the global DNS root, IP address allocation policy coordination, and domain name registries/registrars.\",\"gTLD/ccTLD policies; WHOIS/RDAP; root zone stewardship.\",\"IEEE\",\"Institute of Electrical and Electronics Engineers — professional association and standards body producing technical standards.\",\"IEEE 802 (Ethernet/Wi‑Fi), IEEE 754 floating‑point.\",\"IETF\",\"Internet Engineering Task Force — open standards body that develops and publishes internet standards as RFCs.\",\"HTTP/1.1 (RFC 723x), TLS (RFC 8446), QUIC (RFC 9000); working groups and I-Ds.\",\"ISO\",\"International Organization for Standardization — independent, non‑governmental international standards body.\",\"ISO 8601 dates/times; ISO/IEC 9899 (C), ISO/IEC 14882 (C++).\",\"ITU‑T\",\"International Telecommunication Union — Telecommunication Standardization Sector; develops telecom standards (Recommendations) for networks, media, and services.\",\"ITU‑T H.264/H.265 (with ISO/IEC), G.711/G.722 codecs; numbering, signaling, and transport Recs.\",\"NIST\",\"National Institute of Standards and Technology — U.S. federal agency that develops standards, guidelines, and measurements to improve technology, cybersecurity, and commerce.\",\"NIST SP 800‑53/63/171 security guidelines; NIST hash/SHA competition; time services.\",\"OASIS\",\"OASIS Open — consortium that develops open standards for security, identity, content, and more.\",\"SAML, STIX/TAXII, KMIP; technical committees and OASIS specifications.\",\"OMG\",\"Object Management Group — consortium that develops technology standards, notably modeling/specification standards.\",\"UML, CORBA, BPMN standards; working groups and specifications.\",\"OSI\",\"Open Source Initiative — OSI-approved licenses.\",\"Open Source Definition stewardship.\",\"OWASP\",\"Open Web Application Security Project — a non-profit foundation focused on improving software security.\",\"The OWASP Top 10 list of critical web application security risks; OWASP ZAP scanner.\",\"PARC\",\"Palo Alto Research Center (formerly Xerox PARC) — famed industrial research lab that pioneered modern computing breakthroughs in GUIs, Ethernet, laser printing, and object-oriented systems.\",\"PARC's Alto workstation, Smalltalk environment, and Ethernet prototypes seeded foundational ideas adopted across the industry.\",\"PCI-SIG\",\"Peripheral Component Interconnect Special Interest Group — consortium that develops and maintains PCI and PCI Express specifications and compliance programs.\",\"PCIe 5.0/6.0 specs, CEM/ECNs; compliance workshops and device interoperability testing.\",\"SPEC\",\"Standard Performance Evaluation Corporation — develops industry‑standard benchmarks for computing performance and energy.\",\"SPEC CPU, SPECjbb, SPECpower; widely cited performance metrics.\",\"TPC\",\"Transaction Processing Performance Council — benchmarks for database and transaction processing systems.\",\"TPC‑C (OLTP), TPC‑H/TPC‑DS (analytics), audited results and full disclosure reports.\",\"W3C\",\"World Wide Web Consortium — standards body that develops web specifications and recommendations.\",\"HTML/CSS/DOM specs; Working Groups and drafts at w3.org.\",\"WHATWG\",\"Web Hypertext Application Technology Working Group — community maintaining living standards for HTML, DOM, and related web platform technologies.\",\"HTML Living Standard; DOM and URL standards co‑developed with browsers.\"]},\"37\":{\"h\":\"Licensing & Open Source\",\"t\":[\"Acronym\",\"Meaning\",\"Example\",\"AGPL\",\"GNU Affero GPL — copyleft with network-use clause.\",\"SaaS must release source of modifications.\",\"BSD\",\"Berkeley Software Distribution — permissive license family.\",\"BSD-2, BSD-3 clause variants.\",\"EULA\",\"End-User License Agreement — contract between software provider and end user defining usage rights/restrictions; common for proprietary software.\",\"Accept EULA during installation; governs redistribution and usage.\",\"FLOSS\",\"Free/Libre and Open Source Software — umbrella term.\",\"General discussions of FLOSS.\",\"FOSS\",\"Free and Open Source Software — umbrella term.\",\"FOSS projects and communities.\",\"GPL\",\"GNU General Public License — strong copyleft.\",\"Derivatives must remain open.\",\"LGPL\",\"GNU Lesser GPL — weak copyleft for linking.\",\"Use in libraries linkable from proprietary apps.\",\"MIT\",\"MIT License — simple permissive license.\",\"Many JS libs under MIT.\",\"OSS\",\"Open Source Software — software under OSI licenses.\",\"OSS adoption.\"]},\"38\":{\"h\":\"Memory Management\",\"t\":[\"TODO\"]},\"39\":{\"h\":\"\",\"t\":[\"In this section I talk about various topics about the Nim programming language.\"]},\"40\":{\"h\":\"Introduction\",\"t\":[\"Nim is my favourite programming language. For a long time I've relied on VS Code for my Nim development, since the effort around Nim tooling has focused on that editor. However, JetBrains IDEs have been my development environment of choice for many years, and I've yet to find a comparable experience anywhere else.\",\"Unfortunately, the official Nim plugin for JetBrains leaves a lot to be desired: closed source, its development seem to have stagnated, and it doesn't perform some of the basic features I've come to expect from a JetBrains IDE. I thought to myself: how hard could it be to make my own? I went through the IntelliJ Platform Plugin SDK documentation, and was overwhelmed both by the complexity and richness of the platform. So, as I usually do when I encounter a complex topic, I ignore all the warning signs and jump in head first. This is the story of that journey.\"]},\"41\":{\"h\":\"Developing a Language Plugin\",\"t\":[\"We'll use the IntelliJ IDE itself to develop the plugin in Kotlin. To run the plugin, IntelliJ uses a sandboxed version of itself, which is a separate installation of the IDE that loads the plugin. The following diagram shows the two instances of the IDEs, and what plugins are loaded in each.\",\"In the development IDE, we have the following plugins:\",\"Gradle: to manage the project and dependencies. Gradle itself has a number of plugins that are used to build the project: \",\"IntelliJ Platform Gradle Plugin (for building IntelliJ plugins)\",\"Kotlin Gradle Plugin (for compiling Kotlin code)\",\"Grammar-Kit Gradle Plugin (for generating the lexer and parser during the build)\",\"Plugin DevKit: to provide the necessary tools to develop a plugin.\",\"Grammar-Kit: to provide JFlex and BNF authoring support, and to generate the lexer and parser.\",\"The sandboxed IDE will host the plugin we're developing, and any other plugins we choose to install. The sandboxed IDE is run in Internal Mode, which enables many additional features through the Tools | Internal Actions menu. It also enables the built-in PSI viewer, which we will use to inspect the PSI tree of the code we're working with (more on PSI later).\",\"In the next section, we'll set up the development environment and create a new plugin project.\"]},\"42\":{\"h\":\"Project Setup\",\"t\":[\"Let's go ahead and install the requirements:\",\"IntelliJ IDEA Community Edition\",\"Plugins: \",\"Gradle (comes bundled with IntelliJ)\",\"Plugin DevKit\",\"Grammar-Kit\",\"Since we're going to target IntelliJ Platform 2024.2+, we'll need Java 21. On my macOS machine, I installed it using homebrew:\",\"$ brew install openjdk@21 \"]},\"43\":{\"h\":\"New Plugin Project\",\"t\":[\"Because we installed Plugin DevKit, we can now create a new project of type IDE Plugin.\",\"Unfortunately, the new project by default targets IntelliJ IDEA 2023.2 (using Java 17), and uses the IntelliJ Grade plugin version 1.x. We need to update the project to target IntelliJ IDEA 2024.2 (using Java 21) and use the IntelliJ Gradle plugin version 2.x. For this, we'll need to replace the build.gradle.kts file with the following:\",\"// build.gradle.kts plugins { id(\\\"org.jetbrains.intellij.platform\\\") version \\\"2.0.1\\\" id(\\\"org.jetbrains.kotlin.jvm\\\") version \\\"2.0.20\\\" } repositories { mavenCentral() intellijPlatform { defaultRepositories() } } dependencies { intellijPlatform { intellijIdeaCommunity(\\\"2024.2.1\\\") instrumentationTools() } } intellijPlatform { buildSearchableOptions = false } \",\"Here's a breakdown of the changes:\",\"We updated the IntelliJ Platform Gradle plugin to version 2.0.1.\",\"We updated the Kotlin plugin to version 2.0.20.\",\"We added the intellijPlatform block under repositories to add the defaultRepositories() to the project.\",\"We updated the intellijPlatform block under dependencies to target IntelliJ IDEA 2024.2.1. We also added the instrumentationTools() dependency to instrument the compiled code (like nullability assertions).\",\"We added the intellijPlatform block at the end of the file to configure the plugin build. For now, we only disabled building searchable options (which we don't need for now).\",\"We can now tell Gradle to reload the project from the Gradle tool window. Gradle will then download the configured Gradle plugins, and all the declared dependencies, including an IDEA Community Edition 2024.2 sandbox. It takes a while to download everything and index the dependencies, so be patient.\"]},\"44\":{\"h\":\"Plugin Configuration\",\"t\":[\"Plugins have an XML-driven configuration file called plugin.xml, stored under the src/main/resources/META-INF directory. It contains metadata about the plugin, such as the plugin ID, name, version, and description, as well as registrations for extension points that the plugin implements.\",\"Let's update the plugin.xml file to reflect the details of our plugin:\",\"<!-- src/main/resources/META-INF/plugin.xml --> <idea-plugin> <id>khaledh.nimjet</id> <name>NimJet</name> <vendor email=\\\"...\\\" url=\\\"...\\\">Khaled Hammouda</vendor> <description><![CDATA[A plugin for the Nim programming language.]]></description> <version>0.1.0</version> <!-- plugin dependencies on core modules --> <depends>com.intellij.modules.platform</depends> <depends>com.intellij.modules.lang</depends> <extensions defaultExtensionNs=\\\"com.intellij\\\"> <!-- extension point registrations go here --> </extensions> </idea-plugin> \",\"The <depends> elements declare the compatibility of the plugin with the IntelliJ Platform products.\",\"The com.intellij.modules.platform dependency is required all plugins to indicate dependency on shared functionality.\",\"The com.intellij.modules.lang dependency indicates dependency on the platform module that provides language support (e.g. syntax highlighting, code completion, etc.).\"]},\"45\":{\"h\":\"Running the Plugin\",\"t\":[\"Although we haven't written any code yet, we can still run the plugin to see if everything is set up correctly. To run the plugin, we trigger the runIde task from the Gradle tool window under Tasks > intellij platform > runIde.\",\"We should be presented with a new instance of IntelliJ IDEA 2024.2 with our plugin loaded. Let's create an empty test project and verify that our plugin is loaded by checking the Settings | Plugins dialog:\",\"Great! We can see that our plugin is loaded and enabled, although not doing anything at the moment.\",\"Tips\",\"When you close the sandbox project, the IDE doesn't completely close. Instead, it goes back to the welcome screen, which needs to be closed as well. Moreover, when you run the sandbox IDE again, it will show the welcome screen instead of the last project you had open. To avoid this, when you are in the project, quit the IDE using Cmd+Q (macOS), not by closing the project window.\",\"In the next section, we'll start by registering a new file type for the Nim language so that the IDE can recognize Nim files and associate them with our plugin.\"]},\"46\":{\"h\":\"File Type\",\"t\":[\"For the IDE to recognize files of a new language, we need to register a new file type. The following diagram shows the relationship between a few classes that are involved in registering a new file type.\",\"The NimFileType class, which extends LanguageFileType, is responsible for defining the file type, such as the file extension, icon, and language associated with the file type.\",\"The NimLanguage class, which extends Language, is used to identify the language. It defines the language ID, and optionally a display name, any MIME types associated with the language, and whether the language is case-sensitive.\"]},\"47\":{\"h\":\"File Type and Language\",\"t\":[\"Let's start by defining the language class for Nim. This is simply a singleton object that extends Language and defines the language ID as \\\"Nim\\\".\",\"// src/main/kotlin/khaledh/nimjet/NimLanguage.kt package khaledh.nimjet import com.intellij.lang.Language object NimLanguage : Language(\\\"Nim\\\") \",\"Next, we define the file type class.\",\"// src/main/kotlin/khaledh/nimjet/NimFileType.kt package khaledh.nimjet import com.intellij.openapi.fileTypes.LanguageFileType object NimFileType : LanguageFileType(NimLanguage) { override fun getName() = \\\"Nim\\\" override fun getDescription() = \\\"Nim file\\\" override fun getDefaultExtension() = \\\"nim\\\" override fun getIcon() = NimIcons.FILE } \",\"Let's break things down:\",\"We associate the Nim file type with the Nim language instance we created earlier.\",\"We provide a name and a description for the file type.\",\"We specify nim as the default extension for files of this type.\",\"We provide an icon for the file type.\",\"For the icon, I downloaded the Nim crown logo and placed it in the resources/icons folder. Let's create the NimIcons object to load the icon (if we need more icons later, we can add them here as well).\",\"// src/main/kotlin/khaledh/nimjet/NimIcons.kt package khaledh.nimjet import com.intellij.openapi.util.IconLoader object NimIcons { val FILE = IconLoader.getIcon(\\\"/icons/nim.png\\\", NimIcons::class.java) } \"]},\"48\":{\"h\":\"Registering the File Type\",\"t\":[\"Finally, we can register the file type in the plugin.xml file under the fileType extension point.\",\"<!-- src/main/resources/META-INF/plugin.xml --> <idea-plugin> <id>khaledh.nimjet</id> <!-- ... --> <extensions defaultExtensionNs=\\\"com.intellij\\\"> <fileType name=\\\"Nim\\\" language=\\\"Nim\\\" extensions=\\\"nim\\\" implementationClass=\\\"khaledh.nimjet.NimFileType\\\" fieldName=\\\"INSTANCE\\\"/> </extensions> </idea-plugin> \",\"It's not clear to me why we need to repeat the file type name, language and file extension here, since we've already defined them in the NimFileType class. I suspect it may have to do with the need for the IDE to gather all the information it needs about the file type without needing to load the class until it's actually needed.\"]},\"49\":{\"h\":\"Testing the File Type\",\"t\":[\"Let's run the sandbox IDE and create a new file with the .nim extension to see if the IDE recognizes it as a Nim file.\",\"Great! The IDE recognizes the file as a Nim file, and we can see the Nim icon in the file tree as well as the editor tab. We're now ready to flesh out the plugin with more features.\",\"Our next goal is to provide syntax highlighting for Nim files. But to get there, we need to implement a lexer first, since syntax highlighting is based on the tokens produced by the lexer. We'll cover that in the next section.\"]},\"50\":{\"h\":\"Lexer\",\"t\":[\"The role of the lexer is to tokenize the input text into a stream of tokens. Typically, this stream of tokens is used by the parser to build the Abstract Syntax Tree (AST) of the code, or in the case of an IntelliJ language plugin, the PSI tree, which we will get to in a later section. Another use for the lexer is to provide syntax highlighting in the editor, which gives different colors to different tokens depending on their type.\"]},\"51\":{\"h\":\"The Lexer Interface\",\"t\":[\"The IntelliJ Platform provides an abstract class called Lexer that language plugins can extend to implement their own lexer.\",\"public abstract class Lexer { public abstract void start(CharSequence buffer, int startOffset, int endOffset, int initialState); public abstract int getState(); public abstract IElementType getTokenType(); public abstract int getTokenStart(); public abstract int getTokenEnd(); public abstract void advance(); public abstract LexerPosition getCurrentPosition(); public abstract void restore(LexerPosition position); public abstract CharSequence getBufferSequence(); public abstract int getBufferEnd(); } \",\"Typically, the lexer works in a pull mode, where the caller repeatedly calls the getTokenType and advance in a loop to get the next token in the stream, until getTokenType returns null to indicate the end of the stream. The getTokenStart and getTokenEnd methods return the start and end offsets of the current token in the input buffer. The other methods are used to manage the lexer's state and position in the input.\",\"We can implement our own lexer from scratch by extending the Lexer class, but this is rarely done in practice. Instead, a lexer generator is typically used to generate the lexer code from a lexer specification. The lexer specification is a set of pattern matching rules that define the tokens in the language. Fortunately, the Grammar-Kit plugin supports the JFlex lexer generator out of the box, so we can use it to generate the lexer for Nim.\"]},\"52\":{\"h\":\"Lexer Components\",\"t\":[\"Let's first understand the different classes and interfaces that are involved in the lexer. The following diagram shows the relationships between these classes and interfaces.\",\"Given a lexer specification file, here called Nim.flex, JFlex generates a lexer class called NimLexer that implements the FlexLexer interface.\",\"However, the platform expects a lexer class that extends the Lexer abstract class, so an adapter class is needed to bridge the two. In our case, this adapter class is called NimLexerAdapter, and it extends the FlexAdapter base class, which does the actual work of adapting the FlexLexer interface to the Lexer interface. This is the class that will be used by the parser, not the generated NimLexer.\",\"The NimTokenType class is a specialization of the IElementType class, which is used to represent the different types of tokens in the language. The lexer will return instances of NimTokenType (which we will create later), or one of the built-in token types defined in the TokenType class, according to the matching rules in the lexer specification.\",\"In some cases, we may need to refer to a set of tokens as a single entity. For example, the set of all keywords in the language, or the set of all operators. This is where the TokenSet class comes in, which is a holder of IElementType instances. We will declare all token sets in the NimTokenSets class for easy access.\"]},\"53\":{\"h\":\"Lexer Specification\",\"t\":[\"JFlex comes from a family of lexer generators that has roots in the lex tool that was developed to generate lexical analyzers under Unix. Given a lexer specification file, JFlex generates a lexer class in Java that can be used to tokenize the input text.\",\"The lexer specification file includes three sections separated by %%:\",\"// User code %% // Options and declarations %% // Lexical rules \",\"User code\",\"This part is copied verbatim to the generated lexer class. It typically contains package declarations, imports, and other user-defined code.\",\"Options and declarations\",\"This part contains JFlex options and declarations. Options are used to configure the behavior of the lexer generator, while declarations are used to define variables and methods that are used in the lexical rules.\",\"Lexical rules\",\"This part contains the pattern matching rules that define the tokens in the language. Each rule consists of a regular expression pattern followed by a Java action that is executed when the pattern is matched. The action typically returns the token type of the matched token.\",\"Let's start by creating a minimal lexer specification file, Nim.flex, which contains the bare minimum to tokenize only whitespace for now (anything else will be considered a bad character).\",\"// src/main/kotlin/khaledh/nimjet/Nim.flex package khaledh.nimjet; import com.intellij.lexer.FlexLexer; import com.intellij.psi.TokenType; import com.intellij.psi.tree.IElementType; %% %class NimLexer %implements FlexLexer %function advance %type IElementType %char %unicode %% <YYINITIAL> { [ \\\\t\\\\n\\\\r]+ { return TokenType.WHITE_SPACE; } // error fallback [^] { return TokenType.BAD_CHARACTER; } } \",\"In the first section, we declare the package and imports that will be copied to the generated lexer class.\",\"In the second section, we specify the options and declarations:\",\"we specify the name to be used for the generated lexer class: NimLexer,\",\"specify that it implements the FlexLexer interface,\",\"speicfy the name of the function that advances the lexer to the next token as advance,\",\"specify the return type of the advance function as IElementType,\",\"specify that the lexer should count characters (so that the current offset is available to the parser), and\",\"specify that the lexer should use the full Unicode input character set.\",\"In the third section, we define the lexical rules. The rules are defined within the scope of states. The lexer can be in one of several states, depending on the context (e.g. inside a string literal, inside a comment, etc.). The initial state is called <YYINITIAL>. Here, we define the following rules under the initial state:\",\"The [ \\\\t\\\\n\\\\r]+ regex matches one or more whitespace characters and returns the built-in TokenType.WHITE_SPACE token type.\",\"The [^] is an error fallback regex that matches any character that was not matched by any of the previous rules, and returns the built-in TokenType.BAD_CHARACTER token type. We're using this expression instead of . since it matches any character, including newlines and unpaired Unicode surrogate characters.\",\"Later, we will add more rules to match the different tokens in the language.\"]},\"54\":{\"h\":\"Generating the Lexer\",\"t\":[\"The Grammar-Kit plugin provides an action to generate the lexer from the lexer specification file. To do that, right-click on the Nim.flex file in the project view or the editor, and select Run JFlex Generator from the context menu.\",\"This will generate the lexer class under the src/main/gen directory that looks like the following:\",\"// Generated by JFlex 1.9.2 http://jflex.de/ (tweaked for IntelliJ platform) // source: src/main/kotlin/khaledh/nimjet/Nim.flex package khaledh.nimjet; import com.intellij.lexer.FlexLexer; import com.intellij.psi.TokenType; class NimLexer implements FlexLexer { // ... } \",\"In order to include the generated lexer in the project, we need to add the src/main/gen directory to the sourceSets in the build.gradle.kts file:\",\"// build.gradle.kts ... sourceSets { main { java { srcDirs(\\\"src/main/gen\\\") } } } \",\"Let's also mark the src/main/gen directory as a generated source directory in IntelliJ. To do that, right-click on the src/main/gen directory in the project view, and select Mark Directory as | Generated Sources Root.\"]},\"55\":{\"h\":\"Automating the Lexer Generation\",\"t\":[\"There's one inconvenience though: every time we change the lexer specification file, we need to manually run the JFlex generator to update the lexer. To automate this process, we can use the generateLexer task that comes with the Grammar-Kit Gradle plugin. Let's add the plugin to the build file and configure the task:\",\"// build.gradle.kts plugins { id(\\\"org.jetbrains.intellij.platform\\\") version \\\"2.0.1\\\" id(\\\"org.jetbrains.kotlin.jvm\\\") version \\\"2.0.20\\\" id(\\\"org.jetbrains.grammarkit\\\") version \\\"2022.3.2.2\\\" } ... tasks { generateLexer { sourceFile = file(\\\"src/main/kotlin/khaledh/nimjet/Nim.flex\\\") targetOutputDir = file(\\\"src/main/gen/khaledh/nimjet\\\") purgeOldFiles = true } compileJava { dependsOn(generateLexer) } compileKotlin { dependsOn(generateLexer) } } \",\"This configures the generateLexer task and makes it a dependency of the compileJava and compileKotlin tasks, so that the lexer is generated every time the project is compiled.\",\"At this point it would be good to test the lexer to make sure it's working as expected. Unfortunately, we can't register the lexer directly. We'll need to create a parser definition and register that first, which provides access to the lexer. We'll get to that in the next section.\"]},\"56\":{\"h\":\"Parser\",\"t\":[\"In this section, we will explore the various concepts involved in parsing, including how the parser works, structure of the AST and the PSI, and how they are related. In the next section, we will implement a simple parser by hand, before moving on to generate the parser using Grammar-Kit.\"]},\"57\":{\"h\":\"Overview\",\"t\":[\"In order to work with the language constructs at a higher level, we need to parse the source code. The parser is responsible for converting the stream of tokens provided by the lexer into an abstract syntax tree (AST).\",\"However, while the AST provides a view into the structure of the source code, it does not provide any semantic information. For example, while the parser can determine that a sequence of tokens is a function call, it cannot determine if the function is defined or if the arguments are valid. This is where the Program Structure Interface (PSI) comes in. The PSI is built on top of the AST, and provides a higher-level API for working with the source code.\",\"The following diagram shows the relationship between the lexer, parser, AST, and PSI.\",\"The lexer reads the source code as a sequence of characters and produces a stream of tokens.\",\"The parser (with the help of PsiBuilder) reads the stream of tokens and produces an abstract syntax tree (AST).\",\"The conversion from AST to PSI is done through the ParserDefinition.createElement() method, which is responsible for creating the appropriate PSI elements for a given AST node.\",\"I'm not sure why the PsiBuilder is named as such, since it is used in the parsing step which produces AST nodes, not PSI elements. In my opinion, it would make more sense to name it AstBuilder instead ¯\\\\_(ツ)_/¯.\"]},\"58\":{\"h\":\"AST Structure\",\"t\":[\"Every node in the AST is represented by the ASTNode interface, which holds a reference to an IElementType object that represents the type of the node. There are three types of nodes in the AST, represented by classes that extend IElementType:\",\"the root node: represents the entire file (an instance of IFileElementType),\",\"intermediate nodes: represent the production rules in the grammar (instances of NimElementType), and\",\"leaf nodes: represent the tokens produced by the lexer (instances of NimTokenType).\",\"Note that the IFileElementType node type has nothing to do with the file type discussed in the File Type section. The former is a node type in the AST, while the latter represents a file type in the IDE (which does not necessarily have to be a language file).\",\"In the following diagram, I try to illustrate these types of nodes, their base classes, and how the AST is created by the parser.\",\"The three boxes labelled with the AST tag represent the three types of nodes described above. They are given placeholder names to indicate that they are instances of classes that extend IElementType, and that the name of those instances depends on the language construct they represent.\",\"$FileElementName$ is a singleton that represents the root node type of the AST (e.g. NIM_FILE)\",\"$ElementName$ represents an intermediate node (e.g. CASE_STMT)\",\"$TokenName$ represents a leaf node (e.g. STRING_LIT)\",\"But how does the parser actually create the AST? In the diagram, NimParser is the actual parser class (which can be handwritten or generated), which drives the PsiBuilder by marking regions of tokens in the input stream as nodes in the tree. When the parser tries to parse a grammar rule, it tells the PsiBuilder to start a marker (a region of tokens that will be converted into a node in the AST), and then calls the appropriate method to parse the rule. When the rule is successfully parsed, the parser tells the PsiBuilder to set the marker as done, and passes the matched element type to be associated with the node. If the rule is not parsed successfully, the parser either tells the PsiBuilder to rollback the marker, or generate an error node. Creating markers is done recursively, as the parser descends into the grammar rules.\",\"As nodes are marked by the parser, the PsiBuilder creates ASTNode instances (implemented by TreeElement), to represent the nodes in the AST. Each ASTNode has a reference to the IElementType object that represents the type of the node (the ones mentioned above). The parser returns the final root node of the AST by calling the PsiBuilder.getTreeBuilt() method.\",\"The final piece of the puzzle is the ParserDefinition class, which provides methods for creating the lexer (createLexer), the parser (createParser), and the element type representing the root node of the AST (getFileNodeType), which is an instance of IFileElementType.\",\"The ParserDefinition class also provides a few methods for returning TokenSet objects (not shown in the diagram) that identify certain types of tokens: comments, whitespace, and string literals.\",\"getWhitespaceTokens(): returns a TokenSet of whitespace tokens. These tokens are typically ignored by the parser.\",\"getCommentTokens(): returns a TokenSet of comment tokens. These tokens are also typically ignored by the parser. They are also used to search for TODO patterns in comments.\",\"getStringLiteralElements(): returns a TokenSet of string literal tokens. These tokens are used by the \\\"Search in strings\\\" option during refactoring.\"]},\"59\":{\"h\":\"PSI Structure\",\"t\":[\"As mentioned earlier, the PSI is built on top of the AST, and provides a higher-level API for working with the source code. You can think of the PSI as an enriched view of the AST, with capabilities to navigate, search, and modify the source code. The following diagram shows the different classes and interfaces that make up the PSI, and their relationship to the AST and the ParserDefinition.\",\"The bridge between the AST and the PSI is the ASTWrapperPsiElement class, which is a wrapper around an ASTNode that implements the PsiElement interface. The AST is converted to a PSI tree through the ParserDefinition.createElement() method, which creates the appropriate PSI element for a given AST node.\",\"The entire file is represented by an instance of the PsiFile interface, which also extends PsiElement. This interface is the typical entry point for working with the PSI tree. In our case, the NimFile class implements PsiFile, and is created through the ParserDefinition.createFile() method.\",\"The PSI tree is then used by the IDE to provide code completion, navigation, refactoring, and other features.\",\"Now that we have an idea of how the various components of the parser work together, in the next section we will implement a very simpler parser by hand for a simple statement to get a deeper understanding of the process. Later, we will use Grammar-Kit to generate the parser for us from a BNF grammar, since writing a full parser for Nim by hand would be tedious and error-prone.\"]},\"60\":{\"h\":\"Parser Implementation\",\"t\":[\"In this section, we will implement a simple parser by hand to parse the following Nim statement:\",\"echo \\\"Hello, World!\\\" \",\"The result of the parsing will be:\",\"an AST representing the structure of the statement, and\",\"an equivalent PSI tree that the IDE recognizes and can work with.\",\"We will rely on the built-in PSI viewer to inspect the PSI tree generated by our parser.\"]},\"61\":{\"h\":\"Token, Element, and PSI Types\",\"t\":[\"Before we start parsing, we need to define the token and element types we will be using. Let's start with the token types:\",\"// src/main/kotlin/khaledh/nimjet/NimTokenType.kt ... class NimTokenType(debugName: String) : IElementType(debugName, NimLanguage) interface NimToken { companion object { @JvmField val IDENTIFIER = NimTokenType(\\\"IDENTIFIER\\\") @JvmField val STRING_LIT = NimTokenType(\\\"STRING_LIT\\\") } } \",\"We define two token types: IDENTIFIER and STRING_LIT, which are instances of NimTokenType (which extends IElementType). We will use IDENTIFIER to represent the echo proc name, and STRING_LIT to represent the string literal \\\"Hello, World!\\\".\",\"Note: The @JvmField annotation is used to expose the companion object fields as static fields so that we can refer to them as NimToken.IDENTIFIER instead of NimToken.Companion.IDENTIFIER. \",\"Next, we define the element types that will be used to represent the nodes in the AST:\",\"// src/main/kotlin/khaledh/nimjet/NimElementType.kt ... class NimElementType(debugName: String) : IElementType(debugName, NimLanguage) interface NimElement { companion object { @JvmField val FILE = IFileElementType(NimLanguage) @JvmField val STMT = NimElementType(\\\"STMT\\\") } } \",\"We have two element types: FILE, which is an instance of IFileElementType (the root element type), and STMT, which is an instance of NimElementType. We will use the STMT element to represent the whole statement.\",\"Finally, we define the PSI element types that will be used to represent the nodes in the PSI tree. We'll use a separate class/file for each PSI element, since we'll be adding more functionality to them later. First, let's define the root PSI element, NimFile:\",\"// src/main/kotlin/khaledh/nimjet/psi/NimFile.kt ... class NimFile(viewProvider: FileViewProvider) : PsiFileBase(viewProvider, NimLanguage) { override fun getFileType(): FileType = NimFileType override fun toString(): String = \\\"NimFile\\\" } \",\"The NimFile class extends PsiFileBase, which is a base class that provides a default implementation for the PsiFile interface methods. We override getFileType to return our NimFileType instance, and toString to return a string representation of the PSI file node.\",\"Next, we define the PSI element for the statement, NimStmt:\",\"// src/main/kotlin/khaledh/nimjet/psi/NimStmt.kt ... class NimStmt(node: ASTNode) : ASTWrapperPsiElement(node) \",\"All PSI elements will extend ASTWrapperPsiElement, which is a base class that wraps an ASTNode and provides a default implementation for the PsiElement interface methods.\",\"This completes the definition of the token, element, and PSI types we will be using in our simple parser.\"]},\"62\":{\"h\":\"Lexer\",\"t\":[\"Let's update our JFlex lexer spec to recognize the two types of tokens we introduced:\",\"// src/main/kotlin/khaledh/nimjet/Nim.flex ... import khaledh.nimjet.NimTokenType; %% ... %% <YYINITIAL> { [a-zA-Z][a-zA-Z0-9]* { return NimToken.IDENTIFIER; } \\\\\\\"([^\\\\\\\"\\\\\\\\]|\\\\\\\\.)*\\\\\\\" { return NimToken.STRING_LIT; } [ \\\\t\\\\n\\\\r]+ { return TokenType.WHITE_SPACE; } // error fallback [^] { return TokenType.BAD_CHARACTER; } } \",\"We added two rules to match the two token types we defined:\",\"IDENTIFIER: matches any sequence of letters and digits starting with a letter\",\"STRING_LIT: matches a string literal enclosed in double quotes (with support for escape sequences)\"]},\"63\":{\"h\":\"Parser\",\"t\":[\"Now, let's implement the parser. We will create a NimParser class that extends PsiParser, and drives a PsiBuilder to create the AST by marking regions of tokens as nodes in the tree. The parsing approach we will use is called recursive descent, where each grammar rule is implemented as a method in the parser class. Let's start with a simple implementation without error handling to focus on the parsing logic:\",\"// src/main/kotlin/khaledh/nimjet/NimParser.kt ... class NimParser : PsiParser { // Grammar: // file ::= stmt // stmt ::= IDENTIFIER STRING_LIT override fun parse(root: IElementType, builder: PsiBuilder): ASTNode { parseFile(root, builder) return builder.treeBuilt } private fun parseFile(root: IElementType, builder: PsiBuilder) { var marker = builder.mark() parseStmt(builder) marker.done(NimElement.FILE) } private fun parseStmt(builder: PsiBuilder) { var marker = builder.mark() assert(builder.tokenType == NimToken.IDENTIFIER) builder.advanceLexer() assert(builder.tokenType == NimToken.STRING_LIT) builder.advanceLexer() marker.done(NimElement.STMT) } } \",\"The parser is very simple: it defines two grammar rules:\",\"file ::= stmt: a file consists of a single statement\",\"stmt ::= IDENTIFIER STRING_LIT: a statement consists of an identifier followed by a string literal\",\"The recursive descent parsing is done by starting with the parseFile method, which represents the file rule. Since the rule consists of a single statement, we descend into the stmt rule by calling parseStmt. The parseStmt method parses its rule by asserting that there is an IDENTIFIER token followed by a STRING_LIT token (advancing the lexer after each token). A proper implementation would include error handling and reporting, but they're intentionally omitted here for simplicity.\",\"To tell the PsiBuilder that a region of tokens should be converted into a node in the AST, we create a marker by calling builder.mark() at the beginning of the region, and then call done on the marker at the end of the region to convert it into a node. You'll see this being done in the parseFile and parseStmt methods, where a marker is set at the beginning of the rule, and then marked as done when the rule is successfully parsed. The done method takes the element type to be associated with the node, which is NimElement.FILE (the root element) for the file node, and NimElement.STMT for the statement node.\",\"Needless to say, this parser will crash if the input doesn't exactly match the grammar rules. We'll improve it later to handle errors gracefully.\"]},\"64\":{\"h\":\"Parser Definition\",\"t\":[\"Let's now create the NimParserDefinition class, which we will register as an extension to the com.intellij.lang.parserDefinition extension point. This class provides the IDE with the necessary methods to create the lexer, parser, and a few other things:\",\"// src/main/kotlin/khaledh/nimjet/NimParserDefinition.kt ... class NimParserDefinition : ParserDefinition { override fun createLexer(project: Project?): Lexer = NimLexerAdapter() override fun createParser(project: Project?): PsiParser = NimParser() // AST override fun getFileNodeType(): IFileElementType = NimElement.FILE override fun getWhitespaceTokens(): TokenSet = TokenSet.WHITE_SPACE override fun getCommentTokens(): TokenSet = TokenSet.EMPTY override fun getStringLiteralElements(): TokenSet = TokenSet.create(NimToken.STRING_LIT) // PSI override fun createFile(viewProvider: FileViewProvider): PsiFile = NimFile(viewProvider) override fun createElement(node: ASTNode): PsiElement { return when (node.elementType) { STMT -> NimStmt(node) else -> throw AssertionError(\\\"Unknown element type: ${node.elementType}\\\") } } } \",\"Most of the methods should be self-explanatory. The last method, createElement, is responsible for creating the appropriate PSI element for a given AST node. In our case, we only have one type of element, STMT, so we create a NimStmt instance for that element type, and throw an error if we encounter an unknown element type (for now).\",\"Finally, we need to register the NimParserDefinition class in the plugin.xml file:\",\"<!-- src/main/resources/META-INF/plugin.xml --> <idea-plugin> ... <extensions defaultExtensionNs=\\\"com.intellij\\\"> ... <lang.parserDefinition language=\\\"Nim\\\" implementationClass=\\\"khaledh.nimjet.NimParserDefinition\\\"/> </extensions> </idea-plugin> \",\"This completes the implementation of the parser. We can now test it by running the plugin and inspecting the PSI tree using the built-in PSI viewer.\"]},\"65\":{\"h\":\"Testing the Parser\",\"t\":[\"Let's run the Run Plugin gradle task to start the IDE with our plugin. Once the IDE starts, create a new file with the following content:\",\"echo \\\"hello, world!\\\" \",\"Now, open the PSI viewer from the Tools | View PSI Structure of Current File menu.\",\"Great! We can see the PSI tree with the NimFile and NimStmt nodes, in addition to the IDENTIFIER and STRING_LIT tokens under the NimStmt node. Our simple parser is working as expected.\"]},\"66\":{\"h\":\"Error Handling\",\"t\":[\"Let's add error handling to our parser to make it more robust. We'll change the parser to detect and recover from errors, and report them to the user. We'll make each parsing method return a boolean indicating whether the rule was successfully parsed. If a rule fails, we'll mark the region as error and return early. Since returning early means that not all tokens are consumed, we need to advance the lexer to the end of the token stream to ensure that the PSI tree is properly built (this is a requirement of the PsiBuilder).\",\"Here's the updated parser:\",\"// src/main/kotlin/khaledh/nimjet/NimParser.kt ... class NimParser : PsiParser { // Grammar: // file ::= stmt // stmt ::= IDENTIFIER STRING_LIT override fun parse(root: IElementType, builder: PsiBuilder): ASTNode { parseFile(root, builder) return builder.treeBuilt } private fun parseFile(root: IElementType, builder: PsiBuilder) { var marker = builder.mark() if (!builder.eof()) { parseStmt(builder) } // consume any remaining tokens (in case of error) while (!builder.eof()) { builder.advanceLexer() } marker.done(NimElement.FILE) } private fun parseStmt(builder: PsiBuilder): Boolean { var marker = builder.mark() if (builder.tokenType != NimToken.IDENTIFIER) { reportError(builder, \\\"Expecting an identifier\\\") marker.drop() return false } builder.advanceLexer() if (builder.tokenType != NimToken.STRING_LIT) { reportError(builder, \\\"Expecting a string literal\\\") marker.drop() return false } builder.advanceLexer() marker.done(NimElement.STMT) return true } private fun reportError(builder: PsiBuilder, message: String) { var marker = builder.mark() builder.advanceLexer() marker.error(message) } } \",\"We added a check for the end of the token stream in the parseFile method to ensure that we don't try to parse an empty file. The reportError method is used to mark the region as an error and report the error message to the user. If a rule fails, we drop the marker and return false to indicate that the rule was not successfully parsed.\",\"Let's run the plugin again and test the error handling by creating a file with the contents echo hello (missing the string quotation marks).\",\"And it works! The token hello is marked as an error with a red squiggly line, and our error message is displayed when we hover over the token.\",\"OK, we now have a good understanding of how to implement a parser by hand. In the next section, we will look at how to generate a parser using Grammar-Kit by defining the grammar in a BNF-like format. This will allow us to focus on the language grammar rules without worrying about the details of the lexer and parser implementation.\"]},\"67\":{\"h\":\"Grammar-Kit\",\"t\":[\"Grammar-Kit is a JetBrains plugin for generating a parser (and a lexer, if needed) from a grammar specification file that uses a BNF-like syntax. Not only does it generate the parser, but it also generates the PSI classes of the language. This is a huge time-saver, as it allows us to focus on the language syntax and semantics rather than the parsing details.\"]},\"68\":{\"h\":\"The BNF File\",\"t\":[\"The grammar specification file is written in a BNF-like syntax. The file two types of sections: an attributes section and a grammar rules section. The attributes section allows us to customize the generated parser and PSI classes, while the grammar rules section defines the language syntax. Here's a simple example of such a BNF file:\",\"// Attributes { parserClass=\\\"generated.MyParser\\\" } // Grammar Root ::= BEGIN (MyStmt SEMI)* END MyStmt ::= PrintStmt | ... PrintStmt ::= PRINT STRING_LIT \",\"In the attributes section we specified the fully qualified name of the parser class that will be generated. In the grammar section, we defined the syntax of a simple language that consists of a BEGIN keyword followed by a sequence of statements separated by semicolons (the SEMI token), and ending with an END keyword. The PrintStmt rule defines a statement that consists of a PRINT keyword followed by a string literal.\",\"There are no restrictions on the names of the rules or the tokens, but here I'm adopting the following convention:\",\"Rule names are in PascalCase (those are intermediate nodes in the AST)\",\"Token names are in UPPER_SNAKE_CASE (those are leaf nodes in the AST)\"]},\"69\":{\"h\":\"Generating the Parser\",\"t\":[\"To generate the parser, we can right-click on the grammar file and select the Generate Parser Code action. This will generate the parser and lexer classes under the src/main/gen directory (as opposed to the src/main/kotlin directory where we have our handwritten code). By default, Grammar-Kit generates the following set of classes:\",\"src/main/gen └── generated ├── psi │ ├── impl │ │ ├── MyStmtImpl.java │ │ └── PrintStmtImpl.java │ ├── MyStmt.java │ ├── PrintStmt.java │ └── Visitor.java ├── MyParser.java └── GeneratedTypes.java \",\"For PSI, Grammar-Kit generates pairs of interfaces and implementation classes for each rule in the grammar. For example, the PrintStmt rule will have an interface PrintStmt and an implementation class PrintStmtImpl. The Visitor interface is used to traverse the PSI tree, and the GeneratedTypes class contains the token and rule element types (extending IElementType). It also contains an inner Factory class with a single method createElement that creates the appropriate PSI element for a given AST node (used by the ParserDefinition.createElement() method to create PSI elements).\",\"We can also ask Grammar-Kit to generate a lexer for us by right-clicking on the grammar file and selecting the Generate JFlex Lexer action. This will generate the lexer specification file, but we have to select the location where we want to save it - let's say we save it under src/main/gen/generated as MyLexer.flex (alongside the generated parser and PSI). Now we can right-click on the lexer file and select the Run JFlex Generator action, which will generate the lexer class MyLexer under the src/main/gen/generated directory. So, in addition to the above files, we will have:\",\"src/main/gen └── generated ├── ... ├── MyLexer.flex └── MyLexer.java \",\"While generating the lexer is convenient, it is not flexible enough for complex languages that require custom lexing rules (like Nim). So, we will keep our handwritten lexer and tokens, and tell Grammar-Kit to use them instead.\",\"We also won't need a visitor class for now, so we'll tell Grammar-Kit not to generate it as well.\"]},\"70\":{\"h\":\"A Simple Nim BNF\",\"t\":[\"Let's create a BNF file for Nim that would parse the echo \\\"hello, world\\\" statement that we used in the previous sections.\",\"{ generate=[tokens=\\\"no\\\" visitor=\\\"no\\\"] parserClass=\\\"khaledh.nimjet.parser.NimParser\\\" parserImports=\\\"static khaledh.nimjet.lexer.NimToken.*\\\" elementTypeClass=\\\"khaledh.nimjet.parser.NimElementType\\\" elementTypeHolderClass=\\\"khaledh.nimjet.parser.NimElement\\\" psiPackage=\\\"khaledh.nimjet.psi\\\" psiImplPackage=\\\"khaledh.nimjet.psi.impl\\\" } Root ::= !<<eof>> NimStmt NimStmt ::= IDENTIFIER STRING_LIT \",\"In the attributes section, we specified:\",\"that we don't want Grammar-Kit to generate tokens or a visitor class\",\"the fully qualified name of the NimParser class that will be generated\",\"the parser imports that we need, which are the token types from our lexer\",\"the fully qualified name of the element type class NimElementType that we created previously; Grammar-Kit will use this class to create instances of the AST element types\",\"the class that will hold the instances of the element types: NimElement\",\"the package names for the PSI and PSI implementation classes\",\"In the grammar section, we defined the syntax of a simple Nim file that consists of a single statement, which is an identifier followed by a string literal.\",\"Notice the !<<eof>> syntax in the Root rule. The <<...>> syntax is used to invoke an external rule defined in parser, which in this case is the built-in eof rule that matches the end of the file. The ! operator negates the rule, so having !<<eof>> at the beginning of the Root rule won't match an empty file. This prevents the parser from generating an error when the file is empty.\"]},\"71\":{\"h\":\"Generating the Nim Parser\",\"t\":[\"Now we can right-click on the Nim BNF file and select the Generate Parser Code action to generate the parser classes. We will end up with the following set of classes:\",\"src/main/gen └── khaledh/nimjet ├── parser │ ├── NimElement.java │ └── NimParser.java └── psi ├── impl │ └── NimStmtImpl.java └── NimStmt.java \",\"Our handwritten part of the parser should be structured as follows, under the src/main/kotlin directory:\",\"src/main/kotlin └── khaledh/nimjet ... ├── parser │ ├── Nim.bnf │ ├── NimElementType.kt │ └── NimParserDefinition.kt └── psi └── NimFile.kt \",\"And to complete the organization, we should have the lexer and the various language plugin classes also tidied up as follows:\",\"src/main/kotlin └── khaledh/nimjet ├── lang │ ├── NimFileType.kt │ ├── NimIcons.kt │ └── NimLanguage.kt ├── lexer │ ├── Nim.flex │ ├── NimLexerAdapter.java │ ├── NimToken.kt │ └── NimTokenType.kt ├── parser │ ... └── psi ... \",\"If we test the plugin now, we should have the same functionality as before, but with the parser generated by Grammar-Kit in this case. As a final step, let's automate generating the parser using the Gradle build script, as we did with the lexer.\",\"// build.gradle.kts ... tasks { generateLexer { ... } generateParser { sourceFile = file(\\\"src/main/kotlin/khaledh/nimjet/parser/Nim.bnf\\\") targetRootOutputDir = file(\\\"src/main/gen\\\") pathToParser = \\\"khaledh/nimjet/parser/NimParser.java\\\" pathToPsiRoot = \\\"khaledh/nimjet/psi\\\" purgeOldFiles = true } compileJava { dependsOn(generateLexer) dependsOn(generateParser) } compileKotlin { dependsOn(generateLexer) dependsOn(generateParser) } } \",\"This should take care of generating the parser whenever we build the project, so we don't have to manually run the Grammar-Kit action every time we change the BNF file (unless we need to inspect the generated code, of course).\"]},\"72\":{\"h\":\"Go To Declaration\",\"t\":[\"Now that we've got the basics in place, let's add our first actual feature: Go To Declaration. Consider this simple Nim program:\",\"let msg = \\\"hello\\\" # <- declaration echo msg # <- reference \",\"We want to be able to navigate from the identifier msg in echo msg to the declaration of msg on the first line. In IntelliJ terminology, the msg identifier on the second line is called a reference, which can be resolved to its declaration element.\",\"The IDE knows that a PSI element is a reference if its getReference() method returns a PsiReference object. This object is not the target element, but rather an object that can resolve the reference to its target by invoking its resolve() method. The implementation of the resolve() method will have to locate the target element in the PSI tree, which can get complex depending on the scoping rules of the language.\",\"Let's take a look at the AST generated by the Nim compiler for this code snippet. We can use the dumpTree macro from the macros module to print the AST:\",\"# dumptree.nim import std/macros dumpTree: let msg = \\\"hello\\\" echo msg \",\"Macros are evaluated at compile time, so to see the output we just need to compile the program using nim c dumptree.nim:\",\"StmtList LetSection IdentDefs Ident \\\"msg\\\" Empty StrLit \\\"hello\\\" Command Ident \\\"echo\\\" Ident \\\"msg\\\" \",\"The Ident node on line 4 is the declaration of msg, and the one on line 9 is the reference to that declaration. In Nim, one of the places where declarations can be found is the LetSection node, as seen in the output above. So, we need to implement getReference on the element representing the reference to return a PsiReference object. That object will implement resolve to find and return the declaration under the LetSection node.\",\"However, instead of creating a dedicated class for the reference, we can use the PSI class representing the identifier itself; we just need to make it implement the PsiReference interface. One more thing, even though the Nim AST defines both the declaration and the reference as Ident nodes, it will make our lives easier if we create a separate PSI class for each, e.g. IdentDecl and IdentRef. This way, we can avoid any confusion between the two, and will make identifying IdentDecl in the tree easier when resolving a reference.\"]},\"73\":{\"h\":\"Updating the Grammar\",\"t\":[\"Let's start by updating the grammar to support the two statements in the example above. We'll use a simplified version of the Nim AST to guide us:\",\"// src/main/kotlin/khaledh/nimjet/parser/Nim.bnf { ... } Module ::= !<<eof>> StmtList StmtList ::= Stmt* Stmt ::= LetSection | Command LetSection ::= LET IdentDecl EQ STRING_LIT Command ::= IdentRef IdentRef IdentDecl ::= IDENT IdentRef ::= IDENT \",\"You'll notice that I simplified the LetSection rule to allow only a single declaration for now (we'll come back to handling multiple declarations in a single let section later), using IdentDecl instead of an undifferentiated IDENT. The Command rule is also simplified to only allow two IdentRef elements.\",\"If we generate the parser and PSI classes now, we'll have the following files:\",\"src/main/gen └── khaledh/nimjet ├── parser │ ├── NimElement.java │ └── NimParser.java └── psi ├── impl │ ├── CommandImpl.java │ ├── IdentDeclImpl.java │ ├── IdentRefImpl.java │ ├── LetSectionImpl.java │ ├── Stmt.java │ └── StmtListImpl.java ├── Command.java ├── IdentDecl.java ├── IdentRef.java ├── LetSection.java ├── Stmt.java └── StmtList.java \"]},\"74\":{\"h\":\"Reference Mixin\",\"t\":[\"Our goal is to be able to navigate from a reference to its declaration. In our case, the reference element is IdentRef, and the declaration element is IdentDecl. The reference element needs to override the getReference method to return a PsiReference object. But how do we tell Grammar-Kit to generate the getReference method for IdentRef? The answer is using mixins. The way mixins work in Grammar-Kit is that we create a mixin class for a particular element, and then we tell Grammar-Kit to mix that class into the generated PSI class for that element. So, let's go ahead and create a mixin class for IdentRef that implements the getReference method:\",\"// src/main/kotlin/khaledh/nimjet/psi/impl/IdentRefMixin.kt ... abstract class IdentRefMixin(node: ASTNode) : ASTWrapperPsiElement(node), IdentRef { override fun getReference(): PsiReference { return IdentReference(this, TextRange(0, this.textLength)) } } \",\"We haven't implemented IdentReference yet; we'll do that in a moment. But first, notice that the mixin class extends ASTWrapperPsiElement, and implements the IdentRef interface generated by Grammar-Kit. Normally, this signature would be implemented by the generated IdentRefImpl class, but when we tell Grammar-Kit to use a mixin class for an element, it will use the mixin class as the base class for the element instead. So, the generated IdentRefImpl class will extend IdentRefMixin, and that's why the mixin class needs to take over the responsibility of extending ASTWrapperPsiElement.\",\"Let's update the BNF file to use the mixin:\",\"{ ... mixin(\\\"IdentRef\\\")=\\\"khaledh.nimjet.psi.impl.IdentRefMixin\\\" } ... \",\"Now, if we generate the parser and PSI classes, we'll see that the IdentRefImpl class extends IdentRefMixin instead of ASTWrapperPsiElement:\",\"// src/main/gen/khaledh/nimjet/psi/impl/IdentRefImpl.java ... public class IdentRefImpl extends IdentRefMixin implements IdentRef { ... } \",\"Now, let's implement the IdentReference class, which represents the reference to an identifier. This class will implement the PsiReference interface, and its resolve method will find and return the declaration element in the PSI tree.\",\"// src/main/kotlin/khaledh/nimjet/psi/IdentReference.kt ... class IdentReference(element: IdentRef, textRange: TextRange) : PsiReferenceBase<IdentRef>(element, textRange) { override fun resolve(): PsiElement? { // This is a naive implementation; we'll improve it later val identDecl = PsiTreeUtil.findChildOfType<IdentDecl>( myElement.containingFile, IdentDecl::class.java ) return if (identDecl?.name == myElement.text) identDecl else null } } \",\"The resolve method uses the PsiTreeUtil utility class to find the first child of the file that is an IdentDecl element. It then checks if the name of the declaration matches the text of the reference, and returns the declaration element if it does.\",\"Obviously, this is a naive implementation that works only if the first declaration in the file is the one we're looking for. Another thing I'm ignoring here is Nim's insensitivity to naming style (e.g. myVar and my_var are considered the same). This is just simple way to demonstrate the concept. We'll improve it later.\"]},\"75\":{\"h\":\"Declaration Mixin\",\"t\":[\"Now that we have the reference side of things set up, let's move on to the declaration side. The platform docs state that:\",\"Every PSI element that can be renamed or referenced needs to implement [the] PsiNamedElement interface.\",\"It also mentions, in a different section, that:\",\"In order to enable more advanced functionality, prefer implementing PsiNameIdentifierOwner over PsiNamedElement where possible.\",\"It's not clear to me in what context and what features PsiNameIdentifierOwner provides over PsiNamedElement. From what I can tell, PsiNameIdentifierOwner is used when the name of the element is not directly accessible from the element itself, but is instead stored in a separate child element. In our case, the actual name of the identifier is stored in the IDENT token, which is a child of the IdentDecl element. So, we'll go with PsiNamedElement and implement its getNameIdentifier method to return the IDENT element.\",\"Let's create a mixin class for IdentDecl that implements PsiNameIdentifierOwner:\",\"abstract class IdentDeclMixin(node: ASTNode) : ASTWrapperPsiElement(node), IdentDecl { override fun getNameIdentifier(): PsiElement? = ident override fun getName(): String = ident.text override fun setName(name: String): PsiElement { TODO(\\\"Not yet implemented\\\") } } \",\"The getNameIdentifier method returns the IDENT token element. Let's look at how it's implemented in the generated IdentDeclImpl class:\",\"public class IdentDeclImpl extends IdentDeclMixin implements IdentDecl { public IdentDeclImpl(@NotNull ASTNode node) { super(node); } @Override @NotNull public PsiElement getIdent() { return findNotNullChildByType(IDENT); } } \",\"The implementation generated by Grammar-Kit has a getIdent method that finds the IDENT child token. Since we're using Kotlin, the getIdent method is automatically converted to a property ident in the Kotlin class. This is why we can access ident directly in the mixin class.\",\"Let's update the BNF file to use the mixin, and also tell Grammar-Kit that IdentDecl implements PsiNameIdentifierOwner:\",\"{ ... implements(\\\"IdentDecl\\\")=\\\"com.intellij.psi.PsiNameIdentifierOwner\\\" mixin(\\\"IdentDecl\\\")=\\\"khaledh.nimjet.psi.impl.IdentDeclMixin\\\" } ... \",\"Now, let's generate the parser and PSI classes and test the Go To Declaration feature in the sandbox IDE.\",\"Notice that the reference and declaration are highlighted when the cursor is on either of them. This is because the IDE recognizes that the reference can be resolved to the declaration, and it highlights the declaration when the reference is selected (and vice versa). To test the navigation feature, place the cursor on the reference and press Ctrl+B (or Cmd+B on macOS) to navigate to the declaration. We can also place the cursor on the declaration and press Ctrl+B to navigate to the reference. Neat!\",\"Let's also take a look at the PSI tree:\",\"If we click on the IdentRef node, we can see that it has a reference to the IdentDecl node. Great!\",\"In the next section, we'll improve reference resolution to take into account scoping rules, so that references are resolved to their correct declaration.\"]},\"76\":{\"h\":\"Scope Resolution\",\"t\":[\"The current implementation of the resolve method in IdentReference is very naive. It only looks for the first IdentDecl element in the file, and returns it if the name matches the reference. This won't work in a real-world scenario where there could be multiple matching declarations in the file at different scopes. For example, consider the following code snippet (we haven't implemented block statements yet, but let's assume we have):\",\"There are three declarations in this file:\",\"Line 2: msg declaration in a block scope. This scope is inaccessible to the echo statement.\",\"Line 4: msg declaration in the file scope before the reference. This is the correct declaration that the reference should resolve to.\",\"Line 7: msg declaration in the file scope after the reference. This scope is also inaccessible to the echo statement.\",\"We need to change our implementation of the resolve method to handle those scoping rules.\"]},\"77\":{\"h\":\"Tree Walk-Up\",\"t\":[\"The IntelliJ platform provides a mechanism for scope-based resolution. It's a bit complex, but it allows us to define custom scopes and resolve references within those scopes. It works as follows:\",\"When resolve is called on a reference, we perform a tree walk-up to find the scope in which the reference is resolved. The PsiTreeUtil.treeWalkUp utility method can be used for this purpose. This method takes an instance of PsiScopeProcessor interface that is responsible for deciding whether a particular element is the target of the reference.\",\"The treeWalkUp method iterates over the ancestors of the reference element, and calls a processDeclarations method on each of them, passing the PsiScopeProcessor instance.\",\"For each of the ancestors, their respective processDeclarations method is called. This method is responsible for finding the declarations in the scope of that ancestor.\",\"For each declaration found, the execute method of the PsiScopeProcessor is called. This method is responsible for deciding whether the declaration is the target of the reference. This is typically done by comparing the name of the declaration against the name of the reference. If a match is found, the execute method returns false to stop the iteration, and the declaration is returned as the result of the resolve. If a match is not found, the execute method returns true to continue the iteration.\",\"To better understand the tree walk-up mechanism, let's take a look at the implementation of the treeWalkUp method from the PsiTreeUtil class:\",\" public static boolean treeWalkUp(@NotNull PsiScopeProcessor processor, @NotNull PsiElement entrance, @Nullable PsiElement maxScope, @NotNull ResolveState state) { PsiElement prevParent = entrance; PsiElement scope = entrance; while (scope != null) { if (!scope.processDeclarations(processor, state, prevParent, entrance)) return false; if (scope == maxScope) break; prevParent = scope; scope = prevParent.getContext(); } return true; } \",\"In a nutshell, the treeWalkUp method iterates over the ancestors of the entrance element, starting with the entrance element itself, passing the processor instance to the processDeclarations method of each ancestor. The iteration stops in one of two cases:\",\"if processDeclarations returns false, indicating that the target element has been found, or\",\"if the maxScope is reached (in our case, that would be the top-level NimFile element).\",\"On every iteration, the treeWalkUp method moves up one level to the next \\\"context\\\" of the current element. The getContext method is defined in the PsiElement interface, and by default returns the parent of the element (it delegates to getParent). However, we're free to override this method in our custom PSI elements to return the parent \\\"scope\\\" of the element, which is not necessarily the parent element.\",\"In the example above, if we were to use the default implementation of getContext, the treeWalkUp method would iterate over the following ancestors, in order: Command -> Stmt -> StmtList -> NimFile. However, when doing scope-based resolution, we can skip over intermediate ancestors that don't define their own scope, and only consider the ones that do. In this particular example, there's only one scope that we need to consider: the NimFile node. When we implement other scope-defining elements like block, proc, for loops, etc., we'll consider them as well.\",\"Let's go ahead and implement the getContext method for the IdentRef element, which should return the closest ancestor that defines a scope.\",\"// src/main/kotlin/khaledh/nimjet/psi/impl/IdentRefMixin.kt ... abstract class IdentRefMixin(node: ASTNode) : ASTWrapperPsiElement(node), IdentRef { companion object { private val SCOPE_ELEMENT_TYPES = arrayOf(NimFile::class.java) } override fun getContext(): PsiElement? { return PsiTreeUtil.getParentOfType(this, *SCOPE_ELEMENT_TYPES) } ... } \",\"Fortunately, the PsiTreeUtil class provides a utility method called getParentOfType that we can use to find the closest ancestor of one of the specified types. Since we're going to add more scopes later, we define a SCOPE_ELEMENT_TYPES array that contains the classes of the scope-defining elements. So far, we only have the NimFile class in the array.\"]},\"78\":{\"h\":\"Scope Processor\",\"t\":[\"We now know how to find the ancestor scopes of a reference. The next step is to try to find the target declaration within each of those scopes, until either the target is found or we run out of scopes.\",\"Let's use the example above to illustrate how this works.\",\"We create an implementation of PsiScopeProcessor, let's call it IdentScopeProcessor. Its execute method will compare the name of the declaration against the name of the reference, and return false if they match (which stops the iteration), and true otherwise.\",\"When resolve is called on IdentReference, the treeWalkUp method is called, passing an instance of IdentScopeProcessor.\",\"The treeWalkUp method iterates over the ancestor scopes of the IdentRef node, starting with the reference element itself. In this particular case, the only ancestor scope is the NimFile (as returned by the getContext method of the IdentRef node).\",\"The ancestor's processDeclarations method is called with the IdentScopeProcessor instance. In our case, the NimFile node will have a processDeclarations method that will look for declarations under its scope.\",\"For each found IdentDecl node, the execute method of the IdentScopeProcessor instance is called. If the name of the declaration matches the name of the reference, the execute method will return false, which stops the iteration and returns the declaration as the result of the resolve method.\",\"With this in mind, let's implement the IdentScopeProcessor class:\",\"// src/main/kotlin/khaledh/nimjet/psi/IdentScopeProcessor.kt ... class IdentScopeProcessor(private val name: String) : PsiScopeProcessor { var result: PsiElement? = null override fun execute(element: PsiElement, state: ResolveState): Boolean { if (element is IdentDecl && element.name == name) { result = element return false } return true } } \",\"How it works:\",\"The name of the target declaration to be found is passed to the constructor.\",\"The result field holds the target declaration if found.\",\"The execute method is called for each declaration in the scope. If the name of the declaration matches the name of the reference, we set the result field to the declaration and return false to stop the iteration. Otherwise, we return true to continue to the next declaration (if any).\",\"Now let's modify the resolve method in the IdentReference class to use this scope processor.\",\"// src/main/kotlin/khaledh/nimjet/psi/IdentReference.kt ... class IdentReference(element: IdentRef, textRange: TextRange) : PsiReferenceBase<IdentRef>(element, textRange) { override fun resolve(): PsiElement? { val processor = IdentScopeProcessor(element.text) PsiTreeUtil.treeWalkUp( processor, // scope processor element, // entrance element element.containingFile, // max scope ResolveState.initial() // initial state ) return processor.result } } \",\"The new implementation should be straightforward to understand. We create an instance of IdentScopeProcessor with the name of the reference, and pass it to the treeWalkUp method. We also pass the reference element as the entrance element (i.e. the starting point of the tree walk-up), and the containing NimFile as the maximum scope. The ResolveState.initial() method creates a state object that can be used to store additional information during the resolution process (we're not making use of it in our case). Finally, we return the result field of the IdentScopeProcessor, whether it's null (if the target declaration wasn't found) or the found declaration.\"]},\"79\":{\"h\":\"Processing Declarations\",\"t\":[\"The last missing piece is to implement the processDeclarations method in the NimFile class. It turns out that processing declarations is the same under any scope, so we'll implement it once in a separate class and reuse it in all scope-defining elements.\",\"Let's add a NimScope singleton object that contains the processDeclarations method.\",\"object NimScope { val SCOPE_ELEMENT_TYPES = hashSetOf(NimFile::class) fun processDeclarations( scopeElement: PsiElement, processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement?, place: PsiElement ): Boolean { // Get all descendants, stopping at new scopes or subtrees that we have already processed var decls = scopeElement.descendants( canGoInside = { it === scopeElement || it !== lastParent && it::class !in SCOPE_ELEMENT_TYPES } ) // Keep only declaration elements decls = decls.filterIsInstance<IdentDecl>() // Keep the ones that are declared before the reference element decls = decls.filter { it.startOffset < place.startOffset } // Now process each declaration return decls.all { processor.execute(it, state) } } } \",\"We're leveraging the descendants extension function to get all the descendants of the scope element. This function takes a canGoInside lambda that determines whether the function should descend into the children of the current element (the element being visited). There are three cases where we continue descending:\",\"If the current element is the scope element itself (since descendents includes starting element),\",\"If the current element is not the last parent of a subtree that we already processed,\",\"If the current element is not a scope-defining element.\",\"The last condition is important because we don't want to descend into new scopes, which would be inaccessible to the reference (like the block scope in the example).\",\"We then perform two filtering operations on the descendants:\",\"We keep only the IdentDecl elements,\",\"We keep only the declarations that come before the reference element.\",\"Finally, we use the all function on those declarations to process each of them. If any of the declarations returns false from the execute method, the all function will return early and stop the iteration. Otherwise, it will return true to indicate that no matching declaration was found.\",\"The last thing we need to do is call this method from the processDeclarations method of the NimFile class.\",\"class NimFile(viewProvider: FileViewProvider) : PsiFileBase(viewProvider, NimLanguage) { ... override fun processDeclarations( processor: PsiScopeProcessor, state: ResolveState, lastParent: PsiElement?, place: PsiElement ): Boolean = NimScope.processDeclarations(this, processor, state, lastParent, place) } \",\"Before we forget, we also need to update the IdentRefMixin class to use the same SCOPE_ELEMENT_TYPES array from the NimScope object, instead of defining it locally (which could easily diverge). Since the logic for finding the scope element is the same for all scope-defining elements, we can actually put that logic in the NimScope object itself.\",\"... object NimScope { val SCOPE_ELEMENT_TYPES = hashSetOf(NimFile::class, BlockStmt::class) ... fun parentScope(element: PsiElement): PsiElement? { val scopeElementTypes = SCOPE_ELEMENT_TYPES.map { it.java }.toTypedArray() return PsiTreeUtil.getParentOfType(element, *scopeElementTypes) } } \",\"Now we can use the parentScope method in the IdentRefMixin class to find the scope element.\",\"abstract class IdentRefMixin(node: ASTNode) : ASTWrapperPsiElement(node), IdentRef { override fun getContext(): PsiElement? = NimScope.parentScope(this) ... } \",\"This should take care of the scope resolution for the IdentReference class.\"]},\"80\":{\"h\":\"Testing Scope Resolution\",\"t\":[\"Let's test it out. I modified the BNF grammar temporarily to include the block statement so that I can test the scope resolution (I used a semicolon to terminate the block, since we don't have indentation-based parsing yet).\",\"Notice that the highlighted msg reference in the global scope now resolves to the correct declaration right above it, and not the one in the block scope, even though the block scope appears first in the file. Now, let's look at the block scope.\",\"Great! The highlighted msg reference in the block scope resolves to the correct declaration inside the block, and the other reference in the global scope is not highlighted. Also, if we move the declaration after the reference, the reference doesn't resolve to it, which is the correct behavior.\",\"We've reached an important milestone. Resolving references according to scoping rules is a semantic feature that is crucial for any language plugin. The groundwork we've laid here will enable additional features such as find usages, rename refactoring, code completion, and others.\"]},\"81\":{\"h\":\"Rename Refactoring\",\"t\":[\"Now that we have support for scope-based reference resolution, let's add support for rename refactoring. This will allow users to rename a symbol and have all references to that symbol updated automatically.\"]},\"82\":{\"h\":\"Supporting Rename\",\"t\":[\"The IDE supports rename refactoring for elements that implement the PsiNamedElement interface by calling their setName method. This method should create a new identifier element with the new name, and replace the existing identifier element with the new one.\",\"Creating a new identifier element is not straightforward, as it requires creating a new PsiElement instance backed by a new ASTNode. We'll need to create a dummy PsiFile from a text fragment that contains the new identifier, let the IDE parse the file, and extract the identifier element from the resulting PsiFile.\",\"Let's create a NimElementFactory class that will help us create new elements. We'll add a pair of createIdentDecl and createIdentRef methods to create new identifier declarations and references, respectively. We will use the former in the setName method of our IdentDecl element, and the latter in the handleElementRename method of our IdentReference element.\",\"// src/main/kotlin/khaledh/nimjet/psi/NimElementFactory.kt ... class NimElementFactory { companion object { private fun createFile(project: Project, text: String): NimFile { return PsiFileFactory .getInstance(project) .createFileFromText(\\\"dummy.nim\\\", NimFileType, text) as NimFile } fun createIdentDecl(project: Project, name: String): IdentDecl { val file = createFile(project, \\\"let $name = \\\\\\\"\\\\\\\"\\\") return PsiTreeUtil.findChildOfType(file, IdentDecl::class.java) ?: throw IncorrectOperationException(\\\"Failed to create new IdentDecl element\\\") } fun createIdentRef(project: Project, name: String): IdentRef { val file = createFile(project, \\\"$name dummy\\\") return PsiTreeUtil.findChildOfType(file, IdentRef::class.java) ?: throw IncorrectOperationException(\\\"Failed to create new IdentRef element\\\") } } } \",\"The createFile method creates a new NimFile instance from a text fragment. The createIdentDecl method uses this method to create a new file containing the fragment let $name = \\\"\\\", where $name is the new identifier name. This creates a new identifier declaration element with the specified name. We then extract the IdentDecl element from the file and return it.\",\"The createIdentRef method is similar, but it creates a file containing the fragment $name dummy, where $name is the new identifier name. This creates a new identifier reference element, which we extract and return.\",\"Now, let's use the createIdentDecl method in the IdentDeclMixin class to implement the setName method.\",\"// src/main/kotlin/khaledh/nimjet/psi/impl/IdentDeclMixin.kt ... abstract class IdentDeclMixin(node: ASTNode) : ASTWrapperPsiElement(node), IdentDecl { ... override fun setName(name: String): PsiElement { val newIdentDecl = NimElementFactory.createIdentDecl(project, name) ident.replace(newIdentDecl.ident) return this } ... } \",\"After we create the new IdentDecl element, we replace the existing identifier token (the ident property) with the new ident token from the new declaration. This updates the identifier name in the declaration.\",\"Now, let's implement the handleElementRename method in the IdentReferenceMixin class to rename references to the identifier.\",\"// src/main/kotlin/khaledh/nimjet/psi/IdentReference.kt ... class IdentReference(element: IdentRef, textRange: TextRange) : PsiReferenceBase<IdentRef>(element, textRange) { ... override fun handleElementRename(newElementName: String): PsiElement { val newIdentRef = NimElementFactory.createIdentRef(myElement.project, newElementName) myElement.ident.replace(newIdentRef.ident) return myElement } ... } \",\"This time we create a new IdentRef element using the createIdentRef method and replace the existing identifier token with the new one. Notice that IdentReference is a PsiReference object, not the IdentRef element itself. We use the myElement property to access the IdentRef element.\",\"This should be enough to support rename refactoring. Let's try it out by putting the cursor on the inner declaration of the msg variable and pressing Shift + F6 to rename it. We can also right-click on the declaration and select Refactor -> Rename... from the context menu.\",\"The IDE shows a dialog where we can enter the new name. We enter innerMsg and press Enter. The IDE updates the declaration and all references to the variable.\",\"Great! Both the inner declaration and the reference to the variable have been updated.\"]},\"83\":{\"h\":\"In-place Rename\",\"t\":[\"The IDE also supports in-place rename refactoring, where we can rename an identifier directly in the editor, instead of using the dialog. This feature relies on registering a class that extends RefactoringSupportProvider and registering it in the plugin.xml. This class enables many refactoring features (e.g. rename, introduce variable, extract method, etc.), but we'll focus only on the rename refactoring for now.\",\"Let's create a NimRefactoringSupportProvider class and override the isInplaceRenameAvailable method to enable in-place rename refactoring.\",\"// src/main/kotlin/khaledh/nimjet/refactoring/NimRefactoringSupportProvider.kt ... class NimRefactoringSupportProvider : RefactoringSupportProvider() { override fun isInplaceRenameAvailable(element: PsiElement, context: PsiElement?): Boolean { return element.useScope is LocalSearchScope } } \",\"The IDE has two handlers for in-place rename refactoring: local and global.\",\"The local one is VariableInplaceRenameHandler, and it requires the element to have a LocalSearchScope use scope. Local search scope is typically associated with local variables (which include variables at the file scope that are not exported), and function parameters. This handler passes the element to our isInplaceRenameAvailable method to determine if in-place rename is available for that element.\",\"The global one is MemberInplaceRenameHandler, and it can handle elements with a GlobalSearchScope use scope. This scope is typically associated with public classes, functions, variables, and other symbols that can be accessed from other files. This handler passes the element to the isMemberInplaceRenameAvailable method of the RefactoringSupportProvider class to check if in-place rename is available for that element.\",\"In our case, we only need the local in-place rename handler, so we override only the isInplaceRenameAvailable method. For this to work though, we need to modify our IdentDecl element to have a LocalSearchScope use scope. Let's do that in the IdentDeclMixin class.\",\"... abstract class IdentDeclMixin(node: ASTNode) : ASTWrapperPsiElement(node), IdentDecl { ... override fun getContext(): PsiElement? = NimScope.parentScope(this) override fun getUseScope(): SearchScope = LocalSearchScope(context ?: containingFile) } \",\"The getUseScope method returns a LocalSearchScope constrained to the element's parent context, or the containing file if the context is null. This limits the scope of the in-place rename refactoring to the element's scope.\",\"Finally, let's register the NimRefactoringSupportProvider class in the plugin.xml file.\",\"<idea-plugin> ... <extensions defaultExtensionNs=\\\"com.intellij\\\"> ... <lang.refactoringSupport language=\\\"Nim\\\" implementationClass=\\\"khaledh.nimjet.refactoring.NimRefactoringSupportProvider\\\"/> </extensions> </idea-plugin> \"]},\"84\":{\"h\":\"Testing In-place Rename\",\"t\":[\"Let's test the in-place rename refactoring by putting the cursor on the msg variable declaration in the block scope and pressing Shift + F6. Both the declaration and the reference to the variable should become editable with a purple background. If we start typing, the IDE should update the declaration and all references to the variable in sync.\",\"Looks good! Now, let's try to rename the other msg variable declaration (at the file scope). Notice that I changed the string literal value to \\\"msg\\\" as well. When we start the in-place renaming, the IDE will show a popover to ask if we want to rename the occurrences in the string literal as well.\",\"Let's choose Rename all occurrences and start typing. The IDE should update all occurrences of the variable, including the string literal. Neat!\",\"That's it for rename refactoring. In the next section, we'll add support for Find Usages, which will allow us to find all references to a symbol and display the results in a tool window.\"]},\"85\":{\"h\":\"Indentation\",\"t\":[\"Nim is an indentation-based language, like Python. This means that the structure of the code is determined by the indentation level of the lines, and that whitespace is significant. Consider the following example:\",\"proc foo() = # ──────────────────┐0 for i in 0 ..< 10: # ─────────────┐1 │ echo i # ────────┐2 │ │ if i mod 2 == 0: # │ │ │ echo \\\"even\\\" # ── 3 │ │ │ else: # │ │ │ echo \\\"odd\\\" # ── 3 ◄──┘ ◄──┘ ◄──┘ \",\"There are four levels of indentation here. The first level is the global scope, which is at indentation 0. Block-defining elements like proc, for, and if statements increase the indentation level. Typically, Nim code uses 2 spaces for indentation, but this is not a strict requirement. And although not recommended, we can use different number of spaces for different levels of indentation, as long as the indentation level within the same block is consistent.\",\"As one might expect, parsing indentation-based languages is more difficult than parsing languages with explicit block delimiters like curly braces. We need to keep track of the indentation level of each line, and we often need to compare the indentation level of a line with the previous lines to determine the structure of the code.\",\"There are two places where we can track indentation: in the lexer or in the parser.\",\"If we track indentation in the lexer, we need to recognize the indentation level of each line and emit tokens that represent indentation changes, as well as for staying in the same indentation level. These tokens are then consumed by the parser grammar to delimit blocks.\",\"If we track indentation in the parser, we to be able to access the length of the leading whitespace of the first token of each line. This is not always possible with lexer generators, as they typically don't provide metadata about the tokens they emit. Also, using a parser generator like Grammar-Kit makes it even more challenging to define rules based on the leading whitespace of a token.\",\"While there is a way in Grammar-Kit to write custom utility functions that can be used as grammar rules (which we can use to access the underlying text and calculate the indentation levels), it is not a straightforward process. So, I'm going to take the route of tracking indentation in the lexer. This comes with a different problem though: leading whitespace becomes part of the token stream, and is not ignored by the parser anymore. The grammar rules have to account for cases where indentation tokens are present, when we wish to treat them as whitespace (e.g. at the end of the file).\"]},\"86\":{\"h\":\"Indentation Tokens\",\"t\":[\"We will need three kinds of indentation tokens: IND (for increasing indentation), DED (for decreasing indentation), and EQD (for staying at the same indentation). The reason for the EQD token is that we will use it as a separator between successive statements, much the same way as a semicolon in C-like languages.\",\"Let's use these tokens with the example above and see what we need to emit at indentation token(s) we need to emit at each line:\",\"proc foo() = for i in 0 ..< 10: # IND echo i # IND if i mod 2 == 0: # EQD echo \\\"even\\\" # IND else: # DED, EQD echo \\\"odd\\\" # IND # back to top level # DED, DED, DED \",\"Most of the lines should be easy to understand. But let's look closer at lines 6 and 8 in particular, where we emit multiple tokens. On line 6, the first part of the if/else block ends, and we go back to the same level of the if statement. So we emit both a DED token (to close the if block) and a EQD token (to separate the if block from the else block). On line 8, we close the else block and go back to the top level, which requires emitting three DED tokens to close the else block, the for block, and the proc block.\"]},\"87\":{\"h\":\"Lexer State Machine\",\"t\":[\"We'll need to introduce a new BEGIN_LINE state in our lexer, and switch to it once we encounter a new line. We'll also need a stack to keep track of the indentation levels we are in. The stack is initialized with indentation level 0. The following diagram shows the state machine we need to implement.\",\"Here's how it works:\",\"We start in the YYINITIAL state (the default lexer state).\",\"Since we always start at the beginning of a line, we switch to the BEGIN_LINE state.\",\"In the BEGIN_LINE state, we treat any empty lines as whitespace.\",\"In the BEGIN_LINE state, we use a regex to match the leading whitespace of the line and get its length. This is the indentation level of the line (which could be zero).\",\"We have three cases: \",\"If the indentation level is greater than the top of the stack, we emit an IND token, push the new indentation level to the stack, and switch to the DEFAULT state.\",\"If the indentation level is equal to the top of the stack, we emit an EQD token, and switch back to the DEFAULT state (we don't modify the stack).\",\"The third case handles decrease in indentation, and is more involved than the other two. That's because the decrease in indentation could be insufficient relative to the parent block. So, the rule is: \",\"If there's more than one level of indentation on the stack, and the current indentation level is less than or equal to the second-to-top level of the stack, we emit a DED token, pop the stack, but we do not switch back to the DEFAULT state just yet. Instead, we stay in the BEGIN_LINE state, push back the whitespace text to the lexer, and let the lexer reprocess the line. This allows us to emit the correct number of DED tokens until we reach the correct indentation level.\",\"If none of the above cases are met, then we have a case where the decrease in indentation is insufficient, and we emit an INVALID_IND token.\",\"The logic is a bit intricate, especially for the decrease in indentation case, but it's the price we're willing to pay to keep the parser simple. Let's go ahead and add a processIndentation method to our lexer so that we can call it while in the BEGIN_LINE state.\",\"// src/main/kotlin/khaledh/nimjet/lexer/Nim.flex ... // lexer class code %{ private Stack<Integer> indentStack = new Stack<>(); %} %init{ // initial indentation level is 0 indentStack.push(0); %init} %{ private IElementType processIndent() { int currIndent = yylength(); if (currIndent > indentStack.peek()) { // new indent level indentStack.push(currIndent); yybegin(DEFAULT); return NimToken.IND; } if (currIndent == indentStack.peek()) { // same indent level yybegin(DEFAULT); return NimToken.EQD; } if (indentStack.size() > 1 && currIndent <= indentStack.get(indentStack.size() - 2)) { // We can only dedent one level at a time, so don't switch back to DEFAULT just yet, // and keep returning DED tokens as long as there's more dedent levels. indentStack.pop(); yypushback(yylength()); return NimToken.DED; } // invalid indentation return NimToken.INVALID_IND; } %} // lexer states %state DEFAULT %state BEGIN_LINE // macros EOL = \\\\r\\\\n|\\\\r|\\\\n %% <YYINITIAL> [^] { yypushback(1); yybegin(BEGIN_LINE); } <DEFAULT> { ... {EOL} { yybegin(BEGIN_LINE); return TokenType.WHITE_SPACE; } ... } <BEGIN_LINE> { [ \\\\t]*{EOL} { return TokenType.WHITE_SPACE; /* skip empty lines */ } [ \\\\t]* { return processIndent(); } } \",\"When I tested this on a code sample, the IDE threw an error saying \\\"Lexer is not progressing after calling advance()\\\". At first, I was puzzled by this, so I fired up the debugger and traced the code. It turns out that the IDE tries to validate that the lexer is making progress by ensuring that it doesn't produce the same token multiple times in a row at the same location while in the same state. Unfortunately, that's exactly what we're trying to do when we need to emit multiple DED tokens in a row when the indentation decreases more than one level.\",\"To work around this issue, I created two identical copies of the BEGIN_LINE state: BEGIN_LINE and BEGIN_LINE_2, and updated the DED case to toggle between the two states. It's a hack, but it works.\",\"// src/main/kotlin/khaledh/nimjet/lexer/Nim.flex ... // lexer class code %{ ... private IElementType processIndent() { ... if (indentStack.size() > 1 && currIndent <= indentStack.get(indentStack.size() - 2)) { // We can only dedent one level at a time, so don't switch back to DEFAULT just yet, // and keep returning DED tokens as long as there's more dedent levels. // // Also, IntelliJ's lexer validation doesn't like returning the same token multiple // times in a row at the same location while in the same state (throws an exception // about \\\"Lexer is not progressing\\\"), so as a workaround we toggle between two // identical states to avoid this issue. int nextState = yystate() == BEGIN_LINE ? BEGIN_LINE_2 : BEGIN_LINE; yybegin(nextState); indentStack.pop(); yypushback(yylength()); return NimToken.DED; } } %} // lexer states %state BEGIN_LINE BEGIN_LINE_2 ... %% // We use two identical states to avoid a lexer validation issue; see processIndent. <BEGIN_LINE, BEGIN_LINE_2> [ \\\\t]*{EOL} { return TokenType.WHITE_SPACE; } [ \\\\t]* { return processIndent(); } } \",\"This keeps the lexer validation happy, and we can now emit multiple DED tokens in a row from the same location.\"]},\"88\":{\"h\":\"Parsing Top-Level Code\",\"t\":[\"Now that we have the indentation tokens in the token stream, we need to modify our parser to use them to delimit blocks. The first obvious change is to delimit the top-level statement list with EQD tokens, since all top-level statements should be at indentation level 0. Let's modify the StmtList rule to account for this.\",\"// src/main/kotlin/khaledh/nimjet/parser/Nim.bnf { ... } Module ::= !<<eof>> StmtList StmtList ::= Stmt (EQD Stmt)* Stmt ::= LetSection | Command LetSection ::= LET IdentDecl EQ STRING_LIT Command ::= IdentRef IdentRef IdentDecl ::= IDENT IdentRef ::= IDENT \",\"Let's generate the parser (Cmd+Shit+G) and try it out.\",\"Although there are no visible changes in the PSI tree, the code is parsed correctly as expected. Unfortunately we don't see the EQD token element in the tree as I was expecting. But when I debug the lexer I see it emitting the token. My assumption is that the PSI tree builder doesn't allow multiple elements at the same location, as in this case where the EQD token occupies the same start location as the second Stmt element, and uses the last element (in sibling order) as the element for that location. It's a bit annoying not to be able to verify the existence of token, but it doesn't impact the correctness of the parsed tree. In fact, it could be considered a good thing, since, conceptually, indentation elements should be considered whitespace, which normally doesn't show up in the tree.\",\"This works, but there's a few issues we need to address. Let's introduce an empty line at the beginning of the file.\",\"We get an error saying that <stmt list> was expected at the beginning of the second line. The reason is that the lexer emitted an EQD token for the empty line, which is not expected by the parser at that location. We can easily fix this by skipping whitespace at the beginning of the file. Instead of introducing more rules to handle this, we can just use a flag firstNonEmptyLine (defaults to true), to decide whether we're processing the first line or not, and act accordingly.\",\"// src/main/kotlin/khaledh/nimjet/lexer/Nim.flex ... %{ private Stack<Integer> indentStack = new Stack<>(); private Boolean firstNonEmptyLine = true; %} ... %{ private IElementType processIndent() { int currIndent = yylength(); // we don't want to emit EQD for the first non-empty line if (firstNonEmptyLine && currIndent == 0) { firstNonEmptyLine = false; yybegin(DEFAULT); return TokenType.WHITE_SPACE; } ... %} \",\"This should fix the issue with the first non-empty line. Let's test it out.\",\"Great! Let's also test the case where the first non-empty line has leading whitespace.\",\"We get an error as expected! Our lexer and parser can now recognize and handle top-level indentation correctly.\"]},\"89\":{\"h\":\"Parsing Blocks\",\"t\":[\"Now that we have the top-level statement list working, let's move on to parsing blocks with actual indentation. The simplest construct in Nim that uses indentation is the block statement, which contains an indented StmtList inside it, including nested block statements.\",\"Let's start by adding a BLOCK token to our lexer (and define the corresponding token in NimToken).\",\"// src/main/kotlin/khaledh/nimjet/lexer/Nim.flex ... <DEFAULT> { ... \\\"let\\\" { return NimToken.LET; } \\\"block\\\" { return NimToken.BLOCK; } ... } \",\"Next, let's add a new rule for BlockStmt in our parser.\",\"// src/main/kotlin/khaledh/nimjet/parser/Nim.bnf ... BlockStmt ::= BLOCK COLON IND StmtList DED \",\"The rule is simple: a block statement starts with the block keyword, followed by a colon, and a StmtList enclosed between IND and DED tokens. Let's generate the parser and test it out.\",\"We get an error saying that the parser was expecting either a DED or EQD at the end. That's because the file ends right after the last statement, and so there are no indentation tokens to close the block. This is a problem we cannot solve at the lexer level, unfortunately. What we can do, is to allow blocks to end with either a DED token or the <<eof>> special marker. Since we're going to need this for other rules, let's introduce a private rule DED_OR_EOF that matches either a DED token or the end of file, and use it in places where we expect a DED token. A private rule means it doesn't get a dedicated node in the PSI tree.\",\"// src/main/kotlin/khaledh/nimjet/parser/Nim.bnf ... BlockStmt ::= BLOCK COLON IND StmtList ded_or_eof private ded_or_eof ::= DED | <<eof>> \",\"This solves the problem of blocks ending at the end of the file. Let's test another scenario where we create a new line that has the same indentation level inside the block, but that doesn't contain a statement, i.e. the end of file comes right after the leading whitespace.\",\"We get an error that says <stmt> expected. This is an issue similar to the one above. The lexer had emitted an EQD token at that location, and so the parser expects a statement to come after it. While the behaviour here is correct, and can be fixed by expecting the user to remove the leading whitespace, it's not a good experience. Users expect empty lines anywhere in the file to be ignored.\",\"We can do something similar to allowing blocks to end with <<eof>> by modifying the StmtList rule to make the Stmt instance that comes after EQD optional, but this situation might come up in other places in the future as well. So it's better to solve it at the lexer level by treating a line with only whitespace at the end of the file as whitespace.\",\"Unfortunately, there's no official way to match the end of file as part of a regex in JFlex. There's an <<EOF>> rule that matches the end of file, but it can only be used alone, and not as part of a regex. If we try to use it alone, it would be too late, since the leading whitespace according to our indentation rules, and we may have already emitted an indentation token. So, I'm going to rely on a private variable in the generated lexer class called zzEndRead to get the end of file position (I know, I shouldn't use unofficial features, but I have no other way), and use it to determine if the end of the current line is at the end of the file. If it is, we return a whitespace token.\",\"// src/main/kotlin/khaledh/nimjet/lexer/Nim.flex %{ ... private IElementType processIndent() { int currIndent = yylength(); // handle a line with only whitespace at the end of the file if (getTokenEnd() == zzEndRead) { return TokenType.WHITE_SPACE; } ... } ... \",\"This should solve the issue, treating the last line as whitespace if it's empty. The parser should be happy, since there's no extra indentation tokens at the end of the file.\",\"With this modification in place, we can actually revisit the situation that required us to add the ded_or_eof rule to handle the end of file in blocks. We can now add a lexer rule to match the EOF in any state, and pop all the remaining indentation levels from the stack, emitting an DED for each of them. The reason we couldn't do this before is that, in the case where the last line contains only whitespace, we would have emitted a EQD first, followed by the DED tokens from the stack, which would have been incorrect. But now that we ignore the last line if it's empty, we can safely emit those DED tokens once we encounter the end of file.\",\"Let's add a new method processEof() to our lexer to handle this, and call it when we encounter the end of file from any state.\",\"%{ ... private IElementType processEof() { // return DED tokens (one at a time) for all remaining indent levels if (indentStack.size() > 1) { indentStack.pop(); return NimToken.DED; } return null; } %} ... <<EOF>> { return processEof(); } \",\"processEof() will be called multiple times (lexer stays at EOF) until the stack is empty, at which point we return null to indicate that there are no more tokens.\",\"If we test this we run into the same issue as before, where the lexer doesn't progress because it's returning the same token (DED) multiple times in a row at the same location. So, we need to use the same trick as before, and toggle between two identical states to avoid this issue.\",\"%{ ... private IElementType processEof() { // return DED tokens (one at a time) for all remaining indent levels if (indentStack.size() > 1) { indentStack.pop(); int nextState = yystate() == AT_EOF ? AT_EOF_2 : AT_EOF; yybegin(nextState); return NimToken.DED; } return null; } %} ... %states AT_EOF AT_EOF_2 %% ... <<EOF>> { yybegin(AT_EOF); } <AT_EOF, AT_EOF_2> <<EOF>> { return processEof(); } \",\"This should handle the end of file issue correctly, emitting the correct number of DED tokens to close any open blocks.\",\"Now, let's remove the ded_or_eof rule from the BlockStmt rule, and revert it back to its simpler form.\",\"BlockStmt ::= BLOCK COLON IND StmtList ded_or_eof BlockStmt ::= BLOCK COLON IND StmtList DED private ded_or_eof ::= DED | <<eof>> \",\"Much better!\",\"I believe this takes care of all the indentation issues. Not bad; for a few dozen lines of lexer code we have a working indentation-based parser. We can now focus on adding more grammar rules that build on top of this.\"]},\"90\":{\"h\":\"Declaration Sections\",\"t\":[\"In addition to declaring single variables in a declaration statement, Nim also supports declaring multiple variables in the same statement using an indented section. For example:\",\"let msg = \\\"hello\\\" # single declaration let # multiple declarations foo = \\\"foo\\\" bar = \\\"bar\\\" \",\"Now that we have support for indentation in the grammar, we can easily modify the LetSection rule to support multiple declarations, in addition to the existing single declaration.\",\"// src/main/kotlin/khaledh/nimjet/parser/Nim.bnf ... LetSection ::= LET IdentDef | LET IND IdentDef (EQD IdentDef)* DED IdentDef ::= IdentDecl EQ STRING_LIT ... \",\"The LetSection rule now has an alternative that allows multiple declarations in an indented section, where declarations in the section are separated by EQD. I factored out a common part of the two alternatives into a separate IdentDef rule to avoid duplication. Let's test it out.\",\"This looks to be correct. The PSI tree shows two IdentDef nodes under the LetSection node. We are already reaping the benefits of the indentation support we added earlier, keeping the grammar clean and easy to read.\"]},\"91\":{\"h\":\"Let, Var, and Const Sections\",\"t\":[\"Nim has three different kinds of variable declarations: let, var, and const. They all use the same syntax for declaration, but they have different semantics. Let's add similar support for var and const declarations in the grammar.\",\"... Stmt ::= LetSection | VarSection | ConstSection | Command | BlockStmt LetSection ::= LET IdentDef | LET IND IdentDef (EQD IdentDef)* DED VarSection ::= VAR IdentDef | VAR IND IdentDef (EQD IdentDef)* DED ConstSection ::= CONST IdentDef | CONST IND IdentDef (EQD IdentDef)* DED ... \",\"Let's not also forget to add the var and const keyword tokens to the lexer and the NimToken class.\",\"... <YYINITIAL> { ... \\\"let\\\" { return NimToken.LET; } \\\"var\\\" { return NimToken.VAR; } \\\"const\\\" { return NimToken.CONST; } ... } \",\"Let's test the new var and const declarations.\",\"All seems to be working as expected.\"]},\"92\":{\"h\":\"Meta Rules\",\"t\":[\"The LetSection, VarSection, and ConstSection rules are very similar. They only differ in the keyword token they use. We can factor out the common parts of these rules into a meta rule, which is a Grammar-Kit construct to define a parameterized rule (kind of similar to generics).\",\"A meta rule doesn't define explicit parameters. Instead, it uses an implicit parameter <<p>> for rules that use a single parameter, or <<p1>>, <<p2>>, etc., for rules that use multiple parameters. To invoke the meta rule, you use the <<rule_name ...>> syntax, and pass other rules as arguments.\",\"Let's define a meta rule for the variable declaration sections.\",\"LetSection ::= LET <<section IdentDef>> VarSection ::= VAR <<section IdentDef>> ConstSection ::= CONST <<section IdentDef>> private meta section ::= <<p>> | IND <<p>> (EQD <<p>>)* DED \",\"This is equivalent to the original rules we defined earlier, but with less redundancy.\",\"Let's make another use of meta rules. We've seen the pattern <<p>> (EQD <<p>>)* before in the StmtList rule:\",\"StmtList ::= Stmt (EQD Stmt)* \",\"This pattern basically defines a sequence of items separated by a delimiter. We can factor this pattern into a meta rule as well, let's call it list, and use it both in the StmtList rule and the section meta rule (yes, meta rules can be nested).\",\"StmtList ::= <<list Stmt EQD>> ... private meta list ::= <<p1>> (<<p2>> <<p1>>)* private meta section ::= <<p>> | IND <<list <<p>> EQD>> DED \",\"This time, the list meta rule takes two parameters: <<p1>> and <<p2>>. The first parameter represents the item to be repeated, and the second parameter represents the delimiter. We make use of it in the StmtList rule to define a repeated sequence of Stmt nodes separated by EQD. We also use it in the section meta rule to define a repeated sequence of <<p>> nodes separated by EQD.\",\"Another pattern we can factor out is the IND ... DED pattern, which defines an indented block of code. Let's define an indented meta rule for this pattern. We'll use it in both the BlockStmt rule and the section meta rule.\",\"... BlockStmt ::= BLOCK COLON <<indented StmtList>> ... private meta indented ::= IND <<p>> DED private meta section ::= <<p>> | <<indented <<list <<p>> EQD>>>> \",\"If we test the grammar now, we should see no difference in the behavior, but the grammar is now much more lean and DRY. Here's the full grammar so far.\",\"Module ::= !<<eof>> StmtList StmtList ::= <<list Stmt EQD>> Stmt ::= ConstSection | VarSection | LetSection | Command | BlockStmt ConstSection ::= CONST <<section IdentDef>> LetSection ::= LET <<section IdentDef>> VarSection ::= VAR <<section IdentDef>> IdentDef ::= IdentDecl EQ STRING_LIT Command ::= IdentRef IdentRef BlockStmt ::= BLOCK COLON <<indented StmtList>> IdentDecl ::= IDENT IdentRef ::= IDENT // meta rules private meta list ::= <<p1>> (<<p2>> <<p1>>)* private meta indented ::= IND <<p>> DED private meta section ::= <<p>> | <<indented <<list <<p>> EQD>>>> \",\"We'll make more use of meta rules in the future when we encounter more patterns that can be factored out.\"]},\"93\":{\"h\":\"PSI Cleanup\",\"t\":[\"One last thing we can do to clean up the PSI tree a bit is to make the Stmt rule private. This rule doesn't serve any purpose on its own, other than to group other statement rules. Making it private will make the individual statement rules direct children of the StmtList node in the PSI tree.\",\"private Stmt ::= ConstSection | ... \",\"Let's see what the PSI tree looks like now.\",\"This looks much cleaner. The Stmt nodes are gone, and we can see the declaration sections directly under the StmtList node.\"]},\"94\":{\"h\":\"Comments\",\"t\":[\"Nim comments are similar to those in Python. They start with a # and continue to the end of the line. Nim also supports multi-line comments that start with #[ and end with ]#, which can be nested. Nim is very flexible with comments, allowing them to appear almost anywhere in the code.\",\"Examples:\",\"# a single-line comment # line comments can span multiple # consecutive lines # comments can be preceeded by whitespace # wihtout producing indentation errors #[ a multi-line comment on a single line ]# #[ a multi-line comment that spans multiple lines ]# #[ a multi-line comment that contains another #[ nested ]# comment ]# let msg = \\\"hello\\\" # a comment at the end of a line let # a comment interspersed with declarations foo = \\\"foo\\\" # another comment # yet another comment bar = \\\"bar\\\" \",\"One thing to note from the Nim language manual:\",\"Comments consist of a concatenation of comment pieces. A comment piece starts with # and runs until the end of the line. The end of line characters belong to the piece. If the next line only consists of a comment piece with no other tokens between it and the preceding one, it does not start a new comment:\",\"i = 0 # This is a single comment over multiple lines. # The lexer merges these two pieces. # The comment continues here. \",\"It's not clear to me what purpose does this merging serve, as comments are ignored by the parser anyway. That said, we'll follow this behavior in our lexer.\",\"Nim also supports documentation comments that start with ##. Unlike regular comments, which are ignored by the parser, documentation comments are part of the syntax tree and are typically used to generate documentation and provide hints in the IDE. We'll get to documentation comments later in the section.\"]},\"95\":{\"h\":\"Lexing Comments\",\"t\":[\"Since multiline comments can be nested, they require a dedicated state in the lexer, with a way to track the nesting level. This means that we need to treat line comments differently from multiline comments.\",\"Typically, we'd use a regex to match line comments. However, I wasn't able to find a single regex that would allow matching merged line comments (as described in the Nim manual) but reject multiline comments. JFlex does not support negative lookahead, which makes it difficult to implement this behavior. So, I'm going to use a separate state for line comments as well, which provides more flexibility in driving the lexer behaviour.\",\"Let's introduce a L_COMMENT state that will be entered when a # character is encountered. In this state, we'll consume the rest of the line, and any subsequent lines as long as they start with a # (optionally preceded by whitespace), but not #[ (which would start a multiline comment).\",\"// src/main/kotlin/khaledh/nimjet/lexer/Nim.flex ... %state L_COMMENT %% <DEFAULT> { ... \\\"#\\\" { yybegin(L_COMMENT); } ... } <L_COMMENT> { {EOL}[ \\\\t]*([^#] | #[#\\\\[]) { // next line is not a line comment yypushback(yylength()); yybegin(DEFAULT); return NimToken.COMMENT; } <<EOF>> { yybegin(AT_EOF); return NimToken.COMMENT; } [^] { /* consume all other character */ } } \",\"The L_COMMENT state keeps matching lines, and only exits when it encounters a line that doesn't start with a # character, or one that starts with either ## or #[ (which would start a documentation comment or a multiline comment, respectively). The <<EOF>> rule ensures that a comment at the end of file (without a newline) is also matched.\",\"Now that we have a way to recognize line comments, let's tell our NimParserDefinition to treat them as comments (so they can be ignored by the parser).\",\"First, let's add a TokenSet for comments in the NimTokenSets interface.\",\"// src/main/kotlin/khaledh/nimjet/lexer/NimTokenSets.kt interface NimTokenSet { companion object { ... @JvmField val COMMENTS = TokenSet.create(NimToken.COMMENT) } } \",\"Now we can update the NimParserDefinition to use this token set for comments.\",\"// src/main/kotlin/khaledh/nimjet/parser/NimParserDefinition.kt class NimParserDefinition : ParserDefinition { ... override fun getFileNodeType(): IFileElementType = NIM_FILE override fun getWhitespaceTokens(): TokenSet = TokenSet.WHITE_SPACE override fun getCommentTokens(): TokenSet = NimTokenSet.COMMENTS override fun getStringLiteralElements(): TokenSet = NimTokenSet.STR_LITERALS ... } \",\"Let's test this out.\",\"All seems to be working as expected! The lexer correctly recognizes line comments and merges them when they are on consecutive lines.\"]},\"96\":{\"h\":\"Multiline Comments\",\"t\":[\"Multiline comments pose a bit of a challenge for a couple of reasons:\",\"Since they can be nested, we need to keep track of the nesting level, and only close the comment when all nested levels have been closed.\",\"We need to handle the case where the comment is not closed properly, which would be an error.\",\"To solve the first issue, we need to introduce a variable, multilineCommentLevel, and increment it when we encounter an opening [# sequence, and decrement it when we encounter a closing ]# sequence. We'll only switch back to the DEFAULT state when multilineCommentLevel reaches zero.\",\"The second issue is a bit more tricky. The lexer doesn't have a way to report errors; all it can do is return a token. We've already seen this with the BAD_CHARACTER token, which is used to represent any character that doesn't match any lexer rule. But what does the parser do with this token? Well, it's not expecting such token, so it reports an error at that location about what it was expecting.\",\"The issue with unterminated multiline comments (as well as unterminated triple-quoted strings, as we'll see later) is that they cause all subsequent text to be treated as part of the comment. This would show up in the editor as the entire block of code following the unterminated comment being highlighted as an error. Here's what it looks like:\",\"While this is technically correct, it's not very user-friendly. A better user experience would be to show an error at the end of the file with a more descriptive error message, like \\\"Unterminated multiline comment\\\". Let's put this aside for now, and we'll come back to it later.\",\"Let's introduce a new lexer state for multiline comments, ML_COMMENT, which would enter when it encounters a #[. Let's also add a new class field, multilineCommentLevel, to track the nesting level.\",\"... %{ private int multilineCommentLevel = 0; ... %} %state LCOMMENT ML_COMMENT %% <DEFAULT> { ... \\\"#[\\\" { yybegin(ML_COMMENT); multilineCommentLevel++; } ... } <ML_COMMENT> { \\\"#[\\\" { multilineCommentLevel++; } \\\"]#\\\" { multilineCommentLevel--; if (multilineCommentLevel == 0) { yybegin(DEFAULT); return NimToken.COMMENT; } } <<EOF>> { if (multilineCommentLevel > 0) { // emit a comment token first to treat everything // until eof as a comment multilineCommentLevel = 0; return NimToken.COMMENT; } // then emit the unterminated comment token, // which we will higlight using an annotation yybegin(AT_EOF); return NimToken.ML_COMMENT_UNTERMINATED; } [^] { /* consume all other character */ } } \",\"Once we encounter a #[, we enter the ML_COMMENT state and increment the nesting level (which is initially zero). When we encounter a ]#, we decrement the nesting level, and if it reaches zero, we exit the ML_COMMENT state and return a comment token.\",\"If we reach the end of the file without closing the comment, we emit a comment token for everything until the end of the file. We also set multilineCommentLevel to zero, and we stay in the ML_COMMENT state. When the lexer is advanced once more, we enter the same <<EOF>> rule, but this time we emit a special UNTERMINATED_ML_COMMENT token. We also switch to the AT_EOF state to let it call processEof() to return any pending DED tokens.\",\"We'll leave the handling of the ML_COMMENT_UNTERMINATED for later when we introduce annotations. For now, let's test multiline comments and see if the nesting works as expected.\",\"Great! We can insert multiline comments anywhere in the code, even if they are nested, and they are correctly recognized.\"]},\"97\":{\"h\":\"Documentation Comments\",\"t\":[\"Documentation comments are similar to regular comments, except they're not ignored by the parser. Let's add a new state, DOC_COMMENT, to handle documentation comments.\",\"... %state L_COMMENT ML_COMMENT DOC_COMMENT %% <DEFAULT> { ... \\\"##\\\" { yybegin(DOC_COMMENT); } ... } <DOC_COMMENT> { {EOL}[ \\\\t]*([^#] | #[^#]) { // next line is not a doc comment yypushback(yylength()); yybegin(DEFAULT); return NimToken.D_COMMENT; } <<EOF>> { yybegin(AT_EOF); return NimToken.D_COMMENT; } [^] { /* consume all other character */ } } \",\"The DOC_COMMENT state is similar to the L_COMMENT state, except it starts with ##, and it returns a different token, D_COMMENT, which we'll use in the parser to capture documentation comments in the syntax tree.\",\"Now, let's update the grammar to include documentation comments. Like regular comments, doc comments can appear almost anywhere. However, from a semantic point of view, they are meaningful only in certain places. A good source of information on where documentation comments are meaningful semantically is the tdoc_comments.nim test file from the Nim repository.\",\"Here's a summary of where documentation comments are meaningful:\",\"In a statement list, as a comment statement.\",\"For each of the following, the documentation comment can appear at the end of the declaration line, or indented right below it: \",\"Routines (procs, methods, templates, etc.)\",\"Type, type field, and enum value declarations\",\"Vars and constants declaration\",\"Let's start by updating the grammar to include documentation comments in places where we expect them to show up. We'll add a rule DocComment to be used in the meaningful places mentioned above. In all other places we'll use the D_COMMENT token directly.\",\"... Module ::= !<<eof>> StmtList StmtList ::= <<list Stmt EQD>> private Stmt ::= ConstSection | VarSection | LetSection | Command | BlockStmt | CommentStmt ConstSection ::= CONST <<section IdentDef>> LetSection ::= LET <<section IdentDef>> VarSection ::= VAR <<section IdentDef>> IdentDef ::= IdentDecl EQ STRING_LIT DocComment? Command ::= IdentRef IdentRef BlockStmt ::= BLOCK COLON D_COMMENT? <<indented StmtList>> CommentStmt ::= D_COMMENT DocComment ::= <<optind D_COMMENT>> IdentDecl ::= IDENT IdentRef ::= IDENT // meta rules private meta list ::= <<p1>> (<<p2>> <<p1>>)* private meta indented ::= IND <<p>> DED private meta section ::= <<p>> | D_COMMENT? <<indented <<list (<<p>> | D_COMMENT) EQD>>>> private meta optind ::= <<p>> | <<indented <<p>>>> \",\"The CommentStmt rule is a new rule that allows a documentation comment to appear as a statement in a statement list. The DocComment rule is a new rule that allows a doc comment to appear right after an element, or indented below it (we use the optind meta rule for that). To support doc comments for let/var/constant sections, we updated the IdentDef rule to include an optional DocComment at the end. Finally, we updated the section rule to allow a doc comment token to optionally appear interspersed with the declarations.\",\"Let's look at an example:\",\"## this is a doc comment ## that spans multiple lines block: ## not meaningful let ## not meaningful msg = \\\"hello\\\" ## documents `msg` ## continues to document `msg` ## not meaningful foo = \\\"foo\\\" ## documents `foo` echo msg ## not meaningful echo foo \",\"As you can see, although doc comments can appear almost anywhere, they are usually used to document declarations. I'm not sure why they are allowed in other places, but typically they are not used there (a regular comment would suffice in those places).\",\"Let's test this out.\",\"Looks good. Notice that the case for the msg variable declaration, where the doc comment starts at the end of the line, and continues on the next line, is handled as a single doc comment.\",\"We now have full support for all kinds of Nim comments.\"]},\"98\":{\"h\":\"Numeric Literals\",\"t\":[\"Numeric literals in Nim have specific rules, as specified in the Nim manual. The rules are as follows:\",\"A numeric literal is a sequence of digits, possibly containing underscores.\",\"A numeric literal can have a type suffix, e.g. 1234'i32, 1234'u64, 1234'f32.\",\"Nim supports decimal, binary, octal, and hexadecimal literals, using a prefix to specify the base. The prefixes are 0b, 0o, and 0x, respectively (no prefix means decimal).\",\"Floating point literals can have a decimal point, an exponent (e or E), or both.\",\"Unary minus is part of the literal, but must be preceded by a specific set of characters.\",\"Nim supports custom numeric literals (we'll come to this later).\",\"Here are some examples of numeric literals in Nim:\",\"let a = 1_234 # decimal b = 0b1010 # binary c = 0o123 # octal d = 0x1A # hex e = 1234.567 # float f = 1.234e5 # float (with exponent) g = 1.234E-5 # float (with negative exponent) h = -1234 # negative decimal (unary minus) i = 1234'u64 # unsigned 64-bit integer j = 1234'i64 # signed 64-bit integer k = 1.234'f32 # 32-bit float l = 1.234e-4'f64 # 64-bit float \"]},\"99\":{\"h\":\"Lexer Changes\",\"t\":[\"Let's start by defining the tokens for numeric literals. We'll need two tokens: one for integer literals and one for floating point literals.\",\"// src/main/kotlin/khaledh/nimjet/lexer/NimToken.kt ... interface NimToken { companion object { ... // numeric literals @JvmField val INT_LIT = NimTokenType(\\\"<int>\\\") @JvmField val FLOAT_LIT = NimTokenType(\\\"<float>\\\") ... } } \",\"Next, we'll define the regular expressions for integer and floating point literals in the JFlex spec file.\",\"// src/main/kotlin/lexer/Nim.flex ... // numeric literals Digit = [0-9] BinDigit = [01] OctDigit = [0-7] HexDigit = [0-9a-fA-F] DecNum = {Digit} (\\\"_\\\"? {Digit})* BinNum = \\\"0\\\" [bB] {BinDigit} (\\\"_\\\"? {BinDigit})* OctNum = \\\"0\\\" [o] {OctDigit} (\\\"_\\\"? {OctDigit})* HexNum = \\\"0\\\" [xX] {HexDigit} (\\\"_\\\"? {HexDigit})* IntNum = {DecNum} | {BinNum} | {OctNum} | {HexNum} IntSuffix = \\\\'? [iIuU] (8 | 16 | 32 | 64) IntLit = {IntNum} {IntSuffix}? Exp = [eE] [+\\\\-]? {DecNum} FloatNum = {DecNum} (\\\"\\\\.\\\" {DecNum} {Exp}? | {Exp}) FloatSuffix = ([fF] (32 | 64) | [dD]) FloatLit = {FloatNum} | ({FloatNum} | {DecNum} | {OctNum} | {BinNum}) \\\\'? {FloatSuffix} | {HexNum} \\\\' {FloatSuffix} %% <DEFAULT> { ... \\\"-\\\"? {IntLit} { return NimToken.INT_LIT; } \\\"-\\\"? {FloatLit} { return NimToken.FLOAT_LIT; } ... } \",\"The regexes should be fairly straightforward to understand. The only one that might look a bit odd is the FloatLit regex, which has three alternatives. The first is a floating point literal (i.e. with a decimal point and/or exponent), the second adds decimal, octal, or binary literals, but requires a type suffix (since the absence of a suffix would make it an integer literal), and the third is a hexadecimal literal with a mandatory apostrophe and type suffix (since the float type suffix starts with a valid hex digit).\",\"The rules are also simple, they include an optional unary minus followed by either an integer or floating point literal. There are, however, cases when a minus character can mean an operator, so we'll have to handle that later when we add support for operators.\"]},\"100\":{\"h\":\"Grammar Changes\",\"t\":[\"So far we only support string literals in the grammar. Let's add support for numeric literals as well, so we can initialize variables with them.\",\"// src/main/kotlin/khaledh/nimjet/parser/Nim.bnf ... IdentDef ::= IdentDecl EQ Literal DocComment? ... Literal ::= INT_LIT | FLOAT_LIT | STRING_LIT ... \",\"We moved the existing STRING_LIT token along with the new INT_LIT and FLOAT_LIT tokens into the Literal rule, and updated the IdentDef rule to use it instead.\",\"Let's test it out.\",\"Looks good! We can now use numeric literals in our code.\"]},\"101\":{\"h\":\"Custom Numeric Literals\",\"t\":[\"Nim allows you to define custom numeric literals by defining a proc (or other callable) with the same name as the literal prefixed with the ' character. For example:\",\"type u4 = distinct uint8 # a 4-bit unsigned integer proc `'u4`(n: string): u4 = ... var x = 5'u4 \",\"In this example, 5'u4 is a custom numeric literal that calls the 'u4 proc with the string \\\"5\\\" as an argument. The proc then converts the string to a u4 value (possibly with some validation).\",\"Let's add a new token for custom numeric literals.\",\"interface NimToken { companion object { ... // numeric literals @JvmField val INT_LIT = NimTokenType(\\\"<int>\\\") @JvmField val FLOAT_LIT = NimTokenType(\\\"<float>\\\") @JvmField val CUSTOM_NUMERIC_LIT = NimTokenType(\\\"<custom numeric>\\\") ... } } \",\"We'll also need to update the lexer to recognize custom numeric literals. We'll need to add a regex for identifiers so that we can use it to match the custom numeric callable. We'll use the same regex in the existing rule that matches regular identifiers.\",\"... Identifier = [a-zA-Z][a-zA-Z0-9]* ... CustomNumLit = ({IntLit} | {FloatLit}) \\\\' {Identifier} %% ... <DEFAULT> { ... \\\"-\\\"? {IntLit} { return NimToken.INT_LIT; } \\\"-\\\"? {FloatLit} { return NimToken.FLOAT_LIT; } \\\"-\\\"? {CustomNumLit} { return NimToken.CUSTOM_NUMERIC_LIT; } ... {Identifier} { return NimToken.IDENT; } ... } \",\"Finally, let's add the new token to the Literal rule in the grammar.\",\"... Literal ::= INT_LIT | FLOAT_LIT | CUSTOM_NUMERIC_LIT | STRING_LIT ... \",\"Let's test it out.\",\"Great! All seems to be working as expected.\"]},\"102\":{\"h\":\"Expressions\",\"t\":[\"Now that we have support for identifiers and literals, we can start adding support for expressions. We cannot talk about expressions without talking about operators and operator precedence. Nim's approach to operators is unique, as it treats operators as regular procedures. This means that we can define our own operators using any combination of operator symbols. There are three types of operators:\",\"Unary operators: operators that take one argument and can be written in prefix notation (e.g., -a).\",\"Binary operators: operators that take two arguments and can be written in infix notation (e.g., a + b).\",\"Operators that take more than two arguments, which can only be used as a proc call (e.g. `*+`(a, b, c)).\",\"Examples:\",\"let a = 40 # literal b = a # identifier c = a + 2 # binary expression d = -c # unary expression e = 2 + 4 * 10 # operator precedence (* has higher precedence than +) f = (2 + 4) * 10 # parentheses can be used to change precedence g = true # boolean literal h = not g # unary boolean expression i = g and h # binary boolean expression j = i or (e < f) # boolean expression using relational operators \",\"In addition to typical expressions like arithmetic and logical operations, Nim supports block expressions, which are expressions that contain a block of code, where the value of the block is the value of the last expression in the block.\",\"Examples:\",\"let a = block: # block expression echo \\\"Hello\\\" 42 b = if a > 50: a else: a + 10 # if expression c = case a: # case expression of 0: \\\"zero\\\" of 42: \\\"forty-two\\\" else: \\\"not forty-two\\\" \",\"We'll come back to block expressions later, but for now, let's start with the basics.\"]},\"103\":{\"h\":\"Nim Operators\",\"t\":[\"Operators in Nim can be defined using any combination of the following operator symbols:\",\"= + - * / < > @ $ ~ & % | ! ? ^ . : \\\\ \",\"An exception is made for the following set since these are used for other purposes in the language:\",\". (member access, method call syntax)\",\"= (assignment, initialization)\",\": (type declaration, block start)\",\":: (seems to be reserved for future use)\",\".. (slice or range operator)\",\"There's also a predefined set of keyword operators:\",\"and or not xor shl shr div mod in notin is isnot of as from \",\"Special patterns of operators affect the operator precedence:\",\"operators that start with a . are called dot-like operators\",\"operators that start with a @ are called sigil-like operators\",\"operators that end with ->, ~> or => are called arrow-like operators\",\"operators that end with = and their first character is not one of <, >, !, =, ~, ? are called assignment operators\",\"Here's a modified version of the operator precedence table from the Nim manual:\",\"PrecedenceLevel\",\"Operators\",\"Firstcharacter\",\"Trailingcharacter(s)\",\"Terminalsymbol\",\"10 (highest)\",\"$^\",\"OP10\",\"9\",\"*/%divmodshlshr\",\"*/%\\\\\",\"OP9\",\"8\",\"+-\",\"+-, |, ~\",\"OP8\",\"7\",\"&\",\"&\",\"OP7\",\"6\",\"dot-like operator (e.g. .?) ..\",\".\",\"OP6\",\"5\",\"==<=<>=>!=innotinisisnotnotofasfrom\",\"=<>!\",\"OP5\",\"4\",\"and\",\"OP4\",\"3\",\"orxor\",\"OP3\",\"2\",\"@:?\",\"OP2\",\"1\",\"assignment operator (e.g. +=, *=)\",\"not one of:<>!=~?\",\"=\",\"OP1\",\"0 (lowest)\",\"arrow-like operator (e.g. ->, =>)\",\"->~>=>\",\"OP0\"]},\"104\":{\"h\":\"Lexing Operators\",\"t\":[\"Let's apply the above operator rules to recognize operators. We'll classify them into the 11 precedence levels mentioned above, from OP0 to OP10. There's also a couple of things we need to address:\",\"we'll need to make sure that the five exceptions mentioned above are handled separately, since they cannot be combined with other operator symbols\",\"we'll need to consider the assignment operators when matching certain cases, since it changes the precedence level of the operator to OP1\",\"// src/main/kotlin/khaledh/nimjet/lexer/Nim.flex ... {% ... private IElementType considerAssign(IElementType type) { // if the last character is '=', then it's an assignment operator return yycharat(yylength() - 1) == '=' ? NimToken.OP1 : type; } }% ... Opr = [=+\\\\-*/<>@$~&%|!?\\\\^\\\\.:\\\\\\\\] NotOpr = [^=+\\\\-*/<>@$~&%|!?\\\\^\\\\.:\\\\\\\\] %% ... <DEFAULT> { ... // special tokens: `=`, ':', '::', '.', '..' \\\"=\\\" / {NotOpr} { return NimToken.EQ; } \\\":\\\" / {NotOpr} { return NimToken.COLON; } \\\"::\\\" / {NotOpr} { return NimToken.COLONCOLON; } \\\".\\\" / {NotOpr} { return NimToken.DOT; } \\\"..\\\" / {NotOpr} { return NimToken.DOTDOT; } // operators have 11 precendence levels (0 to 10) {Opr}*?[\\\\-~=]\\\">\\\" { return NimToken.OP0; } [@:\\\\?]{Opr}* { return NimToken.OP2; } [=<>!]{Opr}* { return NimToken.OP5; } \\\\.{Opr}+ { return considerAssign(NimToken.OP6); } \\\\&{Opr}* { return considerAssign(NimToken.OP7); } \\\\~{Opr}* { return NimToken.OP8; } [+\\\\-|]{Opr}* { return considerAssign(NimToken.OP8); } [*%/\\\\\\\\]{Opr}* { return considerAssign(NimToken.OP9); } [$\\\\^]{Opr}* { return considerAssign(NimToken.OP10); } // keyword operators \\\"or\\\" { return NimToken.OP3; } \\\"xor\\\" { return NimToken.OP3; } \\\"and\\\" { return NimToken.OP4; } \\\"in\\\" { return NimToken.OP5; } \\\"notin\\\" { return NimToken.OP5; } \\\"is\\\" { return NimToken.OP5; } \\\"isnot\\\" { return NimToken.OP5; } \\\"not\\\" { return NimToken.OP5; } \\\"of\\\" { return NimToken.OP5; } \\\"as\\\" { return NimToken.OP5; } \\\"from\\\" { return NimToken.OP5; } \\\"div\\\" { return NimToken.OP9; } \\\"mod\\\" { return NimToken.OP9; } \\\"shl\\\" { return NimToken.OP9; } \\\"shr\\\" { return NimToken.OP9; } ... } \",\"The Opr regex matches any operator symbol, while NotOpr does the opposite. We use the NotOpr regex in first set of rules (using the lookahead / operator), the five special cases, to ensure that these tokens are not followed by another operator symbol (which would make them part of a different operator).\",\"In the second set of rules, we use the Opr regex to match the different kinds of operators based on leading and/or trailing symbols, and return their precedence level token. Some of these rules call the considerAssign utility function to check if the last character is an equals sign, which makes the operator an assignment operator (thus returning OP1 instead of the original precedence level). Notice that we split the case of OP8 into two rules: the one with a ~ prefix shouldn't consider assignment operators, while the one with the +, -, or | prefixes should (as per the Nim manual).\",\"In the third set of rules, we match the predefined keyword operators and return their corresponding precedence level.\",\"We have a bit of a problem though. The .. operator should be recognized as an OP6 token, since it's an operator with that precedence level. However, it's also going to be used in other places in the grammar. Since we can't use two different tokens for the same lexeme, we'll have to handle this in the parser. Instead of returning OP6 from the lexer, we'll define an OP6 rule in the grammar that matches any token from that precedence level. The only other lexer rule with that precedence level is the dot-like operator rule, so we'll give it a different token name, DOT_LIKE. Then we can combine DOTDOT and DOT_LIKE in the parser under the OP6 rule.\",\"<DEFAULT> { // turned into OP6 in the grammar \\\"..\\\" / {NotOpr} { return NimToken.DOTDOT; } ... // turned into OP6 in the grammar \\\\.{Opr}+ { return considerAssign(NimToken.DOT_LIKE); } } \",\"Now, let's turn our attention to the grammar.\"]},\"105\":{\"h\":\"Parsing Expressions\",\"t\":[\"Parsing expressions in recursive descent parsers usually requires implementing a function for each precedence level, which delegates to the next higher precedence level to parse its operands, and keeps parsing until it encounters an operator with a lower precedence level. This has a couple of issues: first, the grammar must not be left-recursive, otherwise the parser will go into an infinite loop; and second, recursive implementation can be slow for deeply nested expressions (not to mention the risk of stack overflow).\",\"Fortunately, Grammar-Kit has built-in support for parsing expressions using an optimized approach that avoids these issues. All we need to do is define our expression rules in the order of precedence levels (from lowest to highest), and have each rule extend the root expression rule.\",\"Let's start by adding the new expression rules to the grammar.\",\"{ ... extends(\\\".+Expr\\\")=SimpleExpr } ... // Expressions Expr ::= SimpleExpr SimpleExpr ::= Op0Expr | Op1Expr | Op2Expr | Op3Expr | Op4Expr | Op5Expr | Op6Expr | Op7Expr | Op8Expr | Op9Expr | Op10Expr | PrimaryExpr Op0Expr ::= SimpleExpr OP0 SimpleExpr Op1Expr ::= SimpleExpr OP1 SimpleExpr Op2Expr ::= SimpleExpr OP2 SimpleExpr Op3Expr ::= SimpleExpr OP3 SimpleExpr Op4Expr ::= SimpleExpr OP4 SimpleExpr Op5Expr ::= SimpleExpr OP5 SimpleExpr Op6Expr ::= SimpleExpr OP6 SimpleExpr Op7Expr ::= SimpleExpr OP7 SimpleExpr Op8Expr ::= SimpleExpr OP8 SimpleExpr Op9Expr ::= SimpleExpr OP9 SimpleExpr Op10Expr ::= SimpleExpr OP10 SimpleExpr PrimaryExpr ::= Literal | IdentRef // Operators private OP6 ::= DOTDOT | DOT_LIKE \",\"A few notes on the rules:\",\"The starting rule is Expr, which is the root rule for all expressions. Currently, it only includes SimpleExpr, but it will include block expressions later.\",\"The SimpleExpr rule matches any of the 11 precedence level rules, as well as primary expressions.\",\"Each precedence level rule is a binary expression that matches two operands and an operator of the corresponding precedence level.\",\"Notice that we use the SimpleExpr rule as the operand type, which allows for recursive parsing of expressions. This leads to left recursion, which is handled by Grammar-Kit's optimized expression parsing. For this to work properly, we make all rules that end in Expr extend SimpleExpr using the extends directive.\",\"The PrimaryExpr rule simply matches either a literal or an identifier reference (for now).\",\"The OP6 rule combines the DOTDOT and DOT_LIKE tokens into a single rule, as mentioned earlier.\",\"Time to test everything out.\",\"For testing, I used an expression that includes most of the operators and precedence levels. The result looks good, with the expression being parsed correctly. Since it's hard to see the entire expression tree from the screenshot, I have included a textual representation below.\",\" ┌────────────────────── -> ───┐ ┌────── or ──┐ ┌ += ──┐ ┌ + ──┐ ┌ > ────────────┐ 8 ┌ @ ──────────┐ 1 ┌ ^ ┐ 4 ┌─────── .. ─┐ 9 ┌──── and ─┐ 2 3 ┌ .? ──┐ 11 ┌─ == ─┐ 12 5 ┌ & ┐ 10 11 6 7 x = 1 + 2 ^ 3 or 4 > 5 .? 6 & 7 .. 11 -> 8 += 9 @ 10 == 11 and 12 \"]},\"106\":{\"h\":\"Unary Operators\",\"t\":[\"Nim also supports unary operators, or prefix operators as they're called in the manual:\",\"Whether an operator is used as a prefix operator is also affected by preceding whitespace.\",\"So, a unary operator has leading whitespace, but no trailing whitespace; e.g., in echo $foo the $ is a unary operator, while in let c = a $ b the $ is a binary operator. Note that, in a$ b and a$b the $ is also a binary operator.\",\"While we can recognize unary operators in the lexer, this will double the number of operator tokens we have to handle in the parser. A simpler approach is to customize the parser to recognize if an operator is unary based on the surrounding whitespace.\",\"Fortunately, Grammar-Kit supports adding custom methods to the parser as an escape hatch, which can be invoked using the <<method>> notation in the grammar. Those are called external rules. We can use this feature to call into a method that checks if an operator is unary. Let's start by adding a parser utility class that will handle this.\",\"// src/main/kotlin/khaledh/nimjet/parser/NimParserUtil.kt ... class NimParserUtil : GeneratedParserUtilBase() { companion object { ... @JvmStatic @Suppress(\\\"UNUSED_PARAMETER\\\") fun isUnary(builder: PsiBuilder, level: Int): Boolean { var leading = ( builder.currentOffset > 0 && builder.originalText[builder.currentOffset - 1].isWhitespace() ) var trailing = builder.tokenText?.let { builder.currentOffset + it.length < builder.originalText.length && builder.originalText[builder.currentOffset + it.length].isWhitespace() } == true return leading && !trailing } } } \",\"Note: The @Suppress(\\\"UNUSED_PARAMETER\\\") annotation is used to suppress the warning about the unused level parameter (this is just the parser level, which we don't need). We use the builder parameter to get the current token type and advance the lexer when needed.\",\"The method should be self-explanatory. We make use of the currentOffset and originalText properties of the PsiBuilder to check if the character before and after the token is whitespace. We then return true if the operator has leading whitespace but no trailing whitespace.\",\"Let's add the external rule to the grammar and use it to handle unary operators.\",\"{ ... parserUtilClass=\\\"khaledh.nimjet.parser.NimParserUtil\\\" ... } ... PrimaryExpr ::= Literal | IdentRef | PrefixExpr PrefixExpr ::= OP_UNARY PrimaryExpr // Operators private OP6 ::= DOTDOT | DOT_LIKE private OP ::= OP0 | OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 | OP8 | OP9 | OP10 private OP_UNARY ::= <<is_unary>> OP ... // external rules external is_unary ::= isUnary \",\"We first tell Grammar-Kit to use the NimParserUtil class for the parser utilities (i.e. external rules). The external rules are declared at the end using the external directive by assigning the rule name to the corresponding method in the parser utility class.\",\"We added a private OP rule that matches any operator, and an OP_UNARY rule that uses the <<is_unary>> external rule to check if the operator is unary.\",\"The PrefixExpr rule matches a unary operator followed by a PrimaryExpr. This rule itself is a case of the PrimaryExpr rule, since it binds stronger than binary expressions.\"]},\"107\":{\"h\":\"Sigil-like Operators\",\"t\":[\"Another special case for unary operators is the sigil-like operators, i.e. those that start with the @ symbol. From the Nim manual:\",\"If a unary operator's first character is @ it is a sigil-like operator which binds stronger than a primarySuffix: @x.abc is parsed as (@x).abc whereas $x.abc is parsed as $(x.abc).\",\"We are not tackling the primarySuffix rule yet, but we can still handle those sigil-like operators in order to be ready for when we do. Even though the Nim manual refers to them as unary operators, in the actual implementation they are allowed to have trailing whitespace for some reason (maybe it was an oversight?).\",\"Let's split the OP2 token into two tokens, OP2_SIGIL_LIKE and OP2_OTHER, and add a rule in the parser to group them under an OP2 rule.\",\" [@:\\\\?]{Opr}* { return NimToken.OP2; } @{Opr}* { return NimToken.OP2_SIGIL_LIKE; } [:\\\\?]{Opr}* { return NimToken.OP2_OTHER; } \",\"Sigil-like operators are allowed to appear before identifier and literals. Let's update the grammar to reflect this.\",\"... Op0Expr ::= SimpleExpr OP0 <<expr_ind>> SimpleExpr Op1Expr ::= SimpleExpr OP1 <<expr_ind>> SimpleExpr Op2Expr ::= SimpleExpr OP2_OTHER <<expr_ind>> SimpleExpr ... PrimaryExpr ::= OP2_SIGIL_LIKE? Literal | OP2_SIGIL_LIKE? IdentRef | PrefixExpr | ParenExpr ... // Operators private OP2 ::= OP2_SIGIL_LIKE | OP2_OTHER ... \",\"The sigil-like operator is parsed correctly. It is treated as a unary operator, even if it has trailing whitespace.\"]},\"108\":{\"h\":\"Parentheses\",\"t\":[\"Parentheses are used to group expressions and change the order of evaluation. They have higher precedence than any binary operator, and can be nested. They're usually considered a form of primary expression.\",\"Let's first add the opening and closing parentheses tokens to the lexer.\",\"... <DEFAULT> { ... \\\"(\\\" { return NimToken.LPAREN; } \\\")\\\" { return NimToken.RPAREN; } ... } \",\"Now, let's add the parentheses rule to the grammar.\",\"... PrimaryExpr ::= Literal | IdentRef | PrefixExpr | ParenExpr PrefixExpr ::= OP_UNARY PrimaryExpr ParenExpr ::= LPAREN SimpleExpr RPAREN ... \",\"Looks good. We have two nested parentheses expressions, and they are parsed with the correct precedence, overriding the default precedence of the operators.\"]},\"109\":{\"h\":\"Right Associativity\",\"t\":[\"One final thing to consider is right-associative operators. In Nim, the only right-associative operator starts with the ^ symbol. From the manual:\",\"Binary operators whose first character is ^ are right-associative, all other binary operators are left-associative.\",\"proc `^/`(x, y: float): float = # a right-associative division operator result = x / y echo 12 ^/ 4 ^/ 8 # 24.0 (4 / 8 = 0.5, then 12 / 0.5 = 24.0) echo 12 / 4 / 8 # 0.375 (12 / 4 = 3.0, then 3 / 8 = 0.375) \",\"Fortunately, Grammar-Kit supports right-associative operators through the rightAssociative rule attribute. Right now, operators starting with ^ are grouped with those starting with $ under the same precedence level, OP10. We'll need to update the lexer to recognize them separately, and then use each in a separate rule in the grammar.\",\" [$\\\\^]{Opr}* { return considerAssign(NimToken.OP10); } [$]{Opr}* { return considerAssign(NimToken.OP10_DOLLAR); } [\\\\^]{Opr}* { return considerAssign(NimToken.OP10_CARET); } \",\"Let's update the grammar to reflect this change.\",\"... SimpleExpr ::= Op0Expr | Op1Expr ... | Op10Expr | Op10LeftExpr | Op10RightExpr | PrimaryExpr Op0Expr ::= SimpleExpr OP0 <<expr_ind>> SimpleExpr Op1Expr ::= SimpleExpr OP1 <<expr_ind>> SimpleExpr ... Op10Expr ::= SimpleExpr OP10 <<expr_ind>> SimpleExpr Op10LeftExpr ::= SimpleExpr OP10_DOLLAR <<expr_ind>> SimpleExpr Op10RightExpr ::= SimpleExpr OP10_CARET <<expr_ind>> SimpleExpr {rightAssociative=true} ... // Operators private OP2 ::= OP2_SIGIL_LIKE | OP2_OTHER private OP6 ::= DOTDOT | DOT_LIKE private OP10 ::= OP10_DOLLAR | OP10_CARET private OP ::= OP0 | OP1 | OP2 | OP3 | OP4 | OP5 | OP6 | OP7 | OP8 | OP9 | OP10 private OP_UNARY ::= <<is_unary>> OP \",\"Let's see if it works.\",\"The right-associative operator is parsed correctly. The expression (5 + x) ^ 2 ^ 3 is parsed as (5 + x) ^ (2 ^ 3), as expected (the second ^ operator has higher precedence than the first one).\"]},\"110\":{\"h\":\"Handling Indentation\",\"t\":[\"Nim supports a flexible indentation format within expressions. Unlike structured indentation of code blocks (which requires every indent to have a corresponding dedent), expressions can have indents, equal indents, and dedents after any operator in an expression. For example, the above expression can be written as follows:\",\"let x = 1 + 2 ^ 3 or 4 > 5 .? 6 & 7 .. 11 -> 8 += 9 @ 10 == 11 and 12 \",\"This poses a challenge for us, since there's no pattern for the indentation inside an expression that we can capture through a grammar rule. A naive approach would be to update the expression rules to allow any number of indentation tokens (including none) to appear after an operator. The issue with this approach is that, after an expression ends, we can't tell how many dedent tokens we need to skip to get back to the correct indentation level. We need a way to track the indentation level in the parser.\",\"Let's add a few external rules to the parser utility class to handle this.\",\"... class NimParserUtil : GeneratedParserUtilBase() { companion object { private var exprIndentLevel = 0 @JvmStatic @Suppress(\\\"UNUSED_PARAMETER\\\") fun exprIndentStart(builder: PsiBuilder, level: Int): Boolean { exprIndentLevel = 0 return true } @JvmStatic @Suppress(\\\"UNUSED_PARAMETER\\\") fun exprIndent(builder: PsiBuilder, level: Int): Boolean { if (builder.tokenType == NimToken.IND) { exprIndentLevel++ builder.advanceLexer() } else { while (builder.tokenType == NimToken.DED && exprIndentLevel > 0) { exprIndentLevel-- builder.advanceLexer() } if (builder.tokenType == NimToken.EQD) { builder.advanceLexer() } } return true } @JvmStatic @Suppress(\\\"UNUSED_PARAMETER\\\") fun exprIndentEnd(builder: PsiBuilder, level: Int): Boolean { while (builder.tokenType in setOf(NimToken.DED, NimToken.EQD) && exprIndentLevel > 0) { if (builder.tokenType == NimToken.DED) { exprIndentLevel-- } builder.advanceLexer() } return true } ... } } \",\"We declare an exprIndentLevel variable to track the current indentation level in an expression. We define three methods:\",\"exprIndentStart: resets the exprIndentLevel to 0 at the start of an expression\",\"exprIndent: has two cases: \",\"If the current token is IND, it increments the exprIndentLevel and advances the lexer to the next token\",\"Otherwise, it consumes any DED tokens (if any) while decrementing the exprIndentLevel and advancing the lexer. After consuming any DED tokens, it checks if the next token is EQD and simply advances the lexer if it is. This consumes any equal indents that might appear after an operator. Remember that dedents can be followed by an equal indent if the dedents bring the indentation level to the same level as a previous indentation.\",\"exprIndentEnd: similar to the second case of exprIndent, but it consumes any remaining DED tokens (if any) after the expression ends. It doesn't consume EQD (if any) since such a token would belong to the parent block, not the expression.\",\"The idea here is to call exprIndentStart at the start of an expression, exprIndent after any operator within the expression, and exprIndentEnd at the end of the expression. Let's modify the grammar to use these external rules.\",\"... Expr ::= <<expr_ind_start>> SimpleExpr <<expr_ind_end>> ... Op0Expr ::= SimpleExpr OP0 <<expr_ind>> SimpleExpr Op1Expr ::= SimpleExpr OP1 <<expr_ind>> SimpleExpr ... Op10Expr ::= SimpleExpr OP10 <<expr_ind>> SimpleExpr ... // external rules ... external expr_ind_start ::= exprIndentStart external expr_ind ::= exprIndent external expr_ind_end ::= exprIndentEnd \",\"We then use the <<expr_ind_start>> and <<expr_ind_end>> rules at the start and end of the Expr rule, respectively. This ensures that the indentation level is reset at the beginning of an expression and that any leftover dedent tokens are consumed at the end.\",\"Finally, we use the <<expr_ind>> rule after each operator in the expression rules. This takes care of tracking indentation changes within the expression.\",\"Let's try it out.\",\"It seems to work as expected. The expression is parsed correctly, and the declaration following it are also parsed correctly.\",\"This has been a long section. We've covered a lot of ground: operator precedence, binary and unary operators (including some special cases), right-associative operators, and handling indentation within expressions. We still need to handle block expressions, but for now we've got basic expressions under our belt.\"]},\"111\":{\"h\":\"\"},\"112\":{\"h\":\"FileViewProvider\",\"t\":[\"There's one thing remaining to complete the picture: how does the IDE know which PSI tree to use for a given file? This is where the FileViewProvider comes in, with its getPsi method. It is a bridge between the PSI and the file system, and is responsible for creating the PSI tree for a given file.\"]},\"113\":{\"h\":\"NimJet\",\"t\":[\"NimJet is a plugin for the JetBrains IDEs that provides support for the Nim programming language. It is currently in development and is not yet available in the JetBrains plugin marketplace.\"]},\"114\":{\"h\":\"Writing an OS in Nim\"},\"115\":{\"h\":\"Introduction\",\"t\":[\"I decided to document my journey of writing an OS in Nim. Why Nim? It's one of the few languages that allow low-level systems programming with deterministic memory management ( garbage collector is optional) with destructors and move semantics. It's also statically typed, which provides greater type safety. It also supports inline assembly, which is a must for OS development. Other options include C, C++, Rust, and Zig. They're great languages, but I chose Nim for its simplicity, elegance, and performance.\",\"Let's get started!\"]},\"116\":{\"h\":\"Fusion OS\",\"t\":[\"As with any hobby OS project, it needs a name. I decided to call it Fusion OS, for no particular reason. I just like the name :-) You can find the source code on GitHub: https://github.com/khaledh/fusion.\",\"This is not going to be a Unix-like OS. I'd like to experiment with some ideas that I think would be interesting to explore. Some of these ideas are very challenging, so I'm not sure if I'll be able to go far with them.\",\"Here are some of the features I'd like to explore/implement:\",\"Single Address Space\",\"This basically means that all processes share a single 64-bit virtual address space. I may still use per-process page tables for memory protection, but the address space will be shared.\",\"Capability-based Security\",\"This is a security model where access to resources is controlled by capabilities, which are unforgeable tokens that grant access to a resource. In addition to typical resources ( e.g. files, devices, etc.), virtual memory regions will also be treated as resources, and access to them will be controlled by capabilities.\",\"Computations as State Machines\",\"Kernel services, interrupt handlers, and user processes will be implemented as single-threaded state machines. Concurrency will be achieved by running multiple state machines in parallel.\",\"Message Passing\",\"State machines will communicate with each other by sending messages (think events/commands), both synchronously and asynchronously.\",\"Memory Mapped Filesystem\",\"The filesystem will be memory mapped into the address space, so that files can be accessed as memory.\",\"In the next section, we'll set up our development environment.\"]},\"117\":{\"h\":\"Environment Setup\",\"t\":[\"In this section, we'll set up our development environment. We'll be using Nim as our programming language, so obviously we'll need to install the Nim compiler. We also need a way to cross-compile to a freestanding environment. We'll use LLVM's clang and lld for that. Finally, we'll need a way to test our OS. We'll use QEMU for that.\"]},\"118\":{\"h\":\"Nim compiler\",\"t\":[\"First, we need to install the Nim compiler. An easy way to install Nim is through the choosenim installer (or you can install it using your system's package manager), so let's install that first:\",\"$ curl https://nim-lang.org/choosenim/init.sh -sSf | sh \",\"Then, we can install the latest stable version of Nim:\",\"$ choosenim stable Downloading Nim 2.0.4 from nim-lang.org ... $ nim -v Nim Compiler Version 2.0.4 [Linux: amd64] ... \"]},\"119\":{\"h\":\"LLVM toolchain\",\"t\":[\"Now that we have Nim installed, we need to install the LLVM toolchain. We'll use * clang* and lld to cross-compile to a UEFI environment.\",\"$ sudo pacman -S clang lld ... $ clang --version clang version 18.0.0 ... $ ld.lld --version LLD 18.0.0 (compatible with GNU linkers) \"]},\"120\":{\"h\":\"QEMU\",\"t\":[\"Next, let's install QEMU so that we can test our OS:\",\"$ sudo pacman -S qemu-desktop ... $ qemu-system-x86_64 --version QEMU emulator version 8.1.3 ... \"]},\"121\":{\"h\":\"Creating the project\",\"t\":[\"Now that we have our environment set up, we can create our project. We'll start by creating a new directory for our project:\",\"$ mkdir fusion && cd fusion \",\"Next, we'll create a new nimble project with binary package type:\",\"$ nimble init ... Prompt: Package type? ... Library - provides functionality for other packages. ... Binary - produces an executable for the end-user. ... Hybrid - combination of library and binary ... For more information see https://goo.gl/cm2RX5 Select Cycle with 'Tab', 'Enter' when done Answer: binary ... \",\"Let's also create a build directory for our build artifacts and add it to .gitignore:\",\"$ mkdir build $ echo build >> .gitignore \",\"Now that we have our project set up, let's move on to setting up our build to target the UEFI environment.\"]},\"122\":{\"h\":\"Targeting UEFI (Part 1)\",\"t\":[\"Traditionally, booting an operating system on x86/x86_64 hardware has been done using the BIOS. The BIOS has been considered legacy for a long time, and has been replaced by UEFI (Unified Extensible Firmware Interface) on most modern hardware. We no longer have to write a boot sector in assembly and rely on BIOS interrupts to load the OS. In this section we will focus on cross-compiling to UEFI (we'll get to the actual booting part later).\",\"Since there is no OS to target yet, we'll need to cross-compile to a freestanding environment (as opposed to an OS hosted environment), where only a subset of the C standard library and runtime is available. That means we can't use features from the standard library that rely on OS support like memory allocation, threads, IO, etc.\",\"Goal Build a minimal UEFI executable using Nim. The executable should assume a\",\"freestanding environment and does nothing but return 0 from the entry point.\"]},\"123\":{\"h\":\"Building a PE32+ executable\",\"t\":[\"The first hurdle we have to overcome is that the UEFI firmware expects a PE32+ executable (Portable Executable with 64-bit extension to the standard PE32 format), which is an executable format used by Windows. It also expects the executable to follow the Windows ABI x64 calling convention. But since we're developing on Linux, we'll need a way to cross-compile our bootloader to this format.\",\"Let's forget about Nim for a moment. Can we cross-compile a simple C program to a freestanding PE32+ executable on Linux? This is why we installed clang earlier, which supports multiple targets. The target we're interested in is x86_64-unknown-windows (the unknown part is for the vendor, which is not important in our case). We also need to tell the compiler that we don't have a standard library by passing the -ffreestanding flag:\",\"// main.c int main() { return 0; } \",\"$ clang -c \\\\ -target x86_64-unknown-windows \\\\ -ffreestanding \\\\ -o build/main.o \\\\ main.c $ file build/main.o build/main.o: Intel amd64 COFF object file, not stripped, 6 sections, symbol offset=0x143, 16 symbols, created Thu Nov 30 02:47:57 2023, 1st section name \\\".text\\\" \",\"We have a COFF object file, which is what PE32+ executables are based on. Now let's link it by telling clang to use the lld-link linker (which is the lld linker flavor that targets Windows):\",\"$ clang \\\\ -target x86_64-unknown-windows \\\\ -fuse-ld=lld-link \\\\ -o build/main.exe \\\\ build/main.o lld-link: error: could not open 'libcmt.lib': No such file or directory lld-link: error: could not open 'oldnames.lib': No such file or directory \",\"The linker is trying to statically link libcmt.lib, the native Windows CRT startup library, and oldnames.lib, a compatibility library for redirecting old function names to new ones. We're not going to rely on these default libraries, so we can tell the linker to exclude them by passing the -nostdlib flag:\",\"$ clang \\\\ -target x86_64-unknown-windows \\\\ -fuse-ld=lld-link \\\\ -nostdlib \\\\ -o build/main.exe \\\\ build/main.o lld-link: error: <root>: undefined symbol: mainCRTStartup \",\"The linker is unable to find the C runtime entry point, mainCRTStartup, which makes sense because we're not linking the startup library. We can tell the linker to use our main function as the entry point by passing the -entry:main flag:\",\"$ clang \\\\ -target x86_64-unknown-windows \\\\ -fuse-ld=lld-link \\\\ -nostdlib \\\\ -Wl,-entry:main \\\\ -o build/main.exe \\\\ build/main.o $ file build/main.exe build/main.exe: PE32+ executable (console) x86-64, for MS Windows \",\"Great! We have a PE32+ executable. But notice that it says (console). This means that the executable is a console application, which cannot run on UEFI. We need to tell the linker to create a UEFI application instead by passing the -subsystem:efi_application flag:\",\"$ clang \\\\ -target x86_64-unknown-windows \\\\ -fuse-ld=lld-link \\\\ -nostdlib \\\\ -Wl,-entry:main \\\\ -Wl,-subsystem:efi_application \\\\ -o build/main.exe \\\\ build/main.o $ file build/main.exe build/main.exe: PE32+ executable (EFI application) x86-64, for MS Windows \",\"Now we have a true UEFI application.\"]},\"124\":{\"h\":\"Cross-compiling Nim to PE32+\",\"t\":[\"Let's try to do the same thing with Nim. We'll port the C program to Nim:\",\"# main.nim proc main(): int {.exportc.} = return 0 \",\"The {.exportc.} pragma tells the Nim compiler to export the function name as is, without any mangling. We do this because we need to pass the entry point name to the linker, and we don't want the compiler to mangle it.\",\"Before we port this to Nim, we need to understand that Nim itself supports multiple targets. There are three arguments that influence the compilation/linking to a specific target:\",\"--cpu(architecture), which defaults to the host architecture (in my case this is amd64, i.e. x86_64)\",\"--os(operating system), which defaults to the host operating system (in my case this is linux)\",\"--cc(backend compiler), which defaults to gcc (on Windows it relies on MinGW, which is a port of GCC to Windows)\",\"Nim does support cross-compiling to Windows using the -d:mingw flag. However, while the executable we want is a Windows executable format, the target OS is not Windows, but UEFI. Nim doesn't have a target OS for UEFI, so we'll need to use the --os:any flag to tell the compiler to not use any OS-specific code (it only expects a handful of ANSI C library functions to be available).\",\"So, to cross-compile to UEFI, we need to set these three flags to: --cpu:amd64, --os:any, and --cc:clang. We also pass the clang flags we used earlier to the compiler and linker using the --passc and --passl flags respectively.\",\"$ nim c \\\\ --nimcache:build \\\\ --cpu:amd64 \\\\ --os:any \\\\ --cc:clang \\\\ --passc:\\\"-target x86_64-unknown-windows\\\" \\\\ --passc:\\\"-ffreestanding\\\" \\\\ --passl:\\\"-fuse-ld=lld-link\\\" \\\\ --passl:\\\"-nostdlib\\\" \\\\ --passl:\\\"-Wl,-entry:main\\\" \\\\ --passl:\\\"-Wl,-subsystem:efi_application\\\" \\\\ --out:build/main.exe \\\\ main.nim .../lib/system/osalloc.nim(218, 10) Error: Port memory manager to your platform \",\"The compiler is complaining that it doesn't know how to allocate memory on this platform. This makes sense because we're not targeting any OS. Since we don't have an OS yet, we need a way to provide memory allocation primitives to the Nim compiler. The Nim docs say:\",\"The -d:useMalloc option configures Nim to use only the standard C memory manage primitives malloc(), free(), realloc(). If your platform does not provide these functions it should be trivial to provide an implementation for them and link these to your program.\",\"OK, at least we have a way to provide memory allocation primitives to Nim, instead of assuming they're provided by an existing OS (e.g. mmap on Linux or VirtualAlloc on Windows). Since we don't have an OS yet, let's implement a simple bump allocator backed by a fixed-size buffer. To keep things simple, we will not worry about freeing memory for now (we'll get to that later when we implement a proper memory manager).\",\"# malloc.nim {.used.} var heap*: array[1*1024*1024, byte] # 1 MiB heap heapBumpPtr*: int = cast[int](addr heap) heapMaxPtr*: int = cast[int](addr heap) + heap.high proc malloc*(size: csize_t): pointer {.exportc.} = if heapBumpPtr + size.int > heapMaxPtr: return nil result = cast[pointer](heapBumpPtr) inc heapBumpPtr, size.int proc calloc*(num: csize_t, size: csize_t): pointer {.exportc.} = result = malloc(size * num) proc realloc*(p: pointer, new_size: csize_t): pointer {.exportc.} = result = malloc(new_size) copyMem(result, p, new_size) free(p) proc free*(p: pointer) {.exportc.} = discard \",\"Notice that I added the {.used.} pragma at the top of the file. This tells the compiler to consider the module as used, even if we don't call any of its procs directly. Otherwise, the compiler will consider it dead code and will eliminate it from the output.\",\"For Nim to actually know about this module, we need to import it in our main module:\",\"# main.nim import malloc ... \",\"Now let's pass the -d:useMalloc flag to the compiler and try to compile again:\",\"$ nim c \\\\ --nimcache:build \\\\ --cpu:amd64 \\\\ --os:any \\\\ --cc:clang \\\\ --passc:\\\"-target x86_64-unknown-windows\\\" \\\\ --passc:\\\"-ffreestanding\\\" \\\\ --passl:\\\"-fuse-ld=lld-link\\\" \\\\ --passl:\\\"-nostdlib\\\" \\\\ --passl:\\\"-Wl,-entry:main\\\" \\\\ --passl:\\\"-Wl,-subsystem:efi_application\\\" \\\\ -d:useMalloc \\\\ --out:build/main.exe \\\\ main.nim ... /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@sstd@sprivate@sdigitsutils.nim.c:8:10: fatal error: 'string.h' file not found 8 | #include <string.h> | ^~~~~~~~~~ /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c:8:10: fatal error: 'setjmp.h' file not found 8 | #include <setjmp.h> | ^~~~~~~~~~ /home/khaled/.cache/nim/main_d/@mmain.nim.c:113:5: error: conflicting types for 'main' 113 | int main(int argc, char** args, char** env) { | ^ /home/khaled/.cache/nim/main_d/@mmain.nim.c:65:29: note: previous definition is here 65 | N_LIB_PRIVATE N_NIMCALL(NI, main)(void) { | \",\"We're getting a different error, which means that Nim is happy with our memory allocation primitives.\",\"At first glance, it looks like we're missing some C headers. It turns out that clang needs to be told where to find the system headers. In my case, the headers are located in /usr/include (on macOS, the system headers are located at `xcrun --show-sdk-path`/usr/include), so we'll pass that to the compiler using the -I flag:\",\"$ nim c \\\\ --nimcache:build \\\\ --cpu:amd64 \\\\ --os:any \\\\ --cc:clang \\\\ --passc:\\\"-target x86_64-unknown-windows\\\" \\\\ --passc:\\\"-ffreestanding\\\" \\\\ --passc:\\\"-I/usr/include\\\" \\\\ --passl:\\\"-target x86_64-unknown-windows\\\" \\\\ --passl:\\\"-fuse-ld=lld-link\\\" \\\\ --passl:\\\"-nostdlib\\\" \\\\ --passl:\\\"-Wl,-entry:main\\\" \\\\ --passl:\\\"-Wl,-subsystem:efi_application\\\" \\\\ -d:useMalloc \\\\ --out:build/main.exe \\\\ main.nim ... /home/khaled/.cache/nim/main_d/@mmain.nim.c:113:5: error: conflicting types for 'main' 113 | int main(int argc, char** args, char** env) { | ^ /home/khaled/.cache/nim/main_d/@mmain.nim.c:65:29: note: previous definition is here 65 | N_LIB_PRIVATE N_NIMCALL(NI, main)(void) { | \",\"Note: On macOS, the system headers are located at `xcrun --show-sdk-path`/usr/include, so you'll need to replace /usr/include with that path in the --passc flag. Also, you'll need to pass --passc:\\\"-fgnuc-version=4.2.1\\\" (which defines __GNUC__) to avoid any macOS-specific marcros and stick with the GNU C ones.\",\"In order to understand what's going on here it's important to note that, unlike C, Nim programs are not required to have a main function. You can have a file with code at the top level and it will be executed when the program starts. When we defined a main proc ( which, to Nim, is just another proc that has no special meaning), we caused a conflict with the main function that the Nim compiler generates by default. Since we're not going to rely on the C library startup code, we need to take over the startup process ourselves. We can tell Nim to not generate its own main function by passing the --noMain:on flag.\",\"However, by doing so, we lose initialization of global variables done by the automatically generated NimMain function. We can get it back by forward importing NimMain and calling it from our main proc:\",\"# main.nim proc NimMain() {.importc.} proc main(): int {.exportc.} = NimMain() return 0 \",\"Let's try to compile again with the --noMain:on flag:\",\"$ nim c \\\\ --nimcache:build \\\\ --cpu:amd64 \\\\ --os:any \\\\ --cc:clang \\\\ --passc:\\\"-target x86_64-unknown-windows\\\" \\\\ --passc:\\\"-ffreestanding\\\" \\\\ --passc:\\\"-I/usr/include\\\" \\\\ --passl:\\\"-target x86_64-unknown-windows\\\" \\\\ --passl:\\\"-fuse-ld=lld-link\\\" \\\\ --passl:\\\"-nostdlib\\\" \\\\ --passl:\\\"-Wl,-entry:main\\\" \\\\ --passl:\\\"-Wl,-subsystem:efi_application\\\" \\\\ -d:useMalloc \\\\ --noMain:on \\\\ --out:build/main.exe \\\\ main.nim ... lld-link: error: undefined symbol: memcpy >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@sstd@sprivate@sdigitsutils.nim.c.o:(nimCopyMem) >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(nimCopyMem) lld-link: error: undefined symbol: stderr >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(raiseOutOfMem__system_u5532) >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(writeToStdErr__system_u3828) lld-link: error: undefined symbol: exit >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(raiseOutOfMem__system_u5532) >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(callDepthLimitReached__system_u4467) >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(signalHandler) >>> referenced 1 more times lld-link: error: undefined symbol: fwrite >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(rawWrite) >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(rawWriteString) lld-link: error: undefined symbol: fflush >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(rawWrite) >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(rawWriteString) lld-link: error: undefined symbol: strlen >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(nimCStrLen) lld-link: error: undefined symbol: signal >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(registerSignalHandler__system_u4487) >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(registerSignalHandler__system_u4487) >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(registerSignalHandler__system_u4487) >>> referenced 2 more times lld-link: error: undefined symbol: memset >>> referenced by /home/khaled/.cache/nim/main_d/@m..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(nimSetMem__systemZmemory_u7) \",\"OK, the linker is complaining that it can't find some C functions. This is because we're targeting --os:any, which expects a handful of ANSI C library functions to be available for Nim to use:\",\"memset and memcpy for some memory operations\",\"strlen for string length\",\"fwrite and fflush for writing to a file descriptor\",\"stderr for printing to standard error (not a function, but a global variable)\",\"signal for signal handlers\",\"exit for exiting the program\",\"Since our OS won't be a POSIX system, we can disable signals by passing the -d:noSignalHandler flag. For the rest of the functions, we'll need to implement them ourselves. Also, Nim includes implementation of some memory functions, which we can leverage by passing the -d:nimNoLibc flag.\",\"Before we go any further, let's move the compiler flags to a nim.cfg file in the project root, so we don't have to pass them every time we compile:\",\"# nim.cfg --nimcache:build --noMain:on -d:useMalloc -d:nimNoLibc -d:noSignalHandler --cpu:amd64 --os:any --cc:clang --passc:\\\"-target x86_64-unknown-windows\\\" --passc:\\\"-ffreestanding\\\" --passc:\\\"-I/usr/include\\\" --passl:\\\"-target x86_64-unknown-windows\\\" --passl:\\\"-fuse-ld=lld-link\\\" --passl:\\\"-nostdlib\\\" --passl:\\\"-Wl,-entry:main\\\" --passl:\\\"-Wl,-subsystem:efi_application\\\" \",\"$ nim c main.nim --out:build/main.exe .../lib/std/typedthreads.nim(51, 10) Error: Threads not implemented for os:any. Please compile with --threads:off. \",\"This seems weird. The --os:any target should disable threads by default, which we know is true because we didn't get this error when we passed the flags on the command line. It turns out that Nim processes its default nim.cfg file (which turns off threads for os:any) before the project nim.cfg file (which defines --os:any). So by the time the project nim.cfg file is processed, threads are already enabled. We can technically disable threads in the project nim.cfg file using --threads:off, but since the default nim.cfg makes a lot of decisions based on the os flag, we'll need to pass this flag explicitly every time we compile.\",\"$ nim c --os:any main.nim --out:build/main.exe ... lld-link: error: undefined symbol: stderr lld-link: error: undefined symbol: exit lld-link: error: undefined symbol: fwrite lld-link: error: undefined symbol: fflush ... \",\"We get less linker errors now, thanks to the --d:nimNoLibc and --d:noSignalHandler flags. We still, however, need to implement stderr, fwrite, fflush, and exit.\",\"This section is already too long, so we'll continue in the next section, where we'll implement the missing C functions.\"]},\"125\":{\"h\":\"Targeting UEFI (Part 2)\",\"t\":[\"In the previous section, we were faced with the need to implement a number of ANSI C library functions. Let's implement them now.\"]},\"126\":{\"h\":\"C library functions\"},\"127\":{\"h\":\"\",\"t\":[\"The fwrite function writes count elements of data, each size bytes long, to the stream pointed to by stream, obtaining them from the location given by ptr. It returns the number of elements successfully written.\",\"size_t fwrite(const void *ptr, size_t size, size_t count, FILE *stream); \",\"The FILE * struct pointer is already defined in Nim as File, so we can use that directly. const void *, however, has no equivalent type in Nim, so we'll define it by importing the C equivalent. Since we don't have something to write to yet, we'll just create a dummy implementation:\",\"# src/libc.nim type const_pointer {.importc: \\\"const void *\\\".} = pointer proc fwrite*(ptr: const_pointer, size: csize_t, count: csize_t, stream: File): csize_t {.exportc.} = return count \"]},\"128\":{\"h\":\"\",\"t\":[\"The fflush function flushes the stream pointed to by stream. It returns 0 on success, or EOF on error.\",\"int fflush(FILE *stream); \",\"Again, we'll just create a dummy implementation for now:\",\"# src/libc.nim proc fflush*(stream: File): cint {.exportc.} = return 0.cint \"]},\"129\":{\"h\":\"/\",\"t\":[\"The stdout and stderr global variables are pointers to a FILE struct that represents the standard output and error streams.\",\"FILE *stdout; FILE *stderr; \",\"We can define them in Nim as a variable of type File, which will be initialized to nil by default:\",\"# src/libc.nim var stdout* {.exportc.}: File stderr* {.exportc.}: File \"]},\"130\":{\"h\":\"\",\"t\":[\"The exit function causes normal process termination and the value of status is returned to the parent.\",\"void exit(int status); \",\"Since we don't have an OS yet, there is nothing to return to, so we'll just halt the CPU using inline assembly:\",\"# src/libc.nim proc exit*(status: cint) {.exportc, asmNoStackFrame.} = asm \\\"\\\"\\\" .loop: cli hlt jmp .loop \\\"\\\"\\\" \",\"This clears the interrupt flag, then halts the CPU. The CPU can still be interrupted by NMI, SMI, or INIT interrupts, so that's why we have a loop to keep halting the CPU if this happens. The asmNoStackFrame pragma tells the compiler to not create a stack frame for this procedure, since it's pure assembly that we never return from.\"]},\"131\":{\"h\":\"Linking the C library\",\"t\":[\"Now that we have implemented the missing library functions and exported them, we can link them into our executable. Let's import the libc module in main.nim:\",\"# src/main.nim import libc ... \",\"Since we don't directly use the libc module functions in main.nim, we'll get a warning that the module is unused. We can tell the compiler that the library will be used by adding the {.used.} pragma at the top of the libc.nim module.\",\"Here's the complete libc.nim module:\",\"# src/libc.nim {.used.} type const_pointer {.importc: \\\"const void *\\\".} = pointer proc fwrite*(buf: const_pointer, size: csize_t, count: csize_t, stream: File): csize_t {.exportc.} = return 0.csize_t proc fflush*(stream: File): cint {.exportc.} = return 0.cint var stdout* {.exportc.}: File stderr* {.exportc.}: File proc exit*(status: cint) {.exportc, asmNoStackFrame.} = asm \\\"\\\"\\\" .loop: cli hlt jmp .loop \\\"\\\"\\\" \",\"Let's compile and link our code:\",\"$ nim c --os:any src/main.nim --out:build/main.exe $ file build/main.exe build/main.exe: PE32+ executable (EFI application) x86-64, for MS Windows, 4 sections \",\"Great! We were able to compile and link our Nim code into a PE32+ executable that targets UEFI with no OS support. Now we're in good shape to start implementing our bootloader.\"]},\"132\":{\"h\":\"UEFI Bootloader (Part 1)\",\"t\":[\"Now that we have a solid base to target UEFI in a freestanding environment, we can start writing our bootloader. Writing a UEFI bootloader is a complex task. In this section, we'll start by writing a simple UEFI entry point for the bootloader, which we'll build on later.\"]},\"133\":{\"h\":\"Entry point\",\"t\":[\"The UEFI spec defines an application's entry point as:\",\"// UEFI Specification v2.10, Section 4.11 // https://uefi.org/specs/UEFI/2.10/04_EFI_System_Table.html?highlight=efi_system_table#efi-image-entry-point typedef uint64_t UINTN; typedef UINTN EFI_STATUS; typedef void *EFI_HANDLE; typedef struct { ... } EFI_SYSTEM_TABLE; typedef EFI_STATUS (*EFI_IMAGE_ENTRY_POINT)( IN EFI_HANDLE ImageHandle, IN EFI_SYSTEM_TABLE *SystemTable ); \",\"where ImageHandle is a handle to the loaded image, and SystemTable is a pointer to the system table. We'll come back to them later. Based on this definition, we'll define our entry point in src/bootx64.nim:\",\"# src/bootx64.nim import libc type EfiStatus = uint EfiHandle = pointer EFiSystemTable = object # to be defined later const EfiSuccess = 0 proc NimMain() {.exportc.} proc EfiMain(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus {.exportc.} = NimMain() return EfiSuccess \",\"I'm also changing the entry point from main to EfiMain, which is a typical convention for UEFI applications. Let's change the entry point in the linker arguments in nim.cfg:\",\"# nim.cfg ... --passl:\\\"-Wl,-entry:EfiMain\\\" \",\"Let's compile the code, changing the output executable to bootx64.efi:\",\"$ nim c --os:any src/bootx64.nim --out:build/bootx64.efi ... $ file build/bootx64.efi build/bootx64.efi: PE32+ executable (EFI application) x86-64, for MS Windows, 4 sections \",\"Great! We have a minimal UEFI bootloader application. Let's see if we can load it in QEMU. But before we do that, we need to run QEMU with a UEFI firmware image instead of the default legacy BIOS.\"]},\"134\":{\"h\":\"OVMF UEFI Firmware\",\"t\":[\"The default BIOS for QEMU is a legacy BIOS. We need to use a UEFI BIOS instead. We can use OVMF (Open Virtual Machine Firmware), which is an open-source UEFI firmware from TianoCore's EDK II project. There are some prebuilt packages available for Linux and macOS. We can also build it from source, but we'll leave that for another time if we need to.\",\"On Arch Linux:\",\"$ sudo pacman -S edk2-ovmf ... $ # The OVMF image is installed to /usr/share/edk2-ovmf/x64/OVMF_CODE.fd \",\"For macOS, we can use a Homebrew package (not official, but it will do):\",\"$ brew tap uenob/qemu-hvf $ brew install ovmf ... $ # The OVMF image is installed to /opt/homebrew/opt/ovmf/share/OVMF/OvmfX64/OVMF_CODE.fd \",\"There are two files we're interested in: OVMF_CODE.fd and OVMF_VARS.fd. The first one is the firmware image, and the second one is the NVRAM image that contains UEFI variables that persist across reboots, and it needs to be writable. Let's copy them to our project directory, mainly to avoid depending on the system's OVMF installation and also to be able to write to the NVRAM image:\",\"$ mkdir ovmf $ cp /usr/share/edk2-ovmf/x64/OVMF_{CODE,VARS}.fd ovmf $ chmod +w ovmf/OVMF_VARS.fd \"]},\"135\":{\"h\":\"Loading the bootloader\",\"t\":[\"The firmware expects to find a bootloader at a specific path in a FAT filesystem: EFI\\\\BOOT\\\\BOOTX64.EFI. We can create a disk image with such a filesystem, but QEMU has a nice trick up its sleeve that we can use to speed up our iteration. We can use the -drive flag to mount a directory as a virtual FAT filesystem. Let's create a directory structure to mount as a virtual disk and copy our bootloader to it:\",\"$ mkdir -p diskimg/efi/boot $ cat diskimg >> .gitignore $ cp build/bootx64.efi diskimg/efi/boot/bootx64.efi \",\"Now we ask QEMU to use the diskimg directory as a virtual FAT filesystem. A couple of notes on the QEMU arguments I used:\",\"I'm setting -machine q35 to use the Q35 + ICH9 chipsets (circa 2009) instead of the default i440FX + PIIX chipsets (circa 1996). This gives us a more modern environment with support for PCI Express, AHCI, and better UEFI, ACPI, and USB support.\",\"I'm setting -nic none to disable the default network card (to prevent the firmware from trying to use PXE network boot).\",\"$ qemu-system-x86_64 \\\\ -drive if=pflash,format=raw,file=ovmf/OVMF_CODE.fd,readonly=on \\\\ -drive if=pflash,format=raw,file=ovmf/OVMF_VARS.fd \\\\ -drive format=raw,file=fat:rw:diskimg \\\\ -machine q35 \\\\ -net none \",\"We're greeted with the TianoCore splash screen, and then we are dropped into the UEFI boot menu:\",\"The spec says that upon boot, the firmware should try the available boot options (e.g., DVD-ROM, HDD, etc.) stored in Boot#### variables, in an order also stored in a variable called BootOrder. In the case of OVMF, the default boot order is DVD-ROM, HDD, and then the UEFI shell. If a boot option returns EFI_SUCCESS, the firmware is expected to present a boot manager menu to the user. This is exactly what we're seeing here since our bootloader returns EFI_SUCCESS from the entry point.\",\"On the other hand, if the bootloader returns any other value, the firmware is expected to try the next boot option, which in the case of OVMF is the UEFI shell. Let's change the return value of our bootloader to EFI_LOAD_ERROR (numeric value 1) to see what happens:\",\"# src/bootx64.nim ... const EfiSuccess = 0 EfiLoadError = 1 proc NimMain() {.exportc.} proc EfiMain(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus {.exportc.} = NimMain() return EfiLoadError \",\"If we compile and run the bootloader again, we're greeted with the UEFI shell, as expected (since it's the next boot option):\",\"Let's use the UEFI shell to run our bootloader manually and check its exit code using the set lasterror command to make sure that it's working as expected. The UEFI shell has a map command that lists the available filesystems. By default, the shell already runs this command on startup, so we can see that the virtual FAT filesystem is mounted as fs0. We can use the fs0: prefix to run our bootloader:\",\"As expected, the bootloader returns 1 as its exit code. Great! Now we have a working bootloader (if you can call it that). In the next section, we'll implement text output using the UEFI console so that we can print messages to the screen. But before we do that, let's add a build tool to our project so that we don't have to repeat the same commands over and over again.\"]},\"136\":{\"h\":\"Build tool\",\"t\":[\"Typically, we'd use make to build our project, but I'm not a big fan of make. I recently started using the Just build tool, which is a simple command runner that uses a justfile to define commands. Assuming it's already installed, let's create a justfile in the project root directory:\",\"# justfile nimflags := \\\"--os:any\\\" bootloader: nim c {{nimflags}} src/bootx64.nim --out:build/bootx64.efi run: bootloader mkdir -p diskimg/efi/boot cp build/bootx64.efi diskimg/efi/boot/bootx64.efi qemu-system-x86_64 \\\\ -drive if=pflash,format=raw,file=ovmf/OVMF_CODE.fd,readonly=on \\\\ -drive if=pflash,format=raw,file=ovmf/OVMF_VARS.fd \\\\ -drive format=raw,file=fat:rw:diskimg \\\\ -machine q35 \\\\ -net none \",\"Now we can build and run our bootloader using just:\",\"$ just run nim ... mkdir ... cp ... qemu-system-x86_64 ... \",\"Much better!\"]},\"137\":{\"h\":\"UEFI Bootloader (Part 2)\",\"t\":[\"In the previous section, we wrote a simple UEFI entry point for the bootloader. In this section, we'll use the UEFI API provided to us through the UEFI system table to print a simple message to the screen.\"]},\"138\":{\"h\":\"UEFI System Table\",\"t\":[\"The UEFI system table is a data structure that is passed to the bootloader by the UEFI firmware. It contains pointers to various UEFI services, such as the console, file system, and memory management. We'll start by defining the system table in src/bootx64.nim:\",\"# src/bootx64.nim type EfiStatus = uint EfiHandle = pointer EfiTableHeader = object signature: uint64 revision: uint32 headerSize: uint32 crc32: uint32 reserved: uint32 EfiSystemTable = object header: EfiTableHeader firmwareVendor: WideCString firmwareRevision: uint32 consoleInHandle: EfiHandle conIn: pointer consoleOutHandle: EfiHandle conOut: ptr SimpleTextOutputProtocol standardErrorHandle: EfiHandle stdErr: SimpleTextOutputProtocol runtimeServices: pointer bootServices: pointer numTableEntries: uint configTable: pointer SimpleTextOutputProtocol = object reset: pointer outputString: proc (this: ptr SimpleTextOutputProtocol, str: WideCString): EfiStatus {.cdecl.} testString: pointer queryMode: pointer setMode: pointer setAttribute: pointer clearScreen: proc (this: ptr SimpleTextOutputProtocol): EfiStatus {.cdecl.} setCursorPos: pointer enableCursor: pointer mode: ptr pointer const EfiSuccess = 0 EfiLoadError = 1 \",\"We're particularly interested in the conOut field, which is a pointer to the console output interface SimpleTextOutputProtocol. We'll use this to clear the screen (using the clearScreen function) and print to the screen (using the outputString function).\"]},\"139\":{\"h\":\"Printing to the Screen\",\"t\":[\"Let's start by clearing the screen. To avoid returning to the UEFI shell, we'll call the quit function, which eventually calls the exit function we implemented earlier, which halts the CPU.\",\"# src/bootx64.nim ... proc EfiMain(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus {.exportc.} = NimMain() discard sysTable.conOut.clearScreen(sysTable.conOut) quit() \",\"When we compile and load this in QEMU, we see a blank screen, as expected.\",\"Next, let's print a simple message to the screen. We'll use the outputString function, which takes a pointer to a null-terminated UTF-16 string. Nim supports UTF-16 strings through the Utf16Char and WideCString types. Before we start using WideCString, I want to highlight a difference in how Nim declares this type in the presence of a nimv2 flag. Without this flag, Nim defines WideCString as a ref UncheckedArray[Utf16Char]. With the nimv2 flag, Nim defines WideCString as a ptr UncheckedArray[Utf16Char].\",\"# nim-2.0.0/lib/std/widestrs.nim when defined(nimv2): type WideCString* = ptr UncheckedArray[Utf16Char] WideCStringObj* = object bytes: int data: WideCString ... converter toWideCString*(x: WideCStringObj): WideCString {.inline.} = result = x.data else: ... type WideCString* = ref UncheckedArray[Utf16Char] WideCStringObj* = WideCString \",\"Since we're going to pass a pointer to a null-terminated UTF-16 string to outputString, we need to use the ptr version of WideCString. So let's add the nimv2 flag to our nim.cfg:\",\"# nim.cfg -d:nimv2 \",\"We create a wide string using newWideCString (which returns a WideCStringObj), use the toWideCString converter to get access to the underlying data buffer, and then pass it to outputString.\",\"# src/bootx64.nim proc EfiMain(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus {.exportc.} = NimMain() let msg = newWideCString(\\\"Hello, world!\\\\n\\\").toWideCString discard sysTable.conOut.clearScreen(sysTable.conOut) discard sysTable.conOut.outputString(sysTable.conOut, msg) quit() \",\"When we compile and load this in QEMU, we see the message printed to the screen, as expected.\",\"Let's make it easier to create a wide string by adding a W prefix operator to string:\",\"# src/uefi.nim proc W*(str: string): WideCString = newWideCString(str).toWideCString \",\"Now we can create a wide string using W:\",\"# src/bootx64.nim proc EfiMain(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus {.exportc.} = NimMain() discard sysTable.conOut.clearScreen(sysTable.conOut) discard sysTable.conOut.outputString(sysTable.conOut, W\\\"Hello, world!\\\\n\\\") quit() \"]},\"140\":{\"h\":\"Using\",\"t\":[\"Preparing a UTF-16 string and calling outputString every time we want to print to the screen is tedious. Ideally, we should be able to use the built-in echo procedure to print to the screen. This requires us to define a stdout file descriptor and implement fwrite to use the UEFI outputString function. But instead of making the libc module deal with UEFI internals, we'll create a new module called uefi to handle this. We'll also move all the UEFI types and constants to this module. In the process, we'll mark all types, constants, and vars as public so that they can be used by other modules.\",\"# src/uefi.nim type EfiStatus* = uint ... var sysTable*: ptr EfiSystemTable proc consoleClear*() = assert not sysTable.isNil discard sysTable.conOut.clearScreen(sysTable.conOut) proc consoleOut*(str: string) = assert not sysTable.isNil discard sysTable.conOut.outputString(sysTable.conOut, W(str)) proc consoleError*(str: string) = assert not sysTable.isNil discard sysTable.stdErr.outputString(sysTable.stdErr, W(str)) \",\"We'll initialize the sysTable variable in src/bootx64.nim later. Let's implement fwrite to use the consoleOut procedure we just defined. Notice that we don't use the stream argument to differentiate between stdout and stderr here (since they're both nil for now). We'll leave that for later.\",\"# src/libc.nim import uefi proc fwrite*(buf: const_pointer, size: csize_t, count: csize_t, stream: File): csize_t {.exportc.} = let output = $cast[cstring](buf) consoleOut(output) return count \",\"Now let's update src/bootx64.nim to initialize the sysTable variable and call echo to print to the screen.\",\"# src/bootx64.nim import uefi ... proc EfiMain(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus {.exportc.} = NimMain() uefi.sysTable = sysTable consoleClear() echo \\\"Hello, world!\\\" quit() \",\"When we compile and load this in QEMU, we still see the message printed to the screen, as expected.\"]},\"141\":{\"h\":\"Handling Exceptions\",\"t\":[\"Right now, if an exception is raised we won't see any output on the screen. In fact, the bootloader will return the default value 0, which will cause the firmware boot manager to load next.\",\"In a normal application, Nim generates a main entry point which executes our top-level code, and then checks for exceptions, and if one was raised it prints the exception message to stderr. There's an unhandledExceptionHook we can use to set a custom handler, but the issue is that it's only called when Nim is in charge of generating the main entry point. Since we're using --noMain:on and providing a custom EfiMain entry point, we need to handle exceptions ourselves.\",\"We'll do this by wrapping the code in EfiMain in a try block, and printing the exception message (and the stack trace, if one exists) to the screen if one was raised. To avoid cluttering the try block with a lot of code, we'll move that code to a new EfiMainInner procedure.\",\"# src/bootx64.nim proc unhandledException*(e: ref Exception) = echo \\\"Unhandled exception: \\\" & e.msg & \\\" [\\\" & $e.name & \\\"]\\\" if e.trace.len > 0: echo \\\"Stack trace:\\\" echo getStackTrace(e) quit() proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = uefi.sysTable = sysTable consoleClear() # force an IndexDefect exception let a = [1, 2, 3] let n = 5 discard a[n] proc EfiMain(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus {.exportc.} = NimMain() try: return EfiMainInner(imgHandle, sysTable) except Exception as e: unhandledException(e) \",\"When we compile and load this in QEMU, we see the exception message and stack trace printed to the screen, but it looks like the newlines are not being printed correctly.\",\"The problem is that Nim uses LF as the newline character, but UEFI expects CRLF. We can fix this by modifying the fwrite procedure to split the string into lines, and print a CR after each line.\",\"# src/libc.nim import std/strutils proc fwrite(buf: const_pointer, size: csize_t, count: csize_t, stream: File): csize_t {.exportc.} = let output = $cast[cstring](buf) for line in output.splitLines(keepEOL = true): consoleOut(line) consoleOut(\\\"\\\\r\\\") return count \",\"Much better! We just have to keep in mind that stack traces are available only in debug builds (which is the default). If we compile in release mode, we won't see the stack trace. But this is great! We now have a way to print to the screen and catch and display unhandled exceptions (so we're not flying blind).\",\"The next logical step is to load our kernel from disk, but we don't have a kernel yet. So we'll take a short break from the bootloader and start working on the kernel in the next section.\"]},\"142\":{\"h\":\"Kernel Image\",\"t\":[\"To start simple, we'll build a flat binary kernel image instead of using an executable format like PE or ELF. This makes the job of the bootloader easier, since it doesn't have to parse a complex executable format or fix up relocations. All it has to do is load the kernel image into memory and jump to the entry point.\"]},\"143\":{\"h\":\"Project structure\",\"t\":[\"Before we start writing the kernel, let's organize our project to separate the kernel from the bootloader modules, so that we can build them separately. Under the src directory we'll create a boot directory for the bootloader modules, and a kernel directory for the kernel modules. We'll also create a common directory for shared modules. Here's what the project structure looks like:\",\". ├── build ├── src │ ├── boot │ ├── common │ └── kernel └── nim.cfg \",\"Now let's move the existing modules into their respective directories. Let's also create an empty nim.cfg file in the boot and kernel directories. We'll use these files to customize the build for the bootloader and the kernel. Nim will automatically pick up the nim.cfg file in the directory of the module that we're compiling. It also will recursively look for nim.cfg files in the parent directories. This allows us to have a common nim.cfg file in the project root directory, and provide specific configurations in the nim.cfg files in the boot and kernel directories.\",\". ├── build ├── src │ ├── boot │ │ ├── bootx64.nim │ │ └── nim.cfg │ ├── common │ │ ├── libc.nim │ │ ├── malloc.nim │ │ └── uefi.nim │ └── kernel │ ├── main.nim │ └── nim.cfg └── nim.cfg \",\"Let's move the following part of the nim.cfg file into the nim.cfg file in the boot directory:\",\"# src/boot/nim.cfg --passc:\\\"-target x86_64-unknown-windows\\\" --passc:\\\"-ffreestanding\\\" --passl:\\\"-target x86_64-unknown-windows\\\" --passl:\\\"-fuse-ld=lld-link\\\" --passl:\\\"-nostdlib\\\" --passl:\\\"-Wl,-entry:EfiMain\\\" --passl:\\\"-Wl,-subsystem:efi_application\\\" \",\"Let's also tell Nim to add the src directory to its search path, so that we can import modules from boot, common, and kernel without using relative paths. We'll put this in the top-level nim.cfg file:\",\"# nim.cfg ... --path:src \",\"We'll work on what to use in the kernel's nim.cfg file later.\",\"Let's also add a task in our justfile to build the kernel:\",\"# justfile nimflags := \\\"--os:any\\\" bootloader: nim c {{nimflags}} src/boot/bootx64.nim --out:build/bootx64.efi kernel: nim c {{nimflags}} src/kernel/main.nim --out:build/kernel.bin run: bootloader mkdir -p diskimg/efi/boot cp build/bootx64.efi diskimg/efi/boot/bootx64.efi qemu-system-x86_64 \\\\ -drive if=pflash,format=raw,file=ovmf/OVMF_CODE.fd,readonly=on \\\\ -drive if=pflash,format=raw,file=ovmf/OVMF_VARS.fd \\\\ -drive format=raw,file=fat:rw:diskimg \\\\ -machine q35 \\\\ -net none \"]},\"144\":{\"h\":\"Debug output\",\"t\":[\"We cannot rely on any UEFI services in the kernel; the bootloader will exit UEFI Boot Services before jumping to the kernel. This means that we will not be able to use the UEFI console to print to the screen. The kernel will have to write directly to the graphics framebuffer, but we'll get to that later.\",\"Typically, at this early stage of the kernel startup, the serial port is used to print debug messages. But I don't want to implement a serial port driver yet. Since we're using QEMU, we can leverage its debug console debugcon to print messages by configuring it to send its output to stdio using the switch -debugcon stdio. This will print the debug messages to the terminal that we're running QEMU from. The way this feature works is by sending characters to port 0xE9, which is the debug port. Let's create a debugcon module to implement procedures that print a string to the debug console:\",\"# src/debugcon.nim const DebugConPort = 0xE9 proc portOut8(port: uint16, data: uint8) = asm \\\"\\\"\\\" out %0, %1 : :\\\"Nd\\\"(`port`), \\\"a\\\"(`data`) \\\"\\\"\\\" proc debug*(msgs: varargs[string]) = ## Send messages to the debug console. for msg in msgs: for ch in msg: portOut8(DebugConPort, ch.uint8) proc debugln*(msgs: varargs[string]) = ## Send messages to the debug console. A newline is appended at the end. debug(msgs) debug(\\\"\\\\r\\\\n\\\") \",\"We can now use the debug and debugln procedures to print messages to the debug console.\"]},\"145\":{\"h\":\"Entry point\",\"t\":[\"The kernel entry point is the first function that is executed by the bootloader. We'll call this function KernelMain. For now, it will just print a message to the debug console and halt the CPU.\",\"# src/kernel/main.nim import debugcon, libc, malloc proc KernelMain() {.exportc.} = debugln \\\"Hello, world!\\\" quit() \",\"Similar to what we did in the bootloader, we import libc and malloc since we're compiling for a freestanding environment. Now let's see how we can compile this minimal kernel.\"]},\"146\":{\"h\":\"C compiler options\",\"t\":[\"Compiling a kernel is not the same as compiling a regular application. The C compiler has some default behaviour that will cause problems for us.\",\"The first one is the way it saves and restores registers during function calls. By default, the compiler saves an extensive set of registers, including the SSE registers. This is not necessary for our kernel, since we're using only integer instructions and registers. This can be turned off using the -mgeneral-regs-only switch.\",\"The other one is the so-called red zone. Normally, the compiler allocates a stack frame for each function call. This stack frame is used to store local variables and function arguments. This is done by subtracting the necessary space from the rsp register. However, when the compiler detects that a function is a leaf function, i.e., it doesn't call any other functions, it does not allocate a stack frame (i.e., it doesn't subtract from rsp). Instead, it uses the 128 bytes below rsp as a scratch space for local variables. This is called the red zone, a performance optimization to avoid the overhead of allocating a stack frame. This is not a problem for regular applications, but for a kernel, if an interrupt is triggered while we're in kernel mode, the CPU will use the same stack, and will overwrite the red zone. This corrupts the state of the kernel and can be extremely difficult to debug. To avoid this, we'll disable the red zone using the -mno-red-zone switch.\",\"Let's add these switches to the compiler arguments in the kernel's nim.cfg:\",\"# src/kernel/nim.cfg ... --passc:\\\"-mgeneral-regs-only\\\" --passc:\\\"-mno-red-zone\\\" \"]},\"147\":{\"h\":\"Linking the kernel\",\"t\":[\"Our goal is to build a raw binary kernel image. We can do this by passing the --oformat=binary switch to the linker. But before we do this, we have to understand how the bootloader will load the kernel image into memory and jump to the entry point.\",\"A flat binary image doesn't have metadata to specify an entry point, so the bootloader and the kernel have to agree on a convention. The convention that we'll use is to place the entry point at the beginning of the image. This means that the bootloader will load the kernel image into memory and jump to the beginning of the image. Since the binary image is not relocatable, the kernel has to be linked at a specific address. We'll use the address 0x100000 (1 MiB) for the kernel image. The reason for this particular address is that below this address (specifically the region between 640 KiB to 1 MiB) is reserved for legacy BIOS compatibility (VGA memory, BIOS ROM, etc.) and is not accessible as RAM.\",\"OK, how do we tell the linker to link the kernel at a specific address? We use a linker script. A linker script is a text file that tells the linker how to map sections from the input object files to sections in the output image, and in what order, and at what address. But before we use a linker script let's link the kernel without one, and see what sections are included in the output image.\",\"The lld-link linker that we've been using so far (to generate a PE image) doesn't seem to support linker scripts (at least I couldn't find a way to do it). That's OK; we don't want the PE format anymore, it was only needed for the UEFI bootloader. So for the kernel, we'll switch to using the ld.lld linker, which is the LLVM linker for Unix systems. The most widely used executable format on Unix systems is ELF, so we'll use that as well. We'll come back later to building a raw binary image.\",\"Let's add some arguments in src/kernel/nim.cfg to use ld.lld and generate an ELF executable:\",\"# src/kernel/nim.cfg amd64.any.clang.linkerexe=\\\"ld.lld\\\" --passc:\\\"-target x86_64-unknown-elf\\\" --passc:\\\"-ffreestanding\\\" --passl:\\\"-nostdlib\\\" --passl:\\\"-Map=build/kernel.map\\\" --passl:\\\"-entry KernelMain\\\" \",\"We're also passing the -Map switch to generate a linker map file. This is useful for showing us the address of each symbol in the output file. Now let's compile the kernel:\",\"$ just kernel $ file build/kernel.bin build/kernel.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped \",\"Great! We have an ELF executable kernel image. Let's see what's in it using llvm-readelf (I've highlighted the interesting parts):\",\"$ llvm-readelf --headers build/kernel.bin ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC (Executable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x20D580 Start of program headers: 64 (bytes into file) Start of section headers: 65648 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 56 (bytes) Number of program headers: 5 Size of section headers: 64 (bytes) Number of section headers: 9 Section header string table index: 7 There are 9 section headers, starting at offset 0x10070: Section Headers: [Nr] Name Type Address Off Size ES Flg Lk Inf Al [ 0] NULL 0000000000000000 000000 000000 00 0 0 0 [ 1] .rodata PROGBITS 0000000000200160 000160 000e90 00 AMS 0 0 16 [ 2] .text PROGBITS 0000000000201ff0 000ff0 00b82b 00 AX 0 0 16 [ 3] .data PROGBITS 000000000020e820 00c820 0000e0 00 WA 0 0 8 [ 4] .bss NOBITS 000000000020e900 00c900 1004b0 00 WA 0 0 16 [ 5] .comment PROGBITS 0000000000000000 00c900 00007d 01 MS 0 0 1 [ 6] .symtab SYMTAB 0000000000000000 00c980 001b00 18 8 286 8 [ 7] .shstrtab STRTAB 0000000000000000 00e480 00003d 00 0 0 1 [ 8] .strtab STRTAB 0000000000000000 00e4bd 001bac 00 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), R (retain), l (large), p (processor specific) Elf file type is EXEC (Executable file) Entry point 0x20d580 There are 5 program headers, starting at offset 64 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align PHDR 0x000040 0x0000000000200040 0x0000000000200040 0x000118 0x000118 R 0x8 LOAD 0x000000 0x0000000000200000 0x0000000000200000 0x000ff0 0x000ff0 R 0x1000 LOAD 0x000ff0 0x0000000000201ff0 0x0000000000201ff0 0x00b82b 0x00b82b R E 0x1000 LOAD 0x00c820 0x000000000020e820 0x000000000020e820 0x0000e0 0x100590 RW 0x1000 GNU_STACK 0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW 0x0 Section to Segment mapping: Segment Sections... 00 01 .rodata 02 .text 03 .data .bss 04 None .comment .symtab .shstrtab .strtab \",\"Here's what we can see from the output:\",\"The entry point is at address 0x20D580, which is not what we wanted. We wanted the entry point to be at address 0x100000. We'll fix this later.\",\"The sections that we're interested in are .text, .rodata, .data, and .bss. The .text section contains the code, the .rodata section contains read-only data, the .data section contains initialized data, and the .bss section contains uninitialized data. These are the sections that we want to include in the kernel image.\",\"There are other sections that we're not interested in (.comment, .symtab, .shstrtab, and .strtab). These sections are used for debugging information, and we don't need them in the output image. We'll discard these sections later.\",\"Keep in mind that these are the output sections as generated by the linker. The input sections from the object files are mapped to these output sections. So in order to write our own linker script, we need to know what sections are generated by the compiler for each object file. Let's take a look at one of the object files that were generated by the compiler:\",\"$ llvm-objdump --section-headers build/@mmain.nim.c.o build/@mmain.nim.c.o: file format elf64-x86-64 Sections: Idx Name Size VMA Type 0 00000000 0000000000000000 1 .strtab 0000028d 0000000000000000 2 .text 0000029b 0000000000000000 TEXT 3 .rela.text 00000288 0000000000000000 4 .rodata.str1.1 0000009f 0000000000000000 DATA 5 .rodata 00000050 0000000000000000 DATA 6 .rela.rodata 00000030 0000000000000000 7 .comment 0000006a 0000000000000000 8 .note.GNU-stack 00000000 0000000000000000 9 .llvm_addrsig 00000015 0000000000000000 10 .symtab 00000270 0000000000000000 \",\"We can see that there are two read-only data sections (.rodata.str1.1 and .rodata). The .rodata.str1.1 section contains string literals, so we'll need to include it in the kernel image. The other sections (other than .text) are not relevant to us.\",\"OK, let's create a linker script called kernel.ld in the kernel directory, and map the sections that we're interested in to the output sections that we saw earlier, and discard all other sections:\",\"/* src/kernel/kernel.ld */ SECTIONS { . = 0x100000; .text : { *(.text) } .rodata : { *(.rodata*) } .data : { *(.data) } .bss : { *(.bss) } /DISCARD/ : { *(*) } } \",\"This tells the linker that the image will be loaded at address 0x100000, and that the .text section (from all object files), the .data section, the .rodata, and the .bss section should be placed in the output file, in this order.\",\"Let's add the linker script to the linker arguments in nim.cfg:\",\"# src/kernel/nim.cfg --passl:\\\"-T src/kernel/kernel.ld\\\" \",\"Let's compile the kernel again, this time using the linker script:\",\"$ just kernel ... ld.lld: error: discarding .shstrtab section is not allowed \",\"Oops, we can't discard the .shstrtab section. This section contains the names of the sections, and is required to identify the sections in the output file. Let's add an entry for it in the linker script:\",\"/* src/kernel/kernel.ld */ SECTIONS { . = 0x100000; .text : { *(.text) } .rodata : { *(.rodata*) } .data : { *(.data) } .bss : { *(.bss) } .shstrtab : { *(.shstrtab) } /DISCARD/ : { *(*) } } \",\"Let's compile the kernel again:\",\"$ ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: EXEC (Executable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x10B590 Start of program headers: 64 (bytes into file) Start of section headers: 55240 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 56 (bytes) Number of program headers: 4 Size of section headers: 64 (bytes) Number of section headers: 6 Section header string table index: 5 There are 6 section headers, starting at offset 0xd7c8: Section Headers: [Nr] Name Type Address Off Size ES Flg Lk Inf Al [ 0] NULL 0000000000000000 000000 000000 00 0 0 0 [ 1] .text PROGBITS 0000000000100000 001000 00b82b 00 AX 0 0 16 [ 2] .rodata PROGBITS 000000000010b830 00c830 000e90 00 AMS 0 0 16 [ 3] .data PROGBITS 000000000010c6c0 00d6c0 0000e0 00 WA 0 0 8 [ 4] .bss NOBITS 000000000010c7a0 00d7a0 1004b0 00 WA 0 0 16 [ 5] .shstrtab STRTAB 0000000000000000 00d7a0 000024 00 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), R (retain), l (large), p (processor specific) Elf file type is EXEC (Executable file) Entry point 0x10b590 There are 4 program headers, starting at offset 64 Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align LOAD 0x001000 0x0000000000100000 0x0000000000100000 0x00b82b 0x00b82b R E 0x1000 LOAD 0x00c830 0x000000000010b830 0x000000000010b830 0x000e90 0x000e90 R 0x1000 LOAD 0x00d6c0 0x000000000010c6c0 0x000000000010c6c0 0x0000e0 0x100590 RW 0x1000 GNU_STACK 0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW 0x0 Section to Segment mapping: Segment Sections... 00 .text 01 .rodata 02 .data .bss 03 None .shstrtab \",\"OK, it looks like the section mapping worked as expected, but the entry point ( KernelMain) is at 0x10B590 instead of 0x100000. Let's take a look at the linker map file:\",\"$ head -n 10 build/kernel.map VMA LMA Size Align Out In Symbol 0 0 100000 1 . = 0x100000 100000 100000 b82b 16 .text 100000 100000 9c3 16 .../fusion/build/@m..@s..@s..@s..@s..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem@sexceptions.nim.c.o:(.text) 100000 100000 3b 1 rttiDestroy__systemZexceptions_u56 100040 100040 38 1 eqtrace___system_u4516 100080 100080 3b 1 rttiDestroy__systemZexceptions_u60 1000c0 1000c0 38 1 eqtrace___system_u4585 100100 100100 3b 1 rttiDestroy__systemZexceptions_u62 100140 100140 38 1 eqtrace___system_u4980 \",\"We can see that the first object file in the output .text section is from Nim's standard library module system/exceptions.nim. This is because the linker uses the order of the object files in the command line to determine the order in the output image. We don't have much control over the order of the object files in the command line, since Nim generates the command line for us. What we can do is adjust the linker script a bit to tell it to put the kernel object file first.\",\"/* src/kernel/kernel.ld */ SECTIONS { . = 0x100000; .text : { *kernel*.o(.text) *(.text) } .rodata : { *(.rodata*) } .data : { *(.data) } .bss : { *(.bss) } .shstrtab : { *(.shstrtab) } /DISCARD/ : { *(*) } } \",\"I'm using a wildcard pattern for the kernel object file, since the name is mangled. Let's compile the kernel again and see what the linker map file looks like:\",\"$ head -n 10 build/kernel.map VMA LMA Size Align Out In Symbol 0 0 100000 1 . = 0x100000 100000 100000 b822 16 .text 100000 100000 29b 16 .../fusion/build/@mmain.nim.c.o:(.text) 100000 100000 c9 1 KernelMain 1000d0 1000d0 87 1 nimFrame 100160 100160 20 1 nimErrorFlag 100180 100180 10 1 NimMain 100190 100190 ad 1 quit__system_u6343 100240 100240 19 1 popFrame \",\"Great! The kernel object file is now the first object file in the image, and our KernelMain proc is exactly at address 0x100000. This should work, but there's a hidden issue here. The fact that the linker decided to put KernelMain at the beginning of the .text section is an implementation detail of the linker. If we add more code to the kernel, the linker might decide to put KernelMain at a different address. So how do we tell the linker to always put KernelMain at the beginning of the .text section? Linker scripts work at a section level, so we can't tell the linker to put a specific symbol at a specific address. One thing we can do is use a C compiler flag called -ffunction-sections, which tells the compiler to put each function in its own section. The generated section names are in the form .text.<function name>. This way we can tell the linker to put the .text.KernelMain section at the beginning of the .text section. Let's add this flag to the compiler arguments in nim.cfg:\",\"# src/kernel/nim.cfg ... --passc:\\\"-ffunction-sections\\\" \",\"Let's compile the kernel and take a look at the sections in the object file:\",\"$ llvm-objdump --section-headers build/@mmain.nim.c.o build/@mmain.nim.c.o: file format elf64-x86-64 Sections: Idx Name Size VMA Type 0 00000000 0000000000000000 1 .strtab 00000224 0000000000000000 2 .text 00000000 0000000000000000 TEXT 3 .text.KernelMain 00000070 0000000000000000 TEXT <-- KernelMain is in its own section 4 .rela.text.KernelMain 00000090 0000000000000000 5 .text.nimFrame 00000087 0000000000000000 TEXT 6 .rela.text.nimFrame 00000078 0000000000000000 7 .text.NimMain 00000010 0000000000000000 TEXT 8 .rela.text.NimMain 00000030 0000000000000000 9 .text.quit__system_u6343 000000ad 0000000000000000 TEXT ... \",\"Looks good. We can now update the linker script to put the .text.KernelMain section at the beginning of the .text section. We'll follow it with the other function sections from the kernel main object file, and then all other function sections. The reason for this is that we want to keep the code from the kernel main object file together for better cache locality.\",\"/* src/kernel/kernel.ld */ SECTIONS { . = 0x100000; .text : { *main*.o(.text.KernelMain) *main*.o(.text.*) *(.text.*) } .rodata : { *(.rodata*) } .data : { *(.data) } .bss : { *(.bss) } .shstrtab : { *(.shstrtab) } /DISCARD/ : { *(*) } } \",\"Let's compile the kernel again and see what the linker map file looks like:\",\"$ head -n 10 build/kernel.map VMA LMA Size Align Out In Symbol 0 0 100000 1 . = 0x100000 100000 100000 b254 16 .text 100000 100000 70 16 .../fusion/build/@mmain.nim.c.o:(.text.KernelMain) 100000 100000 70 1 KernelMain 100070 100070 87 16 .../fusion/build/@mmain.nim.c.o:(.text.nimFrame) 100070 100070 87 1 nimFrame 100100 100100 10 16 .../fusion/build/@mmain.nim.c.o:(.text.NimMain) 100100 100100 10 1 NimMain 100110 100110 ad 16 .../fusion/build/@mmain.nim.c.o:(.text.quit__system_u6343) \",\"Looks good. Now we're guaranteed that KernelMain will always be at the beginning of the .text section. The order of other sections is not important to us (unless we want to optimize for cache locality, but let's not pre-optimize for now).\"]},\"148\":{\"h\":\"Building a raw binary\",\"t\":[\"We have an ELF executable kernel image, but we want a raw binary image. Let's add the --output-format=binary switch to the linker arguments in nim.cfg:\",\"# src/kernel/nim.cfg ... --passl:\\\"--oformat=binary\\\" \",\"Let's compile the kernel again:\",\"$ just kernel $ file build/kernel.bin build/kernel.bin: data \",\"Great! We have a raw binary kernel image. But there's one more thing. Let's take a look at the size of the kernel image:\",\"$ wc -c build/kernel.bin 51104 build/kernel.bin \",\"The kernel image is about 51 KiB. But remember that we have a 1 MiB heap in the malloc.nim module. This is not persisted in the image, since it's in the .bss section, which is uninitialized data. This poses a problem for the bootloader, since we don't have section metadata in the image. Part of the reason for building a raw binary image is to make it dead simple for the loader to load it into memory without having to worry about initializing sections. One way to solve this problem is to move the .bss section into the output .data section. This will cause the linker to allocate space for the .bss section in the output file. Obviously this will increase the size of the image, but it's a price we're willing to pay to keep the bootloader simple.\",\"Let's modify the linker script to move the .bss section into the .data section:\",\"/* src/kernel/kernel.ld */ SECTIONS { . = 0x100000; .text : { *main*.o(.text.KernelMain) *main*.o(.text.*) *(.text.*) } .rodata : { *(.rodata*) } .data : { *(.data) *(.bss) } .shstrtab : { *(.shstrtab) } /DISCARD/ : { *(*) } } \",\"Let's compile the kernel again and see what the size of the image is:\",\"$ just kernel $ wc -c build/kernel.bin 1100880 build/kernel.bin \",\"The image is now about 1.1 MiB, which means that the .bss section is now included in the image. Now the bootloader will be able to load the image into memory without having to worry about initializing sections.\",\"Let's update our justfile to copy the kernel image to the disk image in a place where the bootloader can find it:\",\"# justfile nimflags := \\\"--os:any\\\" bootloader: nim c {{nimflags}} src/boot/bootx64.nim --out:build/bootx64.efi kernel: nim c {{nimflags}} src/kernel/main.nim --out:build/kernel.bin run: bootloader kernel mkdir -p diskimg/efi/boot mkdir -p diskimg/efi/fusion cp build/bootx64.efi diskimg/efi/boot/bootx64.efi cp build/kernel.bin diskimg/efi/fusion/kernel.bin qemu-system-x86_64 \\\\ -drive if=pflash,format=raw,file=ovmf/OVMF_CODE.fd,readonly=on \\\\ -drive if=pflash,format=raw,file=ovmf/OVMF_VARS.fd \\\\ -drive format=raw,file=fat:rw:diskimg \\\\ -machine q35 \\\\ -net none \",\"In the next section we will continue working on our bootloader. Specifically we will try to use UEFI services to locate the kernel image file, load it into memory address 0x100000, and jump to it.\"]},\"149\":{\"h\":\"Loading the Kernel (Part 1)\",\"t\":[\"In the last section we built a raw binary kernel image. We'll pick up where we left off in the bootloader and load the kernel image into memory. We'll rely on UEFI Boot Services to do so.\"]},\"150\":{\"h\":\"UEFI Boot Services\",\"t\":[\"UEFI Boot Services provides a number of services to help us, including accessing the file system, getting information about a file, allocating memory, and reading a file into memory. Here's the plan:\",\"Use the bootloader image EfiHandle (which is passed to the entry point) to get its EfiLoadedImageProtocol.\",\"Use the EfiLoadedImageProtocol device handle to get the EfiSimpleFileSystemProtocol of that device.\",\"Use the EfiSimpleFileSystemProtocol to get the EfiFileSystemInfo representing the root directory of the file system.\",\"Use the EfiSimpleFileSystemProtocol and the kernel image path on the file system to get the EfiFileProtocol of the kernel file.\",\"Use the EfiFileProtocol to get the EfiFileInfo of the kernel file, which contains the size of the file.\",\"Use the Boot Services AllocatePages function to allocate enough pages, starting at address 0x100000 (1 MiB), to hold the kernel image.\",\"Use AllocatePages to allocate a region for the kernel stack.\",\"Use the EfiFileProtocol function to read the kernel image into memory.\",\"After reading the kernel into memory, and before jumping to it, we'll need to call the Boot Services ExitBootServices function to signal to the UEFI firmware that we're done with the Boot Services. To do so, we're required to also call the GetMemoryMap function to get the memory map, which contains a key that we'll pass to ExitBootServices. We'll also eventually pass this memory map to the kernel. So in addition to the plan above, we'll also:\",\"Use the Boot Services GetMemoryMap function to get the memory map.\",\"Use the Boot Services ExitBootServices function, passing it the memory map key.\",\"Jump to the kernel image starting address.\",\"This is a lot to take in, but this is how the UEFI spec was designed ¯\\\\(ツ)/¯. We'll take it one step at a time.\"]},\"151\":{\"h\":\"Boot device handle\",\"t\":[\"Since we plan on storing the kernel image on the same device as the bootloader, we want to access the file system of the device from which the bootloader was loaded. The EfiLoadedImageProtocol (which we can get through the bootloader image handle) has a DeviceHandle field that we can use to get the EfiSimpleFileSystemProtocol of that device. So let's define the EfiLoadedImageProtocol in src/common/uefi.nim.\",\"# src/common/uefi.nim type ... EfiLoadedImageProtocol* = object revision*: uint32 parentHandle*: EfiHandle systemTable*: ptr EfiSystemTable # Source location of the image deviceHandle*: EfiHandle filePath*: pointer reserved*: pointer # Image's load options loadOptionsSize*: uint32 loadOptions*: pointer # Location where image was loaded imageBase*: pointer imageSize*: uint64 imageCodeType*: EfiMemoryType imageDataType*: EfiMemoryType unload*: pointer \",\"The EfiMemoryType defines the various types of memory in the system. At some point, we'll need to allocate memory for the kernel (code, data, and stack), so we'll need to differentiate between these types of memory. The UEFI spec doesn't define kernel memory types, so we'll add a few more custom types to the enum, which fall in the range of OSV (Operating System Vendor) defined memory types (0x80000000 to 0xFFFFFFFF).\",\" EfiMemoryType* = enum EfiReservedMemory EfiLoaderCode EfiLoaderData EfiBootServicesCode EfiBootServicesData EfiRuntimeServicesCode EfiRuntimeServicesData EfiConventionalMemory EfiUnusableMemory EfiACPIReclaimMemory EfiACPIMemoryNVS EfiMemoryMappedIO EfiMemoryMappedIOPortSpace EfiPalCode EfiPersistentMemory EfiUnacceptedMemory OsvKernelCode = 0x80000000 OsvKernelData = 0x80000001 OsvKernelStack = 0x80000002 EfiMaxMemoryType \",\"To get the EfiLoadedImageProtocol from the bootloader image handle, we'll use the handleProtocol function of the Boot Services. So let's define the BootServices type and the handleProtocol function in src/common/uefi.nim. It's a large type with many functions, so I won't define the type of every field; we'll use pointer for those fields until we need to use them.\",\"# src/common/uefi.nim type EfiBootServices* = object hdr*: EfiTableHeader # task priority services raiseTpl*: pointer restoreTpl*: pointer # memory services allocatePages*: pointer freePages*: pointer getMemoryMap*: pointer allocatePool*: pointer freePool*: pointer # event & timer services createEvent*: pointer setTimer*: pointer waitForEvent*: pointer signalEvent*: pointer closeEvent*: pointer checkEvent*: pointer # protocol handler services installProtocolInterface*: pointer reinstallProtocolInterface*: pointer uninstallProtocolInterface*: pointer handleProtocol*: proc (handle: EfiHandle, protocol: EfiGuid, `interface`: ptr pointer): EfiStatus {.cdecl.} reserved*: pointer registerProtocolNotify*: pointer locateHandle*: pointer locateDevicePath*: pointer installConfigurationTable*: pointer # image services loadImage*: pointer startImage*: pointer exit*: pointer unloadImage*: pointer exitBootServices*: pointer # misc services getNextMonotonicCount*: pointer stall*: pointer setWatchdogTimer*: pointer # driver support services connectController*: pointer disconnectController*: pointer # open and close protocol services openProtocol*: pointer closeProtocol*: pointer openProtocolInformation*: pointer # library services protocolsPerHandle*: pointer locateHandleBuffer*: pointer locateProtocol*: pointer installMultipleProtocolInterfaces*: pointer uninstallMultipleProtocolInterfaces*: pointer # 32-bit CRC services calculateCrc32*: pointer # misc services copyMem*: pointer setMem*: pointer createEventEx*: pointer \",\"One of the parameters of the handleProtocol function is of type EfiGuid. Let's define it as well.\",\"type EfiGuid* = object data1: uint32 data2: uint16 data3: uint16 data4: array[8, uint8] \",\"We're interested in the EfiLoadedImageProtocol, so we need to define its GUID.\",\"const EfiLoadedImageProtocolGuid* = EfiGuid( data1: 0x5B1B31A1, data2: 0x9562, data3: 0x11d2, data4: [0x8e, 0x3f, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b] ) \",\"Now we're ready to call the handleProtocol function to get the EfiLoadedImageProtocol from the bootloader image handle.\",\"# src/boot/bootx64.nim import common/uefi ... proc checkStatus*(status: EfiStatus) = if status != EfiSuccess: consoleOut &\\\" [failed, status = {status:#x}]\\\" quit() consoleOut \\\" [success]\\\\r\\\\n\\\" proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = echo \\\"Fusion OS Bootloader\\\" var status: EfiStatus # get the LoadedImage protocol from the image handle var loadedImage: ptr EfiLoadedImageProtocol consoleOut \\\"boot: Acquiring LoadedImage protocol\\\" checkStatus uefi.sysTable.bootServices.handleProtocol( imgHandle, EfiLoadedImageProtocolGuid, cast[ptr pointer](addr loadedImage) ) ... \",\"Let's compile and run everything using just run. We should see the following output (The colored output is for nice visuals only. I didn't show it in the code above; I'm leaving it as an exercise for the reader):\"]},\"152\":{\"h\":\"File system\",\"t\":[\"Now that we have the EfiLoadedImageProtocol device handle, we can get the EfiSimpleFileSystemProtocol of that device. Let's define the EfiSimpleFileSystemProtocol type and the corresponding GUID in src/common/uefi.nim.\",\"# src/common/uefi.nim type EfiSimpleFileSystemProtocol* = object revision*: uint64 openVolume*: pointer const EfiSimpleFileSystemProtocolGuid* = EfiGuid( data1: 0x964e5b22'u32, data2: 0x6459, data3: 0x11d2, data4: [0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b] ) \",\"Now we're ready to get the EfiSimpleFileSystemProtocol from the EfiLoadedImageProtocol device handle.\",\"proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # get the FileSystem protocol from the device handle var fileSystem: ptr EfiSimpleFileSystemProtocol consoleOut \\\"boot: Acquiring SimpleFileSystem protocol\\\" checkStatus uefi.sysTable.bootServices.handleProtocol( loadedImage.deviceHandle, EfiSimpleFileSystemProtocolGuid, cast[ptr pointer](addr fileSystem) ) \",\"If we compile and run we should see the following output:\"]},\"153\":{\"h\":\"Root directory\",\"t\":[\"Next, we need to get the EfiFileInfo representing the root directory of the file system. Let's define the EfiFileInfo type (we also need to define the EfiTime type, which is used in EfiFileInfo) .\",\"# src/common/uefi.nim type EfiFileInfo* = object size*: uint64 fileSize*: uint64 physicalSize*: uint64 createTime*: EfiTime lastAccessTime*: EfiTime modificationTime*: EfiTime attribute*: uint64 fileName*: array[256, Utf16Char] EfiTime* = object year*: uint16 month*: uint8 day*: uint8 hour*: uint8 minute*: uint8 second*: uint8 pad1*: uint8 nanosecond*: uint32 timeZone*: int16 daylight*: uint8 pad2*: uint8 \",\"The fileName field in the UEFI spec is a C flexible array member, which is not supported in Nim. So I'm using a fixed size array here.\",\"Let's use the openVolume function of the EfiSimpleFileSystemProtocol to get the EfiFileInfo of the root directory. First, we need to update the signature of openVolume, which also requires defining the EfiFileProtocol type.\",\"# src/common/uefi.nim type EfiSimpleFileSystemProtocol* = object revision*: uint64 openVolume*: proc (this: ptr EfiSimpleFileSystemProtocol, root: ptr ptr EfiFileProtocol): EfiStatus {.cdecl.} EfiFileProtocol* = object revision*: uint64 open*: pointer close*: pointer delete*: pointer read*: pointer write*: pointer getPosition*: pointer setPosition*: pointer getInfo*: pointer setInfo*: pointer flush*: pointer openEx*: pointer readEx*: pointer writeEx*: pointer flushEx*: pointer \",\"Now we're ready to get the EfiFileInfo of the root directory.\",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # open the root directory var rootDir: ptr EfiFileProtocol consoleOut \\\"boot: Opening root directory\\\" checkStatus fileSystem.openVolume(fileSystem, addr rootDir) \",\"This should also compile and run successfully.\"]},\"154\":{\"h\":\"Kernel image file\",\"t\":[\"We have the EfiFileProtocol of the root directory, so we can use it to get the EfiFileProtocol of the kernel image file, given its path. To open the kernel file, we'll need to define the open function of the EfiFileProtocol.\",\"# src/common/uefi.nim type EfiFileProtocol* = object revision*: uint64 open*: proc ( this: ptr EfiFileProtocol, newHandle: ptr ptr EfiFileProtocol, fileName: WideCString, openMode: uint64, attributes: uint64 ): EfiStatus {.cdecl.} ... \",\"Now we're ready to open the kernel file.\",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # open the kernel file var kernelFile: ptr EfiFileProtocol let kernelPath = W\\\"efi\\\\fusion\\\\kernel.bin\\\" consoleOut \\\"boot: Opening kernel file: \\\" consoleOut kernelPath checkStatus rootDir.open(rootDir, addr kernelFile, kernelPath, 1, 1) \",\"This should also compile and run successfully.\",\"Let's now get the size of the kernel file. To do so, we'll need to define the getInfo function of the EfiFileProtocol. We'll also need to define EfiFileInfoGuid.\",\"# src/common/uefi.nim type EfiFileProtocol* = object ... getInfo*: proc ( this: ptr EfiFileProtocol, infoType: ptr EfiGuid, infoSize: ptr uint, info: pointer ): EfiStatus {.cdecl.} ... const EfiFileInfoGuid* = EfiGuid( data1: 0x09576e92'u32, data2: 0x6d3f, data3: 0x11d2, data4: [0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b] ) \",\"Let's call the getInfo function on the kernel file.\",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # get kernel file size var kernelInfo: EfiFileInfo var kernelInfoSize = sizeof(EfiFileInfo).uint consoleOut \\\"boot: Getting kernel file info\\\" checkStatus kernelFile.getInfo(kernelFile, addr EfiFileInfoGuid, addr kernelInfoSize, addr kernelInfo) echo &\\\"boot: Kernel file size: {kernelInfo.fileSize} bytes\\\" \",\"If all goes well, we should see the kernel file size in the output:\",\"Great! The kernel image size is what we expect (around 1.1 MiB). In the next section we'll continue to allocate memory for the kernel image and read it into memory.\"]},\"155\":{\"h\":\"Loading the Kernel (Part 2)\",\"t\":[\"In the previous section, we located the kernel image and determined its size. In this section, we'll continue with our plan. We'll allocate memory for the kernel image, read it into memory, exit the Boot Services, and jump to the kernel image.\"]},\"156\":{\"h\":\"Allocate memory\",\"t\":[\"We'll use the Boot Services AllocatePages function to allocate enough pages, starting at address 0x100000 (1 MiB), to hold the kernel image. We'll also allocate a region of memory for the kernel stack. Let's define the AllocatePages function, which also requires defining the EfiAllocateType and EfiPhysicalAddress types.\",\"# src/common/uefi.nim type EfiBootServices* = object ... allocatePages*: proc ( allocateType: EfiAllocateType, memoryType: EfiMemoryType, pages: uint, memory: ptr EfiPhysicalAddress ): EfiStatus {.cdecl.} ... EfiAllocateType* = enum AllocateAnyPages, AllocateMaxAddress, AllocateAddress, MaxAllocateType EfiPhysicalAddress* = uint64 \",\"The EfiAllocateType enum is used to specify the type of allocation. We'll use AllocateAddress to allocate pages for the kernel image, starting at a specific address (in our case, 0x100000). The EfiMemoryType enum is used to specify the type of memory to allocate, which we'll set to OsvKernelCode. For the kernel stack, we'll use AllocateAnyPages to allocate any pages, and set the memory type to OsvKernelStack.\",\"# src/boot/bootx64.nim const PageSize = 4096 KernelPhysicalBase = 0x100000 KernelStackSize = 128 * 1024'u64 proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... consoleOut &\\\"boot: Allocating memory for kernel image \\\" let kernelImageBase = cast[pointer](KernelPhysicalBase) let kernelImagePages = (kernelInfo.fileSize + 0xFFF).uint div PageSize.uint # round up to nearest page checkStatus uefi.sysTable.bootServices.allocatePages( AllocateAddress, OsvKernelCode, kernelImagePages, cast[ptr EfiPhysicalAddress](addr kernelImageBase) ) consoleOut &\\\"boot: Allocating memory for kernel stack (16 KiB) \\\" var kernelStackBase: uint64 let kernelStackPages = KernelStackSize div PageSize checkStatus uefi.sysTable.bootServices.allocatePages( AllocateAnyPages, OsvKernelStack, kernelStackPages, kernelStackBase.addr, ) \"]},\"157\":{\"h\":\"Read kernel image\",\"t\":[\"The next step is to use the read function of the EfiFileProtocol to read the kernel image into memory. Let's define the read function.\",\"# src/common/uefi.nim type EfiFileProtocol* = object ... read*: proc ( this: ptr EfiFileProtocol, bufferSize: ptr uint, buffer: pointer ): EfiStatus {.cdecl.} ... \",\"We'll use the read function to read the kernel image into the memory we allocated earlier.\",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # read the kernel into memory consoleOut \\\"boot: Reading kernel into memory\\\" checkStatus kernelFile.read(kernelFile, cast[ptr uint](addr kernelInfo.fileSize), kernelImageBase) \"]},\"158\":{\"h\":\"Close open files\",\"t\":[\"We're done with the kernel file and the root directory, so we can close them. It's not strictly needed, but I got in the habit of closing resources when I'm done with them. Let's define the close function of the EfiFileProtocol.\",\"# src/common/uefi.nim type EfiFileProtocol* = object ... close*: proc (this: ptr EfiFileProtocol): EfiStatus {.cdecl.} ... \",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # close the kernel file consoleOut \\\"boot: Closing kernel file\\\" checkStatus kernelFile.close(kernelFile) # close the root directory consoleOut \\\"boot: Closing root directory\\\" checkStatus rootDir.close(rootDir) \"]},\"159\":{\"h\":\"Get memory map\",\"t\":[\"In order to get the memory map, we have to allocate memory for the map itself. But how do we know how much memory to allocate? Calling getMemoryMap with a buffer size of 0 will return the required buffer size in the memoryMapSize output parameter. We can then allocate the required memory and call getMemoryMap again to get the actual memory map.\",\"Let's define the getMemoryMap function first (and the associated EfiMemoryDescriptor and EfiVirtualAddress types). We'll also define the allocatePool function of the EfiBootServices type, which we'll use to allocate the memory for the memory map. (The difference between allocatePages and allocatePool is that allocatePages allocates memory in page-sized chunks, whereas allocatePool allocates memory in byte-sized chunks. allocatePool also provides more control over the address of the allocated memory, which is why we used it to allocate memory for the kernel.)\",\"# src/common/uefi.nim type EfiBootServices* = object ... getMemoryMap*: proc ( memoryMapSize: ptr uint, memoryMap: ptr EfiMemoryDescriptor, mapKey: ptr uint, descriptorSize: ptr uint, descriptorVersion: ptr uint32 ): EfiStatus {.cdecl.} allocatePool*: proc ( poolType: EfiMemoryType, size: uint, buffer: ptr pointer ): EfiStatus {.cdecl.} ... EfiMemoryDescriptor* = object `type`*: EfiMemoryType physicalStart*: EfiPhysicalAddress virtualStart*: EfiVirtualAddress numberOfPages*: uint64 attribute*: uint64 ... EfiPhysicalAddress* = uint64 EfiVirtualAddress* = uint64 \",\"Now we're ready to get the memory map.\",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # memory map var memoryMapSize = 0.uint var memoryMap: ptr UncheckedArray[EfiMemoryDescriptor] var memoryMapKey: uint var memoryMapDescriptorSize: uint var memoryMapDescriptorVersion: uint32 # get memory map size status = uefi.sysTable.bootServices.getMemoryMap( addr memoryMapSize, cast[ptr EfiMemoryDescriptor](nil), cast[ptr uint](nil), cast[ptr uint](addr memoryMapDescriptorSize), cast[ptr uint32](nil) ) # increase memory map size to account for the next call to allocatePool inc memoryMapSize, memoryMapDescriptorSize # allocate pool for memory map (this changes the memory map size, hence the previous step) consoleOut \\\"boot: Allocating pool for memory map\\\" checkStatus uefi.sysTable.bootServices.allocatePool( EfiLoaderData, memoryMapSize, cast[ptr pointer](addr memoryMap) ) # now get the memory map consoleOut \\\"boot: Getting memory map\\\" checkStatus uefi.sysTable.bootServices.getMemoryMap( addr memoryMapSize, cast[ptr EfiMemoryDescriptor](memoryMap), addr memoryMapKey, addr memoryMapDescriptorSize, addr memoryMapDescriptorVersion ) \"]},\"160\":{\"h\":\"Exit boot services\",\"t\":[\"We have all the information we need to exit the Boot Services. Let's define the exitBootServices function.\",\"# src/common/uefi.nim type EfiBootServices* = object ... exitBootServices*: proc ( imageHandle: EfiHandle, mapKey: uint ): EfiStatus {.cdecl.} ... \",\"The call to exitBootServices requires passing the mapKey that we got from getMemoryMap. This ensures that the memory map hasn't changed since we got it, otherwise the call will fail.\",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # exit boot services consoleOut \\\"boot: Exiting boot services\\\" checkStatus uefi.sysTable.bootServices.exitBootServices(imgHandle, memoryMapKey) \",\"If we compile and run now, we are faced with the following error:\",\"Status code 2 is EfiInvalidParameter, which means that the mapKey we passed to exitBootServices is invalid. How can the mapKey be invalid if we just got it from getMemoryMap? This took me a while to figure out, but it turns out that merely printing to the console (or any other boot service call) may allocate memory, which changes the memory map. So basically we have to call exitBootServices immediately after getting the memory map, without calling any other boot service function in between. So, unfortunately, we'll have to give up printing to the console from that point on, until we transfer control to the kernel.\",\"Let's change the call to checkStatus to avoid printing to the console (we'll only print to the console in case of an error).\",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # get memory map echo \\\"boot: Getting memory map and exiting boot services\\\" status = uefi.sysTable.bootServices.getMemoryMap( addr memoryMapSize, cast[ptr EfiMemoryDescriptor](memoryMap), addr memoryMapKey, addr memoryMapDescriptorSize, addr memoryMapDescriptorVersion ) # IMPORTANT: After this point we cannot output anything to the console, since doing # so may allocate memory and change the memory map, invalidating our map key. We can # only output to the console in case of an error (since we quit anyway). if status != EfiSuccess: echo &\\\"boot: Failed to get memory map: {status:#x}\\\" quit() status = uefi.sysTable.bootServices.exitBootServices(imgHandle, memoryMapKey) if status != EfiSuccess: echo &\\\"boot: Failed to exit boot services: {status:#x}\\\" quit() # ======= NO MORE UEFI BOOT SERVICES ======= ... \",\"This time the call to exitBootServices should succeed, but we won't see a [success] message in the console. We'll know that it succeeded if no error messages are printed.\",\"Great! We're done with the UEFI Boot Services. Now we're ready to jump to the kernel image. We'll do this in the next section.\"]},\"161\":{\"h\":\"Loading the Kernel (Part 3)\",\"t\":[\"Now that the bootloader exited UEFI Boot Services, it's time to transfer control to the kernel. This part should be fairly straightforward. We'll define a KernelEntryPoint proc type that matches the signature of the KernelMain proc, and use it to call the kernel entry point. Remember that we cannot print to the console anymore, since we exited the Boot Services.\",\"First let's recall the KernelMain proc definition:\",\"# src/kernel/main.nim import common/[libc, malloc] import debugcon proc NimMain() {.importc.} proc KernelMain() {.exportc.} = NimMain() debugln \\\"Hello, world!\\\" quit() \",\"It's a simple proc that doesn't take any arguments (for now) and doesn't return anything. Let's define its type, cast the kernel address to that type, and call it.\",\"# src/boot/bootx64.nim type KernelEntryPoint = proc () {.cdecl.} proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # jump to kernel let kernelMain = cast[KernelEntryPoint](kernelImageBase) kernelMain() # we should never get here quit() \",\"If we compile and run now, we should see the following output in the terminal (not in the QEMU window, since the kernel is printing to the QEMU debug console):\",\"Great! Our kernel is running! This is a big milestone. But we're not done with the bootloader handover yet. We still need to pass the memory map from the bootloader to the kernel (and later a few other things). We'll use this memory map later to implement a physical memory manager in the kernel.\"]},\"162\":{\"h\":\"Convert UEFI memory map\",\"t\":[\"Ideally we shouldn't pass the UEFI memory map as is to the kernel. The memory map is a UEFI-specific data structure, and we don't want to tie the kernel to UEFI. Instead, we'll create our own memory map data structure that is independent of UEFI, and pass that to the kernel. Since this is going to be a data structure used by both the bootloader and the kernel, let's put it under the common folder in a module called bootinfo.nim.\",\"# src/common/bootinfo.nim type MemoryType* = enum Free KernelCode KernelData KernelStack Reserved MemoryMapEntry* = object `type`*: MemoryType start*: uint64 nframes*: uint64 MemoryMap* = object len*: uint entries*: ptr UncheckedArray[MemoryMapEntry] BootInfo* = object physicalMemoryMap*: MemoryMap \",\"Let's also add a proc in the bootloader to convert the UEFI memory map to our boot info memory map.\",\"# src/boot/bootx64.nim import std/sets ... # We use a HashSet here because the `EfiMemoryType` has values greater than 64K, # which is the maximum value supported by Nim sets. const FreeMemoryTypes = [ EfiConventionalMemory, EfiBootServicesCode, EfiBootServicesData, EfiLoaderCode, EfiLoaderData, ].toHashSet proc convertUefiMemoryMap( uefiMemoryMap: ptr UncheckedArray[EfiMemoryDescriptor], uefiMemoryMapSize: uint, uefiMemoryMapDescriptorSize: uint, ): seq[MemoryMapEntry] = let uefiNumMemoryMapEntries = uefiMemoryMapSize div uefiMemoryMapDescriptorSize for i in 0 ..< uefiNumMemoryMapEntries: let uefiEntry = cast[ptr EfiMemoryDescriptor]( cast[uint64](uefiMemoryMap) + i * uefiMemoryMapDescriptorSize ) let memoryType = if uefiEntry.type in FreeMemoryTypes: Free elif uefiEntry.type == OsvKernelCode: KernelCode elif uefiEntry.type == OsvKernelData: KernelData elif uefiEntry.type == OsvKernelStack: KernelStack else: Reserved result.add(MemoryMapEntry( type: memoryType, start: uefiEntry.physicalStart, nframes: uefiEntry.numberOfPages )) \",\"In order to pass the memory map to the kernel, it may seem that we can just pass a BootInfo instance to the kernel entry point. But keep in mind that the boot memory map is currently allocated both on the stack and the heap (the entries array) of the bootloader. We don't want the kernel to depend on memory in the bootloader, as we'll consider this memory as available once we're in the kernel. So, what we can do is use the UEFI AllocatePool method to allocate a single page of memory, use it to initialize a BootInfo instance, and pass its address to the kernel. We'll use memory type OsvKernelData for this memory, since it's memory that will be used by the kernel.\",\"Let's add this part to the EfiMainInner proc:\",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... consoleOut &\\\"boot: Allocating memory for kernel stack (16 KiB)\\\" ... consoleOut &\\\"boot: Allocating memory for BootInfo\\\" var bootInfoBase: uint64 checkStatus uefi.sysTable.bootServices.allocatePages( AllocateAnyPages, OsvKernelData, 1, bootInfoBase.addr, ) consoleOut \\\"boot: Reading kernel into memory\\\" ... \",\"Now, let's convert the UEFI memory map to the boot memory map using the convertUefiMemoryMap proc, and manually copy it to the BootInfo memory we just allocated:\",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # ======= NO MORE UEFI BOOT SERVICES ======= let physMemoryMap = convertUefiMemoryMap(memoryMap, memoryMapSize, memoryMapDescriptorSize) var bootInfo = cast[ptr BootInfo](bootInfoBase) # copy physical memory map entries to boot info bootInfo.physicalMemoryMap.len = physMemoryMap.len.uint bootInfo.physicalMemoryMap.entries = cast[ptr UncheckedArray[MemoryMapEntry]](bootInfoBase + sizeof(BootInfo).uint64) for i in 0 ..< physMemoryMap.len: bootInfo.physicalMemoryMap.entries[i] = physMemoryMap[i] \",\"What we're doing here is treating the start of the boot info page as a BootInfo instance. On line 12 & 13, we're pointing the entries field of the boot info memory map to the memory right after the boot info instance (instead of to some arbitrary heap memory). The last part just copies the entries from the original memory map to the boot info memory map.\"]},\"163\":{\"h\":\"Pass BootInfo to kernel\",\"t\":[\"We're now ready to pass our memory map to the kernel. We'll change the signature of the KernelMain proc to take a ptr BootInfo. Let's change the KernelMain proc signature, and print the memory map length to the debug console to verify that we're getting the correct info.\",\"# src/kernel/main.nim import debugcon import common/[bootinfo, libc, malloc] proc NimMain() {.importc.} proc KernelMain(bootInfo: ptr BootInfo) {.exportc.} = NimMain() debugln \\\"kernel: Fusion Kernel\\\" debugln &\\\"kernel: Memory map length: {bootInfo.physicalMemoryMap.len}\\\" quit() \",\"In the bootloader, we'll change the KernelEntryPoint type to match the new signature, convert the memory map, and pass it to the kernel through the bootinfo argument.\",\"# src/boot/bootx64.nim import common/bootinfo ... type KernelEntryPoint = proc (bootInfo: ptr BootInfo) {.cdecl.} proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # jump to kernel let kernelMain = cast[KernelEntryPoint](kernelImageBase) kernelMain(bootInfo) # we should never get here quit() \",\"Let's compile and run:\",\"Well, that didn't work as expected. We're getting a memory map length of 0. This one actually took me a long while to figure out. The problem, it turns out, is a difference in the calling convention between the bootloader and the kernel.\"]},\"164\":{\"h\":\"Calling convention\",\"t\":[\"Remember that the bootloader is compiled for the target x86_64-unknown-windows, and the kernel is compiled for x86_64-unknown-elf. This basically means that the bootloader is using the Microsoft x64 ABI, and the kernel is using the System V x64 ABI. Those two ABIs have different calling conventions; they pass parameters in different registers. The Microsoft x64 ABI passes the first four parameters in rcx, rdx, r8, and r9, whereas the System V x64 ABI passes the first six parameters in rdi, rsi, rdx, rcx, r8, and r9. So the bootloader is passing the memory map size in rdx (second parameter), but the kernel is expecting it in rsi. This is why we're getting a memory map size of 0.\",\"So how do we fix this? Ideally we can annotate the KernelEntryPoint type with the proper calling convention, but unfortunately Nim doesn't define a calling convention for the System V x64 ABI. So we have to take matters in our hands. One solution is emit some C code from Nim that allows us to define the entry point function type with the proper calling convention. The C compiler supports the Sys V ABI by annotating a function with __attribute__((sysv_abi)). But that's a bit too much for something simple.\",\"Keep in mind that we also need to set up the kernel stack and switch to it before jumping to the kernel, and in a future section we'll also need to set up the kernel page tables and switch to them. So we'll need to write some assembly code anyway. Let's go ahead and do that. We'll pass the boot info address in rdi (first parameter), and we'll change the rsp register to point to the top of the kernel stack region. Finally we'll jmp to the kernel entry point.\",\"# src/boot/bootx64.nim proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # switch stacks and jump to kernel let kernelStackTop = kernelStackBase + KernelStackSize asm \\\"\\\"\\\" mov rdi, %0 # bootInfo mov rsp, %1 # kernel stack top jmp %2 # kernel entry point : : \\\"r\\\"(`bootInfoBase`), \\\"r\\\"(`kernelStackTop`), \\\"r\\\"(`KernelPhysicalBase`) \\\"\\\"\\\" # we should never get here \",\"Let's compile and run:\",\"Success! This time we're getting the correct memory map length.\"]},\"165\":{\"h\":\"Print memory map\",\"t\":[\"Just to be sure, let's iterate over the memory map and print the memory type, start address, and number of pages of each entry. We'll also print the total size of free memory.\",\"# src/kernel/main.nim ... proc KernelMain(bootInfo: ptr BootInfo) {.exportc.} = NimMain() debugln \\\"kernel: Fusion Kernel\\\" debugln \\\"\\\" debugln &\\\"Memory Map ({bootInfo.physicalMemoryMap.len} entries):\\\" debug &\\\"\\\"\\\" {\\\"Entry\\\"}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"Type\\\":12}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"Start\\\":>12}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"Start (KB)\\\":>15}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"#Pages\\\":>10}\\\"\\\"\\\" debugln \\\"\\\" var totalFreePages = 0 for i in 0 ..< bootInfo.physicalMemoryMap.len: let entry = bootInfo.physicalMemoryMap.entries[i] debug &\\\" {i:>5}\\\" debug &\\\" {entry.type:12}\\\" debug &\\\" {entry.start:>#12x}\\\" debug &\\\" {entry.start div 1024:>#15}\\\" debug &\\\" {entry.nframes:>#10}\\\" debugln \\\"\\\" if entry.type == MemoryType.Free: totalFreePages += entry.nframes debugln \\\"\\\" debugln &\\\"Total free: {totalFreePages * 4} KiB ({totalFreePages * 4 div 1024} MiB)\\\" quit() \",\"We should see the following output in the debug console:\",\"kernel: Fusion Kernel Memory Map (109 entries): Entry Type Start Start (KB) #Pages 0 Free 0x0 0 1 1 Free 0x1000 4 159 2 KernelCode 0x100000 1024 290 3 Free 0x222000 2184 1502 4 Reserved 0x800000 8192 8 5 Free 0x808000 8224 3 6 Reserved 0x80b000 8236 1 7 Free 0x80c000 8240 4 8 Reserved 0x810000 8256 240 9 Free 0x900000 9216 3712 10 Free 0x1780000 24064 9205 11 Free 0x3b75000 60884 32 12 Free 0x3b95000 61012 9887 13 Free 0x6234000 100560 292 14 Free 0x6358000 101728 19 15 Free 0x636b000 101804 2 16 KernelData 0x636d000 101812 1 17 KernelStack 0x636e000 101816 4 18 Free 0x6372000 101832 1781 19 Free 0x6a67000 108956 25 20 Free 0x6a80000 109056 2 ... 99 Free 0x7e00000 129024 135 100 Free 0x7e87000 129564 32 101 Free 0x7ea7000 129692 35 102 Free 0x7eca000 129832 17 103 Free 0x7edb000 129900 25 104 Reserved 0x7ef4000 130000 132 105 Reserved 0x7f78000 130528 136 106 Reserved 0xe0000000 3670016 65536 107 Reserved 0xffc00000 4190208 1024 108 Reserved 0xfd00000000 1061158912 3145728 Total free: 124296 KiB (121 MiB) \",\"The memory map looks good. Notice that the kernel memory regions are marked properly.\"]},\"166\":{\"h\":\"Handling Nim exceptions\",\"t\":[\"Before we move on to the next section, let's make sure we handle Nim exceptions properly at the top level of the kernel, similar to what we did with the bootloader. Let's define an unhandledException proc that prints the exception and stack trace and quits, and move the code in KernelMain to a new KernelMainInner proc.\",\"# src/kernel/main.nim ... # forward declarations proc NimMain() {.importc.} proc KernelMainInner(bootInfo: ptr BootInfo) proc unhandledException*(e: ref Exception) proc KernelMain(bootInfo: ptr BootInfo) {.exportc.} = NimMain() try: KernelMainInner(bootInfo) except Exception as e: unhandledException(e) quit() proc KernelMainInner(bootInfo: ptr BootInfo) = debugln \\\"kernel: Fusion Kernel\\\" ... proc unhandledException*(e: ref Exception) = debugln \\\"\\\" debugln &\\\"Unhandled exception: {e.msg} [{e.name}]\\\" if e.trace.len > 0: debugln \\\"\\\" debugln \\\"Stack trace:\\\" debugln getStackTrace(e) quit() \",\"Let's test this by forcing an exception in KernelMainInner:\",\"# src/kernel/main.nim proc KernelMainInner(bootInfo: ptr BootInfo) = # force an IndexDefect exception let a = [1, 2, 3] let n = 5 discard a[n] \",\"We should see the following output in the debug console:\",\"Great! We're in a great place now. We can now switch our focus to the kernel, assuming full control of the system.\",\"So where do we go from here? Ultimately we want to be able to run user programs in user space. This requires virtual memory support (using paging), where we divide the address space into two parts: the kernel space and the user space. Virtual memory requires a physical memory manager in order to allocate (and free) physical memory frames to back virtual memory pages. We already have a physical memory map, so we can use that to implement a physical memory manager. We'll do that in the next section.\"]},\"167\":{\"h\":\"Physical Memory\",\"t\":[\"Managing physical memory involves being able to allocate and free physical page frames. We'll create a Physical Memory Manager (PMM) that will keep track of which physical pages are free and which are in use. There are many ways to implement a PMM, the most popular being a bitmap, a free list, and a free stack. I'll keep it simple and implement a free list.\"]},\"168\":{\"h\":\"Free List\",\"t\":[\"The free list will be a linked list of free memory regions. We will store the address of the list head in a global variable. Each node will be stored at the beginning of a free region, and will contain the region size in terms of frames, and a next pointer to the next node in the list. This way we don't have to allocate memory for the list itself ( except for the list head pointer), since we will use the free regions themselves to store the list nodes. Here's what it might look like after a few allocations and frees:\",\" 0 Physical Memory max ┌──┬────────────┬────────────┬──┬──────┬──────────────────────────────┬──┬─────────┬──────────────┐ size │4 │ │░░░░░░░░░░░░│2 │ │░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│3 │ │░░░░░░░░░░░░░░│ │ │ Free │░░░░░░░░░░░░│ │ Free │░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│ │ Free │░░░░░░░░░░░░░░│ next ├──┤ │░░░░░░░░░░░░├──┤ │░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░├──┤ │░░░░░░░░░░░░░░│ └▲┬┴────────────┴────────────┴▲┬┴──────┴──────────────────────────────┴▲┬┴─────────┴──────────────┘ │└───────────────────────────┘└───────────────────────────────────────┘│ head ─┘ └─▶ nil \",\"Allocating a page frame will involve finding a free region that is large enough, splitting it if necessary, and returning the starting address of the allocated region. Freeing a region will involve finding the correct place in the list to insert the region, and merging it with adjacent regions if necessary.\",\"Let's start by creating a new module src/kernel/pmm.nim and defining the following types:\",\"PhysAddr to represent a physical address\",\"PMNode to represent a node in the free list\",\"PMRegion to represent a region of memory\",\"and the following variables:\",\"head to store the address of the list head\",\"maxPhysAddr to store the maximum physical address (exclusive)\",\"reservedRegions to store a list of reserved regions\",\"# src/kernel/pmm.nim const FrameSize = 4096 type PhysAddr = distinct uint64 PMNode = object nframes: uint64 next: ptr PMNode PMRegion* = object start*: PhysAddr nframes*: uint64 var head: ptr PMNode maxPhysAddr: PhysAddr # exclusive reservedRegions: seq[PMRegion] \",\"We'll also define several utility procs:\",\"toPMNodePtr to convert from ptr PMNode to PhysAddr\",\"toPhysAddr to convert from PhysAddr to ptr PMNode\",\"==, <, and - operators for PhysAddr\",\"endAddr to calculate the end address of a region given its start address and size\",\"adjacent to check if a node is adjacent to a physical address (and vice versa)\",\"overlaps to check if two regions overlap\",\"# src/kernel/pmm.nim proc toPMNodePtr*(paddr: PhysAddr): ptr PMNode {.inline.} = cast[ptr PMNode](paddr) proc toPhysAddr*(node: ptr PMNode): PhysAddr {.inline.} = cast[PhysAddr](node) proc `==`*(a, b: PhysAddr): bool {.inline.} = a.uint64 == b.uint64 proc `<`(p1, p2: PhysAddr): bool {.inline.} = p1.uint64 < p2.uint64 proc `-`(p1, p2: PhysAddr): uint64 {.inline.} = p1.uint64 - p2.uint64 proc endAddr(paddr: PhysAddr, nframes: uint64): PhysAddr = result = paddr +! nframes * FrameSize proc adjacent(node: ptr PMNode, paddr: PhysAddr): bool {.inline.} = result = ( not node.isNil and node.toPhysAddr +! node.nframes * FrameSize == paddr ) proc adjacent(paddr: PhysAddr, nframes: uint64, node: ptr PMNode): bool {.inline.} = result = ( not node.isNil and paddr +! nframes * FrameSize == node.toPhysAddr ) proc overlaps(region1, region2: PMRegion): bool = var r1 = region1 var r2 = region2 if r1.start > r2.start: r1 = region2 r2 = region1 result = ( r1.start.PhysAddr < endAddr(r2.start.PhysAddr, r2.nframes) and r2.start.PhysAddr < endAddr(r1.start.PhysAddr, r1.nframes) ) \",\"Also, since we're going to do a lot of pointer arithmetic, let's define a +! operator for both PhysAddr and ptr PMNode that will allow us to add an offset to a physical address or a node pointer.\",\"# src/kernel/pmm.nim proc `+!`*(paddr: PhysAddr, offset: uint64): PhysAddr {.inline.} = PhysAddr(cast[uint64](paddr) + offset) proc `+!`*(node: ptr PMNode, offset: uint64): ptr PMNode {.inline.} = cast[ptr PMNode](cast[uint64](node) + offset) \"]},\"169\":{\"h\":\"Initialization\",\"t\":[\"The kernel already has the memory map passed to it by the bootloader, so we'll use that to initialize the PMM.\",\"import common/bootinfo ... proc pmInit*(memoryMap: MemoryMap) = var prev: ptr PMNode for i in 0 ..< memoryMap.len: let entry = memoryMap.entries[i] if entry.type == MemoryType.Free: maxPhysAddr = endAddr(entry.start.PhysAddr, entry.nframes) if not prev.isNil and adjacent(prev, entry.start.PhysAddr): # merge contiguous regions prev.nframes += entry.nframes else: # create a new node var node: ptr PMNode = entry.start.PhysAddr.toPMNodePtr node.nframes = entry.nframes node.next = nil if not prev.isNil: prev.next = node else: head = node prev = node elif entry.type == MemoryType.Reserved: reservedRegions.add(PMRegion(start: entry.start.PhysAddr, nframes: entry.nframes)) elif i > 0: # check if there's a gap between the previous entry and the current entry let prevEntry = memoryMap.entries[i - 1] let gap = entry.start.PhysAddr - endAddr(prevEntry.start.PhysAddr, prevEntry.nframes) if gap > 0: reservedRegions.add(PMRegion( start: endAddr(prevEntry.start.PhysAddr, prevEntry.nframes), nframes: gap div FrameSize )) \",\"The initialization procedure iterates over the memory map entries, and for each free region it either merges it with the previous region if they are contiguous, or creates a new node and adds it to the list. We also track a couple of things that will be useful for validating requests to free regions:\",\"Reserved regions, either from the memory map or from gaps between memory map entries.\",\"The maximum physical address, which is the end address of the last free region.\",\"To try it out and see if it works, we'll need a way to iterate over the list to print the nodes. Let's add an iterator for that.\",\"# src/kernel/pmm.nim iterator pmFreeRegions*(): tuple[paddr: PhysAddr, nframes: uint64] = var node = head while not node.isNil: yield (node.toPhysAddr, node.nframes) node = node.next \",\"Let's now initialize the PMM and print the free regions.\",\"# src/kernel/main.nim import pmm ... proc printFreeRegions() = debugln \\\"kernel: Physical memory free regions \\\" debug &\\\"\\\"\\\" {\\\"Start\\\":>16}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"Start (KB)\\\":>12}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"Size (KB)\\\":>11}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"#Pages\\\":>9}\\\"\\\"\\\" debugln \\\"\\\" var totalFreePages: uint64 = 0 for (start, nframes) in pmFreeRegions(): debug &\\\" {cast[uint64](start):>#16x}\\\" debug &\\\" {cast[uint64](start) div 1024:>#12}\\\" debug &\\\" {nframes * 4:>#11}\\\" debug &\\\" {nframes:>#9}\\\" debugln \\\"\\\" totalFreePages += nframes debugln &\\\"kernel: Total free: {totalFreePages * 4} KiB ({totalFreePages * 4 div 1024} MiB)\\\" proc KernelMainInner(bootInfo: ptr BootInfo) = debugln \\\"\\\" debugln \\\"kernel: Fusion Kernel\\\" debug \\\"kernel: Initializing physical memory manager \\\" pmInit(bootInfo.physicalMemoryMap) debugln \\\"[success]\\\" printFreeRegions() quit() \",\"If we run the kernel now, we should see something like this:\",\"kernel: Fusion Kernel kernel: Initializing physical memory manager [success] kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x0 0 640 160 0x21a000 2152 6040 1510 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124328 KiB (121 MiB) \",\"The list is much shorter than the original memory map, since we merged contiguous regions. Our PMM is now initialized and ready to be used.\"]},\"170\":{\"h\":\"Allocating Frames\",\"t\":[\"A memory manager is not very useful if we can't allocate and free memory. Let's start with adding a pmAlloc to allocate a contiguous region of physical memory.\",\"# src/kernel/pmm.nim import std/options ... proc pmAlloc*(nframes: uint64): Option[PhysAddr] = ## Allocate a contiguous region of physical memory. assert nframes > 0, \\\"Number of frames must be positive\\\" var prev: ptr PMNode curr = head # find a region with enough frames while not curr.isNil and curr.nframes < nframes: prev = curr curr = curr.next if curr.isNil: # no region found return none(PhysAddr) var newnode: ptr PMNode if curr.nframes == nframes: # exact match newnode = curr.next else: # split the region newnode = toPMNodePtr(curr.toPhysAddr +! nframes * FrameSize) newnode.nframes = curr.nframes - nframes newnode.next = curr.next if not prev.isNil: prev.next = newnode else: head = newnode result = some(curr.toPhysAddr) \",\"The procedure iterates over the list until it finds a region with enough frames, and then either splits the region if it's larger than necessary, or removes it from the list if it's an exact match. If there's no region large enough, it returns none. Let's try it out by allocating a few pages and printing the free regions.\",\"# src/kernel/main.nim proc KernelMainInner(bootInfo: ptr BootInfo) = ... debugln \\\"kernel: Allocating 4 pages\\\" let paddr = pmAlloc(4) if paddr.isSome: debugln &\\\"kernel: Allocated at {paddr.get.uint64:#010x}\\\" printFreeRegions() else: debugln \\\"kernel: Allocation failed\\\" \",\"Let's run the kernel and see what happens.\",\"kernel: Fusion Kernel kernel: Initializing physical memory manager [success] kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x0 0 640 160 0x21b000 2156 6036 1509 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124324 KiB (121 MiB) kernel: Allocating 4 pages kernel: Allocated at 0x00000000 kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x4000 16 624 156 0x21b000 2156 6036 1509 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124308 KiB (121 MiB) \",\"It looks like it worked. We can see that the first 4 pages are now allocated, and the free regions list is updated accordingly. Let's see what happens if we try to allocate more pages than available in the first free region.\",\" let paddr = pmAlloc(200) \",\"kernel: Fusion Kernel kernel: Initializing physical memory manager [success] kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x0 0 640 160 0x21b000 2156 6036 1509 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124324 KiB (121 MiB) kernel: Allocating 200 pages kernel: Allocated at 0x0021b000 kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x0 0 640 160 0x2e3000 2956 5236 1309 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 123524 KiB (120 MiB) \",\"The first region is skipped because it's not large enough, and the second region is used to allocate the pages, and its start address is updated and its size is reduced. Let's see what happens if we allocate exactly the number of pages in the first region (160 pages).\",\" let paddr = pmAlloc(160) \",\"kernel: Fusion Kernel kernel: Initializing physical memory manager [success] kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x0 0 640 160 0x21b000 2156 6036 1509 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124324 KiB (121 MiB) kernel: Allocating 160 pages kernel: Allocated at 0x00000000 kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x21b000 2156 6036 1509 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 123684 KiB (120 MiB) \",\"The first region is now completely used, so it's removed from the list. Finally, let's see what happens if we try to allocate more pages than available in any free region.\",\" let paddr = pmAlloc(25000) \",\"kernel: Fusion Kernel kernel: Initializing physical memory manager [success] kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x0 0 640 160 0x21b000 2156 6036 1509 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124324 KiB (121 MiB) kernel: Allocating 25000 pages kernel: Allocation failed \",\"The allocation fails because there are no regions large enough to satisfy the request.\"]},\"171\":{\"h\":\"Freeing Frames\",\"t\":[\"Freeing a region is a lot more challenging than allocating one, because we need to:\",\"validate the request to make sure the region is: \",\"aligned to a page frame\",\"within the physical memory range\",\"not overlapping with any reserved regions\",\"not overlapping with other free regions\",\"find the correct place in the free list to insert the region\",\"if it's adjacent to other free regions, merge it with them\",\"handle edge cases when the region is before or after all other regions\",\"Who said that writing an OS is easy? Let's go ahead and implement pmFree.\",\"# src/kernel/pmm.nim proc pmFree*(paddr: PhysAddr, nframes: uint64) = ## Free a contiguous region of physical memory. assert paddr.uint64 mod FrameSize == 0, &\\\"Unaligned physical address: {paddr.uint64:#x}\\\" assert nframes > 0, \\\"Number of frames must be positive\\\" if paddr +! nframes * FrameSize > maxPhysAddr: # the region is outside of the physical memory raise newException( Exception, &\\\"Attempt to free a region outside of the physical memory.\\\\n\\\" & &\\\" Request: start={paddr.uint64:#x} + nframes={nframes} > max={maxPhysAddr.uint64:#x}\\\" ) for region in reservedRegions: if overlaps(region, PMRegion(start: paddr, nframes: nframes)): # the region is reserved raise newException( Exception, &\\\"Attempt to free a reserved region.\\\\n\\\" & &\\\" Request: start={paddr.uint64:#x}, nframes={nframes}\\\\n\\\" & &\\\" Reserved: start={region.start.uint64:#x}, nframes={region.nframes}\\\" ) var prev: ptr PMNode curr = head while not curr.isNil and curr.toPhysAddr < paddr: prev = curr curr = curr.next let overlapsWithCurr = not curr.isNil and paddr +! nframes * FrameSize > curr.toPhysAddr overlapsWithPrev = not prev.isNil and paddr < prev.toPhysAddr +! prev.nframes * FrameSize if overlapsWithCurr or overlapsWithPrev: raise newException( Exception, &\\\"Attempt to free a region that overlaps with another free region.\\\\n\\\" & &\\\" Request: start={paddr.uint64:#x}, nframes={nframes}\\\" ) # the region to be freed is between prev and curr (either of them can be nil) if prev.isNil and curr.isNil: debugln \\\"pmFree: the list is empty\\\" # the list is empty var newnode = paddr.toPMNodePtr newnode.nframes = nframes newnode.next = nil head = newnode elif prev.isNil and adjacent(paddr, nframes, curr): debugln \\\"pmFree: at the beginning, adjacent to curr\\\" # at the beginning, adjacent to curr var newnode = paddr.toPMNodePtr newnode.nframes = nframes + curr.nframes newnode.next = curr.next head = newnode elif curr.isNil and adjacent(prev, paddr): debugln \\\"pmFree: at the end, adjacent to prev\\\" # at the end, adjacent to prev prev.nframes += nframes elif adjacent(prev, paddr) and adjacent(paddr, nframes, curr): debugln \\\"pmFree: exactly between prev and curr\\\" # exactly between prev and curr prev.nframes += nframes + curr.nframes prev.next = curr.next else: # not adjacent to any other region debugln \\\"pmFree: not adjacent to any other region\\\" var newnode = paddr.toPMNodePtr newnode.nframes = nframes newnode.next = curr if not prev.isNil: prev.next = newnode else: head = newnode \",\"Let's try it out by allocating and freeing some regions.\",\"# src/kernel/main.nim proc KernelMainInner(bootInfo: ptr BootInfo) = ... printFreeRegions() debugln \\\"kernel: Allocating 8 frames\\\" let paddr = pmAlloc(8) if paddr.isNone: debugln \\\"kernel: Allocation failed\\\" printFreeRegions() debugln &\\\"kernel: Freeing 2 frames at 0x2000\\\" pmFree(0x2000.PhysAddr, 2) printFreeRegions() debugln &\\\"kernel: Freeing 4 frames at 0x4000\\\" pmFree(0x4000.PhysAddr, 4) printFreeRegions() debugln &\\\"kernel: Freeing 2 frames at 0xa0000\\\" pmFree(0xa0000.PhysAddr, 2) printFreeRegions() \",\"If we run the kernel now, we should see something like this:\",\"kernel: Initializing physical memory manager [success] kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x0 0 640 160 0x223000 2188 6004 1501 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124292 KiB (121 MiB) kernel: Allocating 8 frames kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x8000 32 608 152 0x223000 2188 6004 1501 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124260 KiB (121 MiB) kernel: Freeing 2 frames at 0x2000 pmFree: not adjacent to any other region kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x2000 8 8 2 0x8000 32 608 152 0x223000 2188 6004 1501 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124268 KiB (121 MiB) kernel: Freeing 4 frames at 0x4000 pmFree: exactly between prev and curr kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x2000 8 632 158 0x223000 2188 6004 1501 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124284 KiB (121 MiB) kernel: Freeing 2 frames at 0xa0000 Unhandled exception: Attempt to free a reserved region. Request: start=0xa0000, nframes=2 Reserved: start=0xa0000, nframes=96 [Exception] Stack trace: /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(46) KernelMain /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(85) KernelMainInner /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/pmm.nim(164) pmFree \",\"First we allocate 8 frames (starting at 0x0000), then we free 2 frames at 0x2000, and finally we free 4 frames at 0x4000. The request to free the region at 0x2000 is not adjacent to any other free region, so it's inserted in the list. The second region being freed at 0x4000 is now exactly between the first free region (ending at 0x4000) and the second free region (starting at 0x8000), so it's merged with them.\",\"In the last free request, we try to free 2 frames at 0xa0000, which is a reserved region, so an exception is raised, which is exactly what we want. I'm not going to show all possible scenarios here, but I tested them and they all work as expected.\",\"Phew! That was a lot of work, but we now have a working PMM. In the next chapter, we'll start looking at virtual memory.\"]},\"172\":{\"h\":\"Virtual Memory\",\"t\":[\"So we have a working physical memory manager. But we can't keep using physical memory directly; sooner or later we'll run out of it. This is where virtual memory comes in. Virtual memory allows us to use more memory than we actually have, by mapping virtual addresses to physical addresses. In this section we'll implement a Virtual Memory Manager (VMM).\",\"When we booted through UEFI, the firmware had already enabled virtual memory for us, but it has been identity-mapped to physical memory. This makes it easy to manage memory during the boot process, but to take advantage of virtual memory we need to set it up ourselves. Let's first take a look at how the x86-64 virtual memory system works.\"]},\"173\":{\"h\":\"Virtual address space\",\"t\":[\"The 64-bit virtual address space on x86-64 is 48 bits (or 57 bits if you enable the 5-level paging extension). Virtual addresses use a canonical address format, where the most significant 16 bits of the 64-bit address must be either all 0s or all 1s. This means that the address space is split into two parts: the lower half (from 0x0000000000000000 to 0x00007FFFFFFFFFFF), and the higher half (from 0xFFFF800000000000 to 0xFFFFFFFFFFFFFFFF). Each is 47 bits in size, which is equivalent to 128 TiB. This is more than enough for our purposes. We'll use the lower half (128 TiB) for user processes (user space), and the higher half (128 TiB) for the kernel (kernel space). This is a diagram of the virtual address space:\",\" 0xFFFFFFFFFFFFFFFF (16 EiB) ┌──────────────────────────────┐ │ Kernel Space │ 0xFFFF800000000000 (-128 TiB) ├──────────────────────────────┤ │ │ │ │ │ Canonical Address │ │ Gap │ │ │ │ │ 0x00007FFFFFFFFFFF (128 TiB) ├──────────────────────────────┤ │ User Space │ 0x0000000000000000 (0 TiB) └──────────────────────────────┘ \",\"We'll start by introducing some concepts about how address translation works. The main idea is that the CPU makes use of a set of hierarchical page tables to translate virtual addresses to physical addresses. Let's take a look at the structure of these page tables.\"]},\"174\":{\"h\":\"Page tables structure\",\"t\":[\"In x64 mode, page tables are used to translate virtual addresses to physical addresses. They are structured as a tree.\",\"The root of the tree is a Page Map Level 4 table (PML4), which contains 512 entries.\",\"Each entry points to a Page Directory Pointer Table (PDPT), which also contains 512 entries.\",\"Each entry in the PDPT points to a Page Directory (PD), which contains 512 entries.\",\"Each entry in the PD points to a Page Table (PT), which contains 512 entries.\",\"Each entry in the PT points to a physical page frame. The page frame size is 4 KiB of physical memory.\",\"The page tables are stored in memory, and the physical address of the root of the tree (the PML4 table) is stored in the CR3 control register. We can have different page tables at different times by changing the value of CR3. This is how we can switch between different address spaces.\",\"The virtual address is split into 5 parts:\",\"Bits 48-63: Unused (16 bits) \",\"These are sign-extended from bit 47, and indicate whether the address is in the lower half (bit 47 is 0) or the higher half (bit 47 is 1) of the address space.\",\"Bits 39-47: Index into the PML4 (9 bits)\",\"Bits 30-38: Index into the PDPT (9 bits)\",\"Bits 21-29: Index into the PD (9 bits)\",\"Bits 12-20: Index into the PT (9 bits)\",\"Bits 0-11: Offset within the physical page frame (12 bits)\",\"Here's a diagram of a virtual address, and how each section of the address maps to the paging tables:\",\"┌──────────────────┬────────────────┬────────────────┬──────────────┬──────────────┬─────────────┐ │ 63:49 │ 48:39 │ 38:30 │ 29:21 │ 20:12 │ 11:0 │ ├──────────────────┼────────────────┼────────────────┼──────────────┼──────────────┼─────────────┤ │ Unused (16 bits) │ PML4 index (9) │ PDPT index (9) │ PD index (9) │ PT index (9) │ Offset (12) │ └──────────────────┴────────────────┴────────────────┴──────────────┴──────────────┴─────────────┘ \",\"So in order to link the kernel at the start of the higher half of the address space (0xFFFF800000100000), we need to map the virtual pages at 0xFFFF800000100000 to 0xFFFF800000100000 + (kernel size) to the physical pages at 0x100000 to 0x100000 + (kernel size). We'll need to create a PML4 table, a PDPT, a PD, and a PT, and fill them with the appropriate entries.\",\"Let's break down the higher half address 0xFFFF800000100000 according to the above diagram:\",\"Bits 63:49: 0xFFFF (sign-extended from bit 47)\",\"Bits 48:39: 0x100 (index 256 in the PML4 table)\",\"Bits 38:30: 0x000 (index 0 in the PDP table)\",\"Bits 29:21: 0x000 (index 0 in the PD table)\",\"Bits 20:12: 0x100 (index 256 in the PT table)\",\"Bits 11:0: 0x000 (offset 0 within the page frame)\",\"To map this virtual address to physical address 0x100000, we need to set the following entries:\",\"PML4Table: PML4Entry at index 256 points to PDPTable\",\"PDPTable: PDPTEntry at index 0 points to PDTable\",\"PDTable: PDEntry at index 0 points to PTable\",\"PTable: PTEntry at index 256 points to physical address 0x100000\",\"Here's a diagram of the page tables after we've set the entries:\",\" ┌─────────────────┐ ┌──>┌─────────────────┐ ┌──>┌─────────────────┐ ┌──>┌─────────────────┐ │ PML4Table │ │ │ PDPTable │ │ │ PDTable │ │ │ PTable │ ├─────────────────┤ │ ├─────────────────┤ │ ├─────────────────┤ │ ├─────────────────┤ │ PML4Entry 0 │ │ *│ PDPTEntry 0 │──┘ *│ PDEntry 0 │──┘ │ PTEntry 0 │ │ PML4Entry 1 │ │ │ PDPTEntry 1 │ │ PDEntry 1 │ │ PTEntry 1 │ │ ... │ │ │ │ │ │ │ ... │ *│ PML4Entry 256 │──┘ │ ... │ │ ... │ *│ PTEntry 256 │──> 0x100000 │ ... │ │ │ │ │ │ ... │ │ PML4Entry 511 │ │ PDPTEntry 511 │ │ PDEntry 511 │ │ PTEntry 511 │ └─────────────────┘ └─────────────────┘ └─────────────────┘ └─────────────────┘ \"]},\"175\":{\"h\":\"Defining page tables\",\"t\":[\"Let's start by defining the structures for 4-level paging. Since we're going to need this both in the bootloader and in the kernel, we'll put it in a common module under common/pagetables.nim. One important point that we need to keep in mind is that the page tables need to be aligned on a 4 KiB boundary. We'll use Nim's align pragma to do this.\",\"# src/common/pagetables.nim const PageSize* = 4096 type # Page Map Level 4 Entry PML4Entry* {.packed.} = object present* {.bitsize: 1.}: uint64 # bit 0 write* {.bitsize: 1.}: uint64 # bit 1 user* {.bitsize: 1.}: uint64 # bit 2 writeThrough* {.bitsize: 1.}: uint64 # bit 3 cacheDisable* {.bitsize: 1.}: uint64 # bit 4 accessed* {.bitsize: 1.}: uint64 # bit 5 ignored1* {.bitsize: 1.}: uint64 # bit 6 reserved1* {.bitsize: 1.}: uint64 # bit 7 ignored2* {.bitsize: 4.}: uint64 # bits 11: 8 physAddress* {.bitsize: 40.}: uint64 # bits 51:12 ignored3* {.bitsize: 11.}: uint64 # bits 62:52 xd* {.bitsize: 1.}: uint64 # bit 63 # Page Directory Pointer Table Entry PDPTEntry* {.packed.} = object present* {.bitsize: 1.}: uint64 # bit 0 write* {.bitsize: 1.}: uint64 # bit 1 user* {.bitsize: 1.}: uint64 # bit 2 writeThrough* {.bitsize: 1.}: uint64 # bit 3 cacheDisable* {.bitsize: 1.}: uint64 # bit 4 accessed* {.bitsize: 1.}: uint64 # bit 5 ignored1* {.bitsize: 1.}: uint64 # bit 6 pageSize* {.bitsize: 1.}: uint64 # bit 7 ignored2* {.bitsize: 4.}: uint64 # bits 11: 8 physAddress* {.bitsize: 40.}: uint64 # bits 51:12 ignored3* {.bitsize: 11.}: uint64 # bits 62:52 xd* {.bitsize: 1.}: uint64 # bit 63 # Page Directory Entry PDEntry* {.packed.} = object present* {.bitsize: 1.}: uint64 # bit 0 write* {.bitsize: 1.}: uint64 # bit 1 user* {.bitsize: 1.}: uint64 # bit 2 writeThrough* {.bitsize: 1.}: uint64 # bit 3 cacheDisable* {.bitsize: 1.}: uint64 # bit 4 accessed* {.bitsize: 1.}: uint64 # bit 5 ignored1* {.bitsize: 1.}: uint64 # bit 6 pageSize* {.bitsize: 1.}: uint64 # bit 7 ignored2* {.bitsize: 4.}: uint64 # bits 11: 8 physAddress* {.bitsize: 40.}: uint64 # bits 51:12 ignored3* {.bitsize: 11.}: uint64 # bits 62:52 xd* {.bitsize: 1.}: uint64 # bit 63 # Page Table Entry PTEntry* {.packed.} = object present* {.bitsize: 1.}: uint64 # bit 0 write* {.bitsize: 1.}: uint64 # bit 1 user* {.bitsize: 1.}: uint64 # bit 2 writeThrough* {.bitsize: 1.}: uint64 # bit 3 cacheDisable* {.bitsize: 1.}: uint64 # bit 4 accessed* {.bitsize: 1.}: uint64 # bit 5 dirty* {.bitsize: 1.}: uint64 # bit 6 pat* {.bitsize: 1.}: uint64 # bit 7 global* {.bitsize: 1.}: uint64 # bit 8 ignored1* {.bitsize: 3.}: uint64 # bits 11: 9 physAddress* {.bitsize: 40.}: uint64 # bits 51:12 ignored2* {.bitsize: 11.}: uint64 # bits 62:52 xd* {.bitsize: 1.}: uint64 # bit 63 # Page Map Level 4 Table PML4Table* = object entries* {.align(PageSize).}: array[512, PML4Entry] # Page Directory Pointer Table PDPTable* = object entries* {.align(PageSize).}: array[512, PDPTEntry] # Page Directory PDTable* = object entries* {.align(PageSize).}: array[512, PDEntry] # Page Table PTable* = object entries* {.align(PageSize).}: array[512, PTEntry] PageAccess* = enum paRead = 0 paReadWrite = 1 PageMode* = enum pmSupervisor = 0 pmUser = 1 proc `[]`*(pml4: ptr PML4Table; index: uint64): var PML4Entry {.inline.} = pml4.entries[index] proc `[]`*(pdpt: ptr PDPTable; index: uint64): var PDPTEntry {.inline.} = pdpt.entries[index] proc `[]`*(pd: ptr PDTable; index: uint64): var PDEntry {.inline.} = pd.entries[index] proc `[]`*(pt: ptr PTable; index: uint64): var PTEntry {.inline.} = pt.entries[index] \",\"Note Ideally we wouldn't need to define an `entries` array field within each\",\"object, and we could just define the tables like so:\",\"PML4Table* {.align(PageSize).} = array[512, PML4Entry] \",\"Then we could access the table by indexing directly into its variable, e.g. pml4[i], instead of pml4.entries[i]. Unfortunately Nim doesn't support type-level alignment (yet). See this RFC. So, as a workaround, I defined index operators for each table type, which just forward the indexing to the entries field.\"]},\"176\":{\"h\":\"Accessing page tables\",\"t\":[\"OK, we have the page table structures defined. But before we start using them, we need to think about how we're going to access them. Let's look at a simple example:\",\"We allocate a PML4Table instance (call it pml4).\",\"We allocate a PDPTable instance.\",\"We modify pml4[0].physAddress to point to the physical address of the PDPTable instance.\",\"At some later point, we want to modify that PDPTable instance. But how do we get its virtual address? All we have is its physical address through pml4[0].physAddress.\",\"We need a way to reverse map a physical address to a virtual address. Here are some solutions:\",\"Identity-mapping the page tables \",\"Pros: simple; no need to reverse map\",\"Cons: pollutes the user address space (since physical memory is in the lower half)\",\"Mapping page tables at a constant offset from their physical addresses \",\"Pros: simple; reverse mapping is trivial\",\"Cons: requires creating new mappings for each page table\",\"Mapping the entire physical memory at a known virtual address \",\"Pros: simple; reverse mapping is trivial\",\"Cons: requires dedicating a range of virtual addresses for the entire physical memory\",\"Recursive page tables \",\"Pros: doesn't require additional mappings\",\"Cons: complex; accessing a page table requires that it be currently active, which means we need to switch to it first (sometimes this is not feasible)\",\"We'll go with the third option (mapping the entire physical memory at a known virtual address). This makes reverse mapping trivial, and also gives us the ability to address any location in physical memory in a simple way. We'll use the virtual address 0xFFFFFFFF80000000 for this purpose.\"]},\"177\":{\"h\":\"Mapping pages\",\"t\":[\"Mapping pages will require allocating physical memory frames to hold the page tables themselves. In the kernel, we'll use the physical memory manager to allocate these frames. However, we'll also need to create page tables in the bootloader to map a few regions before we jump to the kernel. So instead of letting the VMM use the PMM implicitly, we'll pass our VMM a callback that it can use to allocate physical memory frames. This will allow us to use the VMM from both the kernel and the bootloader.\",\"Let's define a couple of types and a vmInit proc that initializes the VMM.\",\"# src/boot/vmm.nim type VirtAddr* = distinct uint64 PhysAlloc* = proc (nframes: uint64): Option[PhysAddr] var physicalMemoryVirtualBase: uint64 pmalloc: PhysAlloc proc vmInit*(physMemoryVirtualBase: uint64, physAlloc: PhysAlloc) = physicalMemoryVirtualBase = physMemoryVirtualBase pmalloc = physAlloc \",\"Let's also add a couple of templates for pointer arithmetic on virtual addresses, which will make our code more readable.\",\"# src/boot/vmm.nim ... template `+!`*(p: VirtAddr, offset: uint64): VirtAddr = VirtAddr(cast[uint64](p) + offset) template `-!`*(p: VirtAddr, offset: uint64): VirtAddr = VirtAddr(cast[uint64](p) - offset) \",\"We'll also need two procs that map virtual addresses to physical addresses and vice versa. We'll call them p2v and v2p. The p2v proc is simple: it just adds the virtual memory base to the physical address. The v2p proc is more complex. It needs to traverse the page tables to find the physical address that corresponds to the virtual address. In order to do this, it needs to know the current active page table, so we'll add a getActivePML4 proc that returns a pointer to the active PML4 table. We'll also add a setActivePML4 proc that sets the active PML4 table. (The {.experimental: \\\"codeReordering\\\".} pragma is optional, but it lets us use procs before they are defined, thus avoiding the need to forward-declare them.)\",\"# src/boot/vmm.nim import common/pagetables import pmm # only needed for PhysAddr {.experimental: \\\"codeReordering\\\".} proc p2v*(phys: PhysAddr): VirtAddr = result = cast[VirtAddr](phys +! physicalMemoryVirtualBase) proc v2p*(virt: VirtAddr): Option[PhysAddr] = let pml4 = getActivePML4() var pml4Index = (virt.uint64 shr 39) and 0x1FF var pdptIndex = (virt.uint64 shr 30) and 0x1FF var pdIndex = (virt.uint64 shr 21) and 0x1FF var ptIndex = (virt.uint64 shr 12) and 0x1FF if pml4.entries[pml4Index].present == 0: result = none(PhysAddr) return let pdptPhysAddr = PhysAddr(pml4.entries[pml4Index].physAddress shl 12) let pdpt = cast[ptr PDPTable](p2v(pdptPhysAddr)) if pdpt.entries[pdptIndex].present == 0: result = none(PhysAddr) return let pdPhysAddr = PhysAddr(pdpt.entries[pdptIndex].physAddress shl 12) let pd = cast[ptr PDTable](p2v(pdPhysAddr)) if pd.entries[pdIndex].present == 0: result = none(PhysAddr) return let ptPhysAddr = PhysAddr(pd.entries[pdIndex].physAddress shl 12) let pt = cast[ptr PTable](p2v(ptPhysAddr)) if pt.entries[ptIndex].present == 0: result = none(PhysAddr) return result = some PhysAddr(pt.entries[ptIndex].physAddress shl 12) proc getActivePML4*(): ptr PML4Table = var cr3: uint64 asm \\\"\\\"\\\" mov %0, cr3 : \\\"=r\\\"(`cr3`) \\\"\\\"\\\" result = cast[ptr PML4Table](p2v(cr3.PhysAddr)) proc setActivePML4*(pml4: ptr PML4Table) = var cr3 = v2p(cast[VirtAddr](pml4)).get asm \\\"\\\"\\\" mov cr3, %0 : : \\\"r\\\"(`cr3`) \\\"\\\"\\\" \",\"We can now write a function to map a virtual page to a physical page. We'll extract 4 index values from the virtual address, and use them to insert (or update) the appropriate entries in the page tables. To avoid repeating a lot of the code, I created a getOrCreateEntry generic proc, which will return an entry if it exists in the parent table, or allocate a new page (for the child table) if it doesn't and sets the appropriate entry in the parent table.\",\"# src/boot/vmm.nim ... proc getOrCreateEntry[TP, TC](parent: ptr TP, index: uint64): ptr TC = var physAddr: PhysAddr if parent[index].present == 1: physAddr = PhysAddr(parent[index].physAddress shl 12) else: physAddr = pmalloc(1).get # TODO: handle allocation failure parent[index].physAddress = physAddr.uint64 shr 12 parent[index].present = 1 result = cast[ptr TC](p2v(physAddr)) proc mapPage( pml4: ptr PML4Table, virtAddr: VirtAddr, physAddr: PhysAddr, pageAccess: PageAccess, pageMode: PageMode, ) = let pml4Index = (virtAddr.uint64 shr 39) and 0x1FF let pdptIndex = (virtAddr.uint64 shr 30) and 0x1FF let pdIndex = (virtAddr.uint64 shr 21) and 0x1FF let ptIndex = (virtAddr.uint64 shr 12) and 0x1FF let access = cast[uint64](pageAccess) let mode = cast[uint64](pageMode) # Page Map Level 4 Table pml4[pml4Index].write = access pml4[pml4Index].user = mode var pdpt = getOrCreateEntry[PML4Table, PDPTable](pml4, pml4Index) # Page Directory Pointer Table pdpt[pdptIndex].write = access pdpt[pdptIndex].user = mode var pd = getOrCreateEntry[PDPTable, PDTable](pdpt, pdptIndex) # Page Directory pd[pdIndex].write = access pd[pdIndex].user = mode var pt = getOrCreateEntry[PDTable, PTable](pd, pdIndex) # Page Table pt[ptIndex].physAddress = physAddr.uint64 shr 12 pt[ptIndex].present = 1 pt[ptIndex].write = access pt[ptIndex].user = mode \",\"Notice the power of Nim generics here, which is structurally typed. The getOrCreateEntry proc accesses fields of the TP generic type (the parent table type), and the compiler will make sure that the fields exist in the object that is passed to the proc. We don't have to provide type constraints on the generic types, and we don't have to use inheritance or interfaces.\",\"The caller needs to pass a pointer to PML4Table (the root of the page tables), which they are responsible for allocating. At every level of the table hierarchy, we check if the entry is present. If it is, we use the physical address stored in the entry to get the virtual address of the next table. If it isn't, we allocate a new physical memory frame and store its address in the entry (and set the present bit in the entry to 1). We also update the write and user bits at every level, so that the page is accessible in the way that the caller requested.\",\"In addition to mapping a single page, we'll occasionally need to map a range of pages. We'll also need to identity-map pages in some cases. Let's add procs for these as well.\",\"# src/boot/vmm.nim proc mapRegion*( pml4: ptr PML4Table, virtAddr: VirtAddr, physAddr: PhysAddr, pageCount: uint64, pageAccess: PageAccess, pageMode: PageMode, ) = for i in 0 ..< pageCount: mapPage(pml4, virtAddr +! i * PageSize, physAddr +! i * PageSize, pageAccess, pageMode) proc identityMapRegion*( pml4: ptr PML4Table, physAddr: PhysAddr, pageCount: uint64, pageAccess: PageAccess, pageMode: PageMode, ) = mapRegion(pml4, physAddr.VirtAddr, physAddr, pageCount, pageAccess, pageMode) \",\"OK, we should have everything we need to set up the page tables. In the next section we'll look into modifying the bootloader to load the kernel into the higher half of the address space.\"]},\"178\":{\"h\":\"Higher Half Kernel\",\"t\":[\"The kernel is currently linked at address 0x100000, not at the higher half of the address space. The UEFI environment does have paging enabled, but we need to build our own page tables, and map the kernel at the higher half of the address space. This needs to be done in the bootloader, before we jump to the kernel (since we'll change the kernel to be linked at the higher half). Once we're in the kernel, we can set up different page tables that fit our needs.\"]},\"179\":{\"h\":\"Linking the kernel\",\"t\":[\"To link the kernel at the higher half of the address space, we need to change the base address of the kernel in the linker script. However, instead of linking the kernel at exactly 0xFFFF800000000000, we'll link it at 1 MiB above that address, i.e. 0xFFFF800000100000. This will make virtual addresses and physical addresses line up nicely, and we can compare them visually by just looking at the least significant bytes of the address, which makes debugging page table mappings easier.\",\"/* src/kernel/kernel.ld */ SECTIONS { . = 0xFFFF800000100000; .text : { *main*.o(.*text.KernelMain) *main*.o(.*text.*) *(.*text*) } .rodata : { *(.*rodata*) } .data : { *(.*data) *(.*bss) } .shstrtab : { *(.shstrtab) } /DISCARD/ : { *(*) } } \",\"If we try to compile and link the kernel, we'll get a bunch of relocation errors:\",\"$ just kernel ld.lld: error: .../fusion/build/@mmain.nim.c.o:(function KernelMainInner__main_u7: .text.KernelMainInner__main_u7+0x232): relocation R_X86_64_32S out of range: -140737488267184 is not in [-2147483648, 2147483647]; references section '.rodata' >>> referenced by @mmain.nim.c ... \",\"The problem here is that the compiler has something called a \\\"code model\\\", which determines how it generates code. The default code model is small, which means that the compiler assumes that the code and data are linked in the lower 2 GiB of the address space. What we need here is the large code model, which assumes that the code and data are linked anywhere in the address space. We can specify the code model using the -mcmodel flag, so let's add it to the kernel's nim.cfg file.\",\"# src/kernel/nim.cfg ... --passc:\\\"-mcmodel=large\\\" \",\"Now the kernel should compile and link successfully. Let's take a quick look at the linker map.\",\"$ head -n 10 build/kernel.map VMA LMA Size Align Out In Symbol 0 0 ffff800000100000 1 . = 0xFFFF800000100000 ffff800000100000 ffff800000100000 2048c 16 .text ffff800000100000 ffff800000100000 1ee 16 .../fusion/build/@mmain.nim.c.o:(.ltext.KernelMain) ffff800000100000 ffff800000100000 1ee 1 KernelMain ffff8000001001f0 ffff8000001001f0 261f 16 .../fusion/build/@mmain.nim.c.o:(.ltext.KernelMainInner__main_u13) ffff8000001001f0 ffff8000001001f0 261f 1 KernelMainInner__main_u13 ffff800000102810 ffff800000102810 9b 16 .../fusion/build/@mmain.nim.c.o:(.ltext.nimFrame) ffff800000102810 ffff800000102810 9b 1 nimFrame ffff8000001028b0 ffff8000001028b0 25 16 .../fusion/build/@mmain.nim.c.o:(.ltext.nimErrorFlag) \",\"Looks good. Before we start setting up paging, let's add a few utility procs to prepare the BootInfo structure with the physical memory map and the virtual memory map.\"]},\"180\":{\"h\":\"Preparing BootInfo\",\"t\":[\"We need to pass a few things to the kernel, including:\",\"The physical memory map\",\"The virtual memory map\",\"The virtual address where physical memory is mapped\",\"We already have a convertUefiMemoryMap proc that converts the UEFI memory map to our own format. Let's add a proc to create a virtual memory map as well, which will contain the virtual address space regions that we'll map.\",\"# src/boot/bootx64.nim ... const KernelPhysicalBase = 0x10_0000'u64 KernelVirtualBase = 0xFFFF_8000_0000_0000'u64 + KernelPhysicalBase KernelStackVirtualBase = 0xFFFF_8001_0000_0000'u64 # KernelVirtualBase + 4 GiB KernelStackSize = 16 * 1024'u64 KernelStackPages = KernelStackSize div PageSize BootInfoVirtualBase = KernelStackVirtualBase + KernelStackSize # after kernel stack PhysicalMemoryVirtualBase = 0xFFFF_8002_0000_0000'u64 # KernelVirtualBase + 8 GiB ... proc createVirtualMemoryMap( kernelImagePages: uint64, physMemoryPages: uint64, ): seq[MemoryMapEntry] = result.add(MemoryMapEntry( type: KernelCode, start: KernelVirtualBase, nframes: kernelImagePages )) result.add(MemoryMapEntry( type: KernelStack, start: KernelStackVirtualBase, nframes: KernelStackPages )) result.add(MemoryMapEntry( type: KernelData, start: BootInfoVirtualBase, nframes: 1 )) result.add(MemoryMapEntry( type: KernelData, start: PhysicalMemoryVirtualBase, nframes: physMemoryPages )) \",\"Now, let's add a proc to prepare the BootInfo structure itself.\",\"# src/boot/bootx64.nim ... proc createBootInfo( bootInfoBase: uint64, kernelImagePages: uint64, physMemoryPages: uint64, physMemoryMap: seq[MemoryMapEntry], virtMemoryMap: seq[MemoryMapEntry], ): ptr BootInfo = var bootInfo = cast[ptr BootInfo](bootInfoBase) bootInfo.physicalMemoryVirtualBase = PhysicalMemoryVirtualBase # copy physical memory map entries to boot info bootInfo.physicalMemoryMap.len = physMemoryMap.len.uint bootInfo.physicalMemoryMap.entries = cast[ptr UncheckedArray[MemoryMapEntry]](bootInfoBase + sizeof(BootInfo).uint64) for i in 0 ..< physMemoryMap.len: bootInfo.physicalMemoryMap.entries[i] = physMemoryMap[i] let physMemoryMapSize = physMemoryMap.len.uint64 * sizeof(MemoryMapEntry).uint64 # copy virtual memory map entries to boot info bootInfo.virtualMemoryMap.len = virtMemoryMap.len.uint bootInfo.virtualMemoryMap.entries = cast[ptr UncheckedArray[MemoryMapEntry]](bootInfoBase + sizeof(BootInfo).uint64 + physMemoryMapSize) for i in 0 ..< virtMemoryMap.len: bootInfo.virtualMemoryMap.entries[i] = virtMemoryMap[i] result = bootInfo \",\"Finally, we'll call these procs from EfiMainInner. We'll also get the maxPhysAddr (which is the highest usable physical address) and use it to calculate the number of physical memory pages.\",\"# src/boot/bootx64.nim ... proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # ======= NO MORE UEFI BOOT SERVICES ======= let physMemoryMap = convertUefiMemoryMap(memoryMap, memoryMapSize, memoryMapDescriptorSize) # get max free physical memory address var maxPhysAddr: PhysAddr for i in 0 ..< physMemoryMap.len: if physMemoryMap[i].type == Free: maxPhysAddr = physMemoryMap[i].start.PhysAddr +! physMemoryMap[i].nframes * PageSize let physMemoryPages: uint64 = maxPhysAddr.uint64 div PageSize let virtMemoryMap = createVirtualMemoryMap(kernelImagePages, physMemoryPages) debugln &\\\"boot: Preparing BootInfo\\\" let bootInfo = createBootInfo( bootInfoBase, kernelImagePages, physMemoryPages, physMemoryMap, virtMemoryMap, ) \"]},\"181\":{\"h\":\"Bootloader paging setup\",\"t\":[\"We know we need to map the kernel to the higher half. But since we're going to be changing the paging structures in the bootloader, we'll need to identity-map the bootloader image itself. The reason is that the bootloader code is currently running from the bootloader image, which is mapped to the lower half of the address space. If we change the page tables, the bootloader code will no longer be accessible, and we'll get a page fault. Here's a list of things we need to map:\",\"The bootloader image (identity-mapped)\",\"The boot info structure\",\"The kernel image\",\"The kernel stack\",\"All physical memory\",\"We'll create a new page table structure and map all of the above regions (including physical memory), and install it before jumping to the kernel. Let's create a new proc to do the mapping.\",\"# src/boot/bootx64.nim ... import kernel/pmm import kernel/vmm ... type AlignedPage = object data {.align(PageSize).}: array[PageSize, uint8] proc createPageTable( bootloaderBase: uint64, bootloaderPages: uint64, kernelImageBase: uint64, kernelImagePages: uint64, kernelStackBase: uint64, kernelStackPages: uint64, bootInfoBase: uint64, bootInfoPages: uint64, physMemoryPages: uint64, ): ptr PML4Table = proc bootAlloc(nframes: uint64): Option[PhysAddr] = result = some(cast[PhysAddr](new AlignedPage)) # initialize vmm using identity-mapped physical memory vmInit(physMemoryVirtualBase = 0'u64, physAlloc = bootAlloc) debugln &\\\"boot: Creating new page tables\\\" var pml4 = cast[ptr PML4Table](bootAlloc(1).get) # identity-map bootloader image debugln &\\\"\\\"\\\"boot: {\\\"Identity-mapping bootloader\\\\:\\\":<30} base={bootloaderBase:#010x}, pages={bootloaderPages}\\\"\\\"\\\" identityMapRegion(pml4, bootloaderBase.PhysAddr, bootloaderPages.uint64, paReadWrite, pmSupervisor) # identity-map boot info debugln &\\\"\\\"\\\"boot: {\\\"Identity-mapping BootInfo\\\\:\\\":<30} base={bootInfoBase:#010x}, pages={bootInfoPages}\\\"\\\"\\\" identityMapRegion(pml4, bootInfoBase.PhysAddr, bootInfoPages, paReadWrite, pmSupervisor) # map kernel to higher half debugln &\\\"\\\"\\\"boot: {\\\"Mapping kernel to higher half\\\\:\\\":<30} base={KernelVirtualBase:#010x}, pages={kernelImagePages}\\\"\\\"\\\" mapRegion(pml4, KernelVirtualBase.VirtAddr, kernelImageBase.PhysAddr, kernelImagePages, paReadWrite, pmSupervisor) # map kernel stack debugln &\\\"\\\"\\\"boot: {\\\"Mapping kernel stack\\\\:\\\":<30} base={KernelStackVirtualBase:#010x}, pages={kernelStackPages}\\\"\\\"\\\" mapRegion(pml4, KernelStackVirtualBase.VirtAddr, kernelStackBase.PhysAddr, kernelStackPages, paReadWrite, pmSupervisor) # map all physical memory; assume 128 MiB of physical memory debugln &\\\"\\\"\\\"boot: {\\\"Mapping physical memory\\\\:\\\":<30} base={PhysicalMemoryVirtualBase:#010x}, pages={physMemoryPages}\\\"\\\"\\\" mapRegion(pml4, PhysicalMemoryVirtualBase.VirtAddr, 0.PhysAddr, physMemoryPages, paReadWrite, pmSupervisor) result = pml4 \",\"Notice the AlignedPage type and the inner proc bootAlloc. This is a temporary proc that we'll use to allow the VMM to allocate physical memory for the page tables (the pages must be aligned to 4 KiB, hence the AlignedPage type). It works because the UEFI environment is identity-mapped, so allocating using the new operator will return an address of a page that we can use for the page tables. In the kernel, we'll rely on the physical memory manager to allocate physical memory for the page tables.\",\"Now, let's put everything together in EfiMainInner. Notice that we added an assembly instruction to load the new page tables into the cr3 register. This is the register that holds the physical address of the PML4 table.\",\"# src/boot/bootx64.nim ... proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... let physMemoryMap = convertUefiMemoryMap(memoryMap, memoryMapSize, memoryMapDescriptorSize) # get max free physical memory address var maxPhysAddr: PhysAddr for i in 0 ..< physMemoryMap.len: if physMemoryMap[i].type == Free: maxPhysAddr = physMemoryMap[i].start.PhysAddr +! physMemoryMap[i].nframes * PageSize let physMemoryPages: uint64 = maxPhysAddr.uint64 div PageSize let virtMemoryMap = createVirtualMemoryMap(kernelImagePages, physMemoryPages) debugln &\\\"boot: Preparing BootInfo\\\" let bootInfo = createBootInfo( bootInfoBase, kernelImagePages, physMemoryPages, physMemoryMap, virtMemoryMap, ) let bootloaderPages = (loadedImage.imageSize.uint + 0xFFF) div 0x1000.uint let pml4 = createPageTable( cast[uint64](loadedImage.imageBase), bootloaderPages, cast[uint64](kernelImageBase), kernelImagePages, kernelStackBase, kernelStackPages, bootInfoBase, 1, # bootInfoPages physMemoryPages, ) # jump to kernel let kernelStackTop = KernelStackVirtualBase + KernelStackSize let cr3 = cast[uint64](pml4) debugln &\\\"boot: Jumping to kernel at {cast[uint64](KernelVirtualBase):#010x}\\\" asm \\\"\\\"\\\" mov rdi, %0 # bootInfo mov cr3, %2 # PML4 mov rsp, %1 # kernel stack top jmp %3 # kernel entry point : : \\\"r\\\"(`bootInfoBase`), \\\"r\\\"(`kernelStackTop`), \\\"r\\\"(`cr3`), \\\"r\\\"(`KernelVirtualBase`) \\\"\\\"\\\" # we should never get here quit() \"]},\"182\":{\"h\":\"Initializing the PMM and VMM\",\"t\":[\"Now that physical memory is not identity-mapped anymore, we need to update the PMM to know about the new virtual address of physical memory. To access a PMNode as a physical address, we subtract the physical memory virtual base address from the pointer. To access a physical address as a PMNode, we add the physical memory virtual base address to the address.\",\"# src/kernel/pmm.nim var head: ptr PMNode maxPhysAddr: PhysAddr # exclusive physicalMemoryVirtualBase: uint64 reservedRegions: seq[PMRegion] proc pmInit*(physMemoryVirtualBase: uint64, memoryMap: MemoryMap) = physicalMemoryVirtualBase = physMemoryVirtualBase ... proc toPhysAddr(p: ptr PMNode): PhysAddr {.inline.} = result = PhysAddr(cast[uint64](p) - physicalMemoryVirtualBase) proc toPMNodePtr(p: PhysAddr): ptr PMNode {.inline.} = result = cast[ptr PMNode](cast[uint64](p) + physicalMemoryVirtualBase) \",\"The VMM already takes a parameter for the physical memory virtual base (in the bootloader we set it to 0, since physical memory is identity-mapped there). We just need to pass it from the kernel. Let's initialize both the PMM and the VMM with this parameter.\",\"# src/kernel/main.nim proc KernelMainInner(bootInfo: ptr BootInfo) = debugln \\\"\\\" debugln \\\"kernel: Fusion Kernel\\\" debug \\\"kernel: Initializing physical memory manager \\\" pmInit(bootInfo.physicalMemoryVirtualBase, bootInfo.physicalMemoryMap) debugln \\\"[success]\\\" debug \\\"kernel: Initializing virtual memory manager \\\" vmInit(bootInfo.physicalMemoryVirtualBase, pmm.pmAlloc) debugln \\\"[success]\\\" \",\"Let's try to compile and run the kernel. We should see the following output:\",\"kernel: Fusion Kernel kernel: Initializing physical memory manager [success] kernel: Initializing virtual memory manager [success] \",\"Looks good.\"]},\"183\":{\"h\":\"Print memory maps\",\"t\":[\"Let's add a couple of procs to print the physical and virtual memory maps.\",\"# src/kernel/main.nim ... proc printFreeRegions() = debug &\\\"\\\"\\\" {\\\"Start\\\":>16}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"Start (KB)\\\":>12}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"Size (KB)\\\":>11}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"#Pages\\\":>9}\\\"\\\"\\\" debugln \\\"\\\" var totalFreePages: uint64 = 0 for (start, nframes) in pmFreeRegions(): debug &\\\" {cast[uint64](start):>#16x}\\\" debug &\\\" {cast[uint64](start) div 1024:>#12}\\\" debug &\\\" {nframes * 4:>#11}\\\" debug &\\\" {nframes:>#9}\\\" debugln \\\"\\\" totalFreePages += nframes debugln &\\\"kernel: Total free: {totalFreePages * 4} KiB ({totalFreePages * 4 div 1024} MiB)\\\" proc printVMRegions(memoryMap: MemoryMap) = debug &\\\"\\\"\\\" {\\\"Start\\\":>20}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"Type\\\":12}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"VM Size (KB)\\\":>12}\\\"\\\"\\\" debug &\\\"\\\"\\\" {\\\"#Pages\\\":>9}\\\"\\\"\\\" debugln \\\"\\\" for i in 0 ..< memoryMap.len: let entry = memoryMap.entries[i] debug &\\\" {entry.start:>#20x}\\\" debug &\\\" {entry.type:#12}\\\" debug &\\\" {entry.nframes * 4:>#12}\\\" debug &\\\" {entry.nframes:>#9}\\\" debugln \\\"\\\" ... proc KernelMainInner(bootInfo: ptr BootInfo) = debugln \\\"\\\" debugln \\\"kernel: Fusion Kernel\\\" debug \\\"kernel: Initializing physical memory manager \\\" pmInit(bootInfo.physicalMemoryVirtualBase, bootInfo.physicalMemoryMap) debugln \\\"[success]\\\" debug \\\"kernel: Initializing virtual memory manager \\\" vmInit(bootInfo.physicalMemoryVirtualBase, pmm.pmAlloc) debugln \\\"[success]\\\" debugln \\\"kernel: Physical memory free regions \\\" printFreeRegions() debugln \\\"kernel: Virtual memory regions \\\" printVMRegions(bootInfo.virtualMemoryMap) ... \",\"Let's compile and run the kernel. If everything goes well, we should see the following output:\",\"kernel: Fusion Kernel kernel: Initializing physical memory manager [success] kernel: Initializing virtual memory manager [success] kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x0 0 640 160 0x222000 2184 6008 1502 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 90276 22569 0x6235000 100564 1248 312 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 123224 KiB (120 MiB) kernel: Virtual memory regions Start Type VM Size (KB) #Pages 0xffff800000100000 KernelCode 1160 290 0xffff800100000000 KernelStack 16 4 0xffff800100004000 KernelData 4 1 0xffff800200000000 KernelData 130000 32500 \",\"Great! Our kernel is now running at the higher half of the address space. This is another big milestone.\",\"There are many things we can tackle next, but one important thing we need to take care of before we add more code is handling CPU exceptions. The reason is that sooner or later our kernel will crash, and we won't know why. Handling CPU exceptions gives us a way to print a debug message and halt the CPU, so we can see what went wrong.\",\"But before we can do that, we need to set up the Global Descriptor Table (GDT), which we'll look at in the next section.\"]},\"184\":{\"h\":\"Memory Segments\",\"t\":[\"In the x86 architecture (including x86_64), all memory access is subject to segmentation. Even though in 64-bit mode segment boundaries are ignored (they're all set to the full 64-bit address space), we still need a number of them to differentiate between code and data access, and between kernel mode and user mode privileges. This is done through the Global Descriptor Table (GDT), which is a table of segment descriptors that the CPU uses to determine the access rights of memory accesses.\"]},\"185\":{\"h\":\"Segment Descriptors\",\"t\":[\"Segments are basically regions of memory with certain properties, including their base address and size, whether they hold code or data, whether they're writable (for data segments) or readable (for code segments), whether they're accessible from user mode or kernel mode, and a few other things. This technique of managing memory is called segmentation, which offered a flexible way to allocate regions of memory in a protected manner. It's no longer used in modern operating systems as they tend to use paging only for memory management and protection. It is, however, still used by modern CPUs in a limited way. In x86-64, all segments assume a flat memory model, which means that each segment occupies the entire 64-bit address space. The most important features of segments for our purpose are two things:\",\"Their privilege level, which determines whether they're accessible from user mode or kernel mode.\",\"Their type, which determines whether they're code or data segments. (There's also a third type called a system segment, which we'll come back to later.)\",\"This gives us four possible combinations:\",\"Kernel code segment\",\"Kernel data segment\",\"User code segment\",\"User data segment\",\"However, even though we'll need two code segments, we can use only one data segment for both kernel and user mode (I explain below, under Segment Selectors, why this is the case). So we'll end up with only three segments.\",\"All three segments will have the same base address (0) and the same size (the entire 64-bit address space). The only difference between them will be their privilege level and type. We'll need to define a segment descriptor for each of them. A segment descriptor is a 64-bit value that contains all the information about the segment. Here's a diagram of the segment descriptor format:\",\" 31 24 23 22 21 20 19 16 15 14 13 12 11 08 07 00 ┌───────────────────────┬──┬──┬──┬──┬───────────┬──┬─────┬──┬───────────┬───────────────────────┐ │ Base Address │G │D │L │A │ Limit │P │ DPL │S │ Type │ Base Address │ │ [31:24] │ │/ │ │V │ [19:16] │ │ │ │ │ [23:16] │ 4 │ │ │B │ │L │ │ │ │ │ │ │ └───────────────────────┴──┴──┴──┴──┴───────────┴──┴─────┴──┴───────────┴───────────────────────┘ 31 16 15 00 ┌───────────────────────────────────────────────┬───────────────────────────────────────────────┐ │ Base Address │ Limit │ 0 │ [15:00] │ [15:00] │ └───────────────────────────────────────────────┴───────────────────────────────────────────────┘ Base Segment base address Limit Segment Limit Type Segment type S Descriptor type (0 = system; 1 = code or data) DPL Descriptor privilege level P Segment present AVL Available for use by system software (unused by the CPU) L 64-bit code segment (IA-32e mode only) D/B Default operation size (0 = 16-bit segment; 1 = 32-bit segment) G Granularity \",\"The meaning of these fields is quite involved, they're described in detail in the Intel Software Developer's Manual, section 3.2. I'm going to go over them here briefly, but I recommend reading the manual for more details.\",\"Base Address\",\"Since we're using a flat memory model, the base address is always 0.\",\"Limit\",\"This is the last valid offset in the segment. In long mode (64-bit), the processor does not perform segment limit checks, so this field is ignored.\",\"Type\",\"This determines whether the segment is a code segment or a data segment. It has the following subfields:\",\"Bit 11: 0 for data segments, 1 for code segments.\",\"Bit 10: \",\"For code segments: C - Conforming. If set, code in this segment can be executed from a lower privilege level (under the current privilege level). If clear, code in this segment can only be executed from the same privilege level.\",\"For data segments: E - Expand down. If set, the segment grows down, otherwise it grows up. This is used for stacks.\",\"Bit 9: \",\"For code segments: R - Readable. If set, read access for this segment is allowed. Note that code doesn't need to be readable to be executable.\",\"For data segments: W - Writable. If set, write access for this segment is allowed.\",\"Bit 8: A - Accessed. This is set by the CPU when the segment is accessed. The OS can use this to keep track of which segments are used and which aren't.\",\"S\",\"This determines whether the segment is a system segment or a code or data segment. It's set for code and data segments. It's clear for system segments, which are used for special purposes, such as task state segments (we'll cover this later when we implement multitasking).\",\"DPL\",\"This is the privilege level required to access the segment. It's a 2-bit field, so it can have one of four values: 0, 1, 2, or 3. DPL 0 is the most privileged level, under which the kernel runs. DPL 3 is the least privileged level, under which user programs run.\",\"P\",\"This determines whether the segment is present in memory. If it's clear, the CPU will raise an exception when the segment is accessed.\",\"AVL\",\"This is available for use by the OS. The CPU doesn't use it.\",\"L\",\"This determines whether the segment is a 64-bit code segment. If not set, the code segment will be executed in compatibility mode, which is 32-bit mode.\",\"D/B\",\"This determines the default operand size for the segment. It must be set to zero for 64-bit code segments (i.e., when L is set).\",\"G\",\"This determines the granularity of the segment limit. If clear, the limit is interpreted as the number of bytes. If set, the limit is interpreted as the number of 4 KiB pages.\"]},\"186\":{\"h\":\"Segment Selectors\",\"t\":[\"Accessing a segment happens through a segment selector, which is a 16-bit value loaded into a segment register (CS, DS, ES, FS, GS, SS) containing the offset of a particular segment descriptor in the GDT. Only 13 bits are used to store the offset. The remaining 3 bits are used to store two things: the RPL (Requestor Privilege Level) and the TI (Table Indicator). Here's a diagram of the segment selector format:\",\" 15 03 02 01 00 ┌──────────────────────────────────────┬──┬─────┐ │ Index │TI│ RPL │ └──────────────────────────────────────┴──┴─────┘ \",\"The TI is a 1-bit field that indicates whether the segment selector is a GDT selector (TI = 0) or an LDT (Local Descriptor Table) selector (TI = 1). We'll only be using the GDT, so TI will always be 0.\",\"The RPL is a 2-bit field that stores the request privilege level of a segment selector (not a descriptor). It's a way to override the CPL (Current Privilege Level) of the currently running code. The effective privilege level is max(CPL, RPL), which is checked against the DPL of the target segment, and access is only allowed if the effective privilege level is numerically equal to or less than the DPL of the target segment. This means that RPL in user mode has no effect (since CPL is 3, so RPL doesn't matter). In kernel mode, the kernel has access to all segments (since its CPL is 0). A higher RPL can be used by the kernel to ensure that privileged code does not access a segment on behalf of an application program unless the program itself has access privileges for that segment.\",\"For the purpose of our kernel, we'll use a single data segment with DPL=3 and selector with RPL=3 for both kernel and user mode. The data segment will be subject to the following access checks:\",\"Kernel mode: max(CPL = 0, RPL = 3) = 3, DPL = 3 ==> access allowed\",\"User mode: max(CPL = 3, RPL = 3) = 3, DPL = 3 ==> access allowed\",\"Protection of kernel memory will be done through paging, not segmentation. As a nice side effect, we don't have to save and restore the data segment registers when switching between kernel mode and user mode.\",\"One exception to the access checks done on segment registers is the stack segment register SS. The Intel manual says:\",\"5.7 PRIVILEGE LEVEL CHECKING WHEN LOADING THE SS REGISTER\",\"Privilege level checking also occurs when the SS register is loaded with the segment selector for a stack segment. Here all privilege levels related to the stack segment must match the CPL; that is, the CPL, the RPL of the stack-segment selector, and the DPL of the stack-segment descriptor must be the same. If the RPL and DPL are not equal to the CPL, a general-protection exception (#GP) is generated.\",\"So our strategy to use a single data segment for both kernel and user mode sounds like it may not work for the stack segment. However, the manual mentions this about stack switching in long mode:\",\"6.14.4 Stack Switching in IA-32e Mode\",\"... When stacks are switched as part of a 64-bit mode privilege-level change (resulting from an interrupt), a new SS descriptor is not loaded. IA-32e mode loads only an inner-level RSP from the TSS. The new SS selector is forced to NULL and the SS selector’s RPL field is set to the new CPL. [...] The old SS and RSP are saved on the new stack (Figure 6-9). On the subsequent IRET, the old SS is popped from the stack and loaded into the SS register.\",\"So if I understand this correctly, we can use a NULL SS selector for the kernel. When we switch to user mode we'll set SS to the data segment selector (where CPL = RPL = DPL = 3), and upon switching to kernel mode, the CPU will force SS to NULL again, saving the user mode SS on the kernel stack (to be popped later by IRET).\"]},\"187\":{\"h\":\"Global Descriptor Table\",\"t\":[\"When we want to use a new segment, we need to create a segment descriptor for it and store it in the GDT. The GDT is stored in memory, and we tell the CPU where it is by loading its address into a special register called the GDTR. The GDTR contains the base address (64-bit address) of the GDT and its limit (16-bit value representing the last valid offset in the GDT).\",\"As I mentioned above, we'll need three segments: a kernel code segment, a user code segment, and a shared data segment. We also need a null segment, which is a segment with all fields set to zero. The null segment needs to be the first segment in the GDT.\",\"Here's a diagram illustrating the layout of the GDT and the GDTR. Technically, the order of the segments doesn't matter (except for the null segment, which must be the first one), but I chose this order in particular because it will make setting up system calls easier later.\",\" GDT offset segment descriptor ┌───────────────────────────┐ ◄──┐ 0x18 │ User Code Segment │ │ ├───────────────────────────┤ │ 0x10 │ Data Segment (shared) │ │ ├───────────────────────────┤ ├── GDTR Limit 0x08 │ Kernel Code Segment │ │ ├───────────────────────────┤ │ 0x00 │ Null Segment │ │ └───────────────────────────┘ ◄──┴── GDTR Base ▲ │ segment selector │········┐ ·······┐ ·······┐ ·······┐ ·······┐ ┌──┴───┐ ┌──┴───┐ ┌──┴───┐ ┌──┴───┐ ┌──┴───┐ ┌──┴───┐ │ CS │ │ DS │ │ ES │ │ FS │ │ GS │ │ SS │ ◄── segment registers └──────┘ └──────┘ └──────┘ └──────┘ └──────┘ └──────┘ \",\"The diagram also shows the segment registers, which store the segment selector (i.e. offset) of the currently active segment descriptor for that register. For example, when executing in user mode, the CS register will contain the user code segment selector 0x18, and the DS register will contain the data segment selector 0x10. If the CPU is interrupted, or the user program makes a system call, the CPU will switch to kernel mode, and the CS register will be updated to the kernel code segment selector 0x08 (the data segment selector will remain the same, 0x10, when entering the kernel).\",\"Enough theory, let's define the types for the segment descriptors and the GDT in a new file src/kernel/gdt.nim. I'm defining three types (not instances) for the segment descriptors: CodeSegmentDescriptor, DataSegmentDescriptor, and SegmentDescriptorValue. I use the latter mainly use for the null segment descriptor constant NullSegmentDescriptor.\",\"# src/kernel/gdt.nim type CodeSegmentDescriptor* {.packed.} = object limit00: uint16 = 0xffff base00: uint16 = 0 base16: uint8 = 0 code {.bitsize: 1.}: uint8 = 1 conforming* {.bitsize: 1.}: uint8 = 0 readable* {.bitsize: 1.}: uint8 = 1 accessed* {.bitsize: 1.}: uint8 = 0 s {.bitsize: 1.}: uint8 = 1 dpl* {.bitsize: 2.}: uint8 p* {.bitsize: 1.}: uint8 = 1 limit16 {.bitsize: 4.}: uint8 = 0xf avl* {.bitsize: 1.}: uint8 = 0 l {.bitsize: 1.}: uint8 = 1 d {.bitsize: 1.}: uint8 = 0 g {.bitsize: 1.}: uint8 = 0 base24: uint8 = 0 DataSegmentDescriptor* {.packed.} = object limit00: uint16 = 0xffff base00: uint16 = 0 base16: uint8 = 0 code {.bitsize: 1.}: uint8 = 0 expandDown* {.bitsize: 1.}: uint8 = 0 writable* {.bitsize: 1.}: uint8 = 1 accessed* {.bitsize: 1.}: uint8 = 0 s {.bitsize: 1.}: uint8 = 1 dpl* {.bitsize: 2.}: uint8 p* {.bitsize: 1.}: uint8 = 1 limit16 {.bitsize: 4.}: uint8 = 0xf avl* {.bitsize: 1.}: uint8 = 0 l {.bitsize: 1.}: uint8 = 0 b {.bitsize: 1.}: uint8 = 0 g {.bitsize: 1.}: uint8 = 0 base24: uint8 = 0 SegmentDescriptorValue = distinct uint32 SegmentDescriptor = CodeSegmentDescriptor | DataSegmentDescriptor | SegmentDescriptorValue GdtDescriptor* {.packed.} = object limit*: uint16 base*: pointer const NullSegmentDescriptor* = SegmentDescriptorValue(0) \",\"We will almost never need to change the default values for the segment descriptors, which makes creating them simple: we only need to set the dpl field to the desired privilege level.\",\"Since we need to store the segment descriptors in an array, they all need to be of the same type. Unfortunately we can't use a variant object for this, because it introduces a kind field that shouldn't be part of the segment descriptor. Also, we can't use the union type SegmentDescriptor declared above, because it's not a true union type (in the C sense); an array cannot hold mixed types of this union type. The simplest solution is to let the array hold simple uint64 values representing the segment descriptors. We can then define a proc to convert a segment descriptor object to a uint64 value:\",\"# src/kernel/gdt.nim proc value*(sd: SegmentDescriptor): uint64 = result = cast[uint64](sd) \",\"Then we can define the GDT as follows:\",\"# src/kernel/gdt.nim const KernelCodeSegmentSelector* = 0x08 DataSegmentSelector* = 0x10 or 3 # RPL = 3 UserCodeSegmentSelector* = 0x18 or 3 # RPL = 3 let gdtEntries = [ NullSegmentDescriptor.value, CodeSegmentDescriptor(dpl: 0).value, # Kernel code segment DataSegmentDescriptor(dpl: 3).value, # Data segment (shared) CodeSegmentDescriptor(dpl: 3).value, # User code segment ] \",\"Now we can define the GDT descriptor type and a single instance of it:\",\"# src/kernel/gdt.nim type GdtDescriptor* {.packed.} = object limit*: uint16 base*: pointer let gdtDescriptor = GdtDescriptor( limit: sizeof(gdtEntries) - 1, base: gdtEntries.addr ) \"]},\"188\":{\"h\":\"Loading the GDT\",\"t\":[\"Finally, we can now define an gdtInit proc that loads the GDT descriptor into the GDTR register using the lgdt instruction. We'll also load the segment selectors for the kernel code and data segments into the segment registers.\",\"# src/kernel/gdt.nim proc gdtInit*() {.asmNoStackFrame.} = # Ideally we would use a far jump here to reload the CS register, but support # for 64-bit far jumps (`JMP m16:64`) is not supported by the LLVM integrated # assembler. It's also only supported by Intel processors, not AMD. So we use # a far return instead. asm \\\"\\\"\\\" lgdt %0 # reload CS using a far return lea rax, [rip + 1f] push %1 # cs push rax # rip retfq 1: # reload data segment registers mov rax, %2 mov ds, rax mov es, rax mov fs, rax mov gs, rax # set SS to NULL xor rax, rax mov ss, rax : : \\\"m\\\"(`gdtDescriptor`), \\\"i\\\"(`KernelCodeSegmentSelector`), \\\"i\\\"(`DataSegmentSelector`) : \\\"rax\\\" \\\"\\\"\\\" \",\"The comment explains why we're using a far return instead of a far jump. The retfq instruction is a far return, which pops the instruction pointer and the code segment selector from the stack and jumps to the 1: label. It's as if the CPU continued execution right after the retfq instruction, but with the new code segment selector. The rest of the code reloads the other segment registers with the data segment selector. (The last : constraint tell the compiler that the asm block clobbers the rax register.)\",\"Now we're ready to call gdtInit from src/kernel/main.nim:\",\"# src/kernel/main.nim import gdt ... proc KernelMainInner(bootInfo: ptr BootInfo) = debugln \\\"\\\" debugln \\\"kernel: Fusion Kernel\\\" ... debug \\\"kernel: Initializing GDT \\\" gdtInit() debugln \\\"[success]\\\" quit() \",\"Let's compile and run.\",\"boot: Preparing BootInfo boot: Creating new page tables boot: Identity-mapping bootloader: base=0x06237000, pages=290 boot: Identity-mapping BootInfo: base=0x0636d000, pages=1 boot: Mapping kernel to higher half: base=0xffff800000100000, pages=288 boot: Mapping kernel stack: base=0xffff800100000000, pages=4 boot: Mapping physical memory: base=0xffff800200000000, pages=32500 boot: Jumping to kernel at 0xffff800000100000 kernel: Fusion Kernel kernel: Initializing physical memory manager [success] kernel: Physical memory free regions Start Start (KB) Size (KB) #Pages 0x0 0 640 160 0x220000 2176 6016 1504 0x808000 8224 12 3 0x80c000 8240 16 4 0x900000 9216 92596 23149 0x6372000 101832 17900 4475 0x77ff000 122876 7124 1781 kernel: Total free: 124304 KiB (121 MiB) kernel: Virtual memory regions Start Type VM Size (KB) #Pages 0xffff800000100000 KernelCode 1152 288 0xffff800100000000 KernelStack 16 4 0xffff800100004000 KernelData 4 1 0xffff800200000000 KernelData 130000 32500 kernel: Initializing GDT [success] \",\"Phew! We have a working GDT. Let's double-check the CPU registers using the QEMU monitor command info registers (I temporarily replaced the -debugcon stdio flag with the -monitor stdio flag in the justfile to make it easier to access the QEMU monitor through the terminal):\",\"QEMU 8.2.0 monitor - type 'help' for more information (qemu) info registers CPU#0 RAX=ffff800000114d80 RBX=0000000000000000 RCX=ffff800100003f10 RDX=ffff800100003f58 RSI=000000000000000a RDI=0000000000000000 RBP=ffff800100003f48 RSP=ffff800100003f00 R8 =ffff800100003c10 R9 =0000000007ea5e48 R10=000000000636d001 R11=0000000000000004 R12=0000000000000000 R13=0000000006bb1588 R14=0000000000000000 R15=0000000007ebf1e0 RIP=ffff800000114d82 RFL=00000006 [-----P-] CPL=0 II=0 A20=1 SMM=0 HLT=1 ES =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] CS =0008 0000000000000000 000fffff 002f9a00 DPL=0 CS64 [-R-] SS =0000 0000000000000000 00000000 00000000 DS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] FS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] GS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] LDT=0000 0000000000000000 0000ffff 00008200 DPL=0 LDT TR =0000 0000000000000000 0000ffff 00008b00 DPL=0 TSS64-busy GDT= ffff80000021ebe0 0000001f IDT= ffff80000021ec00 00000fff CR0=80010033 CR2=0000000000000000 CR3=000000000625b000 CR4=00000668 DR0=0000000000000000 DR1=0000000000000000 DR2=0000000000000000 DR3=0000000000000000 DR6=00000000ffff0ff0 DR7=0000000000000400 EFER=0000000000000d00 FCW=037f FSW=0000 [ST=0] FTW=00 MXCSR=00001f80 FPR0=0000000000000000 0000 FPR1=0000000000000000 0000 FPR2=0000000000000000 0000 FPR3=0000000000000000 0000 FPR4=0000000000000000 0000 FPR5=0000000000000000 0000 FPR6=0000000000000000 0000 FPR7=0000000000000000 0000 XMM00=00000000062552f8 0000000000000018 XMM01=0000000000000000 0000000000000000 XMM02=0000000000000000 0000000000000000 XMM03=0000000000000000 0000000000000000 XMM04=0000000000000000 0000000000000000 XMM05=0000000000000000 0000000000000000 XMM06=0000000000000000 0000000000000000 XMM07=0000000000000000 0000000000000000 XMM08=0000000000000000 0000000000000000 XMM09=0000000000000000 0000000000000000 XMM10=0000000000000000 0000000000000000 XMM11=0000000000000000 0000000000000000 XMM12=0000000000000000 0000000000000000 XMM13=0000000000000000 0000000000000000 XMM14=0000000000000000 0000000000000000 XMM15=0000000000000000 0000000000000000 (qemu) \",\"This looks good. The CS register contains the kernel code segment selector 0x08, and its DPL=0.The other segment registers contain the data segment selector 0x13 (i.e. offset 0x10 | RPL 0x3), and their DPL=3. The SS is set to NULL as expected. The GDT register seems to contain the address of the GDT descriptor (the address seems legit), and the limit is 0x1f, which is the size of the GDT in bytes minus 1 (4 entries * 8 bytes per entry - 1).\",\"For now, we'll be using only the kernel code and data segments. We'll come back to the user code segments when we implement user mode. We'll also come back to the GDT when we implement multitasking, because we'll need to add a new segment descriptor for the task state segment (TSS), which is required by the CPU when switching from user mode to kernel mode (e.g. when making a system call or when an interrupt occurs).\",\"We'll now move to implementing the interrupt descriptor table (IDT) to handle CPU exceptions (and later hardware and software interrupts).\"]},\"189\":{\"h\":\"Interrupts\",\"t\":[\"When the CPU encounters an error, e.g. a division by zero or a page fault, it will raise an exception, which is a kind of interrupt. The CPU consults a table, called the Interrupt Descriptor Table (IDT), to find the address of the exception handler. The IDT is a table of 256 entries, not all of which are used. Each entry contains the address of an interrupt handler, which is a function in the kernel that handles the interrupt. Intel reserves the first 32 entries for CPU exceptions, which is what we'll focus on in this section. The remaining entries are for hardware or software interrupts, which we'll cover in a later section.\"]},\"190\":{\"h\":\"Interrupt Descriptors\",\"t\":[\"The IDT is an array of 256 entries, each is a 16-byte descriptor (in 64-bit mode). The index (not the offset) of a descriptor in the IDT is called an interrupt vector. Each descriptor points to an interrupt handler, which is a function in the kernel that handles that particular interrupt vector. During an interrupt, the interrupt vector is delivered to the CPU, which uses it as an index into the IDT to find the corresponding interrupt handler.\",\"For example, the interrupt vector for a page fault is 14, so when a page fault occurs, the CPU will look at the 14th entry in the IDT to find the page fault handler. Another example is when a device is configured to use a particular interrupt vector, then when the device raises an interrupt, it places that vector on the bus, and the CPU will use it to find the interrupt handler in the IDT.\",\"There are three types of descriptors in the IDT: task gates, interrupt gates, and trap gates. Task gates are used for hardware task switching, which is obsolete in 64-bit mode, so we'll focus only on interrupt gates and trap gates. The difference between the two is that interrupt gates disable interrupts when the handler is running, while trap gates do not.\",\"Here's a diagram of interrupt/trap gate descriptors:\",\" Interrupt/Trap Gate 31 00 ┌───────────────────────────────────────────────────────────────────────────────────────────────┐ │ Reserved │ 12 └───────────────────────────────────────────────────────────────────────────────────────────────┘ 31 00 ┌───────────────────────────────────────────────────────────────────────────────────────────────┐ │ Offset[63:32] │ 8 └───────────────────────────────────────────────────────────────────────────────────────────────┘ 31 16 15 14 13 12 11 08 07 04 03 02 00 ┌───────────────────────────────────────────────┬──┬─────┬──┬───────────┬────────┬──┬──┬────────┐ │ Offset[31:16] │P │ DPL │ 0│ Type │0 0 0 │0 │0 │ IST │ 4 └───────────────────────────────────────────────┴──┴─────┴──┴───────────┴────────┴──┴──┴────────┘ 31 16 15 00 ┌───────────────────────────────────────────────┬───────────────────────────────────────────────┐ │ Segment Selector │ Offset[15:00] │ 0 └───────────────────────────────────────────────┴───────────────────────────────────────────────┘ DPL Descriptor Privilege Level Offset Offset to procedure entry point P Segment Present flag Selector Segment Selector for destination code segment IST Interrupt Stack Table (index into IST in TSS) \",\"Some notes about the fields:\",\"The Segment Selector field is the segment selector for the destination code segment. Since all interrupt handlers are in the kernel, we'll set it to the kernel code segment selector.\",\"The IST field has to do with stack switching during an interrupt, which we'll cover in a later section. For now, we'll set it to 0.\",\"The Type field determines the type of interrupt gate. In 64-bit mode, there are two types of gates: interrupt gate (Type = 0b1110) and trap gate (Type = 0b1111).\",\"The DPL field determines the privilege level required to invoke the interrupt handler. It's checked only if an exception or interrupt is generated with an INT n, INT3, or INTO instruction. This is to prevent user programs from invoking privileged interrupt handlers, so we'll set it to 0.\",\"Let's create a new idt.nim module and define a type for interrupt gates. We'll also define a type for interrupt handlers, which is a procedure that takes a pointer to the interrupt stack frame as an argument.\",\"# src/kernel/idt.nim import gdt type InterruptGate {.packed.} = object offset00: uint16 selector: uint16 = KernelCodeSegmentSelector ist {.bitsize: 3.}: uint8 = 0 zero0 {.bitsize: 5.}: uint8 = 0 `type` {.bitsize: 4.}: uint8 = 0b1110 zero1 {.bitsize: 1.}: uint8 = 0 dpl {.bitsize: 2.}: uint8 = 0 present {.bitsize: 1.}: uint8 = 1 offset16: uint16 offset32: uint32 reserved: uint32 = 0 InterruptHandler = proc (frame: pointer) {.cdecl.} \",\"Let's also define a helper function to create a new interrupt gate given an interrupt handler.\",\"# src/kernel/idt.nim proc newInterruptGate(handler: InterruptHandler): InterruptGate = let offset = cast[uint64](handler) result = InterruptGate( offset00: uint16(offset), offset16: uint16(offset shr 16), offset32: uint32(offset shr 32), ) \",\"Now we can create the IDT. We'll use a Nim array to represent the IDT. We'll also define a type for the IDT descriptor and declare a single instance of it, which we'll use to load the IDT into the IDTR register later.\",\"# src/kernel/idt.nim ... type InterruptGate {.packed.} = object ... IdtDescriptor {.packed.} = object limit: uint16 base: pointer var idtEntries: array[256, InterruptGate] let idtDescriptor = IdtDescriptor( limit: sizeof(idtEntries) - 1, base: idtEntries.addr ) \"]},\"191\":{\"h\":\"Defining Interrupt Handlers\",\"t\":[\"Interrupt procedures are not normal procedures; there's a catch. When an interrupt handler is called, the CPU pushes some information onto the stack, called the interrupt stack frame. The handler must also return using the iretq instruction (as opposed to using ret), which pops the interrupt stack frame and returns to the interrupted program. Here's a diagram of the interrupt stack frame:\",\" Handler's Stack ├──────────────────┤ │ │ ├──────────────────┤ ◄──┐ ◄──┐ │ SS │ +40 │ │ ├──────────────────┤ │ │ │ RSP │ +32 │ │ ├──────────────────┤ │ Stack │ Stack │ RFLAGS │ +24 ├── Frame ├── Frame ├──────────────────┤ │ (no error code) │ (with error code) │ CS │ +16 │ │ ├──────────────────┤ │ │ │ RIP │ +8 │ │ ├──────────────────┤ ◄──┘ │ │ Error Code │ 0 │ ├──────────────────┤ ◄──┘ │ │ ├──────────────────┤ \",\"Notice that some CPU exceptions push an error code onto the stack. For others, the error code is not pushed. So we have to be careful when defining the different interrupt handlers.\",\"Given this information, we can't just define a normal procedure as an interrupt handler; we have to tell the compiler to generate it differently. Fortunately, the C compiler has a special attribute called interrupt that can be used to define interrupt handlers. It generates appropriate function entry/exit code so that it can be used directly as an interrupt service routine. We can use the codegenDecl pragma to add this attribute to our interrupt handler signature.\",\"Let's define a proof of concept interrupt handler that prints a debug message.\",\"# src/kernel/idt.nim ... proc isr100(frame: pointer) {.cdecl, codegenDecl: \\\"__attribute__ ((interrupt)) $# $#$#\\\".} = debugln \\\"Hello from isr100\\\" \",\"Let's install this handler in the IDT. We'll use the newInterruptGate helper function we defined earlier to create a new interrupt gate, and then we'll assign it to the appropriate entry in the IDT. We'll also load the IDT into the IDTR register using the lidt instruction.\",\"# src/kernel/idt.nim ... proc idtInit*() = idtEntries[100] = newInterruptGate(isr100) asm \\\"\\\"\\\" lidt %0 : : \\\"m\\\"(`idtDescriptor`) \\\"\\\"\\\" \",\"I installed the handler at interrupt vector 100. This is just an arbitrary choice for testing. Let's now test it out by raising an interrupt using the int instruction.\",\"# src/kernel/main.nim import idt ... proc KernelMainInner(bootInfo: ptr BootInfo) = debugln \\\"\\\" debugln \\\"kernel: Fusion Kernel\\\" ... debug \\\"kernel: Initializing GDT \\\" gdtInit() debugln \\\"[success]\\\" debug \\\"kernel: Initializing IDT \\\" idtInit() debugln \\\"[success]\\\" debugln \\\"kernel: Invoking interrupt\\\" asm \\\"int 100\\\" debugln \\\"kernel: Returned from interrupt\\\" quit() \",\"If we run the kernel now, we should see the debug message printed to the terminal.\",\"kernel: Fusion Kernel ... kernel: Initializing IDT [success] kernel: Invoking interrupt Hello from isr100 kernel: Returned from interrupt \",\"Great! We have a working interrupt handler. Now we're ready to define interrupt handlers for CPU exceptions.\"]},\"192\":{\"h\":\"Handling CPU Exceptions\",\"t\":[\"As mentioned earlier, Intel reserves the first 32 entries in the IDT for CPU exceptions. Not all 32 are used. Here's the list of CPU exceptions and interrupts as defined in the Intel manual:\",\"┌────────┬──────────┬─────────────────────────┬───────────┬───────┬────────────────────────────────────┐ │ Vector │ Mnemonic │ Description │ Type │ Error │ Source │ │ │ │ │ │ Code │ │ ├────────┼──────────┼─────────────────────────┼───────────┼───────┼────────────────────────────────────┤ │ 0 │ #DE │ Divide Error │ Fault │ No │ DIV and IDIV instructions. │ │ 1 │ #DB │ Debug Exception │ Fault / │ No │ Instruction, data, and I/O │ │ │ │ │ Trap │ │ breakpoints; single-step; and │ │ │ │ │ │ │ others. │ │ 2 │ - │ NMI Interrupt │ Interrupt │ No │ Nonmaskable external interrupt. │ │ 3 │ #BP │ Breakpoint │ Trap │ No │ INT3 instruction. │ │ 4 │ #OF │ Overflow │ Trap │ No │ INTO instruction. │ │ 5 │ #BR │ BOUND Range Exceeded │ Fault │ No │ BOUND instruction. │ │ 6 │ #UD │ Invalid Opcode │ Fault │ No │ UD instruction or reserved opcode. │ │ 7 │ #NM │ Device Not Available │ Fault │ No │ Floating-point or WAIT/FWAIT │ │ │ │ (No Math Coprocessor) │ │ │ instruction. │ │ 8 │ #DF │ Double Fault │ Abort │ Yes │ Any instruction that can generate │ │ │ │ │ │ (zero)│ an exception, an NMI, or an INTR. │ │ 9 │ - │ Coprocessor Segment │ Fault │ No │ Floating-point instruction. │ │ │ │ Overrun (reserved) │ │ │ │ │ 10 │ #TS │ Invalid TSS │ Fault │ Yes │ Task switch or TSS access. │ │ 11 │ #NP │ Segment Not Present │ Fault │ Yes │ Loading segment registers or │ │ │ │ │ │ │ accessing system segments. │ │ 12 │ #SS │ Stack-Segment Fault │ Fault │ Yes │ Stack operations and SS register │ │ │ │ │ │ │ loads. │ │ 13 │ #GP │ General Protection │ Fault │ Yes │ Any memory reference and other │ │ │ │ │ │ │ protection checks. │ │ 14 │ #PF │ Page Fault │ Fault │ Yes │ Any memory reference. │ │ 15 │ - │ (Intel reserved. Do not │ - │ No │ - │ │ │ │ use.) │ │ │ │ │ 16 │ #MF │ x87 FPU Floating-Point │ Fault │ No │ x87 FPU floating-point or WAIT/ │ │ │ │ Error (Math Fault) │ │ │ FWAIT instruction. │ │ 17 │ #AC │ Alignment Check │ Fault │ Yes │ Any data reference in memory. │ │ │ │ │ │ (zero)│ │ │ 18 │ #MC │ Machine Check │ Abort │ No │ Error codes (if any) and source │ │ │ │ │ │ │ are model dependent. │ │ 19 │ #XM │ SIMD Floating-Point │ Fault │ No │ SSE/SSE2/SSE3 floating-point │ │ │ │ Exception │ │ │ instructions. │ │ 20 │ #VE │ Virtualization Exception│ Fault │ No │ EPT violation │ │ 21 │ #CP │ Control Protection │ Fault │ Yes │ RET, IRET, RSTORSSP, and SETSSBSY │ │ │ │ Exception │ │ │ instructions. │ │ 22-31 │ - │ Intel Reserved. Do not │ - │ - │ - │ │ │ │ use. │ │ │ │ │ 32-255 │ - │ User Defined │ Interrupt │ - │ External interrupt or INT n │ │ │ │ │ │ │ instruction. │ └────────┴──────────┴─────────────────────────┴───────────┴───────┴────────────────────────────────────┘ \",\"The difference between Fault and Trap exceptions is that upon returning from a Fault, the CPU will re-execute the instruction that caused the fault (e.g. a page fault handler may allocate the missing page and then return to the instruction that caused the page fault, with no loss of continuity). On the other hand, upon returning from a Trap, the CPU will continue execution from the next instruction (e.g. a breakpoint trap handler may print a debug message and then return to the next instruction). Abort exceptions are not recoverable, and usually indicate severe errors, such as hardware errors.\",\"Let's start by defining an exception handler for the divide error exception. Because this exception is a Fault, it will be retried indefinitely by the CPU. To avoid an infinite loop, we'll just print a debug message (and the stack trace) and then quit the kernel.\",\"# src/kernel/idt.nim proc cpuDivideErrorHandler(frame: pointer) {.cdecl, codegenDecl: \\\"__attribute__ ((interrupt)) $# $#$#\\\".} = debugln \\\"CPU Exception: Divide Error [#DE]\\\" debugln \\\"\\\" debugln getStackTrace() quit() \",\"We'll also define a helper function to install the handler in the IDT.\",\"# src/kernel/idt.nim proc installHandler(vector: uint8, handler: InterruptHandler) = idtEntries[vector] = newInterruptGate(handler) \",\"Now we can install the handler in the IDT.\",\"# src/kernel/idt.nim proc idtInit*() = installHandler(0, cpuDivideErrorHandler) ... \",\"Let's try it out by raising a divide error exception.\",\"# src/kernel/main.nim import idt proc KernelMainInner(bootInfo: ptr BootInfo) = ... debugln \\\"kernel: Invoking interrupt\\\" asm \\\"\\\"\\\" # Divide by zero xor rcx, rcx idiv rcx \\\"\\\"\\\" debugln \\\"kernel: Returned from interrupt\\\" ... \",\"When we run the kernel, we should see the debug message and the stack trace printed to the terminal.\",\"kernel: Fusion Kernel ... kernel: Initializing IDT [success] kernel: Invoking interrupt CPU Exception: Divide Error Traceback (most recent call last) /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(58) KernelMain /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(87) KernelMainInner /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(68) cpuDivideErrorHandler \",\"Great! Our exception handler is working, and we can see the stack trace (since the interrupt is using the same stack). Now we can define handlers for the remaining CPU exceptions. But it would be tedious to write almost the same code for each handler. So let's use a Nim template to generate the handlers for us.\",\"# src/kernel/idt.nim template createHandler*(name: untyped, msg: string) = proc name*(frame: pointer) {.cdecl, codegenDecl: \\\"__attribute__ ((interrupt)) $# $#$#\\\".} = debugln \\\"CPU Exception: \\\", msg debugln \\\"\\\" debugln getStackTrace() quit() createHandler(cpuDivideErrorHandler, \\\"Divide Error\\\") createHandler(cpuDebugErrorHandler, \\\"Debug Exception\\\") createHandler(cpuNmiInterruptHandler, \\\"NMI Interrupt\\\") createHandler(cpuBreakpointHandler, \\\"Breakpoint\\\") createHandler(cpuOverflowHandler, \\\"Overflow\\\") createHandler(cpuBoundRangeExceededHandler, \\\"Bound Range Exceeded\\\") createHandler(cpuInvalidOpcodeHandler, \\\"Invalid Opcode\\\") createHandler(cpuDeviceNotAvailableHandler, \\\"Device Not Available\\\") createHandler(cpuDoubleFaultHandler, \\\"Double Fault\\\") createHandler(cpuCoprocessorSegmentOverrunHandler, \\\"Coprocessor Segment Overrun\\\") createHandler(cpuInvalidTssHandler, \\\"Invalid TSS\\\") createHandler(cpuSegmentNotPresentHandler, \\\"Segment Not Present\\\") createHandler(cpuStackSegmentFaultHandler, \\\"Stack Segment Fault\\\") createHandler(cpuGeneralProtectionFaultHandler, \\\"General Protection Fault\\\") createHandler(cpuPageFaultHandler, \\\"Page Fault\\\") createHandler(cpuX87FloatingPointErrorHandler, \\\"x87 Floating Point Error\\\") createHandler(cpuAlignmentCheckHandler, \\\"Alignment Check\\\") createHandler(cpuMachineCheckHandler, \\\"Machine Check\\\") createHandler(cpuSimdFloatingPointExceptionHandler, \\\"SIMD Floating Point Exception\\\") createHandler(cpuVirtualizationExceptionHandler, \\\"Virtualization Exception\\\") createHandler(cpuControlProtectionExceptionHandler, \\\"Control Protection Exception\\\") \",\"Now we can install the handlers in the IDT.\",\"# src/kernel/idt.nim ... proc idtInit*() = installHandler(0, cpuDivideErrorHandler) installHandler(1, cpuDebugErrorHandler) installHandler(2, cpuNmiInterruptHandler) installHandler(3, cpuBreakpointHandler) installHandler(4, cpuOverflowHandler) installHandler(5, cpuBoundRangeExceededHandler) installHandler(6, cpuInvalidOpcodeHandler) installHandler(7, cpuDeviceNotAvailableHandler) installHandler(8, cpuDoubleFaultHandler) installHandler(9, cpuCoprocessorSegmentOverrunHandler) installHandler(10, cpuInvalidTssHandler) installHandler(11, cpuSegmentNotPresentHandler) installHandler(12, cpuStackSegmentFaultHandler) installHandler(13, cpuGeneralProtectionFaultHandler) installHandler(14, cpuPageFaultHandler) installHandler(16, cpuX87FloatingPointErrorHandler) installHandler(17, cpuAlignmentCheckHandler) installHandler(18, cpuMachineCheckHandler) installHandler(19, cpuSimdFloatingPointExceptionHandler) installHandler(20, cpuVirtualizationExceptionHandler) installHandler(21, cpuControlProtectionExceptionHandler) asm \\\"\\\"\\\" lidt %0 : : \\\"m\\\"(`idtDescriptor`) \\\"\\\"\\\" \"]},\"193\":{\"h\":\"Page Fault Handler\",\"t\":[\"One particular interrupt handler that we need to customize a bit is the Page Fault handler. When this exception is raised, the CPU stores the address that caused the page fault in the CR2 register. At some point we'll use this address to allocate a new page and map it to the address that caused the page fault. But for now, let's just print the address and quit.\",\"# src/kernel/idt.nim # remove this line from before: # createHandler(cpuPageFaultHandler, \\\"Page Fault\\\") proc cpuPageFaultHandler*(frame: pointer) {.cdecl, codegenDecl: \\\"__attribute__ ((interrupt)) $# $#$#\\\".} = debugln \\\"\\\" debugln \\\"CPU Exception: Page Fault\\\" # get the faulting address var cr2: uint64 asm \\\"\\\"\\\" mov %0, cr2 : \\\"=r\\\"(`cr2`) \\\"\\\"\\\" debugln &\\\" Faulting address: {cr2:#018x}\\\" debugln \\\"\\\" debugln getStackTrace() quit() \",\"Let's try it out by raising a page fault exception.\",\"# src/kernel/main.nim import idt proc KernelMainInner(...) = ... debugln \\\"kernel: Invoking interrupt\\\" let p = cast[ptr uint8](0xdeadbeef) let x = p[] debugln \\\"kernel: Returned from interrupt\\\" ... \",\"And when we run the kernel, we should see the page fault error message.\",\"kernel: Fusion Kernel kernel: Initializing IDT [success] kernel: Invoking interrupt CPU Exception: Page Fault Faulting address: 0x00000000deadbeef Traceback (most recent call last) /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(58) KernelMain /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(88) KernelMainInner /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(57) cpuPageFaultHandler \",\"Beautiful! The handler is working, and we know which address caused the page fault. One thing we can test also is double faults. We can try this by commenting out the installation of the page fault handler, and then causing a page fault. The CPU will then raise a double fault exception, because it can't find an interrupt handler during another exception (the page fault).\",\"# src/kernel/idt.nim proc idtInit*() = ... # installHandler(14, cpuPageFaultHandler) ... \",\"If we run the kernel now, we should see the double fault error message.\",\"kernel: Fusion Kernel ... kernel: Initializing IDT [success] kernel: Invoking interrupt CPU Exception: Double Fault Traceback (most recent call last) /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(58) KernelMain /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(88) KernelMainInner /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(65) cpuDoubleFaultHandler \",\"Amazing! We now have a safety net for CPU exceptions. If we mess up something in the kernel, we should get a debug message instead of a random hang or reboot. We will come back to properly implement some of these handlers later, especially the page fault handler.\",\"Let's now turn our attention to user mode. In the next section, we'll see how we can switch to user mode, while still allowing interrupts to occur.\"]},\"194\":{\"h\":\"User Mode\",\"t\":[\"Running programs in user mode is one of the most important features of an operating system. It provides a controlled environment for programs to run in, and prevents them from interfering with each other or the kernel. This is done by restricting the instructions that can be executed, and the memory that can be accessed. Once in user mode, a program can only return to kernel mode by executing a system call or through an interrupt (e.g. a timer interrupt). Even exiting the program requires a system call. We won't be implementing system calls in this section. We'll just focus on switching from kernel mode to user mode. The user program won't be able to do anything useful for now, but we should have a minimal user mode environment to build on later.\",\"The main way to switch to user mode is to manually create an interrupt stack frame, as if the user program had just been interrupted by an interrupt. It should look like this:\",\" Stack ┌──── stack bottom ┌────────────────▼─┐ │ SS │ +32 ◄── Data segment selector ├──────────────────┤ │ RSP │ +24 ◄── User stack pointer ├──────────────────┤ │ RFLAGS │ +16 ◄── CPU flags with IF=1 ├──────────────────┤ │ CS │ +8 ◄── User code segment selector ├──────────────────┤ │ RIP │ 0 ◄── User code entry point ├────────────────▲─┤ │ └──── stack top ├──────────────────┤ \",\"Then we can use the iretq instruction to switch to user mode. The iretq instruction pops the stack frame, loads the SS and RSP registers to switch to the user stack, loads the RFLAGS register, and loads the CS and RIP registers to switch to the user code entry point. The RFLAGS value should have the IF flag set to 1, which enables interrupts. This is important, because it allows the kernel to take control back from the user program when an interrupt occurs.\",\"An important thing to note is that, since this stack frame is at the bottom of the stack ( i.e. highest address in the page where the stack is mapped), if the user program returns from the entry point, a page fault will occur, since the area above the stack is unmapped. As mentioned earlier, the only way to return to kernel mode is through a system call or an interrupt. So, for the purpose of this section, we'll just create a user program that never returns (until we implement system calls).\"]},\"195\":{\"h\":\"Preparing for User Mode\",\"t\":[\"So far, the virtual memory mapping we have is for kernel space only. We need to create a different mapping for user space so that the user program can access it. This includes mapping of the user code, data, and stack regions, as well as the kernel space (which is protected since it's marked as supervisor only). Mapping the kernel space in the user page table is necessary, since interrupts and system calls cause the CPU to jump to kernel code without switching page tables. Also, many system calls will need access to data in user space.\",\"Since we don't have the ability in the kernel to access disks and filesystems yet, we won't load the user program from disk. What we can do is build the user program separately, and copy it alongside the kernel image, and let the bootloader load it for us. So here's the plan to get user mode working:\",\"Create a program that we want to run in user mode.\",\"Build the program and copy it to the efi\\\\fusion directory (next to the kernel image).\",\"In the bootloader, load the user program into memory, and pass its physical address and size to the kernel.\",\"Allocate memory for the user stack.\",\"Create a new page table for user space.\",\"Map the user code and stack regions to user space.\",\"Copy the kernel space page table entries to the user page table.\",\"Craft an interrupt stack frame that will switch to user mode. Place it at the bottom of the user stack (i.e. the top of the mapped stack region).\",\"Change the rsp register to point to the top of the interrupt stack frame (i.e. the last pushed value).\",\"Load the user page table physical address into the cr3 register.\",\"Use the iretq instruction to pop the interrupt stack frame and switch to user mode.\"]},\"196\":{\"h\":\"User Program\",\"t\":[\"Let's start by creating a new module in src/user/utask.nim for the user code, and defining a function that we want to run in user mode. We'll call it UserMain.\",\"# src/user/utask.nim {.used.} proc NimMain() {.importc.} proc UserMain() = NimMain() asm \\\"\\\"\\\" .loop: pause jmp .loop \\\"\\\"\\\" \",\"The function will just execute the pause instruction in a loop. The pause instruction is a hint to the CPU that the code is in a spin loop, allowing it to greatly reduce the processor's power consumption.\",\"Let's create a linker script to define the layout of the user code and data sections. It's very similar to the kernel linker script, except we link the user program at a virtual address in user space, instead of kernel space (it doesn't matter where in user space, as long as it's mapped).\",\"/* src/user/utask.ld */ SECTIONS { . = 0x00000000040000000; /* 1 GiB */ .text : { *utask*.o(.*text.UserMain) *utask*.o(.*text.*) *(.*text*) } .rodata : { *(.*rodata*) } .data : { *(.*data) *(.*bss) } .shstrtab : { *(.shstrtab) } /* cannot be discarded */ /DISCARD/ : { *(*) } } \",\"Now, let's add a nim.cfg file to the src/user directory to configure the Nim compiler for the user program. It should be very similar to the kernel nim.cfg file.\",\"# src/user/nim.cfg amd64.any.clang.linkerexe=\\\"ld.lld\\\" --passc:\\\"-target x86_64-unknown-none\\\" --passc:\\\"-ffreestanding\\\" --passc:\\\"-ffunction-sections\\\" --passc:\\\"-mcmodel=large\\\" --passl:\\\"-nostdlib\\\" --passl:\\\"-T src/user/utask.ld\\\" --passl:\\\"-entry=UserMain\\\" --passl:\\\"-Map=build/utask.map\\\" --passl:\\\"--oformat=binary\\\" \",\"Let's update our justfile to build the user program and copy it in place.\",\"... user_nim := \\\"src/user/utask.nim\\\" user_out := \\\"utask.bin\\\" ... user: nim c {{nimflags}} --out:build/{{user_out}} {{user_nim}} run *QEMU_ARGS: bootloader kernel user mkdir -p {{disk_image_dir}}/efi/boot mkdir -p {{disk_image_dir}}/efi/fusion cp build/{{boot_out}} {{disk_image_dir}}/efi/boot/{{boot_out}} cp build/{{kernel_out}} {{disk_image_dir}}/efi/fusion/{{kernel_out}} cp build/{{user_out}} {{disk_image_dir}}/efi/fusion/{{user_out}} @echo \\\"\\\" qemu-system-x86_64 \\\\ -drive if=pflash,format=raw,file={{ovmf_code}},readonly=on \\\\ -drive if=pflash,format=raw,file={{ovmf_vars}} \\\\ -drive format=raw,file=fat:rw:{{disk_image_dir}} \\\\ -machine q35 \\\\ -net none \\\\ -debugcon stdio {{QEMU_ARGS}} clean: rm -rf build rm -rf {{disk_image_dir}}/efi/boot/{{boot_out}} rm -rf {{disk_image_dir}}/efi/fusion/{{kernel_out}} rm -rf {{disk_image_dir}}/efi/fusion/{{user_out}} \",\"Finally, let's build the user program and check the linker map.\",\"$ just user $ head -n 20 build/utask.map VMA LMA Size Align Out In Symbol 0 0 40000000 1 . = 0x00000000040000000 40000000 40000000 9fec 16 .text 40000000 40000000 59 16 .../fusion/build/@mutask.nim.c.o:(.ltext.UserMain) 40000000 40000000 59 1 UserMain 40000060 40000060 9b 16 .../fusion/build/@mutask.nim.c.o:(.ltext.nimFrame) 40000060 40000060 9b 1 nimFrame 40000100 40000100 12 16 .../fusion/build/@mutask.nim.c.o:(.ltext.PreMainInner) 40000100 40000100 12 1 PreMainInner 40000120 40000120 1e 16 .../fusion/build/@mutask.nim.c.o:(.ltext.PreMain) \",\"This looks good. The UserMain function linked first and starts at 0x40000000, which is what we asked for.\"]},\"197\":{\"h\":\"Loading the User Program\",\"t\":[\"Now, let's try to load the user program in the bootloader. We'll do the same thing we did for the kernel, except we'll load the user program to an arbitrary physical address, instead of a specific address. We'll mark this region of memory as UserCode so that it's not considered free.\",\"In the bootloader, we already have code that loads the kernel image. Let's reuse this code to load the user program. Let's refactor this code into a loadImage proc, and use it for both the kernel and the user task.\",\"# src/boot/bootx64.nim proc loadImage( imagePath: WideCString, rootDir: ptr EfiFileProtocol, memoryType: EfiMemoryType, loadAddress: Option[EfiPhysicalAddress] = none(EfiPhysicalAddress), ): tuple[base: EfiPhysicalAddress, pages: uint64] = # open the image file var file: ptr EfiFileProtocol consoleOut \\\"boot: Opening image: \\\" consoleOut imagePath checkStatus rootDir.open(rootDir, addr file, imagePath, 1, 1) # get file size var fileInfo: EfiFileInfo var fileInfoSize = sizeof(EfiFileInfo).uint consoleOut \\\"boot: Getting file info\\\" checkStatus file.getInfo( file, addr EfiFileInfoGuid, addr fileInfoSize, addr fileInfo ) echo &\\\"boot: Image file size: {fileInfo.fileSize} bytes\\\" var imageBase: EfiPhysicalAddress let imagePages = (fileInfo.fileSize + 0xFFF).uint div PageSize.uint # round up to nearest page consoleOut &\\\"boot: Allocating memory for image\\\" if loadAddress.isSome: imageBase = cast[EfiPhysicalAddress](loadAddress.get) checkStatus uefi.sysTable.bootServices.allocatePages( AllocateAddress, memoryType, imagePages, cast[ptr EfiPhysicalAddress](imageBase.addr) ) else: checkStatus uefi.sysTable.bootServices.allocatePages( AllocateAnyPages, memoryType, imagePages, cast[ptr EfiPhysicalAddress](imageBase.addr) ) # read the image into memory consoleOut \\\"boot: Reading image into memory\\\" checkStatus file.read(file, cast[ptr uint](addr fileInfo.fileSize), cast[pointer](imageBase)) # close the image file consoleOut \\\"boot: Closing image file\\\" checkStatus file.close(file) result = (imageBase, imagePages.uint64) \",\"The proc allows loading an image at a specific address (if loadAddress is provided), or at any address (if loadAddress is none). The former is useful for loading the kernel image at a specific address. The latter is useful for loading the user program at any address.\",\"Let's now update the EfiMainInner by replacing that section of the code with two calls to loadImage.\",\"# src/boot/bootx64.nim ... proc EfiMainInner(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus = ... # open the root directory var rootDir: ptr EfiFileProtocol consoleOut \\\"boot: Opening root directory\\\" checkStatus fileSystem.openVolume(fileSystem, addr rootDir) # load kernel image let (kernelImageBase, kernelImagePages) = loadImage( imagePath = W\\\"efi\\\\fusion\\\\kernel.bin\\\", rootDir = rootDir, memoryType = OsvKernelCode, loadAddress = KernelPhysicalBase.EfiPhysicalAddress.some ) # load user task image let (userImageBase, userImagePages) = loadImage( imagePath = W\\\"efi\\\\fusion\\\\utask.bin\\\", rootDir = rootDir, memoryType = OsvUserCode, ) # close the root directory consoleOut \\\"boot: Closing root directory\\\" checkStatus rootDir.close(rootDir) \",\"Notice that I added a new value to the EfiMemoryType enum called OsvUserCode. This is just a value that we'll use to mark the user code region as used. Here's the updated enum:\",\"# src/common/uefi.nim ... EfiMemoryType* = enum ... OsvKernelCode = 0x80000000 OsvKernelData = 0x80000001 OsvKernelStack = 0x80000002 OsvUserCode = 0x80000003 EfiMaxMemoryType \",\"Let's map this value to a new UserCode value in our MemoryType enum (which is what we pass to the kernel as part of the memory map). While we're here, I'm going to also add values for UserData and UserStack (which we'll use later).\",\"# src/common/bootinfo.nim ... type MemoryType* = enum Free KernelCode KernelData KernelStack UserCode UserData UserStack Reserved \",\"Let's also update convertUefiMemoryMap to account for the new memory type.\",\"# src/boot/bootx64.nim proc convertUefiMemoryMap(...): seq[MemoryMapEntry] = ... for i in 0 ..< uefiNumMemoryMapEntries: ... let memoryType = if uefiEntry.type in FreeMemoryTypes: Free elif uefiEntry.type == OsvKernelCode: KernelCode elif uefiEntry.type == OsvKernelData: KernelData elif uefiEntry.type == OsvKernelStack: KernelStack elif uefiEntry.type == OsvUserCode: UserCode else: Reserved ... \",\"And finally, we need to tell the kernel where to find the user task image in memory. Let's add a couple of fields to BootInfo to store the user image physical address and number of pages.\",\"# src/common/bootinfo.nim ... BootInfo* = object physicalMemoryMap*: MemoryMap virtualMemoryMap*: MemoryMap physicalMemoryVirtualBase*: uint64 userImagePhysicalBase*: uint64 userImagePages*: uint64 \",\"And to populate the fields, we'll update createBootInfo to take the values returned by loadImage as parameters.\",\"# src/boot/bootx64.nim proc createBootInfo( bootInfoBase: uint64, kernelImagePages: uint64, physMemoryPages: uint64, physMemoryMap: seq[MemoryMapEntry], virtMemoryMap: seq[MemoryMapEntry], userImageBase: uint64, userImagePages: uint64, ): ptr BootInfo = ... bootInfo.userImagePhysicalBase = userImageBase bootInfo.userImagePages = userImagePages result = bootInfo ... proc EfiMain(imgHandle: EfiHandle, sysTable: ptr EFiSystemTable): EfiStatus {.exportc.} = ... let bootInfo = createBootInfo( bootInfoBase, kernelImagePages, physMemoryPages, physMemoryMap, virtMemoryMap, userImageBase, userImagePages, ) ... \",\"Let's test it out by printing the user image physical address and number of pages in the kernel.\",\"# src/kernel/main.nim ... proc KernelMainInner(bootInfo: ptr BootInfo) = ... debugln &\\\"kernel: User image physical address: {bootInfo.userImagePhysicalBase:#010x}\\\" debugln &\\\"kernel: User image pages: {bootInfo.userImagePages}\\\" \",\"If we build and run the kernel, we should see the following output:\",\"kernel: Fusion Kernel ... kernel: Initializing GDT [success] kernel: Initializing IDT [success] kernel: User image physical address: 0x06129000 kernel: User image pages: 268 \",\"It seems like it's working. The user image is loaded at some address allocated by the bootloader. The kernel now knows where to find the user image, and should be able to map it to user space.\"]},\"198\":{\"h\":\"User Page Table\",\"t\":[\"Now, let's create a new PML4Table for the user page table. We'll copy the kernel page table entries to the user page table, and map the user code and stack regions to user space.\",\"# src/kernel/main.nim ... const UserImageVirtualBase = 0x0000000040000000 UserStackVirtualBase = 0x0000000050000000 ... proc KernelMainInner(bootInfo: ptr BootInfo) = debugln \\\"\\\" debugln \\\"kernel: Fusion Kernel\\\" ... debugln \\\"kernel: Initializing user page table\\\" var upml4 = cast[ptr PML4Table](new PML4Table) debugln \\\"kernel: Copying kernel space user page table\\\" var kpml4 = getActivePML4() for i in 256 ..< 512: upml4.entries[i] = kpml4.entries[i] debugln &\\\"kernel: Mapping user image ({UserImageVirtualBase:#x} -> {bootInfo.userImagePhysicalBase:#x})\\\" mapRegion( pml4 = upml4, virtAddr = UserImageVirtualBase.VirtAddr, physAddr = bootInfo.userImagePhysicalBase.PhysAddr, pageCount = bootInfo.userImagePages, pageAccess = paReadWrite, pageMode = pmUser, ) # allocate and map user stack let userStackPhysAddr = pmAlloc(1).get debugln &\\\"kernel: Mapping user stack ({UserStackVirtualBase:#x} -> {userStackPhysAddr.uint64:#x})\\\" mapRegion( pml4 = upml4, virtAddr = UserStackVirtualBase.VirtAddr, physAddr = userStackPhysAddr, pageCount = 1, pageAccess = paReadWrite, pageMode = pmUser, ) \",\"This should be straightforward. A few things to note:\",\"We don't physically copy the kernel page table structures to the user page table. We just set the PML4 entries to point to the same page table structures as the kernel page table. This makes the kernel space portion of the user page table dynamic, so that if we change the kernel page table, the user page table will automatically reflect the changes (unless we map new PML4 entries in the kernel page table, which we won't do for now).\",\"We're setting the pageMode to pmUser for the user code and stack regions.\",\"We allocate one page for the user stack, and map it to the virtual address 0x50000000, so the stack region will be 0x50000000 to 0x50001000 (end address is exclusive).\"]},\"199\":{\"h\":\"Interrupt Stack Frame\",\"t\":[\"Now, in order to switch to user mode, we'll create an interrupt stack frame, as if the user program had just been interrupted. We'll populate five entries at the bottom of the stack: RIP, CS, RFLAGS, RSP, and SS.\",\"# src/kernel/main.nim ... proc KernelMainInner(bootInfo: ptr BootInfo) = ... debugln \\\"kernel: Creating interrupt stack frame\\\" let userStackBottom = UserStackVirtualBase + PageSize let userStackPtr = cast[ptr array[512, uint64]](p2v(userStackPhysAddr)) userStackPtr[^1] = cast[uint64](DataSegmentSelector) # SS userStackPtr[^2] = cast[uint64](userStackBottom) # RSP userStackPtr[^3] = cast[uint64](0x202) # RFLAGS userStackPtr[^4] = cast[uint64](UserCodeSegmentSelector) # CS userStackPtr[^5] = cast[uint64](UserImageVirtualBase) # RIP debugln &\\\" SS: {userStackPtr[^1]:#x}\\\" debugln &\\\" RSP: {userStackPtr[^2]:#x}\\\" debugln &\\\" RFLAGS: {userStackPtr[^3]:#x}\\\" debugln &\\\" CS: {userStackPtr[^4]:#x}\\\" debugln &\\\" RIP: {userStackPtr[^5]:#x}\\\" let rsp = cast[uint64](userStackBottom - 5 * 8) \",\"Stack terminology can be confusing. The stack grows downwards, so the bottom of the stack is the highest address. This is why we set userStackBottom to the highest address of the stack region. Now, to manipulate the stack region from the kernel, we reverse-map the stack's physical address to a virtual address, and cast it to a pointer to an array of 512 uint64 values (remember that UserStackVirtualBase is valid only in the user page table, not the kernel page table). We then populate the five entries at the bottom of the stack, and set rsp to point to the top entry. This simulates pushing the interrupt stack frame on the stack.\"]},\"200\":{\"h\":\"Switching to User Mode\",\"t\":[\"We're finally ready to switch to user mode. We'll activate the user page table, set the rsp register to point to the interrupt stack frame, and use the iretq instruction to switch to user mode.\",\"# src/kernel/main.nim proc KernelMainInner(bootInfo: ptr BootInfo) = ... debugln \\\"kernel: Switching to user mode\\\" setActivePML4(upml4) asm \\\"\\\"\\\" mov rbp, 0 mov rsp, %0 iretq : : \\\"r\\\"(`rsp`) \\\"\\\"\\\" \",\"If we did everything correctly, we should see the following output:\",\"kernel: Fusion Kernel ... kernel: Initializing user page table kernel: Copying kernel space user page table kernel: Mapping user image (1073741824 -> 0x6129000) kernel: Mapping user stack (0x50000000 -> 0x3000) kernel: Creating interrupt stack frame SS: 0x13 RSP: 0x50001000 RFLAGS: 0x202 CS: 0x1b RIP: 0x40000000 kernel: Switching to user mode \",\"How do we know we're in user mode? Well, we can't really tell from the output, so let's use QEMU's monitor to check the CPU registers.\",\"(qemu) info registers CPU#0 RAX=0000000000000000 RBX=0000000000000000 RCX=0000000050000fc8 RDX=0000000000000000 RSI=0000000000000001 RDI=0000000050000fc8 RBP=0000000050000ff8 RSP=0000000050000fc8 R8 =ffff800100003c30 R9 =0000000000000001 R10=000000000636d001 R11=0000000000000004 R12=0000000000000000 R13=0000000006bb1588 R14=0000000000000000 R15=0000000007ebf1e0 RIP=000000004000004c RFL=00000206 [-----P-] CPL=3 II=0 A20=1 SMM=0 HLT=0 ES =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] CS =001b 0000000000000000 000fffff 002ffa00 DPL=3 CS64 [-R-] SS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] DS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] FS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] GS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] LDT=0000 0000000000000000 0000ffff 00008200 DPL=0 LDT TR =0000 0000000000000000 0000ffff 00008b00 DPL=0 TSS64-busy GDT= ffff800000226290 0000001f IDT= ffff8000002262b0 00000fff ... \",\"We can see that CPL=3, which means we're in user mode! The CS register is 0x1b, which is the user code segment selector (0x18 with RPL=3). The RIP register is 0x4000004c, which is several instructions into the UserMain function. Let's try to disassemble the code at the entry point.\",\"(qemu) x /15i 0x40000000 0x40000000: 55 pushq %rbp 0x40000001: 48 89 e5 movq %rsp, %rbp 0x40000004: 48 83 ec 30 subq $0x30, %rsp 0x40000008: 48 b8 8b a6 00 40 00 00 movabsq $0x4000a68b, %rax 0x40000010: 00 00 0x40000012: 48 89 45 d8 movq %rax, -0x28(%rbp) 0x40000016: 48 b8 7d a5 00 40 00 00 movabsq $0x4000a57d, %rax 0x4000001e: 00 00 0x40000020: 48 89 45 e8 movq %rax, -0x18(%rbp) 0x40000024: 48 c7 45 e0 00 00 00 00 movq $0, -0x20(%rbp) 0x4000002c: 66 c7 45 f0 00 00 movw $0, -0x10(%rbp) 0x40000032: 48 b8 70 00 00 40 00 00 movabsq $0x40000070, %rax 0x4000003a: 00 00 0x4000003c: 48 8d 7d d0 leaq -0x30(%rbp), %rdi 0x40000040: ff d0 callq *%rax 0x40000042: 48 c7 45 e0 06 00 00 00 movq $6, -0x20(%rbp) 0x4000004a: f3 90 pause 0x4000004c: e9 f9 ff ff ff jmp 0x4000004a \",\"Looks like we're executing the UserMain function! Notice that the last two instructions are a pause instruction and a jump to the pause instruction. This is the loop we created in the UserMain function. We can also see that the RIP register is set to 0x4000004c, which is the address of the jmp instruction. Everything seems to be working as expected.\",\"This is another big milestone! We now have a minimal user mode environment. It's not very useful yet, but we'll build on it in the next section. We should look into system calls next, but before we do that, we need to allow the CPU to switch back to kernel mode. This requires something called the Task State Segment (TSS), which we'll cover in the next section.\"]},\"201\":{\"h\":\"Task State Segment\",\"t\":[\"While running in user mode, an interrupt/exception or a system call causes the CPU to switch to kernel mode. This causes a change in privilege level (from CPL=3 to CPL=0). The CPU cannot use the user stack while in kernel mode, since the interrupt could have been caused by something that makes the stack unusable, e.g. a page fault caused by running out of stack space. So, the CPU needs to switch to a known good stack. This is where the Task State Segment (TSS) comes in.\",\"The TSS originally was designed to support hardware task switching. This is a feature that allows the CPU to switch between multiple tasks (each having its own TSS) without software intervention. This feature is not used in modern operating systems, which rely on software task switching, but the TSS is still used to switch stacks when entering kernel mode.\",\"The TSS on x64 contains two sets of stack pointers:\",\"One set holds three stack pointers, RSP0, RSP1, and RSP2, to use when switching to CPL=0, CPL=1, and CPL=2, respectively. Typically, only RSP0 is used when switching from user mode to kernel mode, since rings 1 and 2 are not used in modern operating systems.\",\"The other set holds the so-called Interrupt Stack Table, which can hold up to seven stack pointers, IST1 through IST7, to use when handling interrupts. The decision to use one of those stacks is made by the Interrupt Descriptor Table entry for the interrupt. The stack pointer to use is stored in the IST field of the IDT entry. This means that different interrupts can use different stacks. If an IDT entry doesn't specify a stack, the CPU uses the stack pointed to by RSP0.\",\"Here's a diagram of the TSS structure:\",\" 64-bit TSS Structure 31 00 ┌────────────────────────┬────────────────────────┐ │ I/O Map Base Address │ Reserved │ 100 ├────────────────────────┴────────────────────────┤ │ Reserved │ 96 ├─────────────────────────────────────────────────┤ │ Reserved │ 92 ├─────────────────────────────────────────────────┤ │ IST7 (hi) │ 88 ├─────────────────────────────────────────────────┤ │ IST7 (lo) │ 84 ├─────────────────────────────────────────────────┤ │ ... │ ├─────────────────────────────────────────────────┤ │ IST1 (hi) │ 40 ├─────────────────────────────────────────────────┤ │ IST1 (lo) │ 36 ├─────────────────────────────────────────────────┤ │ Reserved │ 32 ├─────────────────────────────────────────────────┤ │ Reserved │ 28 ├─────────────────────────────────────────────────┤ │ RSP2 (hi) │ 24 ├─────────────────────────────────────────────────┤ │ RSP2 (lo) │ 20 ├─────────────────────────────────────────────────┤ │ RSP1 (hi) │ 16 ├─────────────────────────────────────────────────┤ │ RSP1 (lo) │ 12 ├─────────────────────────────────────────────────┤ │ RSP0 (hi) │ 8 ├─────────────────────────────────────────────────┤ │ RSP0 (lo) │ 4 ├─────────────────────────────────────────────────┤ │ Reserved │ 0 └─────────────────────────────────────────────────┘ \",\"So, how does the CPU find the TSS? There's a special register called TR (Task Register) that holds the segment selector of the TSS. The CPU uses this selector to find the TSS in the GDT. So, what we need to do is to create a TSS and load its selector into TR.\"]},\"202\":{\"h\":\"Creating a TSS\",\"t\":[\"Let's define the TSS structure in src/kernel/gdt.nim\",\"# src/kernel/gdt.nim type TaskStateSegment {.packed.} = object reserved0: uint32 rsp0: uint64 rsp1: uint64 rsp2: uint64 reserved1: uint64 ist1: uint64 ist2: uint64 ist3: uint64 ist4: uint64 ist5: uint64 ist6: uint64 ist7: uint64 reserved2: uint64 reserved3: uint16 iomapBase: uint16 \",\"We'll need to define a new descriptor type for the TSS, so that we can add it to the GDT. This will be a system descriptor (as opposed to a code or data descriptor).\",\"# src/kernel/gdt.nim type TaskStateSegmentDescriptor {.packed.} = object limit00: uint16 base00: uint16 base16: uint8 `type`* {.bitsize: 4.}: uint8 = 0b1001 # 64-bit TSS s {.bitsize: 1.}: uint8 = 0 # System segment dpl* {.bitsize: 2.}: uint8 p* {.bitsize: 1.}: uint8 = 1 limit16 {.bitsize: 4.}: uint8 avl* {.bitsize: 1.}: uint8 = 0 zero1 {.bitsize: 1.}: uint8 = 0 zero2 {.bitsize: 1.}: uint8 = 0 g {.bitsize: 1.}: uint8 = 0 base24: uint8 base32: uint32 reserved1: uint8 = 0 zero3 {.bitsize: 5.}: uint8 = 0 reserved2 {.bitsize: 19.}: uint32 = 0 \",\"Now, let's create an instance of the TSS and a descriptor for it. Later, we'll create a kernel stack and set RSP0 to point to it.\",\"# src/kernel/gdt.nim var tss* = TaskStateSegment() let tssDescriptor = TaskStateSegmentDescriptor( dpl: 0, base00: cast[uint16](tss.addr), base16: cast[uint8](cast[uint64](tss.addr) shr 16), base24: cast[uint8](cast[uint64](tss.addr) shr 24), base32: cast[uint32](cast[uint64](tss.addr) shr 32), limit00: cast[uint16](sizeof(tss) - 1), limit16: cast[uint8]((sizeof(tss) - 1) shr 16) ) tssDescriptorLo = cast[uint64](tssDescriptor) tssDescriptorHi = (cast[ptr uint64](cast[uint64](tssDescriptor.addr) + 8))[] \",\"Finally, let's add the descriptor to the GDT and define its selector. Notice that the GDT entry occupies two 64-bit slots (since the TSS descriptor is 128 bits long). The selector points to the first slot (the low 64 bits).\",\"# src/kernel/gdt.nim ... const KernelCodeSegmentSelector* = 0x08 DataSegmentSelector* = 0x10 or 3 # RPL = 3 UserCodeSegmentSelector* = 0x18 or 3 # RPL = 3 TaskStateSegmentSelector* = 0x20 let ... gdtEntries = [ NullSegmentDescriptor.value, CodeSegmentDescriptor(dpl: 0).value, # Kernel code segment DataSegmentDescriptor(dpl: 3).value, # Data segment (shared) CodeSegmentDescriptor(dpl: 3).value, # User code segment tssDescriptorLo, # Task state segment (low 64 bits) tssDescriptorHi, # Task state segment (high 64 bits) ] \"]},\"203\":{\"h\":\"Loading the TSS\",\"t\":[\"To tell the CPU to use the TSS, we need to load its selector into TR (Task Register). We'll do this as part of the gdtInit proc.\",\"# src/kernel/gdt.nim ... proc gdtInit*() {.asmNoStackFrame.} = ... asm \\\"\\\"\\\" lgdt %0 mov ax, %3 ltr ax # reload CS using a far return ... : : \\\"m\\\"(`gdtDescriptor`), \\\"i\\\"(`KernelCodeSegmentSelector`), \\\"i\\\"(`DataSegmentSelector`), \\\"i\\\"(`TaskStateSegmentSelector`) : \\\"rax\\\" \\\"\\\"\\\" \"]},\"204\":{\"h\":\"Kernel Switch Stack\",\"t\":[\"We now need to define a new stack to use when switching to kernel mode. Let's allocate a page for it, map it, and set the RSP0 field of the TSS to point to it.\",\"# src/kernel/main.nim ... proc KernelMain(bootInfo: ptr BootInfo) {.exportc.} = ... # allocate and map user stack ... # create a kernel switch stack and set tss.rsp0 debugln \\\"kernel: Creating kernel switch stack\\\" let switchStackPhysAddr = pmAlloc(1).get let switchStackVirtAddr = p2v(switchStackPhysAddr) mapRegion( pml4 = kpml4, virtAddr = switchStackVirtAddr, physAddr = switchStackPhysAddr, pageCount = 1, pageAccess = paReadWrite, pageMode = pmSupervisor, ) tss.rsp0 = uint64(switchStackVirtAddr +! PageSize) # create interrupt stack frame ... \",\"Everything is now ready for the switch to kernel mode. There are a few ways to try this out.\"]},\"205\":{\"h\":\"Switching to Kernel Mode\",\"t\":[\"One way to test this is to have the user task try to execute a privileged instruction, such as hlt. This should cause a General Protection Fault exception, which will trigger the switch to kernel mode. Let's try this out.\",\"# src/user/utask.nim ... proc UserMain*() {.exportc.} = NimMain() asm \\\"hlt\\\" \",\"Let's run and see what happens.\",\"kernel: Fusion Kernel ... kernel: Creating kernel switch stack kernel: Creating interrupt stack frame SS: 0x13 RSP: 0x50001000 RFLAGS: 0x202 CS: 0x1b RIP: 0x40000000 kernel: Switching to user mode CPU Exception: General Protection Fault Traceback (most recent call last) /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(53) KernelMain /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(185) KernelMainInner /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(65) cpuGeneralProtectionFaultHandler \",\"As expected, the CPU switched to kernel mode and executed the General Protection Fault handler! Let's try another way. Let's cause a page fault by trying to access a page that's not mapped.\",\"# src/user/utask.nim ... proc UserMain*() {.exportc.} = NimMain() # access illegal memory var x = cast[ptr int](0xdeadbeef) x[] = 42 \",\"We should see a page fault exception at the address 0xdeadbeef.\",\"... kernel: Switching to user mode CPU Exception: Page Fault Faulting address: 0x00000000deadbeef Traceback (most recent call last) /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(53) KernelMain /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(185) KernelMainInner /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(57) cpuPageFaultHandler \",\"Great! OK, one more way. Let's try to access an address within kernel space. This should also cause a Page Fault exception, even though the address is mapped.\",\"# src/user/utask.nim proc UserMain*() {.exportc.} = NimMain() # access kernel memory var x = cast[ptr int](0xFFFF800000100000) # kernel entry point x[] = 42 \",\"Let's see what happens.\",\"... kernel: Switching to user mode CPU Exception: Page Fault Faulting address: 0xffff800000100000 Traceback (most recent call last) /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(53) KernelMain /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(185) KernelMainInner /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(57) cpuPageFaultHandler \",\"Great! This demonstrates that kernel memory is protected from access by user code.\"]},\"206\":{\"h\":\"Invoking Interrupts from User Mode\",\"t\":[\"Finally, let's try to invoke an interrupt from user mode. Let's reuse the isr100 interrupt handler we used for testing earlier.\",\"# src/kernel/idt.nim ... proc isr100(frame: pointer) {.cdecl, codegenDecl: \\\"__attribute__ ((interrupt)) $# $#$#\\\".} = debugln \\\"Hello from isr100\\\" quit() proc idtInit*() = ... installHandler(100, isr100) ... \",\"Let's execute the int instruction from user mode.\",\"# src/user/utask.nim proc UserMain*() {.exportc.} = NimMain() asm \\\"int 100\\\" \",\"If we try to run this, we are faced with a General Protection Fault exception.\",\"... kernel: Switching to user mode CPU Exception: General Protection Fault Traceback (most recent call last) /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(53) KernelMain /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/main.nim(185) KernelMainInner /Users/khaledhammouda/src/github.com/khaledh/fusion/src/kernel/idt.nim(66) cpuGeneralProtectionFaultHandler \",\"The reason has to do with the DPL of the interrupt gate. Recall that the DPL of the interrupt gate must be greater than or equal to the CPL of the code that invokes the interrupt. In this case, the DPL of the interrupt gate is 0, while the CPL of the user code is 3. So, the CPU raises a General Protection Fault exception.\",\"Let's fix this by allowing the isr100 handler to be called from user mode. We need to do a couple of modifications in the idt.nim module to allow setting the dpl field of the interrupt gate.\",\"... proc newInterruptGate(handler: InterruptHandler, dpl: uint8 = 0): InterruptGate = let offset = cast[uint64](handler) result = InterruptGate( offset00: uint16(offset), offset16: uint16(offset shr 16), offset32: uint32(offset shr 32), dpl: dpl, ) proc installHandler*(vector: uint8, handler: InterruptHandler, dpl: uint8 = 0) = idtEntries[vector] = newInterruptGate(handler, dpl) ... proc idtInit*() = ... installHandler(100, isr100, dpl = 3) ... \",\"Let's try again.\",\"kernel: Switching to user mode Hello from isr100 \",\"Great! We can call interrupts from user mode. We're now ready to start looking into system calls.\"]},\"207\":{\"h\":\"System Calls\",\"t\":[\"User programs run in a restricted environment. They can't access hardware directly, allocate memory, or do any privileged operations. Instead, they must ask the kernel to do these things for them. The kernel provides these services through system calls. System calls are the interface between user programs and the kernel.\",\"Transferring control to the kernel requires special support from the CPU. Traditionally, this has been done using software interrupts, e.g. int 0x80 in Linux. However, modern CPUs provide a more efficient way to do this: the syscall/sysret instruction pair.\"]},\"208\":{\"h\":\"System Call Interface\",\"t\":[\"The syscall/sysret instructions simply transfer control to the kernel and back to the user program. They don't define the interface between user programs and the kernel. The kernel defines this interface, i.e. the system call numbers and the arguments for each system call. The kernel also defines the calling convention for system calls, e.g. which registers to use for arguments and return values. This is called Application Binary Interface (ABI).\",\"We're not building a kernel adhering to any particular ABI; we'll define our own. Let's start with the system call number and arguments. We'll use the following registers for these:\",\"rdi: system call number\",\"rsi: first argument\",\"rdx: second argument\",\"r8: third argument\",\"r9: fourth argument\",\"r10: fifth argument\",\"We'll use rax for the return value. Notice that we're not using rcx or r11 in the system call interface. This is because when executing syscall, the CPU stores the user rip and rflags in rcx and r11, respectively. Upon returning to user mode, the CPU restores rip and rflags from rcx and r11. So we have to make sure that rcx and r11 are preserved across system calls.\",\"Also, the CPU doesn't switch stacks for us when executing syscall. We have to do that ourselves. This is in contrast with interrupts, where the CPU switches to the kernel stack before executing the interrupt handler. So it's a bit more inconvenient to handle system calls than interrupts, but it's a faster mechanism.\"]},\"209\":{\"h\":\"Initialization\",\"t\":[\"There are a few things we need to do to initialize system calls. They're all done through Model Specific Registers (MSRs).\",\"Set the SCE (SYSCALL Enable) flag in the IA32_EFER MSR.\",\"Set the kernel and user mode segment selectors in the IA32_STAR MSR.\",\"Set the syscall entry point in the IA32_LSTAR MSR.\",\"Set the kernel mode CPU flags mask in the IA32_FMASK MSR.\",\"Since we're going to be reading/writing CPU registers, let's create a module for that. Let's add src/kernel/cpu.nim and define some constants for the MSRs, and two procs to read/write them.\",\"# src/kernel/cpu.nim const IA32_EFER* = 0xC0000080'u32 IA32_STAR* = 0xC0000081'u32 IA32_LSTAR* = 0xC0000082'u32 IA32_FMASK* = 0xC0000084'u32 proc readMSR*(ecx: uint32): uint64 = var eax, edx: uint32 asm \\\"\\\"\\\" rdmsr : \\\"=a\\\"(`eax`), \\\"=d\\\"(`edx`) : \\\"c\\\"(`ecx`) \\\"\\\"\\\" result = (edx.uint64 shl 32) or eax proc writeMSR*(ecx: uint32, value: uint64) = var eax, edx: uint32 eax = value.uint32 edx = (value shr 32).uint32 asm \\\"\\\"\\\" wrmsr : : \\\"c\\\"(`ecx`), \\\"a\\\"(`eax`), \\\"d\\\"(`edx`) \\\"\\\"\\\" \",\"Now, let's create another module src/kernel/syscalls.nim and add a proc to initialize system calls, and a dummy syscall entry point.\",\"# src/kernel/syscalls.nim import cpu import gdt proc syscallEntry() {.asmNoStackFrame.} = # just halt for now asm \\\"\\\"\\\" cli hlt \\\"\\\"\\\" proc syscallInit*() = # enable syscall feature writeMSR(IA32_EFER, readMSR(IA32_EFER) or 1) # Bit 0: SYSCALL Enable # set up segment selectors in IA32_STAR (Syscall Target Address Register) # # we use KernelCodeSegmentSelector for both parts of the register (47:32 and 63:48) # so for SYSCALL, the kernel segment selectors are: # CS: IA32_STAR[47:32] <-- KernelCodeSegmentSelector # SS: IA32_STAR[47:32] + 8 <-- DataSegmentSelector (shared) # # and for SYSRET, the user segment selectors are: # CS: IA32_STAR[63:48] + 16 <-- UserCodeSegmentSelector # SS: IA32_STAR[63:48] + 8 <-- DataSegmentSelector (shared) # # thus, setting both parts of the register to KernelCodeSegmentSelector # satisfies both requirements (+0 is kernel CS, +8 is shared data segment, +16 is user CS) let star = ( (KernelCodeSegmentSelector.uint64 shl 32) or (KernelCodeSegmentSelector.uint64 shl 48) ) writeMSR(IA32_STAR, star) # set up syscall entry point writeMSR(IA32_LSTAR, cast[uint64](syscallEntry)) # set up flags mask (should mask interrupt flag to disable interrupts) writeMSR(IA32_FMASK, 0x200) # rflags will be ANDed with the *complement* of this value \",\"The syscallEntry proc is a low-level entry point for system calls, hence the pure assembly. We can't rely on conventional prologue/epilogue code here, since the CPU doesn't switch stacks for us. We'll have to do that ourselves as early as possible in the entry point. Right now we just want to make sure that the syscall transition to kernel mode works.\",\"The syscallInit proc does the actual initialization. It enables the syscall feature, sets up the segment selectors, sets the syscall entry point, and sets the flags mask. The flags mask is used to clear the flags corresponding to the bits set in the mask when entering kernel mode.\",\"Finally, let's call syscallInit from src/kernel/main.nim.\",\"# src/kernel/main.nim import syscalls .. proc KernelMainInner(bootInfo: ptr BootInfo) = debugln \\\"\\\" debugln \\\"kernel: Fusion Kernel\\\" ... debug \\\"kernel: Initializing Syscalls \\\" syscallInit() debugln \\\"[success]\\\" \"]},\"210\":{\"h\":\"Invoking System Calls\",\"t\":[\"We should now be able to invoke system calls from user mode. Let's modify our user program to do that. We're going to pass the system call number in rdi, but we won't pass any arguments for now.\",\"# src/user/utask.nim ... proc UserMain*() {.exportc.} = NimMain() asm \\\"\\\"\\\" mov rdi, 1 syscall .loop: pause jmp .loop \\\"\\\"\\\" \",\"Let's try this out and use the QEMU monitor to check where execution stops.\",\"(qemu) x /2i $eip-2 0xffff800000120490: fa cli 0xffff800000120491: f4 hlt \",\"The command x /2i $eip-2 disassembles the two instructions just before the current instruction pointer, which shows that we're executing the cli and hlt instructions in syscallEntry. Just to double-check, we can confirm this by comparing the value of rip with the address of syscallEntry from the kernel linker map.\",\"ffff800000120490 ffff800000120490 4e 16 .../fusion/build/@msyscalls.nim.c.o:(.ltext.syscallEntry__syscalls_u23) ffff800000120490 ffff800000120490 4e 1 syscallEntry__syscalls_u23 \",\"Indeed, the value of rip - 2 is the same as the address of syscallEntry.\",\"Now, let's check the CPU registers.\",\"(qemu) info registers CPU#0 RAX=ffff800000327540 RBX=ffff800000327548 RCX=0000000040000067 RDX=000000004000add8 RSI=0000000000000001 RDI=0000000000000001 RBP=0000000050000ff8 RSP=0000000050000fc8 R8 =ffff800100003c00 R9 =0000000000000000 R10=0000000000000000 R11=0000000000000202 R12=0000000000000000 R13=0000000006bb1588 R14=0000000000000000 R15=0000000007ebf1e0 RIP=ffff8000001204a9 RFL=00000002 [-------] CPL=0 II=0 A20=1 SMM=0 HLT=1 ES =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] CS =0008 0000000000000000 ffffffff 00a09b00 DPL=0 CS64 [-RA] SS =0010 0000000000000000 ffffffff 00c09300 DPL=0 DS [-WA] DS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] FS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] GS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] LDT=0000 0000000000000000 0000ffff 00008200 DPL=0 LDT TR =0020 ffff800000326430 00000067 00008900 DPL=0 TSS64-avl GDT= ffff8000003264d0 0000002f IDT= ffff800000326500 00000fff \",\"The three registers important to us here are rcx, r11, and rdi:\",\"rcx contains the user rip to return to after the system call (0x40000067)\",\"r11 contains the user rflags to restore after the system call (0x202)\",\"rdi contains the system call number (1)\",\"We can also see that CS and SS are set to the kernel code and data segments, respectively, and their DPL=0. rflags also has the IF (interrupt flag) cleared. So everything looks good so far. Notice that rsp is set to 0x50000fc8, which is within the user stack. As I mentioned earlier, we'll need to switch to the kernel stack ourselves.\",\"Let's test sysret to make sure we can return to user mode. We'll modify syscallEntry to put a dummy value in rax as a return code, and then call sysretq (the q suffix is for returning to 64-bit mode; otherwise, sysret would return to 32-bit compatibility mode).\",\"# src/kernel/syscalls.nim ... proc syscallEntry() {.asmNoStackFrame.} = asm \\\"\\\"\\\" mov rax, 0x5050 sysretq \\\"\\\"\\\" \",\"Let's run it and see where we stop.\",\"(qemu) x /2i $eip-2 0x40000067: f3 90 pause 0x40000069: e9 f9 ff ff ff jmp 0x40000067 \",\"We're now executing the pause loop in UserMain, so we're back in user mode. Let's check the registers.\",\"(qemu) info registers CPU#0 RAX=0000000000005050 RBX=0000000000000000 RCX=0000000040000067 RDX=000000004000add8 RSI=0000000000000001 RDI=0000000000000001 RBP=0000000050000ff8 RSP=0000000050000fc8 R8 =ffff800100003c00 R9 =0000000000000000 R10=000000000636d001 R11=0000000000000202 R12=0000000000000000 R13=0000000006bb1588 R14=0000000000000000 R15=0000000007ebf1e0 RIP=0000000040000069 RFL=00000202 [-------] CPL=3 II=0 A20=1 SMM=0 HLT=0 ES =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] CS =001b 0000000000000000 ffffffff 00a0fb00 DPL=3 CS64 [-RA] SS =0013 0000000000000000 ffffffff 00c0f300 DPL=3 DS [-WA] DS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] FS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] GS =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] LDT=0000 0000000000000000 0000ffff 00008200 DPL=0 LDT TR =0020 ffff8000003263f0 00000067 00008900 DPL=0 TSS64-avl GDT= ffff800000326490 0000002f IDT= ffff8000003264c0 00000fff \",\"We can see that rip is back in user space, and CS and SS are set to user code and data segments, respectively, and their DPL=3. The rflags are also restored to the user value with interrupts enabled. Everything looks good.\"]},\"211\":{\"h\":\"Switching Stacks\",\"t\":[\"As I mentioned earlier, the CPU doesn't switch stacks for us when executing syscall. We need to switch to a kernel stack ourselves. We'll use the same stack we use for interrupts, the one we stored its address in tss.rsp0. We'll also need to save the user rsp somewhere so we can restore it later. We'll define two global variables for this in the syscalls module.\",\"# src/kernel/syscalls.nim var kernelStackAddr: uint64 userRsp: uint64 ... proc syscallInit*(kernelStack: uint64) = kernelStackAddr = kernelStack ... \",\"Let's pass the kernel stack address to syscallInit from main.nim.\",\"# src/kernel/main.nim import syscalls proc KernelMainInner(bootInfo: ptr BootInfo) = debugln \\\"\\\" debugln \\\"kernel: Fusion Kernel\\\" ... # create a kernel switch stack and set tss.rsp0 debugln \\\"kernel: Creating kernel switch stack\\\" ... debug \\\"kernel: Initializing Syscalls \\\" syscallInit(tss.rsp0) debugln \\\"[success]\\\" ... \",\"Now, let's modify syscallEntry to switch to the kernel stack and save the user rsp. We'll also push rcx and r11 (user rip and rflags, respectively) on the kernel stack and restore them before calling sysretq to return to user mode.\",\"# src/kernel/syscalls.nim proc syscallEntry() {.asmNoStackFrame.} = asm \\\"\\\"\\\" # save user stack pointer mov %0, rsp # switch to kernel stack mov rsp, %1 push r11 # user rflags push rcx # user rip # TODO: dispatch system call # restore user rip and rflags pop r11 pop rcx # switch to user stack mov rsp, %0 sysretq : \\\"+r\\\"(`userRsp`) : \\\"m\\\"(`kernelStackAddr`) : \\\"rcx\\\", \\\"r11\\\" \\\"\\\"\\\" \",\"Right now, we're not doing much to handle the system call itself. We're just switching stacks, and saving and restoring the user rip and rflags. In order to do something useful, we need to define a system call handler and a way to pass arguments to it.\"]},\"212\":{\"h\":\"System Call Handler\",\"t\":[\"Let's now define the actual system call handler. We'll define a SyscallArgs type to hold the system call number and arguments, and implement a syscall proc that takes a pointer to SyscallArgs and returns a uint64 as the return value.\",\"# src/kernel/syscalls.nim type SyscallArgs = object num: uint64 # rdi arg1: uint64 # rsi arg2: uint64 # rdx arg3: uint64 # r8 arg4: uint64 # r9 arg5: uint64 # r10 ... proc syscall*(args: ptr SyscallArgs): uint64 {.exportc.} = debugln &\\\"syscall: num={args.num}\\\" result = 0x5050 # dummy return value \",\"Notice that we're using the exportc pragma to export the syscall proc, since we'll be calling it from assembly code.\",\"Now, let's modify syscallEntry to call syscall with the system call number and arguments. We'll create the SyscallArgs object on the kernel stack by pushing the appropriate registers, and pass its address to syscall.\",\"# src/kernel/syscalls.nim ... proc syscallEntry() {.asmNoStackFrame.} = asm \\\"\\\"\\\" # save user stack pointer mov %0, rsp # switch to kernel stack mov rsp, %1 push r11 # user rflags push rcx # user rip # create SyscallArgs on the stack push r10 push r9 push r8 push rdx push rsi push rdi # rsp is now pointing to SyscallArgs, pass it to syscall mov rdi, rsp call syscall # pop SyscallArgs pop rdi pop rsi pop rdx pop r8 pop r9 pop r10 # prepare for sysretq pop rcx # user rip pop r11 # user rflags # switch to user stack mov rsp, %0 sysretq : \\\"+r\\\"(`userRsp`) : \\\"m\\\"(`kernelStackAddr`) : \\\"rcx\\\", \\\"r11\\\", \\\"rdi\\\", \\\"rsi\\\", \\\"rdx\\\", \\\"r8\\\", \\\"r9\\\", \\\"r10\\\", \\\"rax\\\" \\\"\\\"\\\" \",\"Notice that on the last line we're telling the compiler that syscallEntry clobbers the indicated registers. Otherwise, the compiler might try to use them for other purposes.\",\"Let's try this out. We still have the user program passing 1, so we should see that printed by syscall, and the dummy return value 0x5050 should be in rax when we return to user mode.\",\"kernel: Initializing Syscalls [success] kernel: Switching to user mode syscall: num=1 \",\"Great! The syscall proc was called and received the correct syscall number. Let's look at the rax register to see if it contains the dummy return value.\",\"(qemu) info registers CPU#0 RAX=0000000000005050 RBX=ffff800000327220 RCX=0000000040000074 RDX=000000004000ade8 RSI=0000000000000001 RDI=0000000000000001 RBP=0000000050000ff8 RSP=0000000050000fc8 R8 =ffff800100003c00 R9 =0000000000000000 R10=0000000050000fc8 R11=0000000000000202 R12=0000000000000000 R13=0000000006bb1588 R14=0000000000000000 R15=0000000007ebf1e0 RIP=0000000040000076 RFL=00000202 [-------] CPL=3 II=0 A20=1 SMM=0 HLT=0 ES =0013 0000000000000000 000fffff 000ff300 DPL=3 DS [-WA] CS =001b 0000000000000000 ffffffff 00a0fb00 DPL=3 CS64 [-RA] SS =0013 0000000000000000 ffffffff 00c0f300 DPL=3 DS [-WA] ... \",\"Indeed, rax contains 0x5050, and from the rip, cs, and ss register values we can see that we're back in user mode. So everything is working as expected.\"]},\"213\":{\"h\":\"System Call Table\",\"t\":[\"Over time, we'll have more system calls, so we'll need a way to dispatch them. One way to do this is store the system call handlers in a table indexed by the system call number. Let's create that table.\",\"# src/kernel/syscalls.nim type SyscallHandler* = proc (args: ptr SyscallArgs): uint64 {.cdecl.} SyscallArgs = object num: uint64 arg1, arg2, arg3, arg4, arg5: uint64 SyscallError* = enum None InvalidSyscall var syscallTable: array[256, SyscallHandler] ... proc syscall*(args: ptr SyscallArgs): uint64 {.exportc.} = debugln &\\\"syscall: num={args.num}\\\" if args.num > syscallTable.high.uint64 or syscallTable[args.num] == nil: return InvalidSyscall.uint64 result = syscallTable[args.num](args) \",\"Now, let's define a system call to output a string to the debug console. The system call will take one argument: a pointer to a string object containing the string to output. We'll register the system call handler in syscallInit.\",\"# src/kernel/syscalls.nim ... proc print*(args: ptr SyscallArgs): uint64 {.cdecl.} = debugln \\\"syscall: print\\\" let s = cast[ptr string](args.arg1) debugln s[] result = 0 proc syscallInit*(kernelStack: uint64) = ... syscallTable[1] = print ... \",\"Let's try to invoke this system call from our user program.\",\"# src/user/utask.nim ... let msg = \\\"user: Hello from user mode!\\\" pmsg = msg.addr proc UserMain*() {.exportc.} = NimMain() asm \\\"\\\"\\\" mov rdi, 1 mov rsi, %0 syscall .loop: pause jmp .loop : : \\\"r\\\"(`pmsg`) : \\\"rdi\\\", \\\"rsi\\\", \\\"rcx\\\", \\\"r11\\\" \\\"\\\"\\\" \",\"We're passing the system call number 1 in rdi, and the address of the string in rsi. Notice that we tell the compiler that the rcx and r11 registers are clobbered (they will be modified by the CPU during the syscall). Let's run it and see what happens.\",\"kernel: Initializing Syscalls [success] kernel: Switching to user mode syscall: num=1 syscall: print user: Hello from user mode! \",\"Great! We can now ask the kernel to print a string for us. This is our first kernel service provided through a system call!\"]},\"214\":{\"h\":\"Argument Validation\",\"t\":[\"There's one important piece missing though. Arguments to system calls have to be validated thoroughly. We can't just blindly trust the user program to pass valid arguments. We already did this for the system call number. But what about the string pointer? The user can pass any pointer value, so it's imperative that we validate it before dereferencing it. In this case, we'll keep it simple and make sure that the pointer is within the user address space. We can check if it's mapped, but that's going to be expensive. Instead, we'll just check if it's within the user address space range, and if it isn't mapped, we'll let the page fault handler deal with it.\",\"Here's the modified print system call.\",\"# src/kernel/syscalls.nim type SyscallError* = enum None InvalidSyscall InvalidArg const UserAddrSpaceEnd* = 0x00007FFFFFFFFFFF ... proc print*(args: ptr SyscallArgs): uint64 {.cdecl.} = debugln \\\"syscall: print\\\" if args.arg1 > UserAddrSpaceEnd: debugln \\\"syscall: print: Invalid pointer\\\" return InvalidArg.uint64 let s = cast[ptr string](args.arg1) debugln s[] result = 0 \",\"Let's try it out by passing an address in kernel space to the system call.\",\"# src/user/utask.nim let msg = \\\"user: Hello from user mode!\\\" pmsg = 0xffff800000100000 # kernel space address ... \",\"If we run this, we should see the error message printed by the kernel.\",\"kernel: Initializing Syscalls [success] kernel: Switching to user mode syscall: num=1 syscall: print syscall: print: Invalid pointer \",\"Awesome! Our argument validation works as expected.\"]},\"215\":{\"h\":\"The System Call\",\"t\":[\"Before we leave this section, let's add one more system call: exit. This system call will take one argument: the exit code. Keep in mind that we don't have a scheduler yet; our kernel transferred control to the user program, the user program called a system call to print a message, and will exit user mode in one thread of execution. So, without other tasks to switch to at the moment, we'll just halt the CPU when the user program exits.\",\"# src/kernel/syscalls.nim proc exit*(args: ptr SyscallArgs): uint64 {.cdecl.} = debugln &\\\"syscall: exit: code={args.arg1}\\\" asm \\\"\\\"\\\" cli hlt \\\"\\\"\\\" \",\"We'll give the exit system call the number 1 instead of print, and we'll make print system call number 2.\",\"# src/kernel/syscalls.nim ... proc syscallInit*(kernelStack: uint64) = ... syscallTable[1] = exit syscallTable[2] = print ... \",\"Now, let's modify the user program to call exit after printing the message.\",\"# src/user/utask.nim ... proc UserMain*() {.exportc.} = NimMain() asm \\\"\\\"\\\" # call print mov rdi, 2 mov rsi, %0 syscall # call exit mov rdi, 1 mov rsi, 0 syscall : : \\\"r\\\"(`pmsg`) : \\\"rdi\\\", \\\"rsi\\\", \\\"rcx\\\", \\\"r11\\\" \\\"\\\"\\\" \",\"Notice that I removed the infinite loop, as the exit syscall does not return. Let's run it and see what happens.\",\"kernel: Initializing Syscalls [success] kernel: Switching to user mode syscall: num=2 syscall: print user: Hello from user mode! syscall: num=1 syscall: exit: code=0 \",\"Looks good! The exit system call was called and received the correct exit code, and the kernel halted the CPU.\",\"This is another big milestone. We now have a working system call interface, and we can invoke kernel services from user mode. In the next section, we'll look into encapsulating user task related context in a Task object.\"]},\"216\":{\"h\":\"Tasks\",\"t\":[\"We're starting to accumulate a number of things about the user program that the kernel needs to track: the user page table, the user stack, the kernel switch stack, and the user rsp when executing syscall. These are all currently tracked in global variables. Once we start having more than one user task, it will be hard to keep track of all these things.\"]},\"217\":{\"h\":\"Task definition\",\"t\":[\"Let's define a Task type to encapsulate all this information. This will prepare us for having multiple tasks. Let's create a new module tasks.nim for this.\",\"# src/kernel/tasks.nim import common/pagetables import vmm type TaskStack* = object data*: ptr uint8 size*: uint64 bottom*: uint64 Task* = ref object id*: uint64 pml4*: ptr PML4Table ustack*: TaskStack kstack*: TaskStack rsp*: uint64 var nextId*: uint64 = 0 \",\"Each task has a unique id, a pointer to its page table, and two stacks: one for user mode and one for kernel mode. The rsp field is where the user stack pointer is stored when the task is executing in kernel mode (e.g. when executing a system call). We also define a TaskStack type to encapsulate the stack address, size, and the bottom of the stack (i.e. the address just beyond the end of the stack). The nextId variable will be used to assign unique IDs to each task.\",\"Before we can start creating tasks, we need a way to allocate virtual memory within an address space. Let's add a few things to the virtual memory manager to support this.\"]},\"218\":{\"h\":\"Address space abstraction\",\"t\":[\"For a particular address space, we need to track which regions are currently allocated, and a way to allocate more regions. We'll use this to allocate the user stack and kernel stack. To make it easy to refer to a particular address space, and track which regions are currently allocated in it, we'll define a VMAddressSpace type.\",\"# src/kernel/vmm.nim type VMRegion* = object start: VirtAddr npages: uint64 VMAddressSpace* = object minAddress*: VirtAddr maxAddress*: VirtAddr regions*: seq[VMRegion] pml4*: ptr PML4Table \",\"Notice that I also defined a VMRegion type to represent a contiguous region of virtual memory. Notice also that I defined two fields minAddress and maxAddress in VMAddressSpace to track the minimum and maximum addresses in the address space. This will make it easy to confine the address space to the lower half (for user space) or upper half (for kernel space) of the virtual address space.\",\"Let's make a slight modification to the Task type to use the new VMAddressSpace type instead of a pointer to a PML4Table.\",\" Task* = ref object id*: uint64 space*: VMAddressSpace ustack*: TaskStack kstack*: TaskStack rsp*: uint64 \",\"Let's now add a proc to allocate virtual memory in an address space.\",\"# src/kernel/vmm.nim import std/algorithm ... proc vmalloc*( space: var VMAddressSpace, pageCount: uint64, pageAccess: PageAccess, pageMode: PageMode, ): Option[VirtAddr] = # find a free region var virtAddr: VirtAddr = space.minAddress for region in space.regions: if virtAddr +! pageCount * PageSize <= region.start: break virtAddr = region.start +! region.npages * PageSize # allocate physical memory and map it let physAddr = pmalloc(pageCount).get # TODO: handle allocation failure mapRegion(space.pml4, virtAddr, physAddr, pageCount, pageAccess, pageMode) # add the region to the address space space.regions.add VMRegion(start: virtAddr, npages: pageCount) # sort the regions by start address space.regions = space.regions.sortedByIt(it.start) result = some virtAddr \",\"The vmalloc proc finds a free region in the address space, allocates physical memory, and maps it into the address space. It returns the virtual address of the allocated region. We then sort the regions by start address, so that we can easily find a free region in the future. (Ideally, the standard library should provide a sorted container that we can use here, but for now, we'll just sort the regions manually after adding a new one.)\",\"We also need a way to add existing VM regions to an address space. We'll need this to add the existing kernel VM regions (code/data and stack) to its address space.\",\"# src/kernel/vmm.nim proc vmAddRegion*(space: var VMAddressSpace, start: VirtAddr, npages: uint64) = space.regions.add VMRegion(start: start, npages: npages) \"]},\"219\":{\"h\":\"Kernel address space\",\"t\":[\"The kernel itself needs its own address space. Let's create a global variable kspace to track it.\",\"# src/kernel/vmm.nim ... const KernelSpaceMinAddress* = 0xffff800000000000'u64.VirtAddr KernelSpaceMaxAddress* = 0xffffffffffffffff'u64.VirtAddr UserSpaceMinAddress* = 0x0000000000000000'u64.VirtAddr UserSpaceMaxAddress* = 0x00007fffffffffff'u64.VirtAddr var kspace*: VMAddressSpace proc vmInit*(physMemoryVirtualBase: uint64, physAlloc: PhysAlloc) = physicalMemoryVirtualBase = physMemoryVirtualBase pmalloc = physAlloc kspace = VMAddressSpace( minAddress: KernelSpaceMinAddress, maxAddress: KernelSpaceMaxAddress, regions: @[], pml4: getActivePML4(), ) \",\"Let's also add the existing kernel VM regions to it (code/data and stack).\",\"# src/kernel/main.nim ... proc KernelMain(bootInfo: ptr BootInfo) {.exportc.} = ... debug \\\"kernel: Initializing virtual memory manager \\\" vmInit(bootInfo.physicalMemoryVirtualBase, pmm.pmAlloc) vmAddRegion(kspace, bootInfo.kernelImageVirtualBase.VirtAddr, bootInfo.kernelImagePages) vmAddRegion(kspace, bootInfo.kernelStackVirtualBase.VirtAddr, bootInfo.kernelStackPages) debugln \\\"[success]\\\" \"]},\"220\":{\"h\":\"Creating a task\",\"t\":[\"Creating a task involves the following steps:\",\"Creating a VM address space and allocating a page table\",\"Mapping the task image (code and data) into the task page table\",\"Mapping the kernel space into the task page table\",\"Allocating and mapping a user stack (in user space)\",\"Allocating and mapping a kernel stack (in kernel space)\",\"Creating an interrupt stack frame on the kernel stack (for switching to user mode)\",\"Setting the rsp field to point to the interrupt stack frame\",\"This seems like a lot of steps, but it's not too bad. Let's add a createTask proc to the tasks module to do all this. We'll also add a createStack helper proc to allocate a stack in a particular address space.\",\"# src/kernel/tasks.nim proc createStack*(space: var VMAddressSpace, npages: uint64, mode: PageMode): TaskStack = let stackPtr = vmalloc(space, npages, paReadWrite, mode) if stackPtr.isNone: raise newException(Exception, \\\"tasks: Failed to allocate stack\\\") result.data = cast[ptr UncheckedArray[uint64]](stackPtr.get) result.size = npages * PageSize result.bottom = cast[uint64](result.data) + result.size proc createTask*( imageVirtAddr: VirtAddr, imagePhysAddr: PhysAddr, imagePageCount: uint64, entryPoint: VirtAddr ): Task = new(result) let taskId = nextId inc nextId var uspace = VMAddressSpace( minAddress: UserSpaceMinAddress, maxAddress: UserSpaceMaxAddress, pml4: cast[ptr PML4Table](new PML4Table) ) # map task image mapRegion( pml4 = uspace.pml4, virtAddr = imageVirtAddr, physAddr = imagePhysAddr, pageCount = imagePageCount, pageAccess = paReadWrite, pageMode = pmUser, ) # map kernel space var kpml4 = getActivePML4() for i in 256 ..< 512: uspace.pml4.entries[i] = kpml4.entries[i] # create user and kernel stacks let ustack = createStack(uspace, 1, pmUser) let kstack = createStack(kspace, 1, pmSupervisor) # create interrupt stack frame on the kernel stack var index = kstack.size div 8 kstack.data[index - 1] = cast[uint64](DataSegmentSelector) # SS kstack.data[index - 2] = cast[uint64](ustack.bottom) # RSP kstack.data[index - 3] = cast[uint64](0x202) # RFLAGS kstack.data[index - 4] = cast[uint64](UserCodeSegmentSelector) # CS kstack.data[index - 5] = cast[uint64](entryPoint) # RIP result.id = taskId result.space = uspace result.ustack = ustack result.kstack = kstack result.rsp = cast[uint64](kstack.data[index - 5].addr) \",\"Most of this code is not new; we just put it together in one place. The only new thing is calling vmalloc to allocate the user stack and kernel stack (which in turn allocates the backing physical memory). We no longer need to create global arrays to statically allocate the stacks.\"]},\"221\":{\"h\":\"Switching to a task\",\"t\":[\"The part responsible for switching to a task was at the end of the KernelMainInner proc. Let's move it to the tasks module.\",\"# src/kernel/tasks.nim proc switchTo*(task: var Task) {.noreturn.} = tss.rsp0 = task.kstack.bottom let rsp = task.rsp setActivePML4(task.space.pml4) asm \\\"\\\"\\\" mov rbp, 0 mov rsp, %0 iretq : : \\\"r\\\"(`rsp`) \\\"\\\"\\\" \",\"We update tss.rsp0 to point to the kernel stack (so it can be used when the task switches to kernel mode), set the active page table to the task's page table, set the rsp register to the task's rsp field (which should point to the interrupt stack frame), and then execute iretq to switch to the task.\"]},\"222\":{\"h\":\"Trying it out\",\"t\":[\"We can now replace a big chunk of the code we had in KernelMainInner with a call to createTask and switchTo.\",\"# src/kernel/main.nim ... proc KernelMain(bootInfo: ptr BootInfo) {.exportc.} = ... debugln \\\"kernel: Creating user task\\\" var task = createTask( imageVirtAddr = UserImageVirtualBase.VirtAddr, imagePhysAddr = bootInfo.userImagePhysicalBase.PhysAddr, imagePageCount = bootInfo.userImagePages, entryPoint = UserImageVirtualBase.VirtAddr ) debug \\\"kernel: Initializing Syscalls \\\" syscallInit(task.kstack.bottom) debugln \\\"[success]\\\" debugln \\\"kernel: Switching to user mode\\\" switchTo(task) \",\"Let's try it out.\",\"kernel: Initializing GDT [success] kernel: Initializing IDT [success] kernel: Creating user task kernel: Initializing Syscalls [success] kernel: Switching to user mode syscall: num=2 syscall: print user: Hello from user mode! syscall: num=1 syscall: exit: code=0 \",\"Great! It's nice to be able to encapsulate all the task information in a Task object, and to be able to create a task and switch to it with just a few lines of code.\",\"There's one thing that I still don't like, which is that we initialize the system calls with the kernel stack of the task. The system call entry point should be able to switch to the current task's kernel stack on its own, without relying on a global variable for the kernel stack. Once we start having multiple tasks, we need to be able to switch to the kernel stack of the current task.\"]},\"223\":{\"h\":\"Tracking the current task\",\"t\":[\"We can solve this problem by tracking the current task in a global variable. Let's add a currentTask variable to the tasks module, and set it in the switchTo proc. One thing we'll do differently here is that we'll add the exportc pragma to this variable, so that we can access it from inline assembly later.\",\"# src/kernel/tasks.nim var currentTask* {.exportc.}: Task proc switchTo*(task: var Task) {.noreturn.} = currentTask = task ... \",\"Now, we can change the system call entry point to switch to the current task's kernel stack.\",\"# src/kernel/syscalls.nim import tasks ... var syscallTable: array[256, SyscallHandler] tss {.importc.}: TaskStateSegment currentTask {.importc.}: Task proc syscallEntry() {.asmNoStackFrame.} = asm \\\"\\\"\\\" # switch to kernel stack mov %0, rsp mov rsp, %1 ... # switch to user stack mov rsp, %0 sysretq : \\\"+r\\\"(`currentTask`->rsp) : \\\"m\\\"(`currentTask`->kstack.bottom) : \\\"rcx\\\", \\\"r11\\\", \\\"rdi\\\", \\\"rsi\\\", \\\"rdx\\\", \\\"rcx\\\", \\\"r8\\\", \\\"r9\\\", \\\"rax\\\" \\\"\\\"\\\" \",\"We can now remove the argument to syscallInit.\",\"# src/kernel/syscalls.nim ... proc syscallInit*() = ... \",\"And make the corresponding change in KernelMainInner. Also, since we don't need the kernel stack to initialize system calls anymore, we can move the call to syscallInit before creating the task.\",\"# src/kernel/main.nim proc KernelMainInner(bootInfo: ptr BootInfo) = ... debug \\\"kernel: Initializing Syscalls \\\" syscallInit() debugln \\\"[success]\\\" debugln \\\"kernel: Creating user task\\\" var task = createTask( imageVirtAddr = UserImageVirtualBase.VirtAddr, imagePhysAddr = bootInfo.userImagePhysicalBase.PhysAddr, imagePageCount = bootInfo.userImagePages, entryPoint = UserImageVirtualBase.VirtAddr ) debugln \\\"kernel: Switching to user mode\\\" switchTo(task) ... \",\"Much simpler. Let's try it out.\",\"kernel: Initializing GDT [success] kernel: Initializing IDT [success] kernel: Initializing Syscalls [success] kernel: Creating user task kernel: Switching to user mode syscall: num=2 syscall: print user: Hello from user mode! syscall: num=1 syscall: exit: code=0 \",\"All good! We're in a much better place than we were before.\",\"Ideally, we should now be able to create multiple tasks and switch between them. But, since we're creating a single address space OS, we need to be able to load tasks at different virtual addresses. So far, we've been using a fixed virtual address for the user task; i.e., the task image is not relocatable. This means we have to link every user program at a different virtual address, which is not ideal. Traditional operating systems use a separate address space for each task, so linking the task image at a fixed virtual address is not a problem. In our case, we need to make the task image relocatable, so that we can load it at an arbitrary virtual address. That's what we'll do next.\"]},\"224\":{\"h\":\"Position Independent Code\",\"t\":[\"Fusion is a single address space OS, which means that all tasks share the same address space. This requires the ability to load task images at arbitrary addresses (depending on the available virtual memory). Currently, when we compile and link a task, the linker will generate a binary that is not position independent; it has to be loaded at a pre-determined address. We need to change this and use position independent code (PIC) object files and position independent executables (PIE) instead.\"]},\"225\":{\"h\":\"What is PIC and PIE?\",\"t\":[\"A PIE is a binary that can be loaded at any address in memory. This is achieved by using relative addressing instead of absolute addressing. For example, instead of using the absolute address of a function, the compiler uses the offset from the current instruction pointer. This is called position independent code (PIC), and is typically used for shared libraries, since they can be loaded at any address in the process address space. To generate PIC object files, we need to use the -fPIC compiler flag. A PIE can be generated using the --pie linker flag, assuming that all object files are PIC.\",\"In some cases, however, the linker cannot use relative addressing for some symbols. In particular, global variables that contain pointers to other global variables or functions cannot be resolved at link time. This is because the linker does not know the address of the target symbol at link time, and therefore cannot compute the offset. In this case, the linker will generate a relocation entry, which is a record that tells the loader to patch the binary at runtime. The loader will then resolve the relocation entries and patch the binary before starting the task.\",\"This process is typical in loading shared libraries, but it is also used for PIEs. There are two types of PIEs: dynamic and static.\",\"A dynamic PIE relies on the same dynamic linker as shared libraries, and therefore needs to be loaded by the dynamic linker (typically ld.so).\",\"A static PIE, on the other hand, does not need a dynamic linker. Instead, it relies on C runtime startup code that is linked into the binary (typically Scrt1.o). The startup code applies the relocation entries by patching the loaded binary in memory.\",\"What we want is a static PIE, but since we do not have a C runtime, we need to implement the relocation patching ourselves.\"]},\"226\":{\"h\":\"Generating a static PIE\",\"t\":[\"Let's modify the user task nim.cfg file to generate a static PIE.\",\"# src/user/nim.cfg ... --passc:\\\"-fPIC\\\" ... --passl:\\\"--pie\\\" \",\"Let's also remove the fixed address from the linker script, since the whole point of a PIE is to be able to load it at any address.\",\"/* src/user/utask.ld */ SECTIONS { . = 0x0000000040000000; /* 1 GiB */ <-- remove this line ... } \",\"Now, let's compile and link the task and take a look at the generated binary.\",\"$ just user ... $ file build/user/utask.bin build/user/utask.bin: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), static-pie linked, not stripped \",\"Good, we have a static PIE. Before we try it out, let's take a look at the generated sections in the binary. To do this, we need to temporarily comment out the use of the linker script and the binary output format to generate a vanilla ELF binary that we can inspect.\",\"# src/user/nim.cfg ... #--passl:\\\"-T src/user/utask.ld\\\" #--passl:\\\"--oformat=binary\\\" \",\"Let's use llvm-readelf to inspect the sections in the binary.\",\"$ llvm-readelf -S build/user/utask.bin There are 18 section headers, starting at offset 0xd300: Section Headers: [Nr] Name Type Address Off Size ES Flg Lk Inf Al [ 0] NULL 0000000000000000 000000 000000 00 0 0 0 [ 1] .dynsym DYNSYM 0000000000000200 000200 000018 18 A 4 1 8 [ 2] .gnu.hash GNU_HASH 0000000000000218 000218 00001c 00 A 1 0 8 [ 3] .hash HASH 0000000000000234 000234 000010 04 A 1 0 4 [ 4] .dynstr STRTAB 0000000000000244 000244 000001 00 A 0 0 1 [ 5] .rela.dyn RELA 0000000000000248 000248 000300 18 A 1 0 8 [ 6] .rodata PROGBITS 0000000000000550 000550 000bb0 00 AMS 0 0 16 [ 7] .text PROGBITS 0000000000002100 001100 008c3a 00 AX 0 0 16 [ 8] .data.rel.ro PROGBITS 000000000000bd40 009d40 000180 00 WA 0 0 16 [ 9] .dynamic DYNAMIC 000000000000bec0 009ec0 0000d0 10 WA 4 0 8 [10] .got PROGBITS 000000000000bf90 009f90 000000 00 WA 0 0 8 [11] .relro_padding NOBITS 000000000000bf90 009f90 000070 00 WA 0 0 1 [12] .data PROGBITS 000000000000cf90 009f90 0000e0 00 WA 0 0 8 [13] .bss NOBITS 000000000000d070 00a070 2004a8 00 WA 0 0 16 [14] .comment PROGBITS 0000000000000000 00a070 00007d 01 MS 0 0 1 [15] .symtab SYMTAB 0000000000000000 00a0f0 001848 18 17 258 8 [16] .shstrtab STRTAB 0000000000000000 00b938 000091 00 0 0 1 [17] .strtab STRTAB 0000000000000000 00b9c9 001930 00 0 0 1 \",\"There's a lot of sections here, but we'll focus on code (text) and data sections. In addition to the usual ones (.text, .rodata, .data, and .bss), a new data section shows up: .data.rel.ro. This is a read-only data section (similar to .rodata) that contains data that needs to be relocated. We'll look at relocations later, but for now let's just include this section in the linker script.\",\"SECTIONS { .text : { *utask*.o(.*text.UserMain) *utask*.o(.*text.*) *(.*text*) } .rodata : { *(.*rodata*) } .data.rel.ro : { *(.data.rel.ro) } .data : { *(.*data*) *(.*bss) } .shstrtab : { *(.shstrtab) } /* cannot be discarded */ /DISCARD/ : { *(*) } } \"]},\"227\":{\"h\":\"Trying it out\",\"t\":[\"Let's uncomment the lines we commented out earlier in the nim.cfg file (for the linker script and output format) and see what happens when we try to run it.\",\"$ just run ... kernel: Initializing Syscalls [success] kernel: Creating user task kernel: Switching to user mode syscall: num=2 syscall: print syscall: num=1 syscall: exit: code=0 \",\"It works, but there's no message printed from the user task (that we pass to the print syscall). Let's print the arg1 argument value passed to the print syscall to see what address is being passed.\",\"# src/user/syscalls.nim ... proc print*(args: ptr SyscallArgs): uint64 {.cdecl.} = debugln &\\\"syscall: print (arg1={args.arg1:#x})\\\" ... \",\"kernel: Switching to user mode syscall: num=2 syscall: print (arg1=0x40209ee8) syscall: num=1 syscall: exit: code=0 \",\"The arg1 looks like a valid address, but for some reason nothing is printed. If we look at the linker map file at that address we can see that it's the address of the msg string:\",\" VMA LMA Size Align Out In Symbol ... 209ee0 209ee0 18 8 build/user/@mutask.nim.c.o:(.bss) 209ee0 209ee0 8 1 pmsg__utask_u5 209ee8 209ee8 10 1 msg__utask_u4 \",\"This was very confusing to me before I learned about the need for relocation even in static PIEs. To understand what's going on, we need to look at how Nim defines its string type. The relevant definition is in the system/strs_v2.nim file in the Nim standard library.\",\"type ... NimStrPayload {.core.} = object cap: int data: UncheckedArray[char] NimStringV2 {.core.} = object len: int p: ptr NimStrPayload ## can be nil if len == 0. \",\"The NimStrPayload object contains the capacity of the string and the actual bytes making up the string. The NimStringV2 object contains the length of the string and a pointer to a payload object (this is the string type normally used in Nim code). OK, so now we know that the msg variable is not the string itself, but a pair of length and pointer to the string. This is evident from the Size value in the linker map file: the msg variable takes up 0x10 (16) bytes: 8 bytes for the len field and 8 bytes for the p field.\",\"So, let's find out what's stored in the fields of the msg string variable.\",\"# src/user/syscalls.nim ... proc print*(args: ptr SyscallArgs): uint64 {.cdecl.} = debugln &\\\"syscall: print (arg1={args.arg1:#x})\\\" debugln &\\\"syscall: print: arg1.len = {cast[ptr uint64](args.arg1)[]}\\\" debugln &\\\"syscall: print: arg1.p = {cast[ptr uint64](args.arg1 + 8)[]:#x}\\\" ... \",\"kernel: Creating user task kernel: Switching to user mode syscall: num=2 syscall: print (arg1=0x40209ee8) syscall: print: arg1.len = 21 syscall: print: arg1.p = 0x0 syscall: num=1 syscall: exit: code=0 \",\"Well, the len field is correct, but the p field is 0x0. This is the situation I talked about above: we have a global pointer (the p field of NimStringV2) that points to another global variable (the NimStrPayload object). The linker cannot resolve this at link time for a PIE, so it sets it to 0, and generates a relocation entry for the loader to use for patching that location at load time (once the actual location of the binary is known). That's what we need to do to make this work.\"]},\"228\":{\"h\":\"Understanding relocations\",\"t\":[\"Let's take a look at the sections in the binary again.\",\"$ llvm-readelf -S build/user/utask.bin There are 18 section headers, starting at offset 0xd300: Section Headers: [Nr] Name Type Address Off Size ES Flg Lk Inf Al [ 0] NULL 0000000000000000 000000 000000 00 0 0 0 [ 1] .dynsym DYNSYM 0000000000000200 000200 000018 18 A 4 1 8 [ 2] .gnu.hash GNU_HASH 0000000000000218 000218 00001c 00 A 1 0 8 [ 3] .hash HASH 0000000000000234 000234 000010 04 A 1 0 4 [ 4] .dynstr STRTAB 0000000000000244 000244 000001 00 A 0 0 1 [ 5] .rela.dyn RELA 0000000000000248 000248 000300 18 A 1 0 8 [ 6] .rodata PROGBITS 0000000000000550 000550 000bb0 00 AMS 0 0 16 [ 7] .text PROGBITS 0000000000002100 001100 008c3a 00 AX 0 0 16 [ 8] .data.rel.ro PROGBITS 000000000000bd40 009d40 000180 00 WA 0 0 16 [ 9] .dynamic DYNAMIC 000000000000bec0 009ec0 0000d0 10 WA 4 0 8 [10] .got PROGBITS 000000000000bf90 009f90 000000 00 WA 0 0 8 [11] .relro_padding NOBITS 000000000000bf90 009f90 000070 00 WA 0 0 1 [12] .data PROGBITS 000000000000cf90 009f90 0000e0 00 WA 0 0 8 [13] .bss NOBITS 000000000000d070 00a070 2004a8 00 WA 0 0 16 [14] .comment PROGBITS 0000000000000000 00a070 00007d 01 MS 0 0 1 [15] .symtab SYMTAB 0000000000000000 00a0f0 001848 18 17 258 8 [16] .shstrtab STRTAB 0000000000000000 00b938 000091 00 0 0 1 [17] .strtab STRTAB 0000000000000000 00b9c9 001930 00 0 0 1 \",\"This time we'll focus on the section containing the relocation entries: .rela.dyn (notice that its type is RELA, which is short for RELocations with Addend). Let's take a look at the relocation entries (I'll use llvm-objdump -R here instead of llvm-readelf -r since interpreting its output is more straightforward).\",\"$ llvm-objdump -R build/user/utask.bin build/user/utask.bin: file format elf64-x86-64 DYNAMIC RELOCATION RECORDS OFFSET TYPE VALUE 000000000000bd48 R_X86_64_RELATIVE *ABS*+0xd38 000000000000bd58 R_X86_64_RELATIVE *ABS*+0xd58 000000000000bd68 R_X86_64_RELATIVE *ABS*+0xd90 000000000000bd78 R_X86_64_RELATIVE *ABS*+0xda0 000000000000bd88 R_X86_64_RELATIVE *ABS*+0xdb8 000000000000bd98 R_X86_64_RELATIVE *ABS*+0xdd8 000000000000bda8 R_X86_64_RELATIVE *ABS*+0xde8 000000000000bdb8 R_X86_64_RELATIVE *ABS*+0xdf8 000000000000bdc8 R_X86_64_RELATIVE *ABS*+0xe08 000000000000bdd8 R_X86_64_RELATIVE *ABS*+0xdf8 000000000000bde8 R_X86_64_RELATIVE *ABS*+0xe28 000000000000bdf8 R_X86_64_RELATIVE *ABS*+0xe38 000000000000be08 R_X86_64_RELATIVE *ABS*+0xe48 000000000000be18 R_X86_64_RELATIVE *ABS*+0xe70 000000000000be28 R_X86_64_RELATIVE *ABS*+0xea0 000000000000be38 R_X86_64_RELATIVE *ABS*+0xeb0 000000000000be48 R_X86_64_RELATIVE *ABS*+0xef0 000000000000be58 R_X86_64_RELATIVE *ABS*+0xf70 000000000000be68 R_X86_64_RELATIVE *ABS*+0xf90 000000000000be78 R_X86_64_RELATIVE *ABS*+0x1000 000000000000be88 R_X86_64_RELATIVE *ABS*+0x1010 000000000000be98 R_X86_64_RELATIVE *ABS*+0x10b8 000000000000bea8 R_X86_64_RELATIVE *ABS*+0x10c8 000000000000beb8 R_X86_64_RELATIVE *ABS*+0x10e0 000000000000cf90 R_X86_64_RELATIVE *ABS*+0x2100 000000000000cfa8 R_X86_64_RELATIVE *ABS*+0x550 000000000000cfc8 R_X86_64_RELATIVE *ABS*+0x2140 000000000000cfe0 R_X86_64_RELATIVE *ABS*+0x560 000000000000d000 R_X86_64_RELATIVE *ABS*+0x2180 000000000000d018 R_X86_64_RELATIVE *ABS*+0x570 000000000000d038 R_X86_64_RELATIVE *ABS*+0x21c0 000000000000d050 R_X86_64_RELATIVE *ABS*+0x590 \",\"There are a lot of relocation entries here, but they all have the same type: R_X86_64_RELATIVE. Basically, this tells the loader to patch the binary at the given OFFSET by adding the addend VALUE to the base address where the binary is loaded (*ABS*). For example, the first entry tells the loader to patch the binary at offset 0xbd48 by adding the addend 0xd38 to the image base address.\",\"If we look at those offsets, we can see that the first 24 entries are in the .data.rel.ro section, and the last 8 entries are in the .data section.\",\" [Nr] Name Type Address Off Size ES Flg Lk Inf Al ... [ 8] .data.rel.ro PROGBITS 000000000000bd40 009d40 000180 00 WA 0 0 16 ... [12] .data PROGBITS 000000000000cf90 009f90 0000e0 00 WA 0 0 8 \",\"The .data.rel.ro section contains read-only data that needs to be relocated (often called RELRO). But how can it be read-only if it needs to be patched? The idea is to make the section read-only after the relocation entries have been applied. The .data section contains read-write data, some of which also needs to be relocated.\",\"Let's take a look at linker map file to see what is in these sections.\",\" VMA LMA Size Align Out In Symbol ... bd40 bd40 180 16 .data.rel.ro bd40 bd40 120 8 build/user/@m..@s..@s..@s..@s..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem.nim.c.o:(.data.rel.ro) bd40 bd40 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_54 bd50 bd50 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_56 bd60 bd60 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_58 bd70 bd70 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_60 bd80 bd80 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_45 bd90 bd90 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_65 bda0 bda0 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_67 bdb0 bdb0 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_72 bdc0 bdc0 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_74 bdd0 bdd0 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_77 bde0 bde0 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_81 bdf0 bdf0 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_83 be00 be00 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_9 be10 be10 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_70 be20 be20 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_7 be30 be30 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_85 be40 be40 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_87 be50 be50 10 1 TM__Q5wkpxktOdTGvlSRo9bzt9aw_90 be60 be60 10 8 build/user/@m..@scommon@suefi.nim.c.o:(.data.rel.ro) be60 be60 10 1 TM__pmebpDrnfB5mBIQZTCopKw_3 be70 be70 10 8 build/user/@m..@scommon@slibc.nim.c.o:(.data.rel.ro) be70 be70 10 1 TM__yBWtCXgKzcQMoAZ89cNTLsQ_9 be80 be80 20 16 build/user/@m..@skernel@sdebugcon.nim.c.o:(.data.rel.ro) be80 be80 10 1 TM__1g8zrI6ncbiETa2P7NNF9bg_4 be90 be90 10 1 TM__1g8zrI6ncbiETa2P7NNF9bg_6 bea0 bea0 10 16 build/user/@m..@scommon@smalloc.nim.c.o:(.data.rel.ro) bea0 bea0 10 1 TM__DFVzADEzeiwVkSytAkgKSQ_4 beb0 beb0 10 8 build/user/@mutask.nim.c.o:(.data.rel.ro) beb0 beb0 10 1 TM__ZYeLyBLx1ZJA3JEc71VOcA_3 ... cf90 cf90 e0 8 .data cf90 cf90 e0 8 build/user/@m..@s..@s..@s..@s..@s..@s.choosenim@stoolchains@snim-2.0.0@slib@ssystem@sexceptions.nim.c.o:(.data) cf90 cf90 38 1 NTIv2__KZk2hR9c7XDat5d89bT8RgRA_ cfc8 cfc8 38 1 NTIv2__sUSFsM69cxbQEmaJuFxUD8w_ d000 d000 38 1 NTIv2__nv8HG9cQ7K8ZPnb0AFnX9cYQ_ d038 d038 38 1 NTIv2__CrB9bTWm1Xdf09bhlG9cbbyPA_ \",\"The mangled symbols in the linker map file are Nim-generated C symbols, so it's hard to tell what they are. But let's take the one symbol defined in the build/user/@mutask.nim.c.o object file. If we look at the corresponding generated C code, we find that it's a pointer to a string struct (I included both the string struct and the pointer).\",\"static const struct { NI cap; NIM_CHAR data[21+1]; } TM__ZYeLyBLx1ZJA3JEc71VOcA_2 = { 21 | NIM_STRLIT_FLAG, \\\"Hello from user mode!\\\" }; static const NimStringV2 TM__ZYeLyBLx1ZJA3JEc71VOcA_3 = {21, (NimStrPayload*)&TM__ZYeLyBLx1ZJA3JEc71VOcA_2}; \",\"These are the two types we saw above: NimStrPayload and NimStringV2: TM__ZYeLyBLx1ZJA3JEc71VOcA_2 is an instance of the NimStrPayload type (which contains the actual char array), and TM__ZYeLyBLx1ZJA3JEc71VOcA_3 is an instance of the NimStringV2 type (which contains the length and a pointer to the payload object).\",\"Given that the address offset of the NimStringV2 object is 0xbeb0 (as shown in the linker map file), and that the p field is at offset 8 in the struct (the len field takes 8 bytes), then the location to be patched is 0xbeb0 + 8 = 0xbeb8. If we look at the relocation entries we saw above, indeed we can see an entry for this offset:\",\"000000000000beb8 R_X86_64_RELATIVE *ABS*+0x10e0 \",\"So the loader is asked to patch that location by adding the addend 0x10e0 to the image base address. Let's see what's at that address in the linker map.\",\" VMA LMA Size Align Out In Symbol ... 10e0 10e0 20 8 build/user/@mutask.nim.c.o:(.rodata) 10e0 10e0 20 1 TM__ZYeLyBLx1ZJA3JEc71VOcA_2 \",\"Lo and behold, it's the NimStrPayload object we saw above. So the loader will patch the p pointer at offset 0xbeb8 by adding 0x10e0 to the image base address, which will make it point to the NimStrPayload object. Voilà!\"]},\"229\":{\"h\":\"Raw binary with relocations\",\"t\":[\"We don't have ELF support in our kernel (at least not yet), and I don't want to distract myself by implementing it now. So, we'll keep it simple and update the linker script to include the .rela.dyn section in the binary, and use it to patch the binary at load time. There's one problem though: the loader needs to know where the relocation entries are in the binary, and how many there are. We can add our own metadata section, but there's already one available as part of the ELF format: the .dynamic section. This section contains a list of tags and values that are typically used by the dynamic linker, but we can also use it to locate the relocation entries. Let's take a quick look at that section using llvm-readelf -d.\",\"$ llvm-readelf -d build/user/utask.bin Dynamic section at offset 0x9ec0 contains 13 entries: Tag Type Name/Value 0x000000006ffffffb (FLAGS_1) PIE 0x0000000000000015 (DEBUG) 0x0 0x0000000000000007 (RELA) 0x248 0x0000000000000008 (RELASZ) 768 (bytes) 0x0000000000000009 (RELAENT) 24 (bytes) 0x000000006ffffff9 (RELACOUNT) 32 0x0000000000000006 (SYMTAB) 0x200 0x000000000000000b (SYMENT) 24 (bytes) 0x0000000000000005 (STRTAB) 0x244 0x000000000000000a (STRSZ) 1 (bytes) 0x000000006ffffef5 (GNU_HASH) 0x218 0x0000000000000004 (HASH) 0x234 0x0000000000000000 (NULL) 0x0 \",\"I highlighted the relevant entries. The RELA entry tells us where the relocation entries section (.rela.dyn) is located in the binary, the RELASZ entry tells us the size of that section, the RELAENT entry tells us the size of each relocation entry, and the RELACOUNT entry tells us how many relocation entries there are. It's exactly what we want. Also, notice that the last entry is always a NULL entry, so we can use that to locate the end of the section.\",\"But where do we put the .dynamic section in the output image? If we put it in the middle (or end) of the image, we won't be able to locate it, so we'll need something else to locate it. Instead, we can just put it in the beginning of the image, followed by the relocation entries, followed by the text and data sections. We just have to adjust our assumption that the entry point is not at the beginning of the image, but rather comes after the .rela.dyn section. Let's update the linker script to do so.\",\"SECTIONS { .dynamic : { *(.dynamic) } .rela.dyn : { *(.rela.dyn) } .text : { *utask*.o(.*text.UserMain) *utask*.o(.*text.*) *(.*text*) } .rodata : { *(.*rodata*) } .data.rel.ro : { *(.data.rel.ro) } .data : { *(.*data*) *(.*bss) } .shstrtab : { *(.shstrtab) } /* cannot be discarded */ /DISCARD/ : { *(*) } } \",\"If we compile and link the task, we get the following error:\",\"ld.lld: error: section: .data.rel.ro is not contiguous with other relro sections \",\"Apparently, some loaders support loading only a single RELRO segment (a segment in ELF maps to one or more contiguous sections). Both the .dynamic and .data.rel.ro sections are RELRO sections, so we need to make sure they are contiguous. We can fix it by putting the .data.rel.ro right after the .dynamic section.\",\"SECTIONS { .dynamic : { *(.dynamic) } .data.rel.ro : { *(.data.rel.ro) } .rela.dyn : { *(.rela.dyn) } .text : { *utask*.o(.*text.UserMain) *utask*.o(.*text.*) *(.*text*) } .rodata : { *(.*rodata*) } .data : { *(.*data*) *(.*bss) } .shstrtab : { *(.shstrtab) } /* cannot be discarded */ /DISCARD/ : { *(*) } } \",\"The user task should now compile and link successfully. If we look at the resulting sections, we should see the .dynamic section followed by the .data.rel.ro section followed by the .rela.dyn section.\",\"$ llvm-readelf -S build/user/utask.bin There are 8 section headers, starting at offset 0x20b2e8: Section Headers: [Nr] Name Type Address Off Size ES Flg Lk Inf Al [ 0] NULL 0000000000000000 000000 000000 00 0 0 0 [ 1] .dynamic DYNAMIC 0000000000000000 001000 0000b0 10 WA 0 0 8 [ 2] .data.rel.ro PROGBITS 00000000000000b0 0010b0 000180 00 WA 0 0 16 [ 3] .rela.dyn RELA 0000000000000230 001230 000300 18 A 0 0 8 [ 4] .text PROGBITS 0000000000000530 001530 008c34 00 AX 0 0 16 [ 5] .rodata PROGBITS 0000000000009170 00a170 000bb0 00 AMS 0 0 16 [ 6] .data PROGBITS 0000000000009d20 00ad20 200588 00 WA 0 0 16 [ 7] .shstrtab STRTAB 0000000000000000 20b2a8 00003f 00 0 0 1 \"]},\"230\":{\"h\":\"Applying the relocations\",\"t\":[\"We now have a binary with relocation entries, so let's start by parsing the .dynamic section at the beginning of the image. Let's create a loader.nim module and define a DynamicEntry type to represent each entry, and a DynamicEntryType enum to represent the different types of entries. We'll also define an applyRelocations proc to parse the dynamic section.\",\"# src/kernel/loader.nim type DynamicEntry {.packed.} = object tag: uint64 value: uint64 DynamicEntryType = enum Rela = 7 RelaSize = 8 RelaEntSize = 9 RelaCount = 0x6ffffff9 proc applyRelocations*(image: ptr UncheckedArray[byte]): uint64 = ## Apply relocations to the image. Return the entry point address. var dyn = cast[ptr UncheckedArray[DynamicEntry]](image) reloffset = 0'u64 relsize = 0'u64 relentsize = 0'u64 relcount = 0'u64 var i = 0 while dyn[i].tag != 0: case dyn[i].tag of DynamicEntryType.Rela.uint64: reloffset = dyn[i].value of DynamicEntryType.RelaSize.uint64: relsize = dyn[i].value of DynamicEntryType.RelaEntSize.uint64: relentsize = dyn[i].value of DynamicEntryType.RelaCount.uint64: relcount = dyn[i].value else: discard inc i if reloffset == 0 or relsize == 0 or relentsize == 0 or relcount == 0: raise newException(Exception, \\\"Invalid dynamic section. Missing .dynamic information.\\\") if relsize != relentsize * relcount: raise newException(Exception, \\\"Invalid dynamic section. .rela.dyn size mismatch.\\\") \",\"The proc iterates over the dynamic entries until it finds the entries we're interested in (the ones describing the .rela.dyn section). It then checks that the values are valid.\",\"Now that we know where the relocation entries are, let's parse them. We'll define a RelaEntry type to represent each entry, and a RelType enum to represent the different types of entries. We'll use these types to parse the .rela.dyn section.\",\"# src/kernel/loader.nim type ... RelaEntry {.packed.} = object offset: uint64 info: RelaEntryInfo addend: int64 RelaEntryInfo {.packed.} = object `type`: uint8 sym: uint8 unused1: uint16 unused2: uint32 RelType = enum Relative = 8 # R_X86_64_RELATIVE proc applyRelocations*(image: ptr UncheckedArray[byte]): uint64 = ... # rela points to the first relocation entry let rela = cast[ptr UncheckedArray[RelaEntry]](cast[uint64](image) + reloffset.uint64) for i in 0 ..< relcount: let relent = rela[i] if relent.info.type != RelType.Relative.uint8: raise newException( Exception, &\\\"Unsupported relocation type {relent.info.type:#x}. Only R_X86_64_RELATIVE is supported.\\\" ) # apply relocation let target = cast[ptr uint64](cast[uint64](image) + relent.offset) let value = cast[uint64](cast[int64](image) + relent.addend) target[] = value # entry point comes after .rela.dyn return cast[uint64](image) + reloffset + relsize \",\"The proc iterates over the relocation entries and applies each one. The only type of relocation we support for now is relative relocation. For each relocation entry, we add the addend to the image base address and store the result at the offset specified by the relocation entry.\",\"Finally, we return the entry point address, which comes right after the .rela.dyn section. This is the address we'll use to jump to user mode, instead of the fixed address we had before.\",\"Let's modify the createTask proc in tasks.nim to use the new applyRelocations proc. We'll remove the entryPoint argument (passed in main.nim), and use the return value of applyRelocations as the entry point address.\",\"# src/kernel/tasks.nim ... proc createTask*( imageVirtAddr: VirtAddr, imagePhysAddr: PhysAddr, imagePageCount: uint64, ): Task = ... # map user image ... # (temporarily) map the user image in kernel space mapRegion( pml4 = kspace.pml4, virtAddr = imageVirtAddr, physAddr = imagePhysAddr, pageCount = imagePageCount, pageAccess = paReadWrite, pageMode = pmSupervisor, ) # apply relocations to user image debugln \\\"kernel: Applying relocations to user image\\\" let entryPoint = applyRelocations(cast[ptr UncheckedArray[byte]](imageVirtAddr)) # map kernel space ... \",\"Finally, we'll remove the entryPoint argument from call in main.nim.\",\"# src/kernel/main.nim ... proc KernelMain(bootInfo: ptr BootInfo) {.exportc.} = ... debugln \\\"kernel: Creating user task\\\" var task = createTask( imageVirtAddr = UserImageVirtualBase.VirtAddr, imagePhysAddr = bootInfo.userImagePhysicalBase.PhysAddr, imagePageCount = bootInfo.userImagePages, ) ... \",\"That should do it. Let's compile and run the kernel.\",\"kernel: Creating user task kernel: Applying relocations to user image kernel: Switching to user mode syscall: num=2 syscall: print (arg1=0x4020a298) syscall: print: arg1.len = 21 syscall: print: arg1.p = 0x40009d00 Hello from user mode! syscall: num=1 syscall: exit: code=0 \",\"It works! The message from the user task is printed correctly. We can see that the arg1.p value is now 0x40009d00 instead of 0, which means that the relocation was applied correctly. To verify that we can load the task at any address, let's change the UserImageVirtualBase to something other than 0x40000000 and see if it still works.\",\"# src/kernel/main.nim const UserImageVirtualBase = 0x80000000 \",\"kernel: Creating user task kernel: Applying relocations to user image kernel: Switching to user mode syscall: num=2 syscall: print (arg1=0x8020a298) syscall: print: arg1.len = 21 syscall: print: arg1.p = 0x80009d00 Hello from user mode! syscall: num=1 syscall: exit: code=0 \",\"It still works! Notice that the arg1.p value is now 0x80009d00 instead of 0x40009d00, which proves that we can now load the user task at any address.\"]},\"231\":{\"h\":\"Dynamic virtual memory allocation\",\"t\":[\"So far we've been telling the kernel where to load the user task, but we want to be able to load tasks at any available address. The VMM keeps track of the available virtual memory, so we can leverage that to dynamically allocate virtual memory for the user task. Let's remove the imageVirtAddr argument from the createTask proc, and use the VMM to allocate the virtual memory for the user task.\",\"# src/kernel/tasks.nim ... proc createTask*( imagePhysAddr: PhysAddr, imagePageCount: uint64, ): Task = ... # allocate user image vm region let imageVirtAddrOpt = vmalloc(uspace, imagePageCount, paReadWrite, pmUser) if imageVirtAddrOpt.isNone: raise newException(Exception, \\\"tasks: Failed to allocate VM region for user image\\\") let imageVirtAddr = imageVirtAddrOpt.get # map user image ... \",\"Now, let's modify the KernelMain proc to use the new createTask proc.\",\"# src/kernel/main.nim # const # UserImageVirtualBase = 0x80000000 <-- remove this proc KernelMain(bootInfo: ptr BootInfo) {.exportc.} = ... debugln \\\"kernel: Creating user task\\\" var task = createTask( imagePhysAddr = bootInfo.userImagePhysicalBase.PhysAddr, imagePageCount = bootInfo.userImagePages, ) ... \",\"If we compile and run the kernel, we should see the same output as before, with the user task being loaded at a different address.\",\"kernel: Creating user task kernel: Applying relocations to user image kernel: Switching to user mode syscall: num=2 syscall: print (arg1=0x415678) syscall: print: arg1.len = 21 syscall: print: arg1.p = 0x2150e0 Hello from user mode! syscall: num=1 syscall: exit: code=0 \",\"It works! The user task is now loaded at a different address that was dynamically allocated, and the message is printed correctly.\",\"This is another milestone; this means we can now load PIE tasks at any address, depending on the available virtual memory, and they all share the same address space. Keep in mind that we still need to have protection between tasks, so each task will still have its own page table mappings, but we won't have to rely on pre-arranging shared memory pages for inter-task communication. We'll get to that in a later section once we start tackling capabilities.\",\"In the next section, we'll try to get two copies of the user task running at the same time, and try to switch between them using cooperative multitasking (we'll get to preemptive multitasking later).\"]},\"232\":{\"h\":\"ELF Loader (Part 1)\",\"t\":[\"So far we used a flat binary format for our user task. But it's becoming more difficult as we have to manually specify the layout of the binary using a linker script, and arrange the sections in a fixed way so that the kernel can load them, apply relocations, and jump to the entry point. We also haven't told the kernel what sections should be marked as read-only, read-write, and/or executable. This is where the ELF format comes in.\",\"ELF is a self-describing format that contains all the information needed to load and run a program. Although implementing an ELF loader is more complex than a flat binary loader, it's more flexible and will save us a lot of time in the long run. Let's go ahead and implement an ELF loader.\"]},\"233\":{\"h\":\"ELF Format\",\"t\":[\"ELF files contain executable code and data, as well as metadata about the file so that the loader can load the file into memory and run it. The parts of the ELF format that are relevant to us are:\",\"ELF Header\",\"Contains metadata about the file, such as the target architecture, the entry point, and the offsets of the other sections.\",\"Program Header Table\",\"Contains a list of segments to be loaded into memory. Each segment can contain one or more sections.\",\"Section Header Table\",\"Contains a list of sections, which are used for debugging and linking.\",\"Sections\",\"Contains the actual code and data of the program.\",\"Symbol Table\",\"Contains information about the symbols in the program.\",\"String Table\",\"Contains strings used by the symbol table.\",\"Relocation Table\",\"Contains information about the relocations to be applied to the program.\"]},\"234\":{\"h\":\"Building an ELF binary\",\"t\":[\"Let's modify our user program to build an ELF binary instead of a flat binary. We previously used a linker script to have control over the binary layout, such that the kernel could load the binary in a straightforward way. To produce an ELF binary, we'll simply remove the linker script and let the compiler and linker generate a default ELF binary.\",\"$ rm src/user/linker.ld $ just user $ file build/user/utask.bin build/user/utask.bin: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), static-pie linked, not stripped \",\"Looks good. Let's inspect the ELF binary using readelf.\",\"$ readelf -eW build/user/utask.bin ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2's complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: DYN (Position-Independent Executable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0xf5f0 Start of program headers: 64 (bytes into file) Start of section headers: 78256 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 56 (bytes) Number of program headers: 8 Size of section headers: 64 (bytes) Number of section headers: 18 Section header string table index: 16 Section Headers: [Nr] Name Type Address Off Size ES Flg Lk Inf Al [ 0] NULL 0000000000000000 000000 000000 00 0 0 0 [ 1] .dynsym DYNSYM 0000000000000200 000200 000018 18 A 4 1 8 [ 2] .gnu.hash GNU_HASH 0000000000000218 000218 00001c 00 A 1 0 8 [ 3] .hash HASH 0000000000000234 000234 000010 04 A 1 0 4 [ 4] .dynstr STRTAB 0000000000000244 000244 000001 00 A 0 0 1 [ 5] .rela.dyn RELA 0000000000000248 000248 000498 18 A 1 0 8 [ 6] .rodata PROGBITS 00000000000006e0 0006e0 000ea8 00 AMS 0 0 16 [ 7] .text PROGBITS 0000000000002590 001590 00d712 00 AX 0 0 16 [ 8] .data.rel.ro PROGBITS 0000000000010cb0 00ecb0 000270 00 WA 0 0 16 [ 9] .dynamic DYNAMIC 0000000000010f20 00ef20 0000d0 10 WA 4 0 8 [10] .got PROGBITS 0000000000010ff0 00eff0 000000 00 WA 0 0 8 [11] .relro_padding NOBITS 0000000000010ff0 00eff0 000010 00 WA 0 0 1 [12] .data PROGBITS 0000000000011ff0 00eff0 000118 00 WA 0 0 8 [13] .bss NOBITS 0000000000012110 00f108 200490 00 WA 0 0 16 [14] .comment PROGBITS 0000000000000000 00f108 00003e 01 MS 0 0 1 [15] .symtab SYMTAB 0000000000000000 00f148 001f38 18 17 332 8 [16] .shstrtab STRTAB 0000000000000000 011080 000091 00 0 0 1 [17] .strtab STRTAB 0000000000000000 011111 002099 00 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), I (info), L (link order), O (extra OS processing required), G (group), T (TLS), C (compressed), x (unknown), o (OS specific), E (exclude), D (mbind), l (large), p (processor specific) Program Headers: Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align PHDR 0x000040 0x0000000000000040 0x0000000000000040 0x0001c0 0x0001c0 R 0x8 LOAD 0x000000 0x0000000000000000 0x0000000000000000 0x001588 0x001588 R 0x1000 LOAD 0x001590 0x0000000000002590 0x0000000000002590 0x00d712 0x00d712 R E 0x1000 LOAD 0x00ecb0 0x0000000000010cb0 0x0000000000010cb0 0x000340 0x000350 RW 0x1000 LOAD 0x00eff0 0x0000000000011ff0 0x0000000000011ff0 0x000118 0x2005b0 RW 0x1000 DYNAMIC 0x00ef20 0x0000000000010f20 0x0000000000010f20 0x0000d0 0x0000d0 RW 0x8 GNU_RELRO 0x00ecb0 0x0000000000010cb0 0x0000000000010cb0 0x000340 0x000350 R 0x1 GNU_STACK 0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW 0 Section to Segment mapping: Segment Sections... 00 01 .dynsym .gnu.hash .hash .dynstr .rela.dyn .rodata 02 .text 03 .data.rel.ro .dynamic .relro_padding 04 .data .bss 05 .dynamic 06 .data.rel.ro .dynamic .relro_padding 07 \",\"We can see there are many sections and several segments. The last part shows how the sections are mapped to the segments. We are mainly interested in the segments of type LOAD, which are the ones to be loaded into memory. We also need the DYNAMIC segment for applying relocations. The nice thing here is that we don't need to worry about which section is code, data, or bss. The segments include a flags field that tells us the permissions of the segment (read, write, execute). We'll use this information to set the correct permissions on the virtual memory regions.\",\"Notice also that the VirtAddr of some segments doesn't necessarily start on a page boundary. However, their Align field tells us that the first page of the segment should be aligned to a page boundary (I'm making a simplifying assumption here that Align values are always equal to x86-64's page size, i.e. 4KiB). Thus, a segment's start page is the segment's VirtAddr rounded down to the nearest page boundary.\"]},\"235\":{\"h\":\"ELF Reader\",\"t\":[\"To keep the loader simple, we'll implement a separate ELF reader module that provides an interface to iterate over the sections and segments of an ELF file. Let's add a new file elf.nim to the kernel directory, which will contain the various types and procedures needed to read an ELF file.\",\"We'll start by defining two types: ElfImage and ElfHeader, along with supporting types.\",\"# src/kernel/elf.nim type ElfImage = object header: ptr ElfHeader ElfHeader {.packed.} = object ident: ElfIdent `type`: ElfType machine: ElfMachine version: uint32 entry: uint64 phoff: uint64 shoff: uint64 flags: uint32 ehsize: uint16 phentsize: uint16 phnum: uint16 shentsize: uint16 shnum: uint16 shstrndx: uint16 ElfIdent {.packed.} = object magic: array[4, char] class: ElfClass endianness: ElfEndianness version: ElfVersion osabi: uint8 abiversion: uint8 pad: array[7, uint8] ElfClass = enum None = (0, \\\"None\\\") Bits32 = (1, \\\"32-bit\\\") Bits64 = (2, \\\"64-bit\\\") ElfEndianness = enum None = (0, \\\"None\\\") Little = (1, \\\"Little-endian\\\") Big = (2, \\\"Big-endian\\\") ElfVersion = enum None = (0, \\\"None\\\") Current = (1, \\\"Current\\\") ElfType {.size: sizeof(uint16).} = enum None = (0, \\\"Unknown\\\") Relocatable = (1, \\\"Relocatable\\\") Executable = (2, \\\"Executable\\\") Shared = (3, \\\"Shared object\\\") Core = (4, \\\"Core\\\") ElfMachine {.size: sizeof(uint16).} = enum None = (0, \\\"None\\\") Sparc = (0x02, \\\"Sparc\\\") X86 = (0x03, \\\"x86\\\") Mips = (0x08, \\\"MIPS\\\") PowerPC = (0x14, \\\"PowerPC\\\") ARM = (0x28, \\\"Arm\\\") Sparc64 = (0x2b, \\\"Sparc64\\\") IA64 = (0x32, \\\"IA-64\\\") X86_64 = (0x3e, \\\"x86-64\\\") AArch64 = (0xb7, \\\"AArch64\\\") RiscV = (0xf3, \\\"RISC-V\\\") \",\"This should be straightforward. The following fields in ElfHeader are relevant to us:\",\"entry: The virtual address of the entry point. We'll use this to jump to the user task once it's loaded.\",\"phoff: The offset of the program header table.\",\"phentsize: The size of each entry in the program header table.\",\"phnum: The number of entries in the program header table.\",\"shoff: The offset of the section header table.\",\"shentsize: The size of each entry in the section header table.\",\"shnum: The number of entries in the section header table.\",\"shstrndx: The index of the section header table entry that contains the section names.\",\"Next, let's define the ElfProgramHeader type.\",\"type ElfProgramHeader {.packed.} = object `type`: ElfProgramHeaderType flags: ElfProgramHeaderFlags offset: uint64 vaddr: uint64 paddr: uint64 filesz: uint64 memsz: uint64 align: uint64 ElfProgramHeaderType {.size: sizeof(uint32).} = enum Null = (0, \\\"NULL\\\") Load = (1, \\\"LOAD\\\") Dynamic = (2, \\\"DYNAMIC\\\") Interp = (3, \\\"INTERP\\\") Note = (4, \\\"NOTE\\\") ShLib = (5, \\\"SHLIB\\\") Phdr = (6, \\\"PHDR\\\") Tls = (7, \\\"TLS\\\") ElfProgramHeaderFlag = enum Executable = (0, \\\"X\\\") Writable = (1, \\\"W\\\") Readable = (2, \\\"R\\\") ElfProgramHeaderFlags {.size: sizeof(uint32).} = set[ElfProgramHeaderFlag] \",\"The ElfProgramHeader type contains the following fields:\",\"type: The type of the segment. We're only interested in LOAD segments (to be loaded into memory) and DYNAMIC segments (for applying relocations).\",\"flags: The permissions of the segment. We'll use this to mark the segments as read-only, read-write, or executable.\",\"offset: The offset of the segment in the file.\",\"vaddr: The virtual address of the segment. This is the address where the segment should be loaded into memory relative to the base address.\",\"paddr: The physical address of the segment. This is not used in our case.\",\"filesz: The size of the segment in the file.\",\"memsz: The size of the segment in memory. This can be larger than filesz if the segment contains uninitialized data (e.g. bss section).\",\"align: The alignment of the segment in memory.\",\"Next, let's define the ElfSectionHeader type.\",\"type ElfSectionHeader {.packed.} = object nameoffset: uint32 `type`: ElfSectionType flags: uint64 vaddr: uint64 offset: uint64 size: uint64 link: uint32 info: uint32 addralign: uint64 entsize: uint64 ElfSectionType {.size: sizeof(uint32).} = enum Null = (0, \\\"NULL\\\") ProgBits = (1, \\\"PROGBITS\\\") SymTab = (2, \\\"SYMTAB\\\") StrTab = (3, \\\"STRTAB\\\") Rela = (4, \\\"RELA\\\") Hash = (5, \\\"HASH\\\") Dynamic = (6, \\\"DYNAMIC\\\") Note = (7, \\\"NOTE\\\") NoBits = (8, \\\"NOBITS\\\") Rel = (9, \\\"REL\\\") ShLib = (10, \\\"SHLIB\\\") DynSym = (11, \\\"DYNSYM\\\") InitArray = (14, \\\"INIT_ARRAY\\\") FiniArray = (15, \\\"FINI_ARRAY\\\") PreInitArray = (16, \\\"PREINIT_ARRAY\\\") Group = (17, \\\"GROUP\\\") SymTabShndx = (18, \\\"SYMTAB_SHNDX\\\") \",\"Sections are mostly relevant to the linker, not the loader (which deals with segments). I'm just including it for the sake of completeness.\",\"Now, let's add a proc to initialize an ElfImage object from a pointer to the ELF image in memory. We'll validate some assumptions about the ELF image (e.g. the magic number, the architecture, etc.) and raise an error if the image is not a valid ELF file or if it doesn't meet our expectations.\",\"type InvalidElfImage = object of CatchableError UnsupportedElfImage = object of CatchableError proc initElfImage(image: pointer): ElfImage = result.header = cast[ptr ElfHeader](image) if result.header.ident.magic != [0x7f.char, 'E', 'L', 'F']: raise newException(InvalidElfImage, \\\"Not an ELF file\\\") if result.header.ident.class != ElfClass.Bits64: raise newException(UnsupportedElfImage, \\\"Only 64-bit ELF files are supported\\\") if result.header.ident.endianness != ElfEndianness.Little: raise newException(UnsupportedElfImage, \\\"Only little-endian ELF files are supported\\\") if result.header.ident.version != ElfVersion.Current: raise newException(UnsupportedElfImage, &\\\"Only ELF version {ElfVersion.Current} is supported\\\") if result.header.type != ElfType.Shared: raise newException(UnsupportedElfImage, \\\"Only position-independent executable ELF files are supported\\\") if result.header.machine != ElfMachine.X86_64: raise newException(UnsupportedElfImage, \\\"Only x86-64 ELF files are supported\\\") \",\"Next, let's add an iterator to iterate over the segments (i.e. program headers) of the ELF image. The iterator will yield a tuple containing the index of the program header and the program header itself.\",\"iterator segments(image: ElfImage): tuple[i: uint16, ph: ptr ElfProgramHeader] = let header = image.header let phoff = header.phoff let phentsize = header.phentsize let phnum = header.phnum for i in 0.uint16 ..< phnum: let ph = cast[ptr ElfProgramHeader](header +! (phoff + phentsize * i)) yield (i, ph) \",\"Similarly, let's add an iterator to iterate over the section headers of the ELF image.\",\"iterator sections(image: ElfImage): tuple[i: uint16, sh: ptr ElfSectionHeader] = let header = image.header let shoff = header.shoff let shentsize = header.shentsize let shnum = header.shnum for i in 0.uint16 ..< shnum: let sh = cast[ptr ElfSectionHeader](header +! (shoff + shentsize * i)) yield (i, sh) \",\"That's it for the ELF reader. In the next part, we'll use this module to load the loadable segments of an ELF file into memory, apply relocations, and jump to the entry point.\"]},\"236\":{\"h\":\"ELF Loader (Part 2)\",\"t\":[\"So far we have the code that loads the task image into memory in the tasks module. We also have code that applies relocations in the loader module. Now that we're going to deal with ELF, it's time to move all task loading code into the loader module (which will use the elf module to read the ELF file).\"]},\"237\":{\"h\":\"Loading ELF\",\"t\":[\"We don't have a filesystem yet, so we are still going to rely on the user task being loaded by the bootloader into memory, until we implement a filesystem. The task loader will use the in-memory ELF binary to \\\"load\\\" the task by:\",\"allocating enough virtual memory for the task\",\"mapping virtual memory to physical memory with the correct permissions\",\"copying the loadable segments into their respective virtual memory regions\",\"applying relocation entries to the loaded segments\",\"identifying the entry point and returning it to the caller\",\"Let's start by adding a new proc to the loader module to load an ELF binary, given the address of the raw ELF image in memory. The first step is to iterate over the segments and build a corresponding list of page-aligned VM regions.\",\"# src/kernel/loader.nim import elf import vmm proc load*(imagePtr: pointer) = let image = initElfImage(imagePtr) # get a list of page-aligned memory regions to be mapped var vmRegions: seq[VMRegion] = @[] for (i, ph) in segments(image): if ph.type == ElfProgramHeaderType.Load: if ph.align != PageSize: raise newException(LoaderError, &\\\"Unsupported alignment {ph.align:#x} for segment {i}\\\") let startOffset = ph.vaddr mod PageSize let startPage = ph.vaddr - startOffset let numPages = (startOffset + ph.memsz + PageSize - 1) div PageSize let region = VMRegion( start: startPage.VirtAddr, npages: numPages, flags: cast[VMRegionFlags](ph.flags), ) vmRegions.add(region) \",\"Notice that we need to keep track of the segment flags as well, as they will be used to set the page permissions. We didn't have that flags field on VMRegion before, so let's add it now:\",\"# src/kernel/vmm.nim type VMRegion* = object start*: VirtAddr npages*: uint64 flags*: VMRegionFlags VMRegionFlag* = enum Execute = (0, \\\"E\\\") Write = (1, \\\"W\\\") Read = (2, \\\"R\\\") VMRegionFlags* {.size: sizeof(uint32).} = set[VMRegionFlag] \",\"Now, let's validate a couple of assumptions: (1) there must be at least one segment, and (2) the address of the start page of the first segment must be zero, since the ELF binary is supposed to be relocatable (i.e. a PIE).\",\"# src/kernel/loader.nim type LoaderError* = object of CatchableError proc load*(imagePtr: pointer) = ... if vmRegions.len == 0: raise newException(LoaderError, \\\"No loadable segments found\\\") if vmRegions[0].start.uint64 != 0: raise newException(LoaderError, \\\"Expecting a PIE binary with a base address of 0\\\") \",\"Now, we have two options to allocate the required VM regions:\",\"Allocate a single large region that spans all segments\",\"Allocate one region per segment\",\"The first option is simpler, but it may waste memory if the segments are not contiguous. The second is more complex because we have to maintain the relative positions of the segments to the base of the first segment. Our virtual memory allocator is not prepared to handle this yet (it allocates regions in a best-fit manner), so we'll go with the first option for now.\",\"# src/kernel/loader.nim import std/algorithm ... proc load*(imagePtr: pointer) = ... # calculate total memory size vmRegions = vmRegions.sortedByIt(it.start) let memSize = vmRegions[^1].end -! vmRegions[0].start let pageCount = (memSize + PageSize - 1) div PageSize # allocate a single contiguous region for the user image let taskRegion = vmalloc(uspace, pageCount) \",\"Remember that the individual regions in the vmRegions list assume that the first region starts at 0. We need to adjust the start of each region to the base of the taskRegion:\",\"# src/kernel/loader.nim proc load*(imagePtr: pointer) = ... # adjust the individual regions' start addresses based on taskRegion.start for region in vmRegions.mitems: region.start = taskRegion.start +! region.start.uint64 \",\"Now we need to map the regions to physical memory. In addition to mapping them in the user address space, we also need to temporarily map them in the kernel address space so we can copy the segments into the user space.\",\"# src/kernel/loader.nim proc load*(imagePtr: pointer) = ... # map each region into the page tables, making sure to set the R/W and NX flags as needed var kpml4 = getActivePML4() for region in vmRegions: let access = if region.flags.contains(Write): paReadWrite else: paRead let noExec = not region.flags.contains(Execute) let physAddr = vmmap(region, pml4, access, pmUser, noExec) # temporarily map the region in kernel space so that we can copy the segments and apply relocations mapRegion( pml4 = kpml4, virtAddr = region.start, physAddr = physAddr, pageCount = region.npages, pageAccess = paReadWrite, pageMode = pmSupervisor, noExec = true, ) \",\"OK, we're now ready to copy the segments into their respective regions. Remember that some segments may have a memory size (memsz) that is larger than the corresponding size in the file (filesz), as is the case with BSS segments. In such cases, we need to zero-fill the remaining memory.\",\"# src/kernel/loader.nim proc load*(imagePtr: pointer) = ... # copy loadable segments from the image to the user memory for (i, ph) in segments(image): if ph.type != ElfProgramHeaderType.Load: continue let dest = cast[pointer](taskRegion.start +! ph.vaddr) let src = cast[pointer](imagePtr +! ph.offset) copyMem(dest, src, ph.filesz) if ph.filesz < ph.memsz: zeroMem(cast[pointer](cast[uint64](dest) + ph.filesz), ph.memsz - ph.filesz) \",\"The segments are now loaded into memory. The next step is to apply any relocations that may be needed. Relocation metadata is stored in a segment of type DYNAMIC. We need to find this segment in the ELF image and pass its offset to the applyRelocations proc.\",\"# src/kernel/loader.nim proc load*(imagePtr: pointer) = ... var dynOffset: int = -1 for (i, ph) in segments(image): if ph.type == ElfProgramHeaderType.Dynamic: dynOffset = cast[int](ph.vaddr) if dynOffset == -1: raise newException(LoaderError, \\\"No dynamic section found\\\") applyRelocations( image = cast[ptr UncheckedArray[byte]](taskRegion.start), dynOffset = cast[uint64](dynOffset), ) \",\"We're almost done. We no longer need the kernel's temporary mapping of the user task's memory, so we can unmap the regions now.\",\"# src/kernel/loader.nim proc load*(imagePtr: pointer) = ... # unmap the user image from kernel space for region in vmRegions: unmapRegion(kpml4, region.start, region.npages) \",\"Finally, we need to return information about the loaded task to the caller, particularly the VM region where the task was loaded and the entry point.\",\"# src/kernel/loader.nim type LoadedElfImage* = object vmRegion*: VMRegion entryPoint*: pointer proc load*(imagePtr: pointer): LoadedElfImage = ... result = LoadedElfImage( vmRegion: taskRegion, entryPoint: cast[pointer](taskRegion.start +! image.header.entry) ) \"]},\"238\":{\"h\":\"Cooperative Multitasking\",\"t\":[\"The idea of cooperative multitasking is that, at certain points in the task's execution, it voluntarily yields control back to the kernel. This is done by invoking a system call, typically called yield. In other cases, if the task invokes a system call that blocks, this is also considered a yield. The kernel then decides which task to run next, and returns control to that task.\",\"The advantage of cooperative multitasking is that it is very simple to implement. The disadvantage is that if a task does not yield, it will never be preempted. This means that a single task can monopolize the CPU, and the system will become unresponsive. In preemptive multitasking, the kernel uses a timer to interrupt the currently running task, and preempt it if its time slice has expired, or if a higher priority task is ready to run. This ensures that no task can monopolize the CPU. We'll see how to implement preemptive multitasking later.\"]},\"239\":{\"h\":\"Scheduling\",\"t\":[\"We'll add a new kernel component called the scheduler. The scheduler is responsible for keeping track of all the tasks in the system, and deciding which task to run next. It is invoked by the kernel at certain points, such as when a task yields or blocks. This means it needs to keep track of the currently running task, and the list of ready tasks. Upon invocation, it will decide which task to run next based on some strategy, and switch to that task. The simplest strategy is round-robin scheduling, where the scheduler simply runs each task in turn. There are many other strategies, but we'll start with round-robin.\",\"To make it easy to manage the ready tasks, we'll use a task queue. The current task will be stored in a global variable, outside the queue. Here's how we're going to make scheduling decisions:\",\"When the scheduler is invoked (e.g. when a task yields), it will add the current task to the end of the queue, and then remove the first task from the queue, assign it to the current task, and switch to it.\",\"If the queue is empty, the scheduler will simply return, and the current task will continue running.\",\"When a task exits, we simply won't add it back to the queue, and the next task in the queue will be run.\",\"If a task exits and there are no more tasks in the queue, we'll simply halt the CPU.\",\"Before we start implementing the scheduler, we need to make some changes to the Task type. We need to track the task state, which can be New, Ready, Running, or Terminated (for now). I'm also going to change the layout of the Task type by making the rsp field the first field, so that we can easily access it from inline assembly later. Here's the updated tasks.nim module:\",\"# src/kernel/tasks.nim type TaskState = enum New, Ready, Running, Terminated Task* = ref object rsp*: uint64 state*: TaskState # other fields... \",\"Let's start by creating a new module called sched.nim in the kernel directory. We'll define a task queue, a global variable to store the current task, and a proc to add a task to the queue:\",\"# src/kernel/sched.nim import std/deques import tasks var readyTasks = initDeque[Task]() currentTask* {.exportc.}: Task proc addTask*(t: Task) = readyTasks.addLast(t) \",\"If you remember, we already had defined a currentTask in the tasks.nim module. We'll make some changes to that module later when we get to context switching. I'm annotating currentTask with the exportc pragma since we'll need to access it from inline assembly later. Let's now add the main scheduler proc:\",\"# src/kernel/sched.nim ... proc schedule*() = if readyTasks.len == 0: if currentTask.isNil or currentTask.state == Terminated: debugln &\\\"sched: no tasks to run, halting\\\" halt() else: # no ready tasks, keep running the current task return if not (currentTask.isNil or currentTask.state == Terminated): # put the current task back into the queue currentTask.state = TaskState.Ready readyTasks.addLast(currentTask) # switch to the first task in the queue var nextTask = readyTasks.popFirst() switchTo(nextTask) \",\"The current implementation of switchTo (in tasks.nim) only knows how to switch to a new task. We'll need to change it to perform an actual context switch.\"]},\"240\":{\"h\":\"Context Switching\",\"t\":[\"When switching between tasks, we need to save the state of the currently running task, and restore the state of the task that is about to run. The task state typically includes the CPU registers and the stack pointer. We don't need to save the instruction pointer, because once we swap the stack pointers, the old task resumes execution at the same point where its stack pointer was swapped out previously, and will continue as if nothing had happened. It's this swapping of stack pointers that causes the context switch.\",\"Let's create a new module ctxswitch.nim to handle context switching. We'll move the switchTo proc from tasks.nim to ctxswitch.nim, and modify it to handle switching between tasks.\",\"When the current task is not nil or terminated, we'll save its stack pointer and register state, regardless of whether we're switching to a new task or not. When we're switching to a new task, we'll simply load the new task's stack pointer and iretq to return to user mode. When we're switching to an existing task, we'll restore its stack pointer and register state and return normally.\",\"Here's the modified switchTo proc:\",\"# src/kernel/ctxswitch.nim import cpu import gdt import tasks import vmm var currentTask {.importc.}: Task proc switchTo*(next: var Task) = tss.rsp0 = next.kstack.bottom setActivePML4(next.space.pml4) if not (currentTask.isNil or currentTask.state == TaskState.Terminated): pushRegs() asm \\\"\\\"\\\" mov %0, rsp : \\\"=m\\\" (`currentTask`->rsp) \\\"\\\"\\\" currentTask = next case next.state of TaskState.New: next.state = TaskState.Running asm \\\"\\\"\\\" mov rsp, %0 iretq : : \\\"m\\\" (`currentTask`->rsp) \\\"\\\"\\\" else: next.state = TaskState.Running asm \\\"\\\"\\\" mov rsp, %0 : : \\\"m\\\" (`currentTask`->rsp) \\\"\\\"\\\" popRegs() \",\"Let's define pushRegs and popRegs, but instead of defining them in this module, we'll put them in the cpu.nim module, where they belong. Here, I'll be using Nim templates instead of procs to avoid the overhead of calling a proc.\",\"# src/kernel/cpu.nim template pushRegs*() = asm \\\"\\\"\\\" push rax push rbx push rcx push rdx push rsi push rdi push rbp push r8 push r9 push r10 push r11 push r12 push r13 push r14 push r15 \\\"\\\"\\\" template popRegs*() = asm \\\"\\\"\\\" pop r15 pop r14 pop r13 pop r12 pop r11 pop r10 pop r9 pop r8 pop rbp pop rdi pop rsi pop rdx pop rcx pop rbx pop rax \\\"\\\"\\\" \"]},\"241\":{\"h\":\"System Call\",\"t\":[\"To allow a task to yield control to the kernel, we'll add a new system call called yield. When a task invokes this system call, the kernel simply calls the scheduler to switch to the next task. Let's add it to the syscall.nim module:\",\"# src/kernel/syscalls.nim ... proc `yield`*(args: ptr SyscallArgs): uint64 {.cdecl.} = debugln &\\\"syscall: yield\\\" schedule() proc syscallInit*() = # set up syscall table syscallTable[1] = exit syscallTable[2] = print syscallTable[3] = `yield` ... \",\"Notice that we have to quote the yield proc name because it's a reserved keyword in Nim. Now, tasks can invoke syscall 3 (with no arguments) to yield control to the kernel. Let's add this syscall to our user task:\",\"# src/user/utask.nim ... proc UserMain*() {.exportc.} = NimMain() asm \\\"\\\"\\\" # call print ... # call yield mov rdi, 3 syscall # call exit ... \\\"\\\"\\\" \",\"The task now will print something, yield control to the kernel, and then exit.\"]},\"242\":{\"h\":\"Handling Task Exits\",\"t\":[\"When the current task calls the exit system call, we should also invoke the scheduler, but the task shouldn't be put back into the queue. We can do this by setting the task's state to Terminated before invoking the scheduler. Terminating a task may involve other steps later (e.g. freeing its memory), so let's add a terminateTask proc to the tasks.nim module:\",\"# src/kernel/tasks.nim proc terminateTask*(t: var Task) = t.state = TaskState.Terminated # other cleanup... \",\"Now, let's modify the exit syscall to call terminateTask before invoking the scheduler:\",\"# src/kernel/syscalls.nim proc exit*(args: ptr SyscallArgs): uint64 {.cdecl.} = debugln &\\\"syscall: exit: code={args.arg1}\\\" terminateTask(currentTask) schedule() \"]},\"243\":{\"h\":\"Running multiple tasks\",\"t\":[\"Let's now create two user tasks, add them to the task queue, and invoke the scheduler.\",\"# src/kernel/main.nim ... proc KernelMainInner(bootInfo: ptr BootInfo) = ... debugln \\\"kernel: Creating user tasks\\\" var task1 = createTask( imagePhysAddr = bootInfo.userImagePhysicalBase.PhysAddr, imagePageCount = bootInfo.userImagePages, ) var task2 = createTask( imagePhysAddr = bootInfo.userImagePhysicalBase.PhysAddr, imagePageCount = bootInfo.userImagePages, ) debugln \\\"kernel: Adding tasks to scheduler\\\" sched.addTask(task1) sched.addTask(task2) debugln \\\"kernel: Starting scheduler\\\" sched.schedule() \",\"Let's run it and see what happens.\",\"kernel: Creating user tasks kernel: Applying relocations to user image kernel: Applying relocations to user image kernel: Adding tasks to scheduler kernel: Starting scheduler sched: switching -> 0 syscall: print Hello from user mode! syscall: yield sched: switching 0 -> 1 syscall: print Hello from user mode! syscall: yield sched: switching 1 -> 0 syscall: exit: code=0 sched: switching 0 -> 1 syscall: exit: code=0 sched: no tasks to run, halting \",\"It works! The scheduler first runs task 0, which prints a message, then yields control to the kernel. The scheduler then switches to task 1, which prints another message, and then yields control back to the kernel. The scheduler then switches back to task 0, which calls exit, which terminates the task. The scheduler then switches to task 1, which also calls exit and terminates the task. Since there are no more tasks in the queue, the scheduler halts the CPU.\",\"Let's add a third task for fun and see what happens.\",\"kernel: Adding tasks to scheduler kernel: Starting scheduler sched: switching -> 0 syscall: print Hello from user mode! syscall: yield sched: switching 0 -> 1 syscall: print Hello from user mode! syscall: yield sched: switching 1 -> 2 syscall: print Hello from user mode! syscall: yield sched: switching 2 -> 0 syscall: exit: code=0 sched: switching 0 -> 1 syscall: exit: code=0 sched: switching 1 -> 2 syscall: exit: code=0 sched: no tasks to run, halting \",\"It works! The scheduler runs all three tasks in a round-robin fashion, and then halts the CPU when there are no more tasks to run. This is exciting! We now have a simple cooperative multitasking system.\",\"Now that we have a few system calls, it's time to add a system library that can be used by user tasks to invoke these system calls, instead of using inline assembly. We'll do that in the next chapter.\"]},\"244\":{\"h\":\"System Library\",\"t\":[\"So far, we have three system calls: print, yield, and exit. It's going to be tedious to write everything in assembly, so we need to write a system library that wraps these system calls in procs that we can call from our user tasks. This library will be the interface between our user tasks and the kernel.\"]},\"245\":{\"h\":\"Writing the Library\",\"t\":[\"Let's create a new top-level directory called syslib, and inside it, we'll create two modules for our system calls: io.nim (for print), and os.nim (for yield and exit). Since system call numbers need to be unique, let's define them in a common module called syscalldef.nim.\",\"# src/syslib/syscalldef.nim const SysExit = 1 SysPrint = 2 SysYield = 3 \",\"Now let's add io.nim.\",\"# src/syslib/io.nim include syscalldef proc print*(pstr: ptr string) = asm \\\"\\\"\\\" mov rdi, %0 mov rsi, %1 syscall : : \\\"i\\\" (`SysPrint`), \\\"m\\\" (`pstr`) : \\\"rdi\\\", \\\"rsi\\\", \\\"rcx\\\", \\\"r11\\\" \\\"\\\"\\\" \",\"This is our first system call wrapper, print. It takes a pointer to a string and passes it to the kernel system call SysPrint.\",\"Next, let's add os.nim.\",\"# src/syslib/os.nim include syscalldef proc yld*() = asm \\\"\\\"\\\" mov rdi, %0 syscall : : \\\"i\\\" (`SysYield`) : \\\"rdi\\\", \\\"rcx\\\", \\\"r11\\\" \\\"\\\"\\\" proc exit*(code: int) = asm \\\"\\\"\\\" mov rdi, %0 mov rsi, %1 syscall : : \\\"i\\\" (`SysExit`), \\\"r\\\" (`code`) : \\\"rdi\\\", \\\"rsi\\\", \\\"rcx\\\", \\\"r11\\\" \\\"\\\"\\\" \",\"These are the wrappers for yield and exit. yield doesn't take any arguments, so it just passes the system call number to the kernel. exit takes an integer argument, which is the exit code.\"]},\"246\":{\"h\":\"Using the Library\",\"t\":[\"It's time to put our brand new system library to use. Let's modify our user task to use all three system calls, instead of the direct system calls we had before.\",\"# src/user/utask.nim import common/[libc, malloc] import syslib/[io, os] proc NimMain() {.importc.} let msg = \\\"Hello from user mode!\\\" pmsg = msg.addr proc UserMain*() {.exportc.} = NimMain() print(pmsg) yld() exit(0) \",\"This looks much cleaner and more readable than the assembly code we had before. We can now write our user tasks in Nim, and the system library will take care of the system calls for us.\",\"Let's try it out.\",\"... kernel: Adding tasks to scheduler kernel: Starting scheduler sched: switching -> 0 Hello from user mode! syscall: yield sched: switching 0 -> 1 Hello from user mode! syscall: yield sched: switching 1 -> 2 Hello from user mode! syscall: yield sched: switching 2 -> 0 syscall: exit: code=0 sched: switching 0 -> 1 syscall: exit: code=0 sched: switching 1 -> 2 syscall: exit: code=0 sched: no tasks to run, halting \",\"No surprises, everything works as expected. We have successfully abstracted the system calls into a library, making it easier to write user tasks without worrying about the details of system calls. We can now add more system calls to the library as we need them.\",\"In the next few sections I'd like to tackle preemptive multitasking. This will require receiving interrupts from a hardware timer. So far our interrupt support is limited to handling CPU exceptions. For hardware interrupts we need to work with the interrupt controller in our system, which we'll look at in the next section.\"]},\"247\":{\"h\":\"Interrupt Controller\",\"t\":[\"The legacy x86 architecture featured a single interrupt controller, the 8259A Programmable Interrupt Controller (PIC), responsible for managing hardware interrupts. The PIC is a simple device that is limited to 8 interrupts per controller (15 interrupts total when cascaded with another PIC, as one interrupt line is used for the cascade), and is limited in terms of interrupt priority, routing flexibility, and multiprocessor support.\",\"The PIC is now considered obsolete, and modern x86 systems use the Advanced Programmable Interrupt Controller (APIC) architecture. The APIC architecture consists of two main components: the I/O APIC and the Local APIC. The I/O APIC is responsible for managing interrupts from external devices (usually there is only one in the system), while the Local APIC is integrated into each CPU core and is responsible for managing interrupts delivered to the CPU core (whether from the I/O APIC or from the Local APIC of other CPU cores), as well as interrupts from internal sources such as the Local APIC timer. For this reason, we will focus on the Local APIC in this section.\"]},\"248\":{\"h\":\"Local APIC\",\"t\":[\"The Local APIC is responsible for managing interrupts delivered to its associated core. The interrupts it delivers can originate from internal sources, such as its timer, thermal sensors, and performance monitoring counters, or from external sources, such as the I/O APIC and Inter-Processor Interrupts (IPIs).\",\"The following is a simplified diagram of the relevant components of the Local APIC (there are more components, but we won't need them for now):\",\"┌─────────────────────────────┐ │ Version Register │ └─────────────────────────────┘ ┌──────────────────────────────┐ ◄──┐ │ Current Count Register │ │ ├──────────────────────────────┤ │ │ Initial Count Register │ ├── Timer Registers ├──────────────────────────────┤ │ │ Divide Configuration │ │ └──────────────────────────────┘ ◄──┘ ┌──────────────────────────────┐ ◄──┐ │ Timer │ │ ├──────────────────────────────┤ │ │ Local INT0 │ │ ├──────────────────────────────┤ │ │ Local INT1 │ │ ├──────────────────────────────┤ ├── Local Vector Table (LVT) │ Perf. Monitoring Counters │ │ ├──────────────────────────────┤ │ │ Thermal Sensors │ │ ├──────────────────────────────┤ │ │ Error Register │ │ └──────────────────────────────┘ ◄──┘ ┌──────────────────────────────┐ ┆ Other registers... ┆ \",\"The Local APIC is memory-mapped, typically at physical address 0xFEE00000; the actual address should be read from the IA32_APIC_BASE MSR. Although the address is the same for all cores, they operate independently and can be programmed separately. Here's a diagram of this MSR:\",\" IA32_APIC_BASE MSR 63 MAX_PHYS_ADDR 12 11 10 9 8 7 0 ┌────────────────────────────┬───────────────────────────┬──┬─────┬──┬───────────┐ │░░░░░░░░░░░░░░░░░░░░░░░░░░░░│ APIC Base │ │░░░░░│ │░░░░░░░░░░░│ └────────────────────────────┴───────────────────────────┴──┴─────┴──┴───────────┘ ▲ ▲ ▲ Physical base address ───────┘ │ │ APIC global enable/disable ───────────────────────┘ │ BSP - Processor is BSP ────────────────────────────────┘ \",\"The APIC is programmed by writing to its registers, which are 32 bits wide and located at fixed offsets from the base address. The registers occupy a 4KB page of physical memory address space, from 0xFEE00000 to 0xFEE00FFF, with each register aligned on a 16-byte boundary.\",\"Since the base address we get from the IA32_APIC_BASE MSR is a physical address, we can't use it directly; we need to map a page of virtual memory to it first, and then use that virtual memory region to access the APIC registers. Also note this description from the Intel manual:\",\"APIC Base field, bits 12 through 35: Specifies the base address of the APIC registers. This 24-bit value is extended by 12 bits at the low end to form the base address. This automatically aligns the address on a 4-KByte boundary.\",\"So we'll need to shift the base address left by 12 bits to get the physical address of the APIC. Since the address is already aligned to a page boundary, we can use it directly when mapping it to virtual memory.\",\"Let's start by creating a new module lapic.nim and defining a type for the IA32_APIC_BASE MSR so that we can read it and get the physical address of the Local APIC.\",\"# src/kernel/lapic.nim type IA32ApicBaseMsr {.packed.} = object reserved1 {.bitsize: 8.}: uint64 isBsp {.bitsize: 1.}: uint64 # Is Bootstrap Processor? reserved2 {.bitsize: 2.}: uint64 enabled {.bitsize: 1.}: uint64 # APIC Enabled? baseAddress {.bitsize: 24.}: uint64 # Physical Base Address (bits 12-35) reserved3 {.bitsize: 28.}: uint64 \",\"Let's import our vmm module so that we can map the APIC region, and let's define a proc to initialize the base virtual address of the APIC.\",\"import vmm var apicBaseAddress: uint64 proc initBaseAddress() = let apicBaseMsr = cast[IA32ApicBaseMsr](readMSR(IA32_APIC_BASE)) let apicPhysAddr = (apicBaseMsr.baseAddress shl 12).PhysAddr # by definition, apicPhysAddr is aligned to a page boundary, so we map it directly let apicVMRegion = vmalloc(kspace, 1) mapRegion( pml4 = kpml4, virtAddr = apicVMRegion.start, physAddr = apicPhysAddr, pageCount = 1, pageAccess = paReadWrite, pageMode = pmSupervisor, noExec = true ) apicBaseAddress = apicVMRegion.start.uint64 \",\"The APIC has many registers at different offsets from the base address, each register is 32 bits wide. Let's define the offsets of those registers. The registers we are interested in are pointed out with comments, as we'll use them later to initialize the APIC and program the timer. And while we're at it, let's also add a couple of procs to read from and write to the APIC registers.\",\"type LapicOffset = enum LapicId = 0x020 LapicVersion = 0x030 TaskPriority = 0x080 ProcessorPriority = 0x0a0 Eoi = 0x0b0 # ◄────── End Of Interrupt Register LogicalDestination = 0x0d0 DestinationFormat = 0x0e0 SpuriousInterrupt = 0x0f0 # ◄────── Spurious Interrupt Vector Register InService = 0x100 TriggerMode = 0x180 InterruptRequest = 0x200 ErrorStatus = 0x280 LvtCmci = 0x2f0 InterruptCommandLo = 0x300 InterruptCommandHi = 0x310 LvtTimer = 0x320 # ◄────── LVT Timer Register LvtThermalSensor = 0x330 LvtPerfMonCounters = 0x340 LvtLint0 = 0x350 LvtLint1 = 0x360 LvtError = 0x370 TimerInitialCount = 0x380 # ◄──┐ TimerCurrentCount = 0x390 # ├── Timer Config Registers TimerDivideConfig = 0x3e0 # ◄──┘ proc readRegister(offset: LapicOffset): uint32 {.inline.} = result = cast[ptr uint32](apicBaseAddress + offset.uint16)[] proc writeRegister(offset: LapicOffset, value: uint32) {.inline.} = cast[ptr uint32](apicBaseAddress + offset.uint16)[] = value \"]},\"249\":{\"h\":\"Initializing the APIC\",\"t\":[\"There are two places that control whether the APIC is enabled or not: the IA32_APIC_BASE MSR APIC global enable/disable flag (bit 11), and the APIC software enable/disable flag in the spurious-interrupt vector register.\",\"Note\",\"Spurious interrupts can occur in rare situations when the processor receives an interrupt at a lower priority than the current interrupt being processed, causing it to become pending. While the ISR for the current interrupt is executing, it may mask the pending interrupt. The APIC will then deliver a spurious interrupt to the processor, which will cause the processor to execute the ISR configured for spurious interrupts. In this case the spurious interrupt handler should just ignore the interrupt and return without an EOI.\",\"The APIC global enable/disable flag is enabled by default, so we don't need to worry about it. This is not the case for the enable/disable bit in the spurious-interrupt vector register, so we need to set it to enable the APIC. Let's first look at a diagram of the spurious-interrupt vector register.\",\" Spurious Interrupt Vector Register 31 12 11 10 9 8 7 0 ┌────────────────────────────────────────────────┬──┬─────┬──┬──┬───────────────┐ │░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│ │░░░░░│ │ │ │ └────────────────────────────────────────────────┴──┴─────┴──┴──┴───────────────┘ ▲ ▲ ▲ ▲ EOI Broadcast Suppression ───────┘ │ │ │ Focus Processor Checking ─────────────────┘ │ │ APIC Software Enable/Disable ────────────────────┘ │ Spurious Interrupt Vector ────────────────────────────┘ \",\"The bits we are interested in are the APIC software enable/disable bit (bit 8) and the spurious interrupt vector (bits 7-0). The vector is set to 0xFF by the CPU by default, which we will keep as is, and will add a new interrupt handler for. Let's create a type for the spurious interrupt vector register so we can easily access its fields.\",\"type SpuriousInterruptVectorRegister {.packed.} = object vector {.bitsize: 8.}: uint32 apicEnabled {.bitsize: 1.}: uint32 focusProcessorChecking {.bitsize: 1.}: uint32 reserved0 {.bitsize: 2.}: uint32 eoiBroadcastSuppression {.bitsize: 1.}: uint32 reserved1 {.bitsize: 19.}: uint32 \",\"Let's create the spurious interrupt handler, which ignores those interrupts.\",\"import idt ... proc spuriousInterruptHandler*(frame: ptr InterruptFrame) {.cdecl, codegenDecl: \\\"__attribute__ ((interrupt)) $# $#$#\\\".} = # Ignore spurious interrupts; do not send an EOI return \",\"Now let's create a proc to initialize the APIC. This proc will first call initBaseAddress to initialize the base address of the APIC, write the spurious interrupt vector register to enable the APIC, and finally install the spurious interrupt handler in the IDT.\",\"proc lapicInit*() = initBaseAddress() # enable APIC let sivr = SpuriousInterruptVectorRegister(vector: 0xff, apicEnabled: 1) writeRegister(LapicOffset.SpuriousInterrupt, cast[uint32](sivr)) # install spurious interrupt handler installHandler(0xff, spuriousInterruptHandler) \",\"Finally, we need to call lapicInit from the kernel's main proc to initialize the APIC.\",\"# src/kernel/main.nim import lapic ... proc KernelMainInner(bootInfo: ptr BootInfo) = ... logger.info \\\"init idt\\\" idtInit() logger.info \\\"init lapic\\\" lapicInit() ... \",\"The Local APIC should now be initialized and ready to receive interrupts. In the next section, we'll look at how to program the Local APIC timer to generate periodic interrupts.\"]},\"250\":{\"h\":\"Fusion OS\",\"t\":[\"This is both a documentation and a tutorial for building an operating system, Fusion OS, from scratch in Nim. You can find the source code on GitHub at https://github.com/khaledh/fusion.\",\"Note: The source for this documentation is on GitHub at https://github.com/khaledh/khaledh.github.io. Comments and contributions are welcome through GitHub issues and pull requests.\"]},\"251\":{\"h\":\"Screenshots\",\"t\":[\"UEFI Bootloader\",\"GUI (Note: This screenshot is from the graphics branch, which is still a work-in-progress.)\",\"Booting and Running the Kernel\"]},\"252\":{\"h\":\"Features\",\"t\":[\"The following features are currently implemented:\",\"UEFI Bootloader\",\"Memory Management \",\"Single Address Space\",\"Physical Memory Manager\",\"Virtual Memory Manager\",\"Higher Half Kernel\",\"Task Management \",\"Kernel Tasks\",\"User Mode Tasks\",\"Preemptive Multitasking\",\"Priority-based Scheduling\",\"ELF Loader\",\"System Calls \",\"System Call Interface\",\"SYSCALL/SYSRET\",\"User Mode Library\",\"IPC \",\"Synchronization Primitives\",\"Channel-based IPC\",\"Message Passing\",\"Hardware \",\"Timer Interrupts\",\"PCI Device Enumeration\",\"Bochs Graphics Adapter Driver\"]},\"253\":{\"h\":\"Planned\",\"t\":[\"Capability-based Security\",\"Event-based Task State Machines\",\"Demand Paging\",\"Disk I/O\",\"File System\",\"Keyboard/Mouse Input\",\"Shell\",\"GUI\",\"Networking\"]},\"254\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"┆\",{\"1\":{\"248\":2}}],[\"▲\",{\"1\":{\"187\":1,\"248\":3,\"249\":4}}],[\"◄──────\",{\"1\":{\"248\":3}}],[\"◄──\",{\"1\":{\"187\":1,\"194\":5}}],[\"◄──┴──\",{\"1\":{\"187\":1}}],[\"◄──┐\",{\"1\":{\"187\":1,\"191\":2,\"248\":3}}],[\"◄──┘\",{\"1\":{\"85\":3,\"191\":2,\"248\":3}}],[\"└─▶\",{\"1\":{\"168\":1}}],[\"└────\",{\"1\":{\"194\":1}}],[\"└────────┴──────────┴─────────────────────────┴───────────┴───────┴────────────────────────────────────┘\",{\"1\":{\"192\":1}}],[\"└─────────────────┘\",{\"1\":{\"174\":4}}],[\"└────────────────────────────┴───────────────────────────┴──┴─────┴──┴───────────┘\",{\"1\":{\"248\":1}}],[\"└─────────────────────────────┘\",{\"1\":{\"248\":1}}],[\"└────────────────────────────────────────────────┴──┴─────┴──┴──┴───────────────┘\",{\"1\":{\"249\":1}}],[\"└─────────────────────────────────────────────────┘\",{\"1\":{\"201\":1}}],[\"└───────────────────────────────────────────────────────────────────────────────────────────────┘\",{\"1\":{\"190\":2}}],[\"└───────────────────────────────────────────────┴──┴─────┴──┴───────────┴────────┴──┴──┴────────┘\",{\"1\":{\"190\":1}}],[\"└───────────────────────────────────────────────┴───────────────────────────────────────────────┘\",{\"1\":{\"185\":1,\"190\":1}}],[\"└──────────────────────────────────────┴──┴─────┘\",{\"1\":{\"186\":1}}],[\"└──────────────────────────────┘\",{\"1\":{\"173\":1,\"248\":2}}],[\"└───────────────────────────┘\",{\"1\":{\"187\":1}}],[\"└───────────────────────┴──┴──┴──┴──┴───────────┴──┴─────┴──┴───────────┴───────────────────────┘\",{\"1\":{\"185\":1}}],[\"└──────────────────┴────────────────┴────────────────┴──────────────┴──────────────┴─────────────┘\",{\"1\":{\"174\":1}}],[\"└──────┘\",{\"1\":{\"187\":6}}],[\"└──\",{\"1\":{\"69\":6,\"71\":13,\"73\":5,\"143\":7}}],[\"└▲┬┴────────────┴────────────┴▲┬┴──────┴──────────────────────────────┴▲┬┴─────────┴──────────────┘\",{\"1\":{\"168\":1}}],[\"─┘\",{\"1\":{\"168\":1}}],[\"─┐\",{\"1\":{\"105\":3}}],[\"──┐\",{\"1\":{\"105\":4}}],[\"───────┘\",{\"1\":{\"248\":1,\"249\":1}}],[\"──────────┐\",{\"1\":{\"105\":1}}],[\"────────────┐\",{\"1\":{\"105\":1}}],[\"─────────────────┘\",{\"1\":{\"249\":1}}],[\"────────────────────┘\",{\"1\":{\"249\":1}}],[\"────────────────────────────┘\",{\"1\":{\"249\":1}}],[\"────────────────────────────────┘\",{\"1\":{\"248\":1}}],[\"───────────────────────┘\",{\"1\":{\"248\":1}}],[\"──────────────────┐0\",{\"1\":{\"85\":1}}],[\"─────────────┐1\",{\"1\":{\"85\":1}}],[\"────────┐2\",{\"1\":{\"85\":1}}],[\"───┐\",{\"1\":{\"105\":1}}],[\"──\",{\"1\":{\"85\":2}}],[\"┐\",{\"1\":{\"105\":2,\"187\":5}}],[\"┌──┴───┐\",{\"1\":{\"187\":6}}],[\"┌──>┌─────────────────┐\",{\"1\":{\"174\":3}}],[\"┌──┬────────────┬────────────┬──┬──────┬──────────────────────────────┬──┬─────────┬──────────────┐\",{\"1\":{\"168\":1}}],[\"┌────\",{\"1\":{\"105\":1,\"194\":1}}],[\"┌────────────────▼─┐\",{\"1\":{\"194\":1}}],[\"┌─────────────────┐\",{\"1\":{\"174\":1}}],[\"┌──────────────────┬────────────────┬────────────────┬──────────────┬──────────────┬─────────────┐\",{\"1\":{\"174\":1}}],[\"┌────────────────────────┬────────────────────────┐\",{\"1\":{\"201\":1}}],[\"┌────────────────────────────┬───────────────────────────┬──┬─────┬──┬───────────┐\",{\"1\":{\"248\":1}}],[\"┌─────────────────────────────┐\",{\"1\":{\"248\":1}}],[\"┌────────────────────────────────────────────────┬──┬─────┬──┬──┬───────────────┐\",{\"1\":{\"249\":1}}],[\"┌───────────────────────────────────────────────────────────────────────────────────────────────┐\",{\"1\":{\"190\":2}}],[\"┌───────────────────────────────────────────────┬──┬─────┬──┬───────────┬────────┬──┬──┬────────┐\",{\"1\":{\"190\":1}}],[\"┌───────────────────────────────────────────────┬───────────────────────────────────────────────┐\",{\"1\":{\"185\":1,\"190\":1}}],[\"┌──────────────────────────────────────┬──┬─────┐\",{\"1\":{\"186\":1}}],[\"┌──────────────────────────────┐\",{\"1\":{\"173\":1,\"248\":3}}],[\"┌───────────────────────────┐\",{\"1\":{\"187\":1}}],[\"┌───────────────────────┬──┬──┬──┬──┬───────────┬──┬─────┬──┬───────────┬───────────────────────┐\",{\"1\":{\"185\":1}}],[\"┌──────────────────────\",{\"1\":{\"105\":1}}],[\"┌────────┬──────────┬─────────────────────────┬───────────┬───────┬────────────────────────────────────┐\",{\"1\":{\"192\":1}}],[\"┌───────\",{\"1\":{\"105\":1}}],[\"┌──────\",{\"1\":{\"105\":1}}],[\"┌─\",{\"1\":{\"105\":1}}],[\"┌\",{\"1\":{\"105\":7}}],[\"`sysexit`\",{\"1\":{\"245\":1}}],[\"`sysyield`\",{\"1\":{\"245\":1}}],[\"`sysprint`\",{\"1\":{\"245\":1}}],[\"`yield`\",{\"1\":{\"241\":2}}],[\"`code`\",{\"1\":{\"245\":1}}],[\"`currenttask`\",{\"1\":{\"223\":2,\"240\":3}}],[\"`cr2`\",{\"1\":{\"193\":1}}],[\"`cr3`\",{\"1\":{\"177\":2,\"181\":1}}],[\"`pstr`\",{\"1\":{\"245\":1}}],[\"`pmsg`\",{\"1\":{\"213\":1,\"215\":1}}],[\"`port`\",{\"1\":{\"144\":1}}],[\"`userrsp`\",{\"1\":{\"211\":1,\"212\":1}}],[\"`taskstatesegmentselector`\",{\"1\":{\"203\":1}}],[\"`type`\",{\"1\":{\"159\":1,\"162\":1,\"190\":1,\"202\":1,\"230\":1,\"235\":3}}],[\"`rsp`\",{\"1\":{\"200\":1,\"221\":1}}],[\"`rg\",{\"1\":{\"9\":1}}],[\"`idtdescriptor`\",{\"1\":{\"191\":1,\"192\":1}}],[\"`interface`\",{\"1\":{\"151\":1}}],[\"`datasegmentselector`\",{\"1\":{\"188\":1,\"203\":1}}],[\"`data`\",{\"1\":{\"144\":1}}],[\"`gdtdescriptor`\",{\"1\":{\"188\":1,\"203\":1}}],[\"`jmp\",{\"1\":{\"188\":1}}],[\"`ecx`\",{\"1\":{\"209\":2}}],[\"`edx`\",{\"1\":{\"209\":2}}],[\"`eax`\",{\"1\":{\"209\":2}}],[\"`entries`\",{\"1\":{\"175\":1}}],[\"`efimemorytype`\",{\"1\":{\"162\":1}}],[\"`+\",{\"1\":{\"168\":2,\"177\":1}}],[\"`<`\",{\"1\":{\"168\":1}}],[\"`==`\",{\"1\":{\"168\":1}}],[\"`=`\",{\"1\":{\"104\":1}}],[\"`kernelstackaddr`\",{\"1\":{\"211\":1,\"212\":1}}],[\"`kernelstacktop`\",{\"1\":{\"164\":1,\"181\":1}}],[\"`kernelcodesegmentselector`\",{\"1\":{\"188\":1,\"203\":1}}],[\"`kernelvirtualbase`\",{\"1\":{\"181\":1}}],[\"`kernelphysicalbase`\",{\"1\":{\"164\":1}}],[\"`bootinfobase`\",{\"1\":{\"164\":1,\"181\":1}}],[\"`xcrun\",{\"1\":{\"124\":2}}],[\"`^\",{\"1\":{\"109\":1}}],[\"`\",{\"1\":{\"101\":1,\"102\":1,\"109\":1,\"168\":4,\"175\":8,\"177\":3}}],[\"`foo`\",{\"1\":{\"97\":1}}],[\"`msg`\",{\"1\":{\"97\":2}}],[\"│░░░░░░░░░░░│\",{\"1\":{\"248\":1}}],[\"│░░░░░░░░░░░░├──┤\",{\"1\":{\"168\":1}}],[\"│░░░░░░░░░░░░│\",{\"1\":{\"168\":1}}],[\"│░░░░░░░░░░░░│2\",{\"1\":{\"168\":1}}],[\"│░░░░░░░░░░░░░░░░░░░░░░░░░░░░│\",{\"1\":{\"248\":1}}],[\"│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│\",{\"1\":{\"249\":1}}],[\"│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░├──┤\",{\"1\":{\"168\":1}}],[\"│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│\",{\"1\":{\"168\":1}}],[\"│░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░│3\",{\"1\":{\"168\":1}}],[\"│░░░░░░░░░░░░░░│\",{\"1\":{\"168\":3}}],[\"│░░░░░│\",{\"1\":{\"248\":1,\"249\":1}}],[\"│0\",{\"1\":{\"190\":3}}],[\"│ti│\",{\"1\":{\"186\":1}}],[\"│b\",{\"1\":{\"185\":1}}],[\"│v\",{\"1\":{\"185\":1}}],[\"│s\",{\"1\":{\"185\":1}}],[\"│p\",{\"1\":{\"185\":1,\"190\":1}}],[\"│a\",{\"1\":{\"185\":1}}],[\"│l\",{\"1\":{\"185\":2}}],[\"│d\",{\"1\":{\"185\":1}}],[\"│g\",{\"1\":{\"185\":1}}],[\"│──>\",{\"1\":{\"174\":1}}],[\"│──┘\",{\"1\":{\"174\":3}}],[\"│└───────────────────────────┘└───────────────────────────────────────┘│\",{\"1\":{\"168\":1}}],[\"│4\",{\"1\":{\"168\":1}}],[\"│\",{\"1\":{\"69\":8,\"71\":14,\"73\":8,\"85\":12,\"143\":18,\"168\":7,\"173\":16,\"174\":75,\"185\":33,\"186\":2,\"187\":28,\"190\":12,\"191\":34,\"192\":293,\"194\":11,\"201\":35,\"248\":38,\"249\":9}}],[\"├────────────────▲─┤\",{\"1\":{\"194\":1}}],[\"├─────────────────┤\",{\"1\":{\"174\":4}}],[\"├────────────────────────┴────────────────────────┤\",{\"1\":{\"201\":1}}],[\"├─────────────────────────────────────────────────┤\",{\"1\":{\"201\":15}}],[\"├──────────────────────────────┤\",{\"1\":{\"173\":2,\"248\":7}}],[\"├───────────────────────────┤\",{\"1\":{\"187\":3}}],[\"├──────────────────┤\",{\"1\":{\"191\":9,\"194\":5}}],[\"├──────────────────┼────────────────┼────────────────┼──────────────┼──────────────┼─────────────┤\",{\"1\":{\"174\":1}}],[\"├────────┼──────────┼─────────────────────────┼───────────┼───────┼────────────────────────────────────┤\",{\"1\":{\"192\":1}}],[\"├──┤\",{\"1\":{\"168\":1}}],[\"├──\",{\"1\":{\"69\":8,\"71\":14,\"73\":13,\"143\":12,\"187\":1,\"191\":2,\"248\":3}}],[\"ツ\",{\"1\":{\"57\":1,\"150\":1}}],[\"¯\",{\"1\":{\"57\":2,\"150\":2}}],[\"^5\",{\"1\":{\"199\":2}}],[\"^4\",{\"1\":{\"199\":2}}],[\"^3\",{\"1\":{\"199\":2}}],[\"^2\",{\"1\":{\"199\":2}}],[\"^1\",{\"1\":{\"199\":2,\"237\":1}}],[\"^~~~~~~~~~\",{\"1\":{\"124\":2}}],[\"^=+\",{\"1\":{\"104\":1}}],[\"^\",{\"1\":{\"53\":2,\"62\":2,\"87\":1,\"95\":2,\"96\":1,\"97\":3,\"103\":1,\"104\":3,\"105\":2,\"109\":12,\"110\":1,\"124\":2}}],[\"^foo\",{\"1\":{\"9\":1}}],[\"$6\",{\"1\":{\"200\":1}}],[\"$0\",{\"1\":{\"200\":2}}],[\"$0x40000070\",{\"1\":{\"200\":1}}],[\"$0x4000a57d\",{\"1\":{\"200\":1}}],[\"$0x4000a68b\",{\"1\":{\"200\":1}}],[\"$0x30\",{\"1\":{\"200\":1}}],[\"$eip\",{\"1\":{\"210\":3}}],[\"$e\",{\"1\":{\"141\":1}}],[\"$elementname$\",{\"1\":{\"58\":1}}],[\"$cast\",{\"1\":{\"140\":1,\"141\":1}}],[\"$x\",{\"1\":{\"107\":1}}],[\"$foo\",{\"1\":{\"106\":1}}],[\"$fileelementname$\",{\"1\":{\"58\":1}}],[\"$~\",{\"1\":{\"104\":2}}],[\"$^\",{\"1\":{\"103\":1}}],[\"$name\",{\"1\":{\"82\":6}}],[\"$tokenname$\",{\"1\":{\"58\":1}}],[\"$\",{\"1\":{\"42\":1,\"64\":1,\"103\":1,\"104\":1,\"106\":4,\"107\":1,\"109\":3,\"118\":3,\"119\":3,\"120\":2,\"121\":4,\"123\":8,\"124\":6,\"131\":2,\"133\":2,\"134\":8,\"135\":4,\"136\":1,\"147\":10,\"148\":5,\"179\":2,\"191\":3,\"192\":6,\"193\":3,\"196\":2,\"206\":3,\"226\":3,\"227\":1,\"228\":2,\"229\":2,\"234\":4,\"249\":3}}],[\"$1\",{\"1\":{\"8\":1}}],[\"||\",{\"1\":{\"79\":1}}],[\"|\",{\"1\":{\"41\":1,\"45\":1,\"54\":1,\"62\":1,\"65\":1,\"68\":1,\"73\":1,\"88\":1,\"89\":2,\"90\":1,\"91\":7,\"92\":8,\"93\":1,\"95\":1,\"97\":9,\"99\":14,\"100\":2,\"101\":4,\"103\":2,\"104\":4,\"105\":13,\"106\":13,\"107\":4,\"108\":3,\"109\":18,\"118\":1,\"124\":12,\"187\":2,\"188\":1,\"228\":1}}],[\"≥\",{\"1\":{\"20\":1}}],[\"~=\",{\"1\":{\"104\":1}}],[\"~>\",{\"1\":{\"103\":1}}],[\"~220\",{\"1\":{\"32\":2}}],[\"~\",{\"1\":{\"20\":1,\"103\":3,\"104\":2}}],[\"~1\",{\"1\":{\"17\":1,\"33\":1}}],[\"~64kb\",{\"1\":{\"11\":2}}],[\"54\",{\"1\":{\"228\":1}}],[\"55\",{\"1\":{\"200\":1}}],[\"55240\",{\"1\":{\"147\":1}}],[\"59\",{\"1\":{\"196\":2}}],[\"58\",{\"1\":{\"192\":1,\"193\":2,\"228\":1}}],[\"52\",{\"1\":{\"175\":4}}],[\"5236\",{\"1\":{\"170\":1}}],[\"5250\",{\"1\":{\"21\":1}}],[\"511\",{\"1\":{\"174\":4}}],[\"51104\",{\"1\":{\"148\":1}}],[\"51\",{\"1\":{\"124\":1,\"148\":1,\"175\":4}}],[\"512\",{\"1\":{\"22\":1,\"28\":3,\"31\":2,\"174\":4,\"175\":5,\"198\":1,\"199\":2,\"220\":1}}],[\"57\",{\"1\":{\"123\":1,\"173\":1,\"193\":1,\"205\":2}}],[\"576p\",{\"1\":{\"32\":1}}],[\"576i\",{\"1\":{\"32\":1}}],[\"56\",{\"1\":{\"147\":2,\"228\":1,\"234\":1}}],[\"567\",{\"1\":{\"98\":1}}],[\"563\",{\"1\":{\"21\":1}}],[\"53\",{\"1\":{\"36\":1,\"205\":3,\"206\":1}}],[\"5x\",{\"1\":{\"29\":1}}],[\"50\",{\"1\":{\"21\":1,\"30\":1,\"102\":1}}],[\"500\",{\"1\":{\"21\":1}}],[\"500k+\",{\"1\":{\"20\":1}}],[\"509\",{\"1\":{\"14\":1,\"22\":2}}],[\"5\",{\"1\":{\"15\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":2,\"29\":2,\"30\":1,\"31\":7,\"32\":1,\"36\":1,\"98\":1,\"101\":3,\"103\":1,\"105\":2,\"109\":4,\"110\":1,\"124\":2,\"141\":1,\"147\":7,\"165\":1,\"166\":1,\"173\":1,\"174\":1,\"175\":4,\"186\":1,\"190\":1,\"192\":2,\"199\":1,\"202\":1,\"220\":2,\"226\":1,\"228\":1,\"229\":1,\"234\":1,\"235\":2}}],[\"96\",{\"1\":{\"201\":1}}],[\"9fec\",{\"1\":{\"196\":1}}],[\"9b\",{\"1\":{\"179\":2,\"196\":2}}],[\"9887\",{\"1\":{\"165\":1}}],[\"9899\",{\"1\":{\"36\":1}}],[\"92\",{\"1\":{\"201\":1}}],[\"92596\",{\"1\":{\"169\":1,\"170\":7,\"171\":4,\"188\":1}}],[\"9205\",{\"1\":{\"165\":1}}],[\"9216\",{\"1\":{\"165\":1,\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"9c3\",{\"1\":{\"147\":1}}],[\"9a\",{\"1\":{\"99\":1}}],[\"90276\",{\"1\":{\"183\":1}}],[\"9000\",{\"1\":{\"21\":1,\"25\":2,\"36\":1}}],[\"90\",{\"1\":{\"20\":1,\"200\":1,\"210\":1,\"228\":1}}],[\"9\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"30\":1,\"31\":2,\"32\":1,\"54\":1,\"62\":1,\"72\":1,\"99\":1,\"101\":1,\"103\":1,\"105\":2,\"110\":1,\"147\":4,\"165\":1,\"169\":1,\"174\":8,\"175\":1,\"183\":2,\"185\":1,\"186\":1,\"192\":2,\"226\":1,\"228\":3,\"230\":1,\"234\":1,\"235\":1,\"248\":1,\"249\":1}}],[\"99\",{\"1\":{\"19\":2,\"165\":1}}],[\"95\",{\"1\":{\"11\":1,\"19\":1}}],[\"9780143127796\",{\"1\":{\"7\":2}}],[\"81\",{\"1\":{\"228\":1}}],[\"8192\",{\"1\":{\"165\":1}}],[\"8d\",{\"1\":{\"200\":1}}],[\"8b\",{\"1\":{\"200\":1}}],[\"83\",{\"1\":{\"200\":1,\"228\":1}}],[\"88\",{\"1\":{\"193\":2,\"201\":1}}],[\"85\",{\"1\":{\"171\":1,\"228\":1}}],[\"87\",{\"1\":{\"147\":3,\"192\":1,\"228\":1}}],[\"8700\",{\"1\":{\"25\":1}}],[\"8601\",{\"1\":{\"36\":1}}],[\"84\",{\"1\":{\"201\":1}}],[\"8446\",{\"1\":{\"36\":1}}],[\"8473\",{\"1\":{\"21\":1}}],[\"8240\",{\"1\":{\"165\":1,\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"8236\",{\"1\":{\"165\":1}}],[\"8224\",{\"1\":{\"165\":1,\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"8256\",{\"1\":{\"165\":1}}],[\"8254\",{\"1\":{\"33\":1}}],[\"8253\",{\"1\":{\"33\":1}}],[\"8259\",{\"1\":{\"33\":1}}],[\"8259a\",{\"1\":{\"33\":1,\"247\":1}}],[\"82s\",{\"1\":{\"29\":1}}],[\"8×\",{\"1\":{\"32\":1}}],[\"8k\",{\"1\":{\"32\":1}}],[\"8n1\",{\"1\":{\"30\":1}}],[\"89\",{\"1\":{\"200\":3}}],[\"8900\",{\"1\":{\"25\":1}}],[\"8949\",{\"1\":{\"15\":1}}],[\"80x25\",{\"1\":{\"32\":1}}],[\"8002\",{\"1\":{\"180\":1}}],[\"8001\",{\"1\":{\"180\":1}}],[\"8000\",{\"1\":{\"180\":1}}],[\"800\",{\"1\":{\"36\":1}}],[\"800×600\",{\"1\":{\"32\":1}}],[\"800mhz\",{\"1\":{\"30\":1}}],[\"80\",{\"1\":{\"31\":3,\"33\":1}}],[\"802\",{\"1\":{\"21\":2,\"36\":1}}],[\"8086\",{\"1\":{\"11\":1}}],[\"80s\",{\"1\":{\"11\":1}}],[\"8\",{\"1\":{\"11\":5,\"14\":8,\"21\":1,\"22\":1,\"25\":2,\"30\":1,\"31\":1,\"33\":2,\"86\":2,\"99\":1,\"103\":1,\"105\":2,\"109\":4,\"110\":1,\"120\":1,\"124\":4,\"147\":7,\"151\":1,\"165\":2,\"171\":7,\"175\":4,\"180\":1,\"185\":1,\"188\":2,\"190\":1,\"192\":2,\"199\":1,\"201\":1,\"202\":1,\"209\":2,\"220\":1,\"226\":8,\"227\":5,\"228\":21,\"229\":3,\"230\":2,\"234\":9,\"235\":1,\"247\":1,\"248\":2,\"249\":3}}],[\"78256\",{\"1\":{\"234\":1}}],[\"768\",{\"1\":{\"229\":1}}],[\"7680×4320\",{\"1\":{\"32\":1}}],[\"77\",{\"1\":{\"228\":1}}],[\"74\",{\"1\":{\"228\":1}}],[\"7d\",{\"1\":{\"200\":2}}],[\"7124\",{\"1\":{\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"711\",{\"1\":{\"36\":1}}],[\"7f\",{\"1\":{\"147\":2,\"234\":1}}],[\"722\",{\"1\":{\"36\":1}}],[\"723x\",{\"1\":{\"36\":1}}],[\"720p\",{\"1\":{\"32\":2}}],[\"72\",{\"1\":{\"29\":1,\"228\":1}}],[\"7z\",{\"1\":{\"16\":7}}],[\"70\",{\"1\":{\"147\":2,\"200\":1,\"228\":1}}],[\"70s\",{\"1\":{\"11\":1}}],[\"709\",{\"1\":{\"21\":1}}],[\"7094\",{\"1\":{\"11\":2}}],[\"7090\",{\"1\":{\"11\":1}}],[\"7\",{\"1\":{\"11\":2,\"14\":1,\"16\":1,\"21\":1,\"22\":1,\"35\":1,\"76\":1,\"99\":1,\"103\":1,\"105\":2,\"110\":1,\"147\":4,\"165\":1,\"175\":4,\"186\":1,\"192\":2,\"226\":1,\"228\":2,\"229\":1,\"230\":1,\"234\":1,\"235\":3,\"248\":1,\"249\":2}}],[\"754\",{\"1\":{\"9\":1,\"26\":1,\"36\":1}}],[\"ε\",{\"1\":{\"10\":1}}],[\"φ\",{\"1\":{\"10\":2}}],[\"=m\",{\"1\":{\"240\":1}}],[\"=d\",{\"1\":{\"209\":1}}],[\"=a\",{\"1\":{\"209\":1}}],[\"=ffff800100003c00\",{\"1\":{\"210\":2,\"212\":1}}],[\"=ffff800100003c30\",{\"1\":{\"200\":1}}],[\"=ffff800100003c10\",{\"1\":{\"188\":1}}],[\"=0020\",{\"1\":{\"210\":2}}],[\"=0010\",{\"1\":{\"210\":1}}],[\"=001b\",{\"1\":{\"200\":1,\"210\":1,\"212\":1}}],[\"=0013\",{\"1\":{\"188\":4,\"200\":5,\"210\":9,\"212\":2}}],[\"=0000000000000000\",{\"1\":{\"210\":2,\"212\":1}}],[\"=0000000000000001\",{\"1\":{\"200\":1}}],[\"=0000000007ea5e48\",{\"1\":{\"188\":1}}],[\"=0000\",{\"1\":{\"188\":2,\"200\":1}}],[\"=0008\",{\"1\":{\"188\":1,\"210\":1}}],[\"=r\",{\"1\":{\"177\":1,\"193\":1}}],[\"=simpleexpr\",{\"1\":{\"105\":1}}],[\"=+\",{\"1\":{\"104\":1}}],[\"=~\",{\"1\":{\"103\":1}}],[\"=<>\",{\"1\":{\"103\":1,\"104\":1}}],[\"=innotinisisnotnotofasfrom\",{\"1\":{\"103\":1}}],[\"=>\",{\"1\":{\"103\":2}}],[\"==>\",{\"1\":{\"186\":2}}],[\"==<=<>=>\",{\"1\":{\"103\":1}}],[\"=======\",{\"1\":{\"160\":2,\"162\":2,\"180\":2}}],[\"===\",{\"1\":{\"79\":1}}],[\"==\",{\"1\":{\"63\":2,\"74\":1,\"77\":1,\"78\":1,\"79\":1,\"85\":1,\"86\":1,\"87\":2,\"88\":1,\"89\":2,\"96\":1,\"104\":1,\"105\":2,\"106\":1,\"110\":5,\"162\":3,\"165\":1,\"168\":4,\"169\":2,\"170\":1,\"171\":1,\"177\":5,\"180\":1,\"181\":1,\"197\":4,\"213\":1,\"227\":1,\"230\":4,\"237\":4,\"239\":3,\"240\":1}}],[\"=\",{\"1\":{\"9\":1,\"43\":1,\"47\":5,\"55\":3,\"61\":6,\"63\":6,\"64\":7,\"66\":7,\"68\":3,\"70\":2,\"71\":5,\"72\":2,\"73\":7,\"74\":2,\"75\":4,\"77\":6,\"78\":3,\"79\":9,\"82\":6,\"83\":2,\"85\":1,\"86\":1,\"87\":4,\"88\":11,\"89\":8,\"90\":5,\"91\":4,\"92\":25,\"93\":1,\"94\":4,\"95\":5,\"96\":2,\"97\":19,\"98\":12,\"99\":17,\"100\":2,\"101\":9,\"102\":13,\"103\":6,\"104\":5,\"105\":16,\"106\":9,\"107\":5,\"108\":3,\"109\":17,\"110\":10,\"124\":11,\"127\":2,\"128\":1,\"130\":1,\"131\":4,\"133\":5,\"135\":3,\"136\":1,\"138\":7,\"139\":11,\"140\":8,\"141\":9,\"143\":1,\"144\":4,\"145\":1,\"147\":7,\"148\":2,\"151\":12,\"152\":3,\"153\":5,\"154\":7,\"156\":10,\"157\":2,\"158\":2,\"159\":7,\"160\":7,\"161\":4,\"162\":16,\"163\":4,\"164\":2,\"165\":3,\"166\":6,\"168\":23,\"169\":17,\"170\":16,\"171\":22,\"175\":20,\"177\":58,\"179\":2,\"180\":25,\"181\":18,\"182\":7,\"183\":5,\"185\":4,\"186\":13,\"187\":46,\"188\":2,\"190\":18,\"191\":4,\"192\":8,\"193\":5,\"196\":5,\"197\":32,\"198\":19,\"199\":9,\"200\":1,\"202\":23,\"203\":1,\"204\":10,\"205\":7,\"206\":12,\"209\":13,\"210\":2,\"211\":4,\"212\":4,\"213\":13,\"214\":7,\"215\":5,\"217\":3,\"218\":10,\"219\":9,\"220\":29,\"221\":3,\"222\":6,\"223\":10,\"226\":1,\"227\":8,\"228\":3,\"230\":48,\"231\":10,\"235\":88,\"237\":49,\"239\":7,\"240\":7,\"241\":6,\"242\":3,\"243\":7,\"245\":6,\"246\":3,\"248\":42,\"249\":5}}],[\"+r\",{\"1\":{\"211\":1,\"212\":1,\"223\":1}}],[\"+0x590\",{\"1\":{\"228\":1}}],[\"+0x570\",{\"1\":{\"228\":1}}],[\"+0x560\",{\"1\":{\"228\":1}}],[\"+0x550\",{\"1\":{\"228\":1}}],[\"+0x21c0\",{\"1\":{\"228\":1}}],[\"+0x2180\",{\"1\":{\"228\":1}}],[\"+0x2140\",{\"1\":{\"228\":1}}],[\"+0x2100\",{\"1\":{\"228\":1}}],[\"+0x10e0\",{\"1\":{\"228\":2}}],[\"+0x10c8\",{\"1\":{\"228\":1}}],[\"+0x10b8\",{\"1\":{\"228\":1}}],[\"+0x1010\",{\"1\":{\"228\":1}}],[\"+0x1000\",{\"1\":{\"228\":1}}],[\"+0xf90\",{\"1\":{\"228\":1}}],[\"+0xf70\",{\"1\":{\"228\":1}}],[\"+0xef0\",{\"1\":{\"228\":1}}],[\"+0xeb0\",{\"1\":{\"228\":1}}],[\"+0xea0\",{\"1\":{\"228\":1}}],[\"+0xe70\",{\"1\":{\"228\":1}}],[\"+0xe48\",{\"1\":{\"228\":1}}],[\"+0xe38\",{\"1\":{\"228\":1}}],[\"+0xe28\",{\"1\":{\"228\":1}}],[\"+0xe08\",{\"1\":{\"228\":1}}],[\"+0xdf8\",{\"1\":{\"228\":2}}],[\"+0xde8\",{\"1\":{\"228\":1}}],[\"+0xdd8\",{\"1\":{\"228\":1}}],[\"+0xdb8\",{\"1\":{\"228\":1}}],[\"+0xda0\",{\"1\":{\"228\":1}}],[\"+0xd90\",{\"1\":{\"228\":1}}],[\"+0xd58\",{\"1\":{\"228\":1}}],[\"+0xd38\",{\"1\":{\"228\":1}}],[\"+0\",{\"1\":{\"209\":1}}],[\"+8\",{\"1\":{\"191\":1,\"194\":1,\"209\":1}}],[\"+16\",{\"1\":{\"191\":1,\"194\":1,\"209\":1}}],[\"+12v\",{\"1\":{\"33\":1}}],[\"+24\",{\"1\":{\"191\":1,\"194\":1}}],[\"+40\",{\"1\":{\"191\":1}}],[\"+w\",{\"1\":{\"134\":1}}],[\"+expr\",{\"1\":{\"105\":1}}],[\"+=\",{\"1\":{\"103\":1,\"105\":2,\"110\":1,\"165\":1,\"169\":2,\"171\":2,\"183\":1}}],[\"+`\",{\"1\":{\"102\":1}}],[\"+32\",{\"1\":{\"191\":1,\"194\":1}}],[\"+3\",{\"1\":{\"33\":1}}],[\"+5v\",{\"1\":{\"33\":1}}],[\"+n\",{\"1\":{\"10\":1}}],[\"+\",{\"1\":{\"9\":2,\"14\":1,\"22\":2,\"53\":2,\"62\":1,\"82\":1,\"84\":1,\"99\":1,\"102\":6,\"103\":3,\"104\":4,\"105\":2,\"106\":2,\"109\":2,\"110\":1,\"124\":2,\"135\":2,\"156\":1,\"162\":2,\"164\":1,\"168\":6,\"170\":1,\"171\":6,\"174\":2,\"177\":4,\"180\":8,\"181\":3,\"182\":1,\"188\":1,\"197\":1,\"199\":1,\"202\":1,\"204\":1,\"209\":3,\"218\":2,\"220\":1,\"227\":1,\"228\":1,\"230\":5,\"235\":4,\"237\":8,\"248\":2}}],[\"31\",{\"1\":{\"185\":3,\"190\":5,\"192\":1,\"201\":1,\"249\":1}}],[\"312\",{\"1\":{\"183\":1}}],[\"3145728\",{\"1\":{\"165\":1}}],[\"39\",{\"1\":{\"174\":3,\"177\":2}}],[\"390\",{\"1\":{\"11\":3}}],[\"36\",{\"1\":{\"201\":1}}],[\"3670016\",{\"1\":{\"165\":1}}],[\"360\",{\"1\":{\"11\":14}}],[\"3b\",{\"1\":{\"147\":3}}],[\"3pm\",{\"1\":{\"35\":1}}],[\"3v\",{\"1\":{\"33\":1}}],[\"38\",{\"1\":{\"147\":3,\"174\":3,\"228\":4}}],[\"3840×2160\",{\"1\":{\"32\":1}}],[\"386\",{\"1\":{\"29\":1,\"30\":1}}],[\"332\",{\"1\":{\"234\":1}}],[\"334\",{\"1\":{\"36\":1}}],[\"33\",{\"1\":{\"31\":1}}],[\"335\",{\"1\":{\"9\":1,\"36\":1}}],[\"3u\",{\"1\":{\"30\":1}}],[\"3712\",{\"1\":{\"165\":1}}],[\"375\",{\"1\":{\"109\":2}}],[\"3780\",{\"1\":{\"21\":1}}],[\"370\",{\"1\":{\"11\":11}}],[\"35\",{\"1\":{\"21\":1,\"165\":1,\"248\":2}}],[\"3af\",{\"1\":{\"21\":1}}],[\"300\",{\"1\":{\"32\":1}}],[\"30b+d\",{\"1\":{\"21\":1}}],[\"30\",{\"1\":{\"19\":1,\"20\":1,\"29\":1,\"123\":1,\"174\":3,\"177\":2,\"200\":1}}],[\"3f25\",{\"1\":{\"14\":1}}],[\"32e\",{\"1\":{\"185\":1,\"186\":2}}],[\"32500\",{\"1\":{\"183\":1,\"188\":1}}],[\"32s\",{\"1\":{\"179\":1}}],[\"320×200\",{\"1\":{\"32\":1}}],[\"320×200×256\",{\"1\":{\"32\":1}}],[\"326\",{\"1\":{\"32\":1}}],[\"3260\",{\"1\":{\"21\":1}}],[\"3270\",{\"1\":{\"21\":2}}],[\"32\",{\"1\":{\"14\":3,\"21\":2,\"25\":14,\"30\":2,\"34\":1,\"98\":1,\"99\":2,\"151\":1,\"165\":2,\"171\":2,\"185\":2,\"189\":1,\"190\":2,\"192\":3,\"201\":1,\"202\":1,\"206\":1,\"209\":6,\"210\":1,\"229\":1,\"235\":1,\"248\":2}}],[\"3com\",{\"1\":{\"11\":1}}],[\"3\",{\"0\":{\"161\":1},\"1\":{\"9\":2,\"11\":3,\"12\":2,\"20\":1,\"21\":3,\"22\":1,\"26\":1,\"27\":1,\"29\":1,\"30\":2,\"31\":2,\"32\":1,\"37\":1,\"55\":1,\"85\":2,\"103\":1,\"105\":2,\"109\":4,\"110\":1,\"120\":1,\"141\":1,\"147\":4,\"165\":2,\"166\":1,\"169\":1,\"170\":7,\"171\":4,\"175\":5,\"181\":1,\"183\":1,\"185\":3,\"186\":10,\"187\":6,\"188\":1,\"190\":1,\"192\":2,\"202\":6,\"203\":1,\"206\":2,\"220\":1,\"226\":1,\"228\":5,\"229\":1,\"234\":1,\"235\":3,\"241\":3,\"245\":1}}],[\"3d\",{\"1\":{\"9\":1,\"10\":1,\"32\":1}}],[\"3+\",{\"1\":{\"7\":1}}],[\">kstack\",{\"1\":{\"223\":1}}],[\">khaled\",{\"1\":{\"44\":1}}],[\">rsp\",{\"1\":{\"223\":1,\"240\":3}}],[\">20\",{\"1\":{\"183\":1}}],[\">9\",{\"1\":{\"169\":1,\"183\":2}}],[\">5\",{\"1\":{\"165\":1}}],[\">11\",{\"1\":{\"169\":1,\"183\":1}}],[\">16\",{\"1\":{\"169\":1,\"183\":1}}],[\">10\",{\"1\":{\"165\":1}}],[\">15\",{\"1\":{\"165\":1}}],[\">12\",{\"1\":{\"165\":1,\"169\":1,\"183\":2}}],[\">1mb\",{\"1\":{\"11\":2}}],[\">~>=>\",{\"1\":{\"103\":1}}],[\">>>\",{\"1\":{\"124\":18,\"179\":1}}],[\">>\",{\"1\":{\"70\":1,\"92\":1,\"121\":1,\"135\":1}}],[\"><\",{\"1\":{\"44\":1}}],[\">\",{\"1\":{\"7\":1,\"10\":1,\"12\":1,\"15\":1,\"44\":4,\"45\":2,\"48\":4,\"64\":5,\"77\":3,\"82\":1,\"83\":2,\"87\":3,\"89\":2,\"96\":1,\"102\":1,\"103\":4,\"104\":1,\"105\":4,\"106\":1,\"110\":4,\"124\":1,\"141\":1,\"165\":3,\"166\":1,\"168\":1,\"169\":6,\"170\":1,\"171\":4,\"183\":7,\"198\":2,\"200\":2,\"213\":1,\"214\":1,\"243\":10,\"246\":6}}],[\"1g8zri6ncbieta2p7nnf9bg\",{\"1\":{\"228\":2}}],[\"1e\",{\"1\":{\"196\":1}}],[\"1ee\",{\"1\":{\"179\":2}}],[\"1f\",{\"1\":{\"188\":1}}],[\"1s\",{\"1\":{\"173\":1}}],[\"1st\",{\"1\":{\"123\":1}}],[\"180\",{\"1\":{\"228\":1}}],[\"185\",{\"1\":{\"205\":3,\"206\":1}}],[\"18\",{\"1\":{\"119\":2,\"147\":1,\"165\":1,\"192\":2,\"226\":4,\"227\":1,\"228\":4,\"229\":1,\"234\":4,\"235\":1}}],[\"17900\",{\"1\":{\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"1781\",{\"1\":{\"165\":1,\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"17\",{\"1\":{\"43\":1,\"165\":2,\"192\":2,\"226\":2,\"228\":2,\"234\":2,\"235\":1}}],[\"171\",{\"1\":{\"36\":1}}],[\"1701\",{\"1\":{\"21\":1}}],[\"14th\",{\"1\":{\"190\":1}}],[\"140737488267184\",{\"1\":{\"179\":1}}],[\"1401\",{\"1\":{\"24\":1}}],[\"14\",{\"1\":{\"165\":1,\"185\":1,\"186\":1,\"190\":2,\"192\":2,\"193\":1,\"226\":1,\"228\":1,\"234\":1,\"235\":1}}],[\"14882\",{\"1\":{\"36\":1}}],[\"1440p\",{\"1\":{\"32\":2}}],[\"15i\",{\"1\":{\"200\":1}}],[\"158\",{\"1\":{\"171\":1}}],[\"152\",{\"1\":{\"171\":2}}],[\"156\",{\"1\":{\"170\":1}}],[\"1510\",{\"1\":{\"169\":1}}],[\"159\",{\"1\":{\"165\":1}}],[\"15\",{\"1\":{\"21\":1,\"165\":2,\"185\":4,\"186\":1,\"190\":3,\"192\":1,\"226\":1,\"228\":1,\"234\":1,\"235\":1,\"247\":1}}],[\"1504\",{\"1\":{\"188\":1}}],[\"1501\",{\"1\":{\"171\":4}}],[\"1509\",{\"1\":{\"170\":6}}],[\"1502\",{\"1\":{\"165\":1,\"183\":1}}],[\"1500\",{\"1\":{\"21\":1}}],[\"150\",{\"1\":{\"20\":1,\"31\":1}}],[\"136\",{\"1\":{\"165\":1}}],[\"1309\",{\"1\":{\"170\":1}}],[\"130528\",{\"1\":{\"165\":1}}],[\"130000\",{\"1\":{\"165\":1,\"183\":1,\"188\":1}}],[\"132\",{\"1\":{\"165\":1}}],[\"135\",{\"1\":{\"165\":1}}],[\"13\",{\"1\":{\"162\":1,\"165\":1,\"185\":1,\"186\":1,\"190\":1,\"192\":2,\"226\":1,\"228\":1,\"229\":1,\"234\":1}}],[\"13h\",{\"1\":{\"32\":1}}],[\"133\",{\"1\":{\"31\":2}}],[\"139\",{\"1\":{\"21\":1}}],[\"137\",{\"1\":{\"21\":1}}],[\"1q\",{\"1\":{\"21\":1}}],[\"164\",{\"1\":{\"171\":1}}],[\"160\",{\"1\":{\"169\":1,\"170\":8,\"171\":1,\"183\":1,\"188\":1}}],[\"16x\",{\"1\":{\"169\":1,\"183\":1}}],[\"16550\",{\"1\":{\"30\":1}}],[\"16\",{\"1\":{\"14\":4,\"21\":3,\"25\":1,\"30\":1,\"32\":3,\"99\":1,\"123\":1,\"139\":3,\"140\":1,\"147\":15,\"156\":1,\"162\":1,\"165\":1,\"169\":1,\"170\":8,\"171\":4,\"173\":2,\"174\":2,\"179\":5,\"180\":1,\"183\":2,\"185\":5,\"186\":1,\"187\":1,\"188\":2,\"190\":5,\"192\":2,\"196\":5,\"201\":1,\"202\":2,\"206\":1,\"209\":1,\"210\":1,\"226\":5,\"227\":1,\"228\":9,\"229\":4,\"234\":6,\"235\":1,\"248\":1}}],[\"1mb\",{\"1\":{\"11\":1}}],[\"19\",{\"1\":{\"147\":1,\"165\":2,\"185\":2,\"192\":2,\"202\":1,\"249\":1}}],[\"193182\",{\"1\":{\"33\":1}}],[\"1996\",{\"1\":{\"135\":1}}],[\"1995\",{\"1\":{\"21\":1}}],[\"1990s\",{\"1\":{\"11\":4,\"21\":3,\"25\":1,\"29\":2,\"31\":3}}],[\"1980s\",{\"1\":{\"21\":2,\"25\":1,\"31\":1}}],[\"1983\",{\"1\":{\"21\":3}}],[\"1969\",{\"1\":{\"21\":1}}],[\"1960s\",{\"1\":{\"11\":3}}],[\"1920×1080\",{\"1\":{\"32\":1}}],[\"192\",{\"1\":{\"21\":1,\"22\":1}}],[\"1921\",{\"1\":{\"21\":1}}],[\"1977\",{\"1\":{\"16\":1}}],[\"1970s\",{\"1\":{\"11\":1,\"21\":1}}],[\"1950s\",{\"1\":{\"11\":1}}],[\"1152\",{\"1\":{\"188\":1}}],[\"115200\",{\"1\":{\"30\":1}}],[\"1160\",{\"1\":{\"183\":1}}],[\"1100880\",{\"1\":{\"148\":1}}],[\"113\",{\"1\":{\"22\":1,\"124\":4}}],[\"119\",{\"1\":{\"21\":1}}],[\"11m\",{\"1\":{\"11\":2}}],[\"11\",{\"1\":{\"10\":1,\"11\":13,\"24\":3,\"25\":1,\"30\":4,\"104\":2,\"105\":5,\"110\":2,\"133\":1,\"165\":1,\"169\":1,\"174\":3,\"175\":8,\"183\":1,\"185\":2,\"190\":1,\"192\":2,\"226\":1,\"228\":1,\"234\":1,\"235\":1,\"248\":1,\"249\":2}}],[\"10e0\",{\"1\":{\"228\":4}}],[\"1073741824\",{\"1\":{\"200\":1}}],[\"107\",{\"1\":{\"165\":1}}],[\"1061158912\",{\"1\":{\"165\":1}}],[\"106\",{\"1\":{\"165\":1}}],[\"10646\",{\"1\":{\"14\":1}}],[\"105\",{\"1\":{\"165\":1}}],[\"104\",{\"1\":{\"165\":1}}],[\"103\",{\"1\":{\"165\":1}}],[\"102\",{\"1\":{\"165\":1}}],[\"1024\",{\"1\":{\"31\":1,\"124\":2,\"156\":1,\"165\":4,\"169\":2,\"180\":1,\"183\":2}}],[\"108\",{\"1\":{\"165\":1}}],[\"108956\",{\"1\":{\"165\":1}}],[\"1080p\",{\"1\":{\"32\":1}}],[\"1080i\",{\"1\":{\"32\":1}}],[\"101\",{\"1\":{\"165\":1}}],[\"101832\",{\"1\":{\"165\":1,\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"101816\",{\"1\":{\"165\":1}}],[\"101812\",{\"1\":{\"165\":1}}],[\"101804\",{\"1\":{\"165\":1}}],[\"101728\",{\"1\":{\"165\":1}}],[\"1014\",{\"1\":{\"30\":1}}],[\"109056\",{\"1\":{\"165\":1}}],[\"109\",{\"1\":{\"165\":1}}],[\"10base2\",{\"1\":{\"30\":1}}],[\"100564\",{\"1\":{\"183\":1}}],[\"100560\",{\"1\":{\"165\":1}}],[\"100240\",{\"1\":{\"147\":2}}],[\"100070\",{\"1\":{\"147\":4}}],[\"1000d0\",{\"1\":{\"147\":2}}],[\"1000c0\",{\"1\":{\"147\":2}}],[\"100080\",{\"1\":{\"147\":2}}],[\"100040\",{\"1\":{\"147\":2}}],[\"100000\",{\"1\":{\"147\":21}}],[\"1004b0\",{\"1\":{\"147\":2}}],[\"100\",{\"1\":{\"21\":1,\"31\":2,\"165\":1,\"191\":3,\"201\":1,\"206\":3}}],[\"100gbe\",{\"1\":{\"33\":1}}],[\"100g\",{\"1\":{\"21\":1}}],[\"100110\",{\"1\":{\"147\":2}}],[\"100190\",{\"1\":{\"147\":2}}],[\"100180\",{\"1\":{\"147\":2}}],[\"100160\",{\"1\":{\"147\":2}}],[\"100140\",{\"1\":{\"147\":2}}],[\"100100\",{\"1\":{\"147\":6}}],[\"1001\",{\"1\":{\"21\":1}}],[\"10s\",{\"1\":{\"11\":2}}],[\"10\",{\"1\":{\"8\":2,\"11\":9,\"21\":4,\"22\":1,\"31\":1,\"33\":1,\"35\":1,\"36\":1,\"85\":1,\"86\":1,\"102\":3,\"103\":1,\"104\":1,\"105\":2,\"110\":1,\"124\":4,\"133\":2,\"147\":7,\"165\":2,\"179\":1,\"185\":1,\"192\":2,\"226\":2,\"227\":1,\"228\":30,\"229\":1,\"234\":2,\"235\":1,\"248\":1,\"249\":1}}],[\"1\",{\"0\":{\"122\":1,\"132\":1,\"149\":1,\"232\":1},\"1\":{\"7\":1,\"9\":3,\"11\":1,\"12\":1,\"13\":2,\"14\":2,\"15\":1,\"19\":1,\"20\":1,\"21\":3,\"22\":3,\"26\":1,\"27\":1,\"31\":4,\"32\":2,\"35\":1,\"36\":3,\"43\":5,\"44\":1,\"54\":1,\"55\":1,\"87\":3,\"89\":2,\"98\":5,\"103\":1,\"104\":1,\"105\":2,\"106\":1,\"110\":1,\"120\":1,\"124\":4,\"135\":3,\"138\":1,\"141\":1,\"144\":1,\"147\":34,\"148\":3,\"150\":1,\"154\":4,\"156\":1,\"162\":1,\"164\":1,\"165\":4,\"166\":1,\"169\":1,\"174\":5,\"175\":43,\"177\":5,\"179\":5,\"180\":1,\"181\":3,\"183\":1,\"185\":4,\"186\":2,\"187\":29,\"188\":6,\"190\":4,\"192\":2,\"194\":1,\"196\":5,\"197\":2,\"198\":2,\"201\":1,\"202\":9,\"204\":2,\"209\":1,\"210\":3,\"211\":1,\"212\":2,\"213\":3,\"215\":3,\"220\":3,\"223\":1,\"226\":12,\"227\":2,\"228\":39,\"229\":4,\"234\":12,\"235\":7,\"237\":6,\"241\":1,\"243\":9,\"245\":3,\"246\":4,\"248\":4,\"249\":4}}],[\"1248\",{\"1\":{\"183\":1}}],[\"124284\",{\"1\":{\"171\":1}}],[\"124268\",{\"1\":{\"171\":1}}],[\"124260\",{\"1\":{\"171\":1}}],[\"124292\",{\"1\":{\"171\":1}}],[\"124296\",{\"1\":{\"165\":1}}],[\"124304\",{\"1\":{\"188\":1}}],[\"124308\",{\"1\":{\"170\":1}}],[\"124324\",{\"1\":{\"170\":4}}],[\"124328\",{\"1\":{\"169\":1}}],[\"122876\",{\"1\":{\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"121\",{\"1\":{\"165\":1,\"169\":1,\"170\":5,\"171\":4,\"188\":1}}],[\"129900\",{\"1\":{\"165\":1}}],[\"129832\",{\"1\":{\"165\":1}}],[\"129692\",{\"1\":{\"165\":1}}],[\"129564\",{\"1\":{\"165\":1}}],[\"129024\",{\"1\":{\"165\":1}}],[\"12x\",{\"1\":{\"165\":1}}],[\"123224\",{\"1\":{\"183\":1}}],[\"123684\",{\"1\":{\"170\":1}}],[\"123524\",{\"1\":{\"170\":1}}],[\"1234\",{\"1\":{\"98\":7}}],[\"123e4567\",{\"1\":{\"7\":1}}],[\"12vhpwr\",{\"1\":{\"33\":1}}],[\"12gb\",{\"1\":{\"31\":1}}],[\"120\",{\"1\":{\"20\":1,\"170\":2,\"183\":1,\"228\":1}}],[\"1280×720\",{\"1\":{\"32\":1}}],[\"1284\",{\"1\":{\"30\":2}}],[\"128\",{\"1\":{\"14\":1,\"22\":3,\"25\":2,\"146\":1,\"156\":1,\"173\":5,\"181\":1,\"202\":1}}],[\"127\",{\"1\":{\"14\":1}}],[\"12\",{\"1\":{\"10\":1,\"21\":1,\"22\":1,\"105\":2,\"109\":4,\"110\":1,\"162\":1,\"165\":3,\"169\":2,\"170\":7,\"171\":4,\"174\":5,\"175\":4,\"177\":9,\"183\":5,\"185\":1,\"188\":1,\"190\":2,\"192\":2,\"196\":2,\"201\":1,\"226\":1,\"228\":2,\"234\":1,\"248\":6,\"249\":1}}],[\"12d3\",{\"1\":{\"7\":1}}],[\"4e\",{\"1\":{\"210\":2}}],[\"4190208\",{\"1\":{\"165\":1}}],[\"4c\",{\"1\":{\"147\":2,\"234\":1}}],[\"45\",{\"1\":{\"147\":2,\"200\":5,\"228\":1,\"234\":1}}],[\"4500\",{\"1\":{\"21\":1}}],[\"47\",{\"1\":{\"123\":1,\"173\":1,\"174\":5,\"209\":3}}],[\"48\",{\"1\":{\"173\":1,\"174\":3,\"200\":10,\"209\":4}}],[\"480p\",{\"1\":{\"32\":2}}],[\"480i\",{\"1\":{\"32\":1}}],[\"486\",{\"1\":{\"29\":2,\"30\":2}}],[\"4×\",{\"1\":{\"32\":2}}],[\"4kb\",{\"1\":{\"248\":1}}],[\"4kib\",{\"1\":{\"234\":1}}],[\"4k\",{\"1\":{\"31\":1,\"32\":3}}],[\"4x\",{\"1\":{\"29\":1}}],[\"46\",{\"1\":{\"21\":1,\"147\":2,\"171\":1,\"234\":1}}],[\"4475\",{\"1\":{\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"44\",{\"1\":{\"21\":1}}],[\"445\",{\"1\":{\"21\":1}}],[\"449\",{\"1\":{\"21\":1}}],[\"49\",{\"1\":{\"21\":1,\"174\":2}}],[\"404\",{\"1\":{\"254\":1}}],[\"40\",{\"1\":{\"31\":1,\"33\":1,\"102\":1,\"175\":4,\"200\":3,\"201\":1}}],[\"4096\",{\"1\":{\"11\":1,\"156\":1,\"168\":1,\"175\":1}}],[\"40000120\",{\"1\":{\"196\":2}}],[\"40000100\",{\"1\":{\"196\":4}}],[\"40000060\",{\"1\":{\"196\":4}}],[\"40000000\",{\"1\":{\"196\":7}}],[\"400g\",{\"1\":{\"21\":1}}],[\"400\",{\"1\":{\"8\":1}}],[\"4\",{\"1\":{\"9\":1,\"11\":1,\"14\":2,\"15\":1,\"18\":1,\"29\":2,\"30\":2,\"31\":3,\"32\":3,\"72\":1,\"76\":1,\"98\":1,\"101\":1,\"102\":2,\"103\":1,\"105\":2,\"109\":4,\"110\":1,\"118\":2,\"131\":1,\"133\":2,\"147\":6,\"165\":6,\"169\":4,\"170\":11,\"171\":8,\"174\":2,\"175\":11,\"177\":2,\"180\":1,\"181\":1,\"183\":7,\"185\":2,\"186\":1,\"187\":2,\"188\":4,\"190\":2,\"192\":2,\"201\":1,\"202\":2,\"220\":1,\"226\":4,\"228\":6,\"229\":1,\"234\":4,\"235\":4,\"248\":1}}],[\"426614174000\",{\"1\":{\"7\":1}}],[\"42\",{\"1\":{\"7\":1,\"102\":2,\"205\":2}}],[\"4gl\",{\"1\":{\"6\":1}}],[\"<30\",{\"1\":{\"181\":5}}],[\"<root>\",{\"1\":{\"123\":1}}],[\"<>\",{\"1\":{\"103\":1,\"104\":2}}],[\"<custom\",{\"1\":{\"101\":1}}],[\"<function\",{\"1\":{\"147\":1}}],[\"<float>\",{\"1\":{\"99\":1,\"101\":1}}],[\"<filetype\",{\"1\":{\"48\":1}}],[\"<int>\",{\"1\":{\"99\":1,\"101\":1}}],[\"<id>khaledh\",{\"1\":{\"44\":1,\"48\":1}}],[\"<idea\",{\"1\":{\"44\":1,\"48\":1,\"64\":1,\"83\":1}}],[\"<ml\",{\"1\":{\"96\":1}}],[\"<l\",{\"1\":{\"95\":1}}],[\"<lang\",{\"1\":{\"64\":1,\"83\":1}}],[\"<at\",{\"1\":{\"89\":1}}],[\"<a>\",{\"1\":{\"7\":1}}],[\"<begin\",{\"1\":{\"87\":2}}],[\"<=\",{\"1\":{\"87\":2,\"218\":1}}],[\"<<expr\",{\"1\":{\"107\":3,\"109\":5,\"110\":8}}],[\"<<eof>>\",{\"1\":{\"70\":3,\"73\":1,\"88\":1,\"89\":8,\"92\":1,\"95\":2,\"96\":2,\"97\":2}}],[\"<<is\",{\"1\":{\"106\":2,\"109\":1}}],[\"<<indented\",{\"1\":{\"92\":4,\"97\":3}}],[\"<<method>>\",{\"1\":{\"106\":1}}],[\"<<optind\",{\"1\":{\"97\":1}}],[\"<<list\",{\"1\":{\"92\":5,\"97\":2}}],[\"<<section\",{\"1\":{\"92\":6,\"97\":3}}],[\"<<rule\",{\"1\":{\"92\":1}}],[\"<<p2>>\",{\"1\":{\"92\":4,\"97\":1}}],[\"<<p1>>\",{\"1\":{\"92\":6,\"97\":2}}],[\"<<p>>>>\",{\"1\":{\"97\":1}}],[\"<<p>>\",{\"1\":{\"92\":15,\"97\":4}}],[\"<<\",{\"1\":{\"70\":1}}],[\"<yyinitial>\",{\"1\":{\"53\":2,\"62\":1,\"87\":1,\"91\":1}}],[\"<extensions\",{\"1\":{\"44\":1,\"48\":1,\"64\":1,\"83\":1}}],[\"<version>0\",{\"1\":{\"44\":1}}],[\"<vendor\",{\"1\":{\"44\":1}}],[\"<doc\",{\"1\":{\"97\":1}}],[\"<default>\",{\"1\":{\"87\":1,\"89\":1,\"95\":1,\"96\":1,\"97\":1,\"99\":1,\"101\":1,\"104\":2,\"108\":1}}],[\"<depends>\",{\"1\":{\"44\":1}}],[\"<depends>com\",{\"1\":{\"44\":2}}],[\"<description><\",{\"1\":{\"44\":1}}],[\"<div>\",{\"1\":{\"7\":2}}],[\"<name>nimjet<\",{\"1\":{\"44\":1}}],[\"<jwt>\",{\"1\":{\"22\":1}}],[\"<50\",{\"1\":{\"21\":1}}],[\"<setjmp\",{\"1\":{\"124\":1}}],[\"<section>\",{\"1\":{\"7\":1}}],[\"<string\",{\"1\":{\"124\":1}}],[\"<stmt>\",{\"1\":{\"89\":1}}],[\"<stmt\",{\"1\":{\"88\":1}}],[\"<script>\",{\"1\":{\"15\":1}}],[\"<script\",{\"1\":{\"15\":1}}],[\"<\",{\"1\":{\"7\":1,\"12\":1,\"20\":4,\"44\":5,\"48\":4,\"64\":3,\"72\":2,\"79\":1,\"83\":2,\"85\":1,\"86\":1,\"102\":1,\"103\":2,\"106\":1,\"147\":1,\"162\":2,\"165\":1,\"168\":4,\"169\":1,\"170\":1,\"171\":2,\"177\":1,\"180\":3,\"181\":1,\"183\":1,\"197\":1,\"198\":1,\"209\":4,\"220\":1,\"226\":1,\"230\":1,\"231\":1,\"235\":2,\"237\":1}}],[\"q5wkpxktodtgvlsro9bzt9aw\",{\"1\":{\"228\":18}}],[\"q35\",{\"1\":{\"135\":3,\"136\":1,\"143\":1,\"148\":1,\"196\":1}}],[\"qq\",{\"1\":{\"35\":2}}],[\"qhd\",{\"1\":{\"32\":1}}],[\"qic\",{\"1\":{\"31\":2}}],[\"qpi\",{\"1\":{\"30\":2}}],[\"qps\",{\"1\":{\"20\":1}}],[\"qemu\",{\"0\":{\"120\":1},\"1\":{\"24\":5,\"117\":1,\"120\":4,\"133\":2,\"134\":2,\"135\":4,\"136\":2,\"139\":2,\"140\":1,\"141\":1,\"143\":1,\"144\":2,\"148\":1,\"161\":2,\"188\":5,\"196\":3,\"200\":3,\"210\":5,\"212\":1}}],[\"qos\",{\"1\":{\"21\":2}}],[\"q\",{\"1\":{\"18\":1,\"30\":4,\"35\":1,\"210\":1}}],[\"qgis\",{\"1\":{\"17\":1}}],[\"qnx\",{\"1\":{\"11\":2}}],[\"qt\",{\"1\":{\"11\":1}}],[\"qa\",{\"1\":{\"6\":1}}],[\"quote\",{\"1\":{\"241\":1}}],[\"quoted\",{\"1\":{\"96\":1}}],[\"quotes\",{\"1\":{\"62\":1}}],[\"quotation\",{\"1\":{\"66\":1}}],[\"quotas\",{\"1\":{\"11\":1}}],[\"quite\",{\"1\":{\"185\":1}}],[\"quits\",{\"1\":{\"166\":1}}],[\"quit\",{\"1\":{\"45\":1,\"139\":4,\"140\":1,\"141\":1,\"145\":1,\"147\":3,\"151\":1,\"160\":3,\"161\":2,\"163\":2,\"165\":1,\"166\":2,\"169\":1,\"181\":1,\"188\":1,\"191\":1,\"192\":3,\"193\":2,\"206\":1}}],[\"quirks\",{\"1\":{\"31\":1}}],[\"quic\",{\"1\":{\"21\":2,\"36\":1}}],[\"quickpath\",{\"1\":{\"30\":1}}],[\"quick\",{\"1\":{\"3\":1,\"6\":2,\"21\":1,\"24\":1,\"35\":1,\"179\":1,\"229\":1}}],[\"qualcomm\",{\"1\":{\"33\":1}}],[\"qualified\",{\"1\":{\"24\":1,\"68\":1,\"70\":2}}],[\"quality\",{\"1\":{\"6\":3,\"13\":1,\"21\":1,\"32\":1}}],[\"quad\",{\"1\":{\"32\":1}}],[\"quadratic\",{\"1\":{\"13\":1}}],[\"quartus\",{\"1\":{\"33\":1}}],[\"quarter\",{\"1\":{\"30\":1,\"31\":1}}],[\"quarterly\",{\"1\":{\"19\":1}}],[\"quartz\",{\"1\":{\"29\":1}}],[\"quake\",{\"1\":{\"9\":1}}],[\"question\",{\"1\":{\"35\":2}}],[\"queries\",{\"1\":{\"9\":1,\"17\":1,\"20\":1,\"22\":1}}],[\"querymode\",{\"1\":{\"138\":1}}],[\"querying\",{\"1\":{\"9\":1,\"17\":1,\"21\":1}}],[\"queryselector\",{\"1\":{\"7\":1}}],[\"query\",{\"1\":{\"4\":2,\"7\":1,\"9\":2,\"10\":1,\"15\":3,\"17\":5,\"18\":1,\"21\":3}}],[\"queuing\",{\"1\":{\"4\":1,\"21\":3,\"31\":2}}],[\"queue\",{\"1\":{\"6\":2,\"9\":4,\"11\":1,\"17\":4,\"239\":12,\"242\":1,\"243\":2}}],[\"queues\",{\"1\":{\"4\":2,\"9\":2,\"11\":1,\"21\":1}}],[\"queued\",{\"1\":{\"4\":2}}],[\"05\",{\"1\":{\"234\":1}}],[\"06\",{\"1\":{\"200\":1,\"234\":1}}],[\"0│\",{\"1\":{\"190\":1}}],[\"07\",{\"1\":{\"185\":1,\"190\":1,\"234\":1}}],[\"08\",{\"1\":{\"185\":1,\"190\":1}}],[\"0s\",{\"1\":{\"173\":1}}],[\"03\",{\"1\":{\"147\":2,\"186\":1,\"190\":1,\"234\":1}}],[\"02\",{\"1\":{\"123\":1,\"147\":4,\"186\":1,\"190\":1,\"234\":2}}],[\"011111\",{\"1\":{\"234\":1}}],[\"011080\",{\"1\":{\"234\":1}}],[\"018x\",{\"1\":{\"193\":1}}],[\"010x\",{\"1\":{\"170\":1,\"181\":6,\"197\":1}}],[\"01\",{\"1\":{\"99\":1,\"147\":7,\"186\":1,\"226\":1,\"228\":1,\"234\":4}}],[\"0o123\",{\"1\":{\"98\":1}}],[\"0o\",{\"1\":{\"98\":1}}],[\"0b1001\",{\"1\":{\"202\":1}}],[\"0b1010\",{\"1\":{\"98\":1}}],[\"0b1011\",{\"1\":{\"9\":2}}],[\"0b1111\",{\"1\":{\"190\":1}}],[\"0b1110\",{\"1\":{\"190\":2}}],[\"0b\",{\"1\":{\"98\":1}}],[\"0<\",{\"1\":{\"44\":1}}],[\"002099\",{\"1\":{\"234\":1}}],[\"002ffa00\",{\"1\":{\"200\":1}}],[\"002f9a00\",{\"1\":{\"188\":1}}],[\"00f148\",{\"1\":{\"234\":1}}],[\"00f108\",{\"1\":{\"234\":2}}],[\"00eff0\",{\"1\":{\"234\":3}}],[\"00ef20\",{\"1\":{\"234\":1}}],[\"00ecb0\",{\"1\":{\"234\":1}}],[\"00e4bd\",{\"1\":{\"147\":1}}],[\"00e480\",{\"1\":{\"147\":1}}],[\"00ad20\",{\"1\":{\"229\":1}}],[\"00a170\",{\"1\":{\"229\":1}}],[\"00a0f0\",{\"1\":{\"226\":1,\"228\":1}}],[\"00a0fb00\",{\"1\":{\"210\":1,\"212\":1}}],[\"00a070\",{\"1\":{\"226\":2,\"228\":2}}],[\"00a09b00\",{\"1\":{\"210\":1}}],[\"008c34\",{\"1\":{\"229\":1}}],[\"008c3a\",{\"1\":{\"226\":1,\"228\":1}}],[\"00b9c9\",{\"1\":{\"226\":1,\"228\":1}}],[\"00b938\",{\"1\":{\"226\":1,\"228\":1}}],[\"00b82b\",{\"1\":{\"147\":2}}],[\"009f90\",{\"1\":{\"226\":3,\"228\":4}}],[\"009ec0\",{\"1\":{\"226\":1,\"228\":1}}],[\"009d40\",{\"1\":{\"226\":1,\"228\":2}}],[\"00d712\",{\"1\":{\"234\":1}}],[\"00d7a0\",{\"1\":{\"147\":2}}],[\"00d6c0\",{\"1\":{\"147\":1}}],[\"001f38\",{\"1\":{\"234\":1}}],[\"001590\",{\"1\":{\"234\":1}}],[\"001530\",{\"1\":{\"229\":1}}],[\"001230\",{\"1\":{\"229\":1}}],[\"0010b0\",{\"1\":{\"229\":1}}],[\"001000\",{\"1\":{\"147\":1,\"229\":1}}],[\"001930\",{\"1\":{\"226\":1,\"228\":1}}],[\"001848\",{\"1\":{\"226\":1,\"228\":1}}],[\"001100\",{\"1\":{\"226\":1,\"228\":1}}],[\"001bac\",{\"1\":{\"147\":1}}],[\"001b00\",{\"1\":{\"147\":1}}],[\"00c0f300\",{\"1\":{\"210\":1,\"212\":1}}],[\"00c09300\",{\"1\":{\"210\":1}}],[\"00c830\",{\"1\":{\"147\":1}}],[\"00c820\",{\"1\":{\"147\":1}}],[\"00c980\",{\"1\":{\"147\":1}}],[\"00c900\",{\"1\":{\"147\":2}}],[\"00\",{\"1\":{\"21\":1,\"147\":33,\"185\":4,\"186\":1,\"190\":5,\"200\":25,\"201\":1,\"226\":12,\"228\":14,\"229\":6,\"234\":22}}],[\"000ea8\",{\"1\":{\"234\":1}}],[\"000e90\",{\"1\":{\"147\":2}}],[\"0006e0\",{\"1\":{\"234\":1}}],[\"000498\",{\"1\":{\"234\":1}}],[\"000bb0\",{\"1\":{\"226\":1,\"228\":1,\"229\":1}}],[\"000550\",{\"1\":{\"226\":1,\"228\":1}}],[\"000300\",{\"1\":{\"226\":1,\"228\":1,\"229\":1}}],[\"000270\",{\"1\":{\"234\":1}}],[\"000248\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"000244\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"000234\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"000218\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"000200\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"000ff300\",{\"1\":{\"188\":4,\"200\":5,\"210\":8,\"212\":1}}],[\"000fffff\",{\"1\":{\"188\":5,\"200\":6,\"210\":8,\"212\":1}}],[\"000ff0\",{\"1\":{\"147\":1}}],[\"000118\",{\"1\":{\"234\":1}}],[\"000180\",{\"1\":{\"226\":1,\"228\":2,\"229\":1}}],[\"000160\",{\"1\":{\"147\":1}}],[\"0001\",{\"1\":{\"21\":1}}],[\"00003e\",{\"1\":{\"234\":1}}],[\"00003f\",{\"1\":{\"229\":1}}],[\"00003d\",{\"1\":{\"147\":1}}],[\"0000b0\",{\"1\":{\"229\":1}}],[\"000091\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"000070\",{\"1\":{\"226\":1,\"228\":1}}],[\"00007d\",{\"1\":{\"147\":1,\"226\":1,\"228\":1}}],[\"0000d0\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"000010\",{\"1\":{\"226\":1,\"228\":1,\"234\":2}}],[\"00001c\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"000018\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"00008900\",{\"1\":{\"210\":2}}],[\"00008b00\",{\"1\":{\"188\":1,\"200\":1}}],[\"00008200\",{\"1\":{\"188\":1,\"200\":1,\"210\":2}}],[\"0000ffff\",{\"1\":{\"188\":2,\"200\":2,\"210\":2}}],[\"000024\",{\"1\":{\"147\":1}}],[\"000001\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"00000fff\",{\"1\":{\"188\":1,\"200\":1,\"210\":2}}],[\"00000224\",{\"1\":{\"147\":1}}],[\"00000270\",{\"1\":{\"147\":1}}],[\"00000288\",{\"1\":{\"147\":1}}],[\"0000028d\",{\"1\":{\"147\":1}}],[\"0000029b\",{\"1\":{\"147\":1}}],[\"0000002f\",{\"1\":{\"210\":2}}],[\"00000067\",{\"1\":{\"210\":2}}],[\"0000006a\",{\"1\":{\"147\":1}}],[\"000000ad\",{\"1\":{\"147\":1}}],[\"0000001f\",{\"1\":{\"188\":1,\"200\":1}}],[\"00000010\",{\"1\":{\"147\":1}}],[\"00000015\",{\"1\":{\"147\":1}}],[\"00000078\",{\"1\":{\"147\":1}}],[\"00000070\",{\"1\":{\"147\":1}}],[\"00000087\",{\"1\":{\"147\":1}}],[\"00000090\",{\"1\":{\"147\":1}}],[\"0000009f\",{\"1\":{\"147\":1}}],[\"00000030\",{\"1\":{\"147\":2}}],[\"00000050\",{\"1\":{\"147\":1}}],[\"00000000\",{\"1\":{\"147\":4,\"188\":2}}],[\"0000000000012110\",{\"1\":{\"234\":1}}],[\"0000000000011ff0\",{\"1\":{\"234\":1}}],[\"0000000000010ff0\",{\"1\":{\"234\":2}}],[\"0000000000010f20\",{\"1\":{\"234\":1}}],[\"0000000000010cb0\",{\"1\":{\"234\":1}}],[\"0000000000002590\",{\"1\":{\"234\":1}}],[\"0000000000002100\",{\"1\":{\"226\":1,\"228\":1}}],[\"0000000000009d20\",{\"1\":{\"229\":1}}],[\"0000000000009170\",{\"1\":{\"229\":1}}],[\"000000000000d050\",{\"1\":{\"228\":1}}],[\"000000000000d038\",{\"1\":{\"228\":1}}],[\"000000000000d018\",{\"1\":{\"228\":1}}],[\"000000000000d000\",{\"1\":{\"228\":1}}],[\"000000000000d070\",{\"1\":{\"226\":1,\"228\":1}}],[\"000000000000cfe0\",{\"1\":{\"228\":1}}],[\"000000000000cfc8\",{\"1\":{\"228\":1}}],[\"000000000000cfa8\",{\"1\":{\"228\":1}}],[\"000000000000cf90\",{\"1\":{\"226\":1,\"228\":3}}],[\"000000000000beb8\",{\"1\":{\"228\":2}}],[\"000000000000bea8\",{\"1\":{\"228\":1}}],[\"000000000000be98\",{\"1\":{\"228\":1}}],[\"000000000000be88\",{\"1\":{\"228\":1}}],[\"000000000000be78\",{\"1\":{\"228\":1}}],[\"000000000000be68\",{\"1\":{\"228\":1}}],[\"000000000000be58\",{\"1\":{\"228\":1}}],[\"000000000000be48\",{\"1\":{\"228\":1}}],[\"000000000000be38\",{\"1\":{\"228\":1}}],[\"000000000000be28\",{\"1\":{\"228\":1}}],[\"000000000000be18\",{\"1\":{\"228\":1}}],[\"000000000000be08\",{\"1\":{\"228\":1}}],[\"000000000000bec0\",{\"1\":{\"226\":1,\"228\":1}}],[\"000000000000bdf8\",{\"1\":{\"228\":1}}],[\"000000000000bde8\",{\"1\":{\"228\":1}}],[\"000000000000bdd8\",{\"1\":{\"228\":1}}],[\"000000000000bdc8\",{\"1\":{\"228\":1}}],[\"000000000000bdb8\",{\"1\":{\"228\":1}}],[\"000000000000bda8\",{\"1\":{\"228\":1}}],[\"000000000000bd98\",{\"1\":{\"228\":1}}],[\"000000000000bd88\",{\"1\":{\"228\":1}}],[\"000000000000bd78\",{\"1\":{\"228\":1}}],[\"000000000000bd68\",{\"1\":{\"228\":1}}],[\"000000000000bd58\",{\"1\":{\"228\":1}}],[\"000000000000bd48\",{\"1\":{\"228\":1}}],[\"000000000000bd40\",{\"1\":{\"226\":1,\"228\":2}}],[\"000000000000bf90\",{\"1\":{\"226\":2,\"228\":2}}],[\"00000000000006e0\",{\"1\":{\"234\":1}}],[\"0000000000000530\",{\"1\":{\"229\":1}}],[\"0000000000000550\",{\"1\":{\"226\":1,\"228\":1}}],[\"0000000000000230\",{\"1\":{\"229\":1}}],[\"0000000000000234\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"0000000000000248\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"0000000000000244\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"0000000000000218\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"0000000000000200\",{\"1\":{\"226\":1,\"228\":1,\"234\":1}}],[\"00000000000000b0\",{\"1\":{\"229\":1}}],[\"0000000000000018\",{\"1\":{\"188\":1}}],[\"0000000000000000\",{\"1\":{\"147\":28,\"188\":23,\"200\":8,\"210\":14,\"212\":3,\"226\":5,\"228\":5,\"229\":3,\"234\":5}}],[\"000000000010c7a0\",{\"1\":{\"147\":1}}],[\"000000000010c6c0\",{\"1\":{\"147\":1}}],[\"000000000010b830\",{\"1\":{\"147\":1}}],[\"0000000000100000\",{\"1\":{\"147\":1}}],[\"000000000020e900\",{\"1\":{\"147\":1}}],[\"000000000020e820\",{\"1\":{\"147\":1}}],[\"0000000000201ff0\",{\"1\":{\"147\":1}}],[\"0000000000200160\",{\"1\":{\"147\":1}}],[\"000000\",{\"1\":{\"147\":4,\"226\":3,\"228\":3,\"229\":2,\"234\":3}}],[\"0000e0\",{\"1\":{\"147\":2,\"226\":1,\"228\":2}}],[\"0000\",{\"1\":{\"11\":1,\"180\":7,\"188\":8}}],[\"0xb7\",{\"1\":{\"235\":1}}],[\"0xbeb8\",{\"1\":{\"228\":2}}],[\"0xbeb0\",{\"1\":{\"228\":2}}],[\"0xbd48\",{\"1\":{\"228\":1}}],[\"0xc0000084\",{\"1\":{\"209\":1}}],[\"0xc0000082\",{\"1\":{\"209\":1}}],[\"0xc0000081\",{\"1\":{\"209\":1}}],[\"0xc0000080\",{\"1\":{\"209\":1}}],[\"0xc9\",{\"1\":{\"151\":1,\"152\":1,\"154\":1}}],[\"0x5050\",{\"1\":{\"210\":1,\"212\":3}}],[\"0x50000fc8\",{\"1\":{\"210\":1}}],[\"0x50000000\",{\"1\":{\"198\":2,\"200\":1}}],[\"0x50001000\",{\"1\":{\"198\":1,\"200\":1,\"205\":1}}],[\"0x5b1b31a1\",{\"1\":{\"151\":1}}],[\"0xd38\",{\"1\":{\"228\":1}}],[\"0xd300\",{\"1\":{\"226\":1,\"228\":1}}],[\"0xdeadbeef\",{\"1\":{\"193\":1,\"205\":2}}],[\"0xd7c8\",{\"1\":{\"147\":1}}],[\"0x40009d00\",{\"1\":{\"230\":3}}],[\"0x40000069\",{\"1\":{\"210\":1}}],[\"0x40000067\",{\"1\":{\"210\":3}}],[\"0x4000004a\",{\"1\":{\"200\":2}}],[\"0x40000042\",{\"1\":{\"200\":1}}],[\"0x40000040\",{\"1\":{\"200\":1}}],[\"0x4000004c\",{\"1\":{\"200\":3}}],[\"0x4000003c\",{\"1\":{\"200\":1}}],[\"0x4000003a\",{\"1\":{\"200\":1}}],[\"0x40000032\",{\"1\":{\"200\":1}}],[\"0x4000002c\",{\"1\":{\"200\":1}}],[\"0x40000024\",{\"1\":{\"200\":1}}],[\"0x40000020\",{\"1\":{\"200\":1}}],[\"0x4000001e\",{\"1\":{\"200\":1}}],[\"0x40000016\",{\"1\":{\"200\":1}}],[\"0x40000012\",{\"1\":{\"200\":1}}],[\"0x40000010\",{\"1\":{\"200\":1}}],[\"0x40000008\",{\"1\":{\"200\":1}}],[\"0x40000004\",{\"1\":{\"200\":1}}],[\"0x40000001\",{\"1\":{\"200\":1}}],[\"0x40000000\",{\"1\":{\"196\":1,\"200\":3,\"205\":1,\"230\":1}}],[\"0x4000\",{\"1\":{\"170\":1,\"171\":6}}],[\"0xfee00fff\",{\"1\":{\"248\":1}}],[\"0xfee00000\",{\"1\":{\"248\":2}}],[\"0xf3\",{\"1\":{\"235\":1}}],[\"0xf5f0\",{\"1\":{\"234\":1}}],[\"0xf\",{\"1\":{\"187\":2}}],[\"0xfd00000000\",{\"1\":{\"165\":1}}],[\"0xff\",{\"1\":{\"249\":3}}],[\"0xffc00000\",{\"1\":{\"165\":1}}],[\"0xffff800200000000\",{\"1\":{\"183\":1,\"188\":1}}],[\"0xffff800100004000\",{\"1\":{\"183\":1,\"188\":1}}],[\"0xffff800100000000\",{\"1\":{\"183\":1,\"188\":1}}],[\"0xffff800000120491\",{\"1\":{\"210\":1}}],[\"0xffff800000120490\",{\"1\":{\"210\":1}}],[\"0xffff800000100000\",{\"1\":{\"174\":4,\"179\":3,\"183\":1,\"188\":2,\"205\":2,\"214\":1}}],[\"0xffff800000000000\",{\"1\":{\"173\":2,\"179\":1,\"219\":1}}],[\"0xffff\",{\"1\":{\"174\":1,\"180\":3,\"187\":2}}],[\"0xffffffff80000000\",{\"1\":{\"176\":1}}],[\"0xffffffffffffffff\",{\"1\":{\"173\":2,\"219\":1}}],[\"0xffffffff\",{\"1\":{\"151\":1}}],[\"0xfff\",{\"1\":{\"156\":1,\"181\":1,\"197\":1}}],[\"0xe0000000\",{\"1\":{\"165\":1}}],[\"0xe9\",{\"1\":{\"144\":2}}],[\"0x7f\",{\"1\":{\"235\":1}}],[\"0x7f78000\",{\"1\":{\"165\":1}}],[\"0x77ff000\",{\"1\":{\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"0x7ef4000\",{\"1\":{\"165\":1}}],[\"0x7edb000\",{\"1\":{\"165\":1}}],[\"0x7eca000\",{\"1\":{\"165\":1}}],[\"0x7ea7000\",{\"1\":{\"165\":1}}],[\"0x7e87000\",{\"1\":{\"165\":1}}],[\"0x7e00000\",{\"1\":{\"165\":1}}],[\"0x72\",{\"1\":{\"151\":1,\"152\":1,\"154\":1}}],[\"0x2f0\",{\"1\":{\"248\":1}}],[\"0x2b\",{\"1\":{\"235\":1}}],[\"0x234\",{\"1\":{\"229\":1}}],[\"0x244\",{\"1\":{\"229\":1}}],[\"0x248\",{\"1\":{\"229\":1}}],[\"0x280\",{\"1\":{\"248\":1}}],[\"0x28\",{\"1\":{\"200\":1,\"235\":1}}],[\"0x220000\",{\"1\":{\"188\":1}}],[\"0x223000\",{\"1\":{\"171\":4}}],[\"0x222000\",{\"1\":{\"165\":1,\"183\":1}}],[\"0x20b2e8\",{\"1\":{\"229\":1}}],[\"0x2005b0\",{\"1\":{\"234\":1}}],[\"0x200\",{\"1\":{\"209\":1,\"229\":1,\"248\":1}}],[\"0x2000\",{\"1\":{\"171\":7}}],[\"0x20\",{\"1\":{\"200\":2,\"202\":1}}],[\"0x202\",{\"1\":{\"199\":1,\"200\":1,\"205\":1,\"210\":1,\"220\":1}}],[\"0x20d580\",{\"1\":{\"147\":3}}],[\"0x2e3000\",{\"1\":{\"170\":1}}],[\"0x2150e0\",{\"1\":{\"231\":1}}],[\"0x218\",{\"1\":{\"229\":1}}],[\"0x21b000\",{\"1\":{\"170\":6}}],[\"0x21a000\",{\"1\":{\"169\":1}}],[\"0x6ffffff9\",{\"1\":{\"230\":1}}],[\"0x6129000\",{\"1\":{\"200\":1}}],[\"0x6235000\",{\"1\":{\"183\":1}}],[\"0x6234000\",{\"1\":{\"165\":1}}],[\"0x6a80000\",{\"1\":{\"165\":1}}],[\"0x6a67000\",{\"1\":{\"165\":1}}],[\"0x6372000\",{\"1\":{\"165\":1,\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"0x636e000\",{\"1\":{\"165\":1}}],[\"0x636d000\",{\"1\":{\"165\":1}}],[\"0x636b000\",{\"1\":{\"165\":1}}],[\"0x6358000\",{\"1\":{\"165\":1}}],[\"0x6d3f\",{\"1\":{\"154\":1}}],[\"0x6459\",{\"1\":{\"152\":1}}],[\"0x69\",{\"1\":{\"151\":1,\"152\":1,\"154\":1}}],[\"0x9ec0\",{\"1\":{\"229\":1}}],[\"0x900000\",{\"1\":{\"165\":1,\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"0x964e5b22\",{\"1\":{\"152\":1}}],[\"0x9562\",{\"1\":{\"151\":1}}],[\"0x380\",{\"1\":{\"248\":1}}],[\"0x370\",{\"1\":{\"248\":1}}],[\"0x360\",{\"1\":{\"248\":1}}],[\"0x350\",{\"1\":{\"248\":1}}],[\"0x340\",{\"1\":{\"248\":1}}],[\"0x330\",{\"1\":{\"248\":1}}],[\"0x310\",{\"1\":{\"248\":1}}],[\"0x3e0\",{\"1\":{\"248\":1}}],[\"0x3e\",{\"1\":{\"235\":1}}],[\"0x320\",{\"1\":{\"248\":1}}],[\"0x32\",{\"1\":{\"235\":1}}],[\"0x300\",{\"1\":{\"248\":1}}],[\"0x3000\",{\"1\":{\"200\":1}}],[\"0x30\",{\"1\":{\"200\":1}}],[\"0x3\",{\"1\":{\"188\":1}}],[\"0x390\",{\"1\":{\"248\":1}}],[\"0x39\",{\"1\":{\"152\":1,\"154\":1}}],[\"0x3b95000\",{\"1\":{\"165\":1}}],[\"0x3b75000\",{\"1\":{\"165\":1}}],[\"0x3b\",{\"1\":{\"151\":1,\"152\":1,\"154\":1}}],[\"0x3f\",{\"1\":{\"151\":1}}],[\"0xa0000\",{\"1\":{\"171\":4}}],[\"0xa0\",{\"1\":{\"151\":1,\"152\":1,\"154\":1}}],[\"0x810000\",{\"1\":{\"165\":1}}],[\"0x80\",{\"1\":{\"207\":1}}],[\"0x80009d00\",{\"1\":{\"230\":2}}],[\"0x8000\",{\"1\":{\"171\":3}}],[\"0x800000\",{\"1\":{\"165\":1}}],[\"0x80000003\",{\"1\":{\"197\":1}}],[\"0x80000002\",{\"1\":{\"151\":1,\"197\":1}}],[\"0x80000001\",{\"1\":{\"151\":1,\"197\":1}}],[\"0x80000000\",{\"1\":{\"151\":2,\"197\":1,\"230\":1,\"231\":1}}],[\"0x80c000\",{\"1\":{\"165\":1,\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"0x80b000\",{\"1\":{\"165\":1}}],[\"0x808000\",{\"1\":{\"165\":1,\"169\":1,\"170\":7,\"171\":4,\"183\":1,\"188\":1}}],[\"0x8e\",{\"1\":{\"151\":1,\"152\":1,\"154\":1}}],[\"0x8\",{\"1\":{\"147\":1,\"234\":2}}],[\"0x14\",{\"1\":{\"235\":1}}],[\"0x1b\",{\"1\":{\"200\":2,\"205\":1}}],[\"0x1f\",{\"1\":{\"188\":1}}],[\"0x1ff\",{\"1\":{\"177\":8}}],[\"0x13\",{\"1\":{\"188\":1,\"200\":1,\"205\":1}}],[\"0x180\",{\"1\":{\"248\":1}}],[\"0x18\",{\"1\":{\"187\":3,\"200\":2,\"202\":1}}],[\"0x1780000\",{\"1\":{\"165\":1}}],[\"0x11d2\",{\"1\":{\"151\":1,\"152\":1,\"154\":1}}],[\"0x10e0\",{\"1\":{\"228\":2}}],[\"0x10\",{\"1\":{\"180\":1,\"187\":4,\"188\":1,\"200\":1,\"202\":1,\"227\":1}}],[\"0x10b590\",{\"1\":{\"147\":3}}],[\"0x100590\",{\"1\":{\"147\":2}}],[\"0x1000\",{\"1\":{\"147\":6,\"165\":1,\"181\":1,\"234\":4}}],[\"0x100000\",{\"1\":{\"147\":12,\"148\":2,\"150\":1,\"156\":3,\"165\":1,\"174\":5,\"178\":1}}],[\"0x10070\",{\"1\":{\"147\":1}}],[\"0x100\",{\"1\":{\"11\":1,\"174\":2,\"248\":1}}],[\"0x1\",{\"1\":{\"147\":2,\"234\":2}}],[\"0x1a\",{\"1\":{\"98\":1}}],[\"0x\",{\"1\":{\"98\":1}}],[\"0x0f0\",{\"1\":{\"248\":1}}],[\"0x0e0\",{\"1\":{\"248\":1}}],[\"0x0b0\",{\"1\":{\"248\":1}}],[\"0x030\",{\"1\":{\"248\":1}}],[\"0x03\",{\"1\":{\"235\":1}}],[\"0x020\",{\"1\":{\"248\":1}}],[\"0x02\",{\"1\":{\"235\":1}}],[\"0x06129000\",{\"1\":{\"197\":1}}],[\"0x080\",{\"1\":{\"248\":1}}],[\"0x08\",{\"1\":{\"187\":3,\"188\":1,\"202\":1,\"235\":1}}],[\"0x09576e92\",{\"1\":{\"154\":1}}],[\"0x00ef20\",{\"1\":{\"234\":1}}],[\"0x00eff0\",{\"1\":{\"234\":1}}],[\"0x00ecb0\",{\"1\":{\"234\":2}}],[\"0x00d712\",{\"1\":{\"234\":2}}],[\"0x00d6c0\",{\"1\":{\"147\":1}}],[\"0x001590\",{\"1\":{\"234\":1}}],[\"0x001588\",{\"1\":{\"234\":2}}],[\"0x001000\",{\"1\":{\"147\":1}}],[\"0x0021b000\",{\"1\":{\"170\":1}}],[\"0x00\",{\"1\":{\"151\":1,\"152\":1,\"154\":1,\"187\":1}}],[\"0x00c830\",{\"1\":{\"147\":1}}],[\"0x00c820\",{\"1\":{\"147\":1}}],[\"0x00b82b\",{\"1\":{\"147\":4}}],[\"0x000350\",{\"1\":{\"234\":2}}],[\"0x000340\",{\"1\":{\"234\":2}}],[\"0x0001c0\",{\"1\":{\"234\":2}}],[\"0x000118\",{\"1\":{\"147\":2,\"234\":1}}],[\"0x000\",{\"1\":{\"174\":3}}],[\"0x000e90\",{\"1\":{\"147\":2}}],[\"0x000ff0\",{\"1\":{\"147\":3}}],[\"0x0000d0\",{\"1\":{\"234\":2}}],[\"0x00007fffffffffff\",{\"1\":{\"173\":2,\"214\":1,\"219\":1}}],[\"0x0000e0\",{\"1\":{\"147\":2}}],[\"0x000000006ffffef5\",{\"1\":{\"229\":1}}],[\"0x000000006ffffff9\",{\"1\":{\"229\":1}}],[\"0x000000006ffffffb\",{\"1\":{\"229\":1}}],[\"0x0000000050000000\",{\"1\":{\"198\":1}}],[\"0x0000000040000000\",{\"1\":{\"198\":1,\"226\":1}}],[\"0x00000000040000000\",{\"1\":{\"196\":2}}],[\"0x0000000000010f20\",{\"1\":{\"234\":2}}],[\"0x0000000000010cb0\",{\"1\":{\"234\":4}}],[\"0x0000000000011ff0\",{\"1\":{\"234\":2}}],[\"0x0000000000002590\",{\"1\":{\"234\":2}}],[\"0x0000000000000040\",{\"1\":{\"234\":2}}],[\"0x0000000000000004\",{\"1\":{\"229\":1}}],[\"0x000000000000000a\",{\"1\":{\"229\":1}}],[\"0x0000000000000005\",{\"1\":{\"229\":1}}],[\"0x000000000000000b\",{\"1\":{\"229\":1}}],[\"0x0000000000000006\",{\"1\":{\"229\":1}}],[\"0x0000000000000009\",{\"1\":{\"229\":1}}],[\"0x0000000000000008\",{\"1\":{\"229\":1}}],[\"0x0000000000000007\",{\"1\":{\"229\":1}}],[\"0x0000000000000000\",{\"1\":{\"147\":4,\"173\":2,\"219\":1,\"229\":1,\"234\":4}}],[\"0x0000000000000015\",{\"1\":{\"229\":1}}],[\"0x000000000010c6c0\",{\"1\":{\"147\":2}}],[\"0x000000000010b830\",{\"1\":{\"147\":2}}],[\"0x0000000000100000\",{\"1\":{\"147\":2}}],[\"0x000000000020e820\",{\"1\":{\"147\":2}}],[\"0x0000000000201ff0\",{\"1\":{\"147\":2}}],[\"0x0000000000200000\",{\"1\":{\"147\":2}}],[\"0x0000000000200040\",{\"1\":{\"147\":2}}],[\"0x00000000deadbeef\",{\"1\":{\"193\":1,\"205\":1}}],[\"0x00000000\",{\"1\":{\"170\":2}}],[\"0x000000\",{\"1\":{\"147\":7,\"234\":4}}],[\"0x000040\",{\"1\":{\"147\":1,\"234\":1}}],[\"0x0000\",{\"1\":{\"11\":1,\"171\":1}}],[\"0x0\",{\"1\":{\"147\":4,\"165\":1,\"169\":1,\"170\":5,\"171\":1,\"183\":1,\"188\":1,\"227\":2,\"229\":2,\"234\":1}}],[\"0x0d0\",{\"1\":{\"248\":1}}],[\"0x0d\",{\"1\":{\"14\":2}}],[\"0x0a0\",{\"1\":{\"248\":1}}],[\"0x0a\",{\"1\":{\"14\":1}}],[\"0\",{\"1\":{\"6\":1,\"9\":5,\"12\":4,\"14\":2,\"20\":3,\"21\":5,\"22\":3,\"30\":2,\"32\":5,\"33\":2,\"36\":2,\"43\":4,\"55\":2,\"74\":1,\"85\":3,\"86\":2,\"87\":3,\"88\":2,\"94\":1,\"96\":4,\"99\":6,\"102\":1,\"103\":1,\"104\":1,\"106\":1,\"109\":7,\"110\":5,\"118\":2,\"119\":4,\"122\":1,\"123\":1,\"124\":38,\"128\":2,\"131\":2,\"133\":1,\"135\":1,\"138\":1,\"139\":2,\"141\":2,\"144\":1,\"147\":44,\"159\":2,\"162\":2,\"163\":1,\"164\":2,\"165\":4,\"166\":1,\"168\":1,\"169\":5,\"170\":6,\"171\":3,\"173\":1,\"174\":13,\"175\":6,\"176\":2,\"177\":7,\"179\":2,\"180\":3,\"181\":4,\"182\":1,\"183\":3,\"185\":8,\"186\":4,\"187\":20,\"188\":4,\"190\":10,\"191\":2,\"192\":4,\"193\":1,\"194\":1,\"196\":2,\"197\":1,\"200\":3,\"201\":1,\"202\":10,\"203\":1,\"206\":3,\"209\":1,\"210\":2,\"211\":2,\"212\":3,\"213\":2,\"214\":1,\"215\":2,\"217\":1,\"221\":2,\"223\":2,\"226\":30,\"227\":2,\"228\":38,\"229\":18,\"230\":12,\"234\":32,\"235\":10,\"237\":7,\"239\":1,\"240\":3,\"243\":10,\"245\":3,\"246\":5,\"248\":1,\"249\":2}}],[\"04\",{\"1\":{\"6\":2,\"133\":1,\"147\":1,\"190\":1,\"226\":1,\"228\":1,\"234\":2}}],[\"2i\",{\"1\":{\"210\":3}}],[\"2956\",{\"1\":{\"170\":1}}],[\"292\",{\"1\":{\"165\":1}}],[\"290\",{\"1\":{\"165\":1,\"183\":1}}],[\"29b\",{\"1\":{\"147\":1}}],[\"29\",{\"1\":{\"124\":2,\"174\":3}}],[\"2>\",{\"1\":{\"87\":1,\"89\":1}}],[\"21+1\",{\"1\":{\"228\":1}}],[\"2176\",{\"1\":{\"188\":1}}],[\"2147483647\",{\"1\":{\"179\":1}}],[\"2147483648\",{\"1\":{\"179\":1}}],[\"2156\",{\"1\":{\"170\":6}}],[\"2152\",{\"1\":{\"169\":1}}],[\"2188\",{\"1\":{\"171\":4}}],[\"2184\",{\"1\":{\"165\":1,\"183\":1}}],[\"218\",{\"1\":{\"124\":1}}],[\"21\",{\"1\":{\"42\":2,\"43\":1,\"174\":3,\"177\":2,\"185\":1,\"192\":2,\"227\":1,\"228\":2,\"230\":2,\"231\":1}}],[\"2160p\",{\"1\":{\"32\":1}}],[\"268\",{\"1\":{\"197\":1}}],[\"261f\",{\"1\":{\"179\":2}}],[\"265\",{\"1\":{\"36\":1}}],[\"264\",{\"1\":{\"36\":1}}],[\"2am\",{\"1\":{\"35\":1}}],[\"23149\",{\"1\":{\"169\":1,\"170\":7,\"171\":4,\"188\":1}}],[\"234e\",{\"1\":{\"98\":2}}],[\"234e5\",{\"1\":{\"98\":1}}],[\"234\",{\"1\":{\"98\":2}}],[\"23\",{\"1\":{\"30\":1,\"185\":2}}],[\"232\",{\"1\":{\"30\":2}}],[\"23b+d\",{\"1\":{\"21\":1}}],[\"27\",{\"1\":{\"32\":1}}],[\"27s\",{\"1\":{\"29\":1}}],[\"27xx\",{\"1\":{\"29\":1}}],[\"28\",{\"1\":{\"201\":1,\"248\":1}}],[\"288\",{\"1\":{\"29\":1,\"188\":1}}],[\"286+\",{\"1\":{\"11\":2}}],[\"286\",{\"1\":{\"11\":1,\"25\":1,\"30\":1,\"147\":1}}],[\"2+\",{\"1\":{\"22\":1,\"42\":1}}],[\"2fa\",{\"1\":{\"22\":1}}],[\"2b+d\",{\"1\":{\"21\":1}}],[\"24064\",{\"1\":{\"165\":1}}],[\"240\",{\"1\":{\"165\":1}}],[\"24xx\",{\"1\":{\"29\":1}}],[\"24\",{\"1\":{\"21\":1,\"22\":1,\"33\":1,\"109\":2,\"185\":2,\"201\":1,\"202\":1,\"228\":1,\"229\":2,\"248\":2}}],[\"2k\",{\"1\":{\"20\":1}}],[\"258\",{\"1\":{\"226\":1,\"228\":1}}],[\"255\",{\"1\":{\"32\":1,\"192\":1}}],[\"25xx\",{\"1\":{\"29\":1}}],[\"25\",{\"1\":{\"21\":5,\"30\":1,\"31\":1,\"33\":1,\"165\":2,\"179\":1}}],[\"25000\",{\"1\":{\"170\":2}}],[\"250\",{\"1\":{\"20\":1}}],[\"2560×1440\",{\"1\":{\"32\":1}}],[\"256\",{\"1\":{\"11\":1,\"13\":1,\"22\":3,\"28\":1,\"153\":1,\"174\":6,\"189\":1,\"190\":2,\"198\":1,\"213\":1,\"220\":1,\"223\":1}}],[\"2^0\",{\"1\":{\"9\":1}}],[\"2d\",{\"1\":{\"9\":1}}],[\"2\",{\"0\":{\"125\":1,\"137\":1,\"155\":1,\"236\":1},\"1\":{\"7\":1,\"9\":2,\"10\":1,\"11\":5,\"12\":3,\"14\":1,\"17\":1,\"20\":1,\"21\":4,\"22\":2,\"26\":1,\"27\":1,\"30\":5,\"31\":3,\"32\":3,\"33\":1,\"35\":1,\"37\":1,\"43\":10,\"45\":1,\"54\":1,\"55\":4,\"76\":1,\"85\":2,\"86\":1,\"87\":5,\"89\":2,\"102\":3,\"103\":1,\"105\":2,\"109\":2,\"110\":1,\"118\":2,\"124\":20,\"133\":1,\"139\":1,\"141\":1,\"147\":7,\"160\":1,\"164\":1,\"165\":3,\"166\":1,\"171\":9,\"175\":4,\"179\":1,\"181\":1,\"185\":3,\"186\":1,\"187\":2,\"188\":2,\"190\":1,\"192\":2,\"201\":1,\"202\":1,\"210\":4,\"215\":3,\"220\":1,\"226\":1,\"228\":7,\"229\":1,\"234\":2,\"235\":6,\"237\":2,\"241\":1,\"243\":3,\"245\":1,\"246\":3,\"248\":1,\"249\":1}}],[\"22569\",{\"1\":{\"183\":1}}],[\"22\",{\"1\":{\"6\":1,\"185\":1,\"192\":1}}],[\"20b2a8\",{\"1\":{\"229\":1}}],[\"209ee8\",{\"1\":{\"227\":2}}],[\"209ee0\",{\"1\":{\"227\":4}}],[\"20x\",{\"1\":{\"183\":1}}],[\"2022\",{\"1\":{\"55\":1}}],[\"2023\",{\"1\":{\"43\":1,\"123\":1}}],[\"2024\",{\"1\":{\"22\":1,\"42\":1,\"43\":4,\"45\":1}}],[\"203\",{\"1\":{\"22\":1}}],[\"2048c\",{\"1\":{\"179\":1}}],[\"2048\",{\"1\":{\"22\":1}}],[\"200490\",{\"1\":{\"234\":1}}],[\"2004a8\",{\"1\":{\"226\":1,\"228\":1}}],[\"200588\",{\"1\":{\"229\":1}}],[\"2009\",{\"1\":{\"135\":1}}],[\"2001\",{\"1\":{\"21\":1}}],[\"200\",{\"1\":{\"20\":2,\"170\":2}}],[\"2000s\",{\"1\":{\"21\":1,\"29\":1,\"31\":2}}],[\"2000\",{\"1\":{\"6\":2,\"11\":1}}],[\"20\",{\"1\":{\"6\":1,\"8\":1,\"11\":6,\"21\":2,\"43\":2,\"55\":1,\"147\":1,\"165\":1,\"174\":3,\"185\":1,\"192\":2,\"196\":1,\"201\":1,\"228\":3}}],[\"→\",{\"1\":{\"6\":8,\"34\":2,\"35\":1}}],[\"zyelyblx1zja3jec71voca\",{\"1\":{\"228\":7}}],[\"zzendread\",{\"1\":{\"89\":2}}],[\"z0\",{\"1\":{\"62\":1,\"101\":1}}],[\"za\",{\"1\":{\"62\":2,\"101\":2}}],[\"zap\",{\"1\":{\"22\":1,\"36\":1}}],[\"z690\",{\"1\":{\"33\":1}}],[\"zsk\",{\"1\":{\"24\":1}}],[\"zst\",{\"1\":{\"16\":1}}],[\"zstandard\",{\"1\":{\"16\":1}}],[\"zstd\",{\"1\":{\"16\":2}}],[\"z39\",{\"1\":{\"21\":1}}],[\"zoning\",{\"1\":{\"21\":1}}],[\"zones\",{\"1\":{\"21\":1,\"24\":2}}],[\"zone\",{\"1\":{\"19\":1,\"21\":3,\"36\":3,\"146\":6}}],[\"zig\",{\"1\":{\"115\":1}}],[\"ziv\",{\"1\":{\"16\":3}}],[\"zip\",{\"1\":{\"11\":1,\"16\":12,\"21\":1}}],[\"ztpf\",{\"1\":{\"11\":1}}],[\"zeek\",{\"1\":{\"22\":1}}],[\"zettabyte\",{\"1\":{\"11\":1}}],[\"zephyr\",{\"1\":{\"11\":1}}],[\"zeromem\",{\"1\":{\"237\":1}}],[\"zero3\",{\"1\":{\"202\":1}}],[\"zero2\",{\"1\":{\"202\":1}}],[\"zero1\",{\"1\":{\"190\":1,\"202\":1}}],[\"zero0\",{\"1\":{\"190\":1}}],[\"zeros\",{\"1\":{\"11\":1}}],[\"zero\",{\"1\":{\"11\":1,\"17\":1,\"87\":1,\"96\":4,\"102\":1,\"185\":1,\"187\":1,\"189\":1,\"192\":3,\"237\":2}}],[\"zfs\",{\"1\":{\"11\":5}}],[\"z=t+y\",{\"1\":{\"10\":1}}],[\"z\",{\"1\":{\"5\":2,\"8\":1,\"11\":7,\"17\":5,\"22\":1,\"62\":1,\"101\":1}}],[\"yld\",{\"1\":{\"245\":1,\"246\":1}}],[\"ybwtcxgkzcqmoaz89cntlsq\",{\"1\":{\"228\":1}}],[\"yield\",{\"1\":{\"169\":1,\"235\":3,\"238\":3,\"241\":7,\"243\":5,\"244\":1,\"245\":3,\"246\":3}}],[\"yields\",{\"1\":{\"9\":1,\"238\":1,\"239\":2,\"243\":2}}],[\"yycharat\",{\"1\":{\"104\":1}}],[\"yystate\",{\"1\":{\"87\":1,\"89\":1}}],[\"yypushback\",{\"1\":{\"87\":3,\"95\":1,\"97\":1}}],[\"yybegin\",{\"1\":{\"87\":5,\"88\":1,\"89\":2,\"95\":3,\"96\":3,\"97\":3}}],[\"yylength\",{\"1\":{\"87\":3,\"88\":1,\"89\":1,\"95\":1,\"97\":1,\"104\":1}}],[\"yyinitial\",{\"1\":{\"87\":1}}],[\"yolo\",{\"1\":{\"35\":2}}],[\"your\",{\"1\":{\"22\":2,\"35\":3,\"118\":1,\"124\":3}}],[\"yourself\",{\"1\":{\"5\":1}}],[\"youtube\",{\"1\":{\"13\":1}}],[\"you\",{\"1\":{\"0\":1,\"1\":1,\"3\":1,\"5\":1,\"9\":2,\"21\":1,\"35\":6,\"45\":4,\"59\":1,\"63\":1,\"73\":1,\"92\":1,\"97\":1,\"101\":1,\"116\":1,\"118\":1,\"124\":3,\"135\":1,\"173\":1,\"239\":1,\"250\":1}}],[\"ymmv\",{\"1\":{\"35\":1}}],[\"yml\",{\"1\":{\"13\":1}}],[\"ycombinator\",{\"1\":{\"35\":1}}],[\"yp\",{\"1\":{\"21\":1}}],[\"yes\",{\"1\":{\"92\":1,\"192\":8}}],[\"yet\",{\"1\":{\"35\":1,\"40\":1,\"45\":1,\"74\":1,\"75\":1,\"76\":1,\"80\":1,\"87\":3,\"94\":1,\"107\":1,\"113\":1,\"122\":1,\"124\":2,\"127\":1,\"130\":1,\"141\":1,\"144\":1,\"161\":1,\"175\":1,\"195\":1,\"200\":1,\"215\":1,\"229\":1,\"237\":2}}],[\"yellow\",{\"1\":{\"21\":1}}],[\"years\",{\"1\":{\"6\":1,\"25\":1,\"40\":1}}],[\"year\",{\"1\":{\"6\":2,\"35\":2,\"153\":1}}],[\"yjs\",{\"1\":{\"17\":1}}],[\"yum\",{\"1\":{\"11\":1}}],[\"yacc\",{\"1\":{\"10\":1}}],[\"yaml\",{\"1\":{\"7\":1,\"13\":1}}],[\"yagni\",{\"1\":{\"5\":1}}],[\"y2k\",{\"1\":{\"6\":1,\"11\":1}}],[\"y\",{\"1\":{\"5\":2,\"10\":2,\"35\":1,\"109\":2}}],[\"x87\",{\"1\":{\"192\":3}}],[\"x86\",{\"0\":{\"28\":1},\"1\":{\"9\":2,\"11\":4,\"24\":2,\"25\":18,\"26\":4,\"27\":2,\"28\":7,\"33\":2,\"34\":1,\"120\":1,\"122\":2,\"123\":8,\"124\":9,\"131\":1,\"133\":1,\"135\":1,\"136\":2,\"143\":3,\"147\":6,\"148\":1,\"164\":2,\"172\":1,\"173\":1,\"179\":1,\"184\":2,\"185\":1,\"196\":2,\"226\":1,\"228\":35,\"230\":2,\"234\":3,\"235\":6,\"247\":2}}],[\"xx\",{\"1\":{\"99\":1}}],[\"xxxxx\",{\"1\":{\"22\":1}}],[\"x16\",{\"1\":{\"30\":1}}],[\"x11\",{\"1\":{\"11\":3}}],[\"xhci\",{\"1\":{\"30\":1}}],[\"xhr\",{\"1\":{\"7\":2}}],[\"xor\",{\"1\":{\"26\":1,\"103\":1,\"104\":1,\"188\":1,\"192\":1}}],[\"xorg\",{\"1\":{\"11\":1}}],[\"xt\",{\"1\":{\"25\":4}}],[\"xd\",{\"1\":{\"22\":1,\"175\":4}}],[\"xdvi\",{\"1\":{\"13\":1}}],[\"xns\",{\"1\":{\"21\":2}}],[\"xz\",{\"1\":{\"16\":9}}],[\"xsrf\",{\"1\":{\"22\":2}}],[\"xss\",{\"1\":{\"22\":2}}],[\"xsdt\",{\"1\":{\"34\":3}}],[\"xsd\",{\"1\":{\"12\":2}}],[\"xslt\",{\"1\":{\"12\":2}}],[\"xapic\",{\"1\":{\"28\":1}}],[\"xalan\",{\"1\":{\"12\":1}}],[\"xaml\",{\"1\":{\"9\":4}}],[\"xm\",{\"1\":{\"192\":1}}],[\"xmm15=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm14=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm13=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm12=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm11=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm10=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm09=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm08=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm07=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm06=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm05=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm04=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm03=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm02=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm01=0000000000000000\",{\"1\":{\"188\":1}}],[\"xmm00=00000000062552f8\",{\"1\":{\"188\":1}}],[\"xmpp\",{\"1\":{\"21\":1}}],[\"xms\",{\"1\":{\"11\":2}}],[\"xmlhttprequest\",{\"1\":{\"7\":1}}],[\"xml\",{\"1\":{\"4\":1,\"7\":3,\"9\":1,\"11\":1,\"12\":12,\"13\":1,\"15\":3,\"16\":1,\"21\":1,\"44\":4,\"48\":2,\"64\":2,\"83\":2}}],[\"xeon\",{\"1\":{\"25\":1,\"30\":1}}],[\"xetex\",{\"1\":{\"12\":1}}],[\"xelatex\",{\"1\":{\"12\":1}}],[\"xenix\",{\"1\":{\"11\":1}}],[\"xerox\",{\"1\":{\"5\":1,\"21\":3,\"36\":1}}],[\"xquartz\",{\"1\":{\"11\":1}}],[\"xwayland\",{\"1\":{\"11\":1}}],[\"xfs\",{\"1\":{\"11\":2}}],[\"x+y\",{\"1\":{\"10\":2}}],[\"xpath\",{\"1\":{\"12\":1}}],[\"xp\",{\"1\":{\"6\":1,\"11\":1}}],[\"x\",{\"1\":{\"5\":3,\"10\":5,\"11\":4,\"14\":1,\"16\":1,\"21\":5,\"22\":2,\"28\":2,\"30\":1,\"43\":2,\"101\":1,\"105\":1,\"107\":3,\"109\":4,\"110\":1,\"139\":2,\"147\":4,\"151\":1,\"160\":2,\"171\":6,\"193\":1,\"198\":4,\"199\":5,\"200\":1,\"205\":4,\"210\":3,\"227\":3,\"230\":1,\"234\":2,\"235\":1,\"237\":1}}],[\"x64\",{\"1\":{\"1\":1,\"11\":1,\"25\":2,\"123\":1,\"134\":2,\"164\":5,\"174\":1,\"201\":1}}],[\"62\",{\"1\":{\"175\":4}}],[\"624\",{\"1\":{\"170\":1}}],[\"61012\",{\"1\":{\"165\":1}}],[\"65536\",{\"1\":{\"165\":1}}],[\"65648\",{\"1\":{\"147\":1}}],[\"65\",{\"1\":{\"124\":4,\"193\":1,\"205\":1,\"228\":1}}],[\"632\",{\"1\":{\"171\":1}}],[\"63\",{\"1\":{\"36\":1,\"174\":3,\"175\":4,\"190\":1,\"209\":3,\"248\":1}}],[\"635\",{\"1\":{\"17\":1}}],[\"66\",{\"1\":{\"31\":1,\"200\":1,\"206\":1}}],[\"6u\",{\"1\":{\"30\":1}}],[\"67\",{\"1\":{\"11\":3,\"228\":1}}],[\"64`\",{\"1\":{\"188\":1}}],[\"64k\",{\"1\":{\"162\":1}}],[\"64kb\",{\"1\":{\"11\":1}}],[\"640\",{\"1\":{\"147\":1,\"169\":1,\"170\":5,\"171\":1,\"183\":1,\"188\":1}}],[\"640×350\",{\"1\":{\"32\":1}}],[\"640×480\",{\"1\":{\"32\":1}}],[\"640kb\",{\"1\":{\"11\":1}}],[\"645\",{\"1\":{\"11\":1}}],[\"64\",{\"1\":{\"11\":2,\"15\":1,\"21\":1,\"25\":28,\"26\":2,\"33\":1,\"34\":3,\"98\":3,\"99\":2,\"116\":1,\"120\":1,\"122\":1,\"123\":9,\"124\":9,\"131\":1,\"133\":1,\"135\":1,\"136\":2,\"143\":3,\"147\":15,\"148\":1,\"164\":2,\"172\":1,\"173\":3,\"179\":1,\"184\":3,\"185\":8,\"186\":1,\"187\":1,\"188\":1,\"190\":3,\"196\":2,\"201\":1,\"202\":5,\"210\":1,\"226\":2,\"228\":35,\"230\":2,\"234\":7,\"235\":7}}],[\"6800\",{\"1\":{\"21\":1}}],[\"68k\",{\"1\":{\"11\":1}}],[\"68\",{\"1\":{\"8\":1,\"192\":1}}],[\"6016\",{\"1\":{\"188\":1}}],[\"608\",{\"1\":{\"171\":2}}],[\"60884\",{\"1\":{\"165\":1}}],[\"6036\",{\"1\":{\"170\":6}}],[\"6040\",{\"1\":{\"169\":1}}],[\"60+\",{\"1\":{\"20\":1}}],[\"6008\",{\"1\":{\"183\":1}}],[\"6004\",{\"1\":{\"171\":4}}],[\"600\",{\"1\":{\"17\":1}}],[\"60\",{\"1\":{\"8\":1,\"228\":1}}],[\"6\",{\"1\":{\"4\":1,\"11\":1,\"22\":1,\"33\":1,\"36\":1,\"86\":2,\"103\":1,\"105\":2,\"110\":1,\"123\":1,\"147\":5,\"165\":1,\"175\":4,\"186\":2,\"192\":2,\"226\":1,\"228\":2,\"229\":1,\"234\":1,\"235\":2}}],[\"rbx\",{\"1\":{\"240\":2}}],[\"rbx=ffff800000327220\",{\"1\":{\"212\":1}}],[\"rbx=ffff800000327548\",{\"1\":{\"210\":1}}],[\"rbx=0000000000000000\",{\"1\":{\"188\":1,\"200\":1,\"210\":1}}],[\"rbp=0000000050000ff8\",{\"1\":{\"200\":1,\"210\":2,\"212\":1}}],[\"rbp=ffff800100003f48\",{\"1\":{\"188\":1}}],[\"rbp\",{\"1\":{\"200\":9,\"221\":1,\"240\":2}}],[\"rbac\",{\"1\":{\"22\":1}}],[\"r2\",{\"1\":{\"168\":6}}],[\"r15\",{\"1\":{\"240\":2}}],[\"r15=0000000007ebf1e0\",{\"1\":{\"188\":1,\"200\":1,\"210\":2,\"212\":1}}],[\"r14\",{\"1\":{\"240\":2}}],[\"r14=0000000000000000\",{\"1\":{\"188\":1,\"200\":1,\"210\":2,\"212\":1}}],[\"r13\",{\"1\":{\"240\":2}}],[\"r13=0000000006bb1588\",{\"1\":{\"188\":1,\"200\":1,\"210\":2,\"212\":1}}],[\"r12\",{\"1\":{\"240\":2}}],[\"r12=0000000000000000\",{\"1\":{\"188\":1,\"200\":1,\"210\":2,\"212\":1}}],[\"r11=0000000000000202\",{\"1\":{\"210\":2,\"212\":1}}],[\"r11=0000000000000004\",{\"1\":{\"188\":1,\"200\":1}}],[\"r11\",{\"1\":{\"208\":4,\"210\":2,\"211\":4,\"212\":3,\"213\":2,\"215\":1,\"223\":1,\"240\":2,\"245\":3}}],[\"r10=0000000050000fc8\",{\"1\":{\"212\":1}}],[\"r10=0000000000000000\",{\"1\":{\"210\":1}}],[\"r10=000000000636d001\",{\"1\":{\"188\":1,\"200\":1,\"210\":1}}],[\"r10\",{\"1\":{\"208\":1,\"212\":4,\"240\":2}}],[\"r1\",{\"1\":{\"168\":6}}],[\"r9\",{\"1\":{\"164\":2,\"188\":1,\"200\":1,\"208\":1,\"210\":2,\"212\":5,\"223\":1,\"240\":2}}],[\"r8\",{\"1\":{\"164\":2,\"188\":1,\"200\":1,\"208\":1,\"210\":2,\"212\":5,\"223\":1,\"240\":2}}],[\"rw\",{\"1\":{\"135\":1,\"136\":1,\"143\":1,\"147\":4,\"148\":1,\"196\":1,\"234\":4}}],[\"r|\",{\"1\":{\"87\":1}}],[\"rgba\",{\"1\":{\"32\":2}}],[\"rgb\",{\"1\":{\"32\":3}}],[\"rfl=00000202\",{\"1\":{\"210\":1,\"212\":1}}],[\"rfl=00000206\",{\"1\":{\"200\":1}}],[\"rfl=00000002\",{\"1\":{\"210\":1}}],[\"rfl=00000006\",{\"1\":{\"188\":1}}],[\"rflags\",{\"1\":{\"191\":1,\"194\":3,\"199\":3,\"200\":1,\"205\":1,\"208\":2,\"209\":1,\"210\":3,\"211\":4,\"212\":2,\"220\":1}}],[\"rf\",{\"1\":{\"30\":1,\"196\":4}}],[\"rfcs\",{\"1\":{\"36\":1}}],[\"rfc\",{\"1\":{\"6\":2,\"15\":1,\"36\":4,\"175\":1}}],[\"rv32\",{\"1\":{\"25\":1}}],[\"rv64gc\",{\"1\":{\"25\":2}}],[\"rvo\",{\"1\":{\"10\":2}}],[\"rnn\",{\"1\":{\"18\":1}}],[\"rdmsr\",{\"1\":{\"209\":1}}],[\"rdi=0000000000000001\",{\"1\":{\"210\":2,\"212\":1}}],[\"rdi=0000000000000000\",{\"1\":{\"188\":1}}],[\"rdi=0000000050000fc8\",{\"1\":{\"200\":1}}],[\"rdi\",{\"1\":{\"164\":3,\"181\":1,\"200\":1,\"208\":1,\"210\":4,\"212\":5,\"213\":3,\"215\":3,\"223\":1,\"240\":2,\"241\":1,\"245\":6}}],[\"rdimms\",{\"1\":{\"29\":1}}],[\"rdx=000000004000ade8\",{\"1\":{\"212\":1}}],[\"rdx=000000004000add8\",{\"1\":{\"210\":2}}],[\"rdx=0000000000000000\",{\"1\":{\"200\":1}}],[\"rdx=ffff800100003f58\",{\"1\":{\"188\":1}}],[\"rdx\",{\"1\":{\"164\":3,\"208\":1,\"212\":4,\"223\":1,\"240\":2}}],[\"rdram\",{\"1\":{\"29\":2}}],[\"rdap\",{\"1\":{\"21\":1,\"36\":1}}],[\"rdp\",{\"1\":{\"21\":2}}],[\"rdo\",{\"1\":{\"17\":1}}],[\"rdd\",{\"1\":{\"17\":3}}],[\"rdbms\",{\"1\":{\"17\":2}}],[\"rdfs\",{\"1\":{\"15\":5}}],[\"rdf\",{\"1\":{\"15\":9}}],[\"r\",{\"1\":{\"14\":3,\"21\":1,\"53\":2,\"62\":1,\"87\":1,\"141\":1,\"144\":1,\"147\":7,\"151\":1,\"164\":3,\"177\":1,\"179\":1,\"181\":4,\"185\":1,\"188\":1,\"200\":2,\"213\":1,\"215\":1,\"221\":1,\"228\":37,\"230\":2,\"234\":4,\"235\":1,\"237\":2,\"245\":1}}],[\"rm\",{\"1\":{\"196\":4,\"234\":1}}],[\"rms\",{\"1\":{\"11\":1}}],[\"rmi\",{\"1\":{\"9\":2}}],[\"rsi=0000000000000001\",{\"1\":{\"200\":1,\"210\":2,\"212\":1}}],[\"rsi=000000000000000a\",{\"1\":{\"188\":1}}],[\"rsi\",{\"1\":{\"164\":2,\"208\":1,\"212\":4,\"213\":3,\"215\":3,\"223\":1,\"240\":2,\"245\":4}}],[\"rsp2\",{\"1\":{\"201\":3,\"202\":1}}],[\"rsp1\",{\"1\":{\"201\":3,\"202\":1}}],[\"rsp0\",{\"1\":{\"201\":5,\"202\":2,\"204\":3,\"211\":3,\"221\":2,\"240\":1}}],[\"rsp=0000000050000fc8\",{\"1\":{\"200\":1,\"210\":2,\"212\":1}}],[\"rsp=ffff800100003f00\",{\"1\":{\"188\":1}}],[\"rsp\",{\"1\":{\"146\":3,\"164\":2,\"181\":1,\"186\":2,\"191\":1,\"194\":2,\"195\":1,\"199\":5,\"200\":5,\"205\":1,\"210\":1,\"211\":5,\"212\":5,\"216\":1,\"217\":2,\"218\":1,\"220\":3,\"221\":5,\"223\":3,\"239\":2,\"240\":3}}],[\"rsd\",{\"1\":{\"34\":1}}],[\"rsdt\",{\"1\":{\"34\":3}}],[\"rsdp\",{\"1\":{\"34\":2}}],[\"rsa\",{\"1\":{\"22\":5,\"35\":1}}],[\"rscs\",{\"1\":{\"21\":1}}],[\"rsh\",{\"1\":{\"21\":2}}],[\"rs\",{\"1\":{\"21\":1,\"30\":2}}],[\"rsvp\",{\"1\":{\"21\":10}}],[\"rss\",{\"1\":{\"15\":1}}],[\"rstorssp\",{\"1\":{\"192\":1}}],[\"rstp\",{\"1\":{\"21\":1}}],[\"rst\",{\"1\":{\"12\":2}}],[\"rsts\",{\"1\":{\"11\":2}}],[\"rsx\",{\"1\":{\"11\":4,\"24\":1}}],[\"rtc\",{\"1\":{\"21\":1,\"33\":3}}],[\"rto\",{\"1\":{\"19\":2}}],[\"rtos\",{\"1\":{\"11\":2}}],[\"rtfm\",{\"1\":{\"35\":1}}],[\"rtf\",{\"1\":{\"13\":2}}],[\"rt\",{\"1\":{\"11\":3,\"24\":1}}],[\"rttidestroy\",{\"1\":{\"147\":3}}],[\"rtti\",{\"1\":{\"10\":1}}],[\"rtl\",{\"1\":{\"6\":1,\"7\":2,\"33\":1}}],[\"rrsigs\",{\"1\":{\"24\":1}}],[\"rrsig\",{\"1\":{\"24\":1}}],[\"rr\",{\"1\":{\"9\":1}}],[\"rll\",{\"1\":{\"31\":3}}],[\"rlogin\",{\"1\":{\"21\":2}}],[\"rlhf\",{\"1\":{\"18\":3}}],[\"rle\",{\"1\":{\"13\":1,\"16\":2}}],[\"rl\",{\"1\":{\"9\":1,\"18\":1}}],[\"rpl=3\",{\"1\":{\"186\":1,\"200\":1}}],[\"rpl\",{\"1\":{\"186\":13,\"187\":2,\"188\":1,\"202\":2}}],[\"rparen\",{\"1\":{\"108\":2}}],[\"rpaths\",{\"1\":{\"11\":2}}],[\"rps\",{\"1\":{\"20\":2}}],[\"rpo\",{\"1\":{\"19\":2}}],[\"rpm\",{\"1\":{\"11\":5}}],[\"rpn\",{\"1\":{\"9\":2}}],[\"rpgs\",{\"1\":{\"35\":2}}],[\"rpg\",{\"1\":{\"8\":2,\"35\":1}}],[\"rpc\",{\"1\":{\"4\":3,\"9\":4,\"35\":1}}],[\"rule\",{\"1\":{\"53\":1,\"58\":4,\"63\":7,\"66\":4,\"68\":2,\"69\":3,\"70\":5,\"73\":2,\"87\":1,\"88\":1,\"89\":10,\"90\":3,\"92\":15,\"93\":2,\"95\":1,\"96\":2,\"97\":8,\"100\":2,\"101\":2,\"104\":4,\"105\":10,\"106\":8,\"107\":3,\"108\":1,\"109\":2,\"110\":3}}],[\"rules\",{\"0\":{\"92\":1},\"1\":{\"10\":1,\"11\":1,\"12\":1,\"14\":1,\"17\":1,\"22\":1,\"23\":1,\"51\":1,\"52\":1,\"53\":9,\"58\":2,\"62\":1,\"63\":2,\"66\":1,\"68\":3,\"69\":1,\"72\":1,\"75\":1,\"76\":1,\"80\":1,\"85\":3,\"88\":1,\"89\":3,\"92\":10,\"93\":2,\"97\":1,\"98\":2,\"99\":1,\"104\":6,\"105\":5,\"106\":4,\"110\":6}}],[\"rua=mailto\",{\"1\":{\"22\":1}}],[\"rum\",{\"1\":{\"20\":1}}],[\"rust\",{\"1\":{\"7\":1,\"8\":1,\"9\":3,\"10\":1,\"115\":1}}],[\"runner\",{\"1\":{\"136\":1}}],[\"running\",{\"0\":{\"45\":1,\"243\":1},\"1\":{\"7\":1,\"8\":1,\"10\":1,\"11\":6,\"17\":2,\"21\":4,\"22\":1,\"24\":2,\"25\":3,\"33\":1,\"64\":1,\"116\":1,\"144\":1,\"161\":1,\"181\":1,\"183\":1,\"186\":1,\"190\":1,\"194\":1,\"201\":2,\"231\":1,\"238\":1,\"239\":5,\"240\":3,\"251\":1}}],[\"runide\",{\"1\":{\"45\":2}}],[\"runc\",{\"1\":{\"24\":1}}],[\"runbooks\",{\"1\":{\"19\":1}}],[\"runtimeservices\",{\"1\":{\"138\":1}}],[\"runtimes\",{\"1\":{\"10\":1,\"24\":1}}],[\"runtime\",{\"1\":{\"7\":1,\"9\":5,\"10\":4,\"11\":4,\"24\":3,\"34\":1,\"122\":1,\"123\":1,\"225\":3}}],[\"run\",{\"1\":{\"7\":4,\"9\":3,\"10\":2,\"11\":15,\"16\":2,\"17\":1,\"18\":1,\"21\":1,\"22\":3,\"24\":5,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"31\":1,\"34\":1,\"35\":2,\"41\":2,\"45\":3,\"49\":1,\"54\":1,\"55\":1,\"65\":2,\"66\":1,\"69\":1,\"71\":1,\"78\":1,\"89\":1,\"123\":1,\"133\":1,\"135\":3,\"136\":3,\"143\":1,\"148\":1,\"151\":2,\"152\":1,\"153\":1,\"154\":1,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"166\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"182\":1,\"183\":1,\"185\":1,\"188\":1,\"191\":1,\"192\":1,\"193\":2,\"194\":1,\"195\":1,\"196\":2,\"197\":1,\"205\":1,\"206\":1,\"207\":1,\"210\":1,\"213\":1,\"214\":1,\"215\":1,\"227\":2,\"230\":1,\"231\":1,\"232\":2,\"233\":1,\"238\":2,\"239\":4,\"240\":1,\"243\":4,\"246\":1}}],[\"runs\",{\"1\":{\"6\":3,\"9\":2,\"16\":1,\"17\":2,\"21\":1,\"25\":1,\"26\":1,\"33\":1,\"94\":1,\"135\":1,\"185\":1,\"239\":1,\"243\":2}}],[\"risks\",{\"1\":{\"36\":1}}],[\"risk\",{\"1\":{\"35\":3,\"105\":1}}],[\"riscv\",{\"1\":{\"235\":1}}],[\"risc\",{\"1\":{\"11\":4,\"24\":1,\"25\":18,\"34\":1,\"235\":1}}],[\"ribbon\",{\"1\":{\"31\":1}}],[\"rimms\",{\"1\":{\"29\":1}}],[\"rimm\",{\"1\":{\"29\":3}}],[\"rivest\",{\"1\":{\"22\":1}}],[\"rijndael\",{\"1\":{\"22\":1}}],[\"rip=0000000040000076\",{\"1\":{\"212\":1}}],[\"rip=0000000040000069\",{\"1\":{\"210\":1}}],[\"rip=000000004000004c\",{\"1\":{\"200\":1}}],[\"rip=ffff8000001204a9\",{\"1\":{\"210\":1}}],[\"rip=ffff800000114d82\",{\"1\":{\"188\":1}}],[\"ripe\",{\"1\":{\"36\":1}}],[\"rip\",{\"1\":{\"21\":2,\"35\":2,\"188\":2,\"191\":1,\"194\":2,\"199\":3,\"200\":3,\"205\":1,\"208\":2,\"210\":4,\"211\":4,\"212\":3,\"220\":1}}],[\"rings\",{\"1\":{\"21\":5,\"201\":1}}],[\"ring\",{\"1\":{\"11\":2,\"21\":1}}],[\"rightassociative=true\",{\"1\":{\"109\":1}}],[\"rightassociative\",{\"1\":{\"109\":1}}],[\"rights\",{\"1\":{\"22\":1,\"23\":5,\"37\":1,\"184\":1}}],[\"rightmost\",{\"1\":{\"21\":1}}],[\"right\",{\"0\":{\"109\":1},\"1\":{\"7\":4,\"35\":1,\"54\":2,\"69\":3,\"71\":1,\"80\":1,\"82\":1,\"89\":2,\"97\":2,\"109\":7,\"110\":1,\"141\":1,\"162\":1,\"188\":1,\"209\":1,\"211\":1,\"229\":1,\"230\":1}}],[\"richness\",{\"1\":{\"40\":1}}],[\"rich\",{\"1\":{\"7\":1,\"9\":1,\"13\":1,\"15\":1,\"21\":1,\"25\":1}}],[\"rcx=0000000040000074\",{\"1\":{\"212\":1}}],[\"rcx=0000000040000067\",{\"1\":{\"210\":2}}],[\"rcx=0000000050000fc8\",{\"1\":{\"200\":1}}],[\"rcx=ffff800100003f10\",{\"1\":{\"188\":1}}],[\"rcx\",{\"1\":{\"164\":2,\"192\":3,\"208\":4,\"210\":2,\"211\":4,\"212\":3,\"213\":2,\"215\":1,\"223\":2,\"240\":2,\"245\":3}}],[\"rce\",{\"1\":{\"22\":1}}],[\"rca\",{\"1\":{\"19\":1}}],[\"rcu\",{\"1\":{\"11\":2}}],[\"rclone\",{\"1\":{\"11\":1}}],[\"rc\",{\"1\":{\"6\":3}}],[\"rxjs\",{\"1\":{\"5\":1}}],[\"ra\",{\"1\":{\"210\":2,\"212\":1}}],[\"rax=0000000000005050\",{\"1\":{\"210\":1,\"212\":1}}],[\"rax=0000000000000000\",{\"1\":{\"200\":1}}],[\"rax=ffff800000327540\",{\"1\":{\"210\":1}}],[\"rax=ffff800000114d80\",{\"1\":{\"188\":1}}],[\"rax\",{\"1\":{\"188\":12,\"200\":6,\"203\":1,\"208\":1,\"210\":2,\"212\":4,\"223\":1,\"240\":2}}],[\"ray\",{\"1\":{\"32\":1}}],[\"rails\",{\"1\":{\"33\":1}}],[\"raises\",{\"1\":{\"190\":1,\"206\":1}}],[\"raisetpl\",{\"1\":{\"151\":1}}],[\"raised\",{\"1\":{\"141\":3,\"171\":1,\"193\":1}}],[\"raiseoutofmem\",{\"1\":{\"124\":2}}],[\"raise\",{\"1\":{\"33\":1,\"171\":3,\"185\":1,\"189\":1,\"193\":1,\"220\":1,\"230\":3,\"231\":1,\"235\":7,\"237\":4}}],[\"raising\",{\"1\":{\"30\":1,\"191\":1,\"192\":1,\"193\":1}}],[\"raid\",{\"1\":{\"31\":4}}],[\"raii\",{\"1\":{\"9\":1}}],[\"rack\",{\"1\":{\"24\":1}}],[\"racf\",{\"1\":{\"11\":1,\"22\":2}}],[\"rag\",{\"1\":{\"18\":1}}],[\"rawwritestring\",{\"1\":{\"124\":2}}],[\"rawwrite\",{\"1\":{\"124\":2}}],[\"raw\",{\"0\":{\"148\":1,\"229\":1},\"1\":{\"17\":1,\"147\":2,\"148\":3,\"149\":1,\"237\":1}}],[\"rare\",{\"1\":{\"249\":1}}],[\"rarely\",{\"1\":{\"12\":1,\"51\":1}}],[\"rarp\",{\"1\":{\"21\":1}}],[\"rar\",{\"1\":{\"16\":3}}],[\"raster\",{\"1\":{\"13\":3}}],[\"raspberry\",{\"1\":{\"11\":1,\"25\":1,\"30\":1,\"33\":1}}],[\"rambus\",{\"1\":{\"29\":3}}],[\"ram\",{\"1\":{\"11\":2,\"29\":2,\"32\":1,\"33\":1,\"147\":1}}],[\"ranks\",{\"1\":{\"24\":1}}],[\"range\",{\"1\":{\"15\":1,\"103\":1,\"151\":1,\"171\":1,\"176\":1,\"177\":1,\"179\":1,\"192\":2,\"214\":1}}],[\"ranges\",{\"1\":{\"9\":1}}],[\"random\",{\"1\":{\"14\":1,\"16\":1,\"17\":1,\"20\":1,\"29\":4,\"31\":1,\"193\":1}}],[\"randomize\",{\"1\":{\"11\":1}}],[\"randomizes\",{\"1\":{\"11\":1}}],[\"randomization\",{\"1\":{\"11\":1}}],[\"ran\",{\"1\":{\"11\":5}}],[\"razor\",{\"1\":{\"7\":1}}],[\"rapid\",{\"1\":{\"6\":1,\"8\":1}}],[\"radar\",{\"1\":{\"11\":2}}],[\"rad\",{\"1\":{\"6\":1}}],[\"ratings\",{\"1\":{\"24\":1}}],[\"ratio\",{\"1\":{\"16\":5}}],[\"ratios\",{\"1\":{\"16\":3}}],[\"rates\",{\"1\":{\"21\":2,\"29\":1}}],[\"rated\",{\"1\":{\"20\":1,\"33\":1}}],[\"rate\",{\"1\":{\"6\":1,\"19\":1,\"20\":1,\"21\":1,\"29\":2,\"35\":1}}],[\"rather\",{\"1\":{\"5\":2,\"25\":1,\"67\":1,\"72\":1,\"229\":1}}],[\"rabbitmq\",{\"1\":{\"4\":1,\"17\":1,\"21\":1}}],[\"robin\",{\"1\":{\"239\":2,\"243\":1}}],[\"robust\",{\"1\":{\"9\":1,\"11\":3,\"66\":1}}],[\"ro\",{\"1\":{\"226\":4,\"228\":11,\"229\":9,\"234\":3}}],[\"rodata\",{\"1\":{\"147\":21,\"148\":2,\"179\":3,\"196\":2,\"226\":5,\"228\":2,\"229\":5,\"234\":2}}],[\"roadmap\",{\"1\":{\"31\":1}}],[\"rogue\",{\"1\":{\"22\":1}}],[\"rop\",{\"1\":{\"22\":3}}],[\"rom\",{\"1\":{\"21\":1,\"29\":4,\"30\":1,\"34\":1,\"135\":2,\"147\":1}}],[\"roms\",{\"1\":{\"11\":1,\"29\":1,\"34\":2}}],[\"rounded\",{\"1\":{\"234\":1}}],[\"round\",{\"1\":{\"156\":1,\"197\":1,\"239\":2,\"243\":1}}],[\"roughly\",{\"1\":{\"32\":1}}],[\"rough\",{\"1\":{\"20\":1}}],[\"routable\",{\"1\":{\"21\":1}}],[\"routes\",{\"1\":{\"21\":1,\"33\":1}}],[\"routed\",{\"1\":{\"21\":3}}],[\"route\",{\"1\":{\"21\":4,\"24\":1,\"34\":1,\"85\":1}}],[\"routers\",{\"1\":{\"21\":10,\"25\":1}}],[\"router\",{\"1\":{\"18\":1,\"21\":2}}],[\"routine\",{\"1\":{\"11\":1,\"191\":1}}],[\"routines\",{\"1\":{\"11\":2,\"97\":1}}],[\"routing\",{\"1\":{\"4\":1,\"7\":1,\"18\":1,\"21\":16,\"27\":1,\"36\":1,\"247\":1}}],[\"rocksdb\",{\"1\":{\"17\":1}}],[\"roshal\",{\"1\":{\"16\":1}}],[\"rows\",{\"1\":{\"17\":1}}],[\"row\",{\"1\":{\"15\":1,\"17\":2,\"29\":1,\"87\":4,\"89\":1}}],[\"rootdir\",{\"1\":{\"153\":2,\"154\":2,\"158\":2,\"197\":11}}],[\"roots\",{\"1\":{\"53\":1}}],[\"root\",{\"0\":{\"153\":1},\"1\":{\"13\":1,\"19\":1,\"21\":1,\"22\":1,\"24\":2,\"28\":2,\"34\":2,\"35\":1,\"36\":4,\"54\":1,\"58\":4,\"61\":2,\"63\":4,\"66\":3,\"68\":1,\"70\":3,\"105\":2,\"124\":1,\"136\":1,\"143\":1,\"150\":1,\"153\":6,\"154\":1,\"158\":3,\"174\":2,\"177\":1,\"197\":4}}],[\"rotation\",{\"1\":{\"24\":1}}],[\"rotations\",{\"1\":{\"9\":2}}],[\"rotating\",{\"1\":{\"21\":1}}],[\"rotates\",{\"1\":{\"26\":1}}],[\"rotate\",{\"1\":{\"7\":1,\"22\":1}}],[\"rollback\",{\"1\":{\"35\":1,\"58\":1}}],[\"rollout\",{\"1\":{\"6\":1,\"35\":2}}],[\"roles\",{\"1\":{\"7\":1,\"12\":1,\"22\":3,\"35\":1,\"36\":1}}],[\"role=\",{\"1\":{\"7\":1}}],[\"role\",{\"1\":{\"4\":1,\"21\":1,\"22\":2,\"35\":2,\"50\":1}}],[\"reinstallprotocolinterface\",{\"1\":{\"151\":1}}],[\"reinforcement\",{\"1\":{\"18\":2}}],[\"reject\",{\"1\":{\"95\":1}}],[\"re\",{\"1\":{\"35\":1,\"41\":2,\"42\":1,\"49\":1,\"53\":1,\"63\":1,\"74\":1,\"75\":1,\"77\":2,\"78\":1,\"79\":1,\"87\":2,\"88\":1,\"89\":1,\"97\":1,\"106\":1,\"108\":1,\"115\":1,\"123\":4,\"124\":6,\"131\":1,\"134\":1,\"135\":3,\"138\":1,\"139\":1,\"140\":1,\"141\":2,\"143\":1,\"144\":2,\"145\":1,\"146\":2,\"147\":5,\"148\":1,\"150\":2,\"151\":2,\"152\":1,\"153\":1,\"154\":1,\"158\":1,\"159\":1,\"160\":2,\"161\":1,\"162\":3,\"163\":3,\"164\":2,\"166\":1,\"168\":1,\"175\":1,\"176\":1,\"178\":1,\"181\":1,\"184\":1,\"185\":6,\"188\":2,\"191\":1,\"192\":1,\"197\":1,\"198\":1,\"200\":4,\"206\":1,\"208\":2,\"209\":2,\"210\":4,\"211\":2,\"212\":3,\"213\":1,\"216\":1,\"223\":2,\"230\":1,\"235\":1,\"236\":1,\"237\":2,\"239\":1,\"240\":3,\"248\":1}}],[\"reordering\",{\"1\":{\"31\":1}}],[\"reorder\",{\"1\":{\"31\":1}}],[\"rewritable\",{\"1\":{\"31\":1}}],[\"rewriting\",{\"1\":{\"22\":1}}],[\"reward\",{\"1\":{\"18\":2}}],[\"rewards\",{\"1\":{\"18\":1}}],[\"reroute\",{\"1\":{\"21\":4}}],[\"renaming\",{\"1\":{\"84\":1}}],[\"rename\",{\"0\":{\"81\":1,\"82\":1,\"83\":1,\"84\":1},\"1\":{\"80\":1,\"81\":2,\"82\":5,\"83\":10,\"84\":5}}],[\"renamed\",{\"1\":{\"21\":1,\"75\":1}}],[\"renowned\",{\"1\":{\"11\":1}}],[\"rendered\",{\"1\":{\"9\":1}}],[\"renders\",{\"1\":{\"7\":1}}],[\"render\",{\"1\":{\"5\":1,\"7\":3,\"20\":2,\"32\":1}}],[\"rendering\",{\"1\":{\"4\":1,\"5\":1,\"7\":2,\"9\":1,\"32\":1}}],[\"rendezvous\",{\"1\":{\"5\":1}}],[\"reuse\",{\"1\":{\"10\":2,\"17\":1,\"22\":2,\"79\":1,\"197\":1,\"206\":1}}],[\"reusing\",{\"1\":{\"10\":1}}],[\"reusable\",{\"1\":{\"4\":2,\"10\":1}}],[\"revert\",{\"1\":{\"89\":1}}],[\"reverse\",{\"1\":{\"9\":1,\"21\":2,\"176\":5,\"199\":1}}],[\"revision\",{\"1\":{\"138\":1,\"151\":1,\"152\":1,\"153\":2,\"154\":1}}],[\"revisit\",{\"1\":{\"89\":1}}],[\"reviewing\",{\"1\":{\"35\":1}}],[\"review\",{\"1\":{\"6\":2,\"35\":4}}],[\"reviews\",{\"1\":{\"6\":3}}],[\"revolutionized\",{\"1\":{\"13\":1}}],[\"regardless\",{\"1\":{\"240\":1}}],[\"regs\",{\"1\":{\"146\":2}}],[\"regulated\",{\"1\":{\"33\":1}}],[\"regulation\",{\"1\":{\"23\":1}}],[\"regulator\",{\"1\":{\"23\":1}}],[\"regularly\",{\"1\":{\"22\":1}}],[\"regular\",{\"1\":{\"9\":2,\"10\":2,\"53\":1,\"94\":1,\"97\":3,\"99\":1,\"101\":1,\"102\":1,\"146\":2}}],[\"region2\",{\"1\":{\"168\":3}}],[\"region1\",{\"1\":{\"168\":3}}],[\"regional\",{\"1\":{\"21\":1}}],[\"regions\",{\"1\":{\"17\":1,\"58\":1,\"63\":1,\"116\":1,\"165\":1,\"168\":5,\"169\":7,\"170\":10,\"171\":9,\"177\":1,\"180\":1,\"181\":1,\"183\":4,\"185\":2,\"188\":2,\"195\":2,\"198\":2,\"218\":14,\"219\":2,\"234\":1,\"237\":10}}],[\"region\",{\"1\":{\"10\":1,\"22\":1,\"28\":1,\"58\":1,\"63\":3,\"66\":2,\"147\":1,\"150\":1,\"156\":1,\"164\":1,\"168\":8,\"169\":3,\"170\":14,\"171\":26,\"195\":1,\"197\":2,\"198\":1,\"199\":2,\"218\":10,\"231\":2,\"237\":22,\"248\":2}}],[\"registries\",{\"1\":{\"36\":3}}],[\"registrant\",{\"1\":{\"21\":1}}],[\"registrars\",{\"1\":{\"36\":1}}],[\"registrar\",{\"1\":{\"21\":1}}],[\"registrations\",{\"1\":{\"44\":2}}],[\"registration\",{\"1\":{\"21\":1,\"36\":1}}],[\"registry\",{\"1\":{\"7\":1}}],[\"registerprotocolnotify\",{\"1\":{\"151\":1}}],[\"registering\",{\"0\":{\"48\":1},\"1\":{\"45\":1,\"46\":1,\"83\":2}}],[\"registersignalhandler\",{\"1\":{\"124\":3}}],[\"registers\",{\"1\":{\"9\":1,\"11\":2,\"25\":4,\"28\":1,\"30\":1,\"33\":3,\"146\":4,\"164\":1,\"186\":2,\"187\":2,\"188\":7,\"192\":1,\"194\":2,\"200\":2,\"208\":2,\"209\":2,\"210\":5,\"212\":3,\"213\":1,\"240\":1,\"248\":11}}],[\"register\",{\"1\":{\"4\":1,\"9\":2,\"10\":1,\"28\":1,\"34\":1,\"46\":1,\"48\":1,\"55\":2,\"64\":2,\"83\":1,\"146\":1,\"164\":1,\"174\":1,\"181\":2,\"186\":5,\"187\":5,\"188\":5,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":2,\"200\":4,\"201\":2,\"203\":1,\"209\":3,\"212\":2,\"213\":1,\"221\":1,\"240\":2,\"248\":9,\"249\":6}}],[\"regexes\",{\"1\":{\"99\":1}}],[\"regex\",{\"1\":{\"9\":5,\"10\":1,\"53\":2,\"87\":1,\"89\":2,\"95\":2,\"99\":1,\"101\":2,\"104\":3}}],[\"recs\",{\"1\":{\"36\":1}}],[\"recipients\",{\"1\":{\"35\":1}}],[\"recreate\",{\"1\":{\"35\":1}}],[\"recall\",{\"1\":{\"35\":1,\"161\":1,\"206\":1}}],[\"recurrent\",{\"1\":{\"18\":2}}],[\"recursive\",{\"1\":{\"10\":1,\"63\":2,\"105\":4,\"176\":1}}],[\"recursively\",{\"1\":{\"9\":1,\"58\":1,\"143\":1}}],[\"recursion\",{\"1\":{\"9\":2,\"10\":1,\"105\":1}}],[\"reclamation\",{\"1\":{\"11\":1}}],[\"recognized\",{\"1\":{\"96\":1,\"104\":1}}],[\"recognizes\",{\"1\":{\"49\":2,\"60\":1,\"75\":1,\"95\":1}}],[\"recognize\",{\"1\":{\"45\":1,\"46\":1,\"62\":1,\"85\":1,\"88\":1,\"95\":1,\"101\":1,\"104\":1,\"106\":2,\"109\":1}}],[\"recognition\",{\"1\":{\"10\":2,\"18\":3}}],[\"reconfigurable\",{\"1\":{\"33\":1}}],[\"recommend\",{\"1\":{\"185\":1}}],[\"recommended\",{\"1\":{\"85\":1}}],[\"recommendations\",{\"1\":{\"18\":1,\"36\":2}}],[\"recompiles\",{\"1\":{\"24\":1}}],[\"recompute\",{\"1\":{\"22\":1}}],[\"recoverable\",{\"1\":{\"192\":1}}],[\"recover\",{\"1\":{\"19\":1,\"66\":1}}],[\"recovery\",{\"1\":{\"16\":1,\"17\":2,\"19\":3,\"21\":1}}],[\"recordset\",{\"1\":{\"17\":1}}],[\"records\",{\"1\":{\"10\":1,\"15\":2,\"16\":1,\"17\":1,\"21\":2,\"24\":2,\"228\":1}}],[\"record\",{\"1\":{\"10\":1,\"21\":3,\"22\":1,\"31\":1,\"225\":1}}],[\"receiving\",{\"1\":{\"246\":1}}],[\"receives\",{\"1\":{\"249\":1}}],[\"received\",{\"1\":{\"212\":1,\"215\":1}}],[\"receivers\",{\"1\":{\"22\":2}}],[\"receiver\",{\"1\":{\"10\":1,\"30\":1}}],[\"receive\",{\"1\":{\"6\":1,\"21\":2,\"249\":1}}],[\"receipts\",{\"1\":{\"18\":1}}],[\"recent\",{\"1\":{\"17\":2,\"192\":1,\"193\":2,\"205\":3,\"206\":1}}],[\"recently\",{\"1\":{\"9\":2,\"136\":1}}],[\"redirecting\",{\"1\":{\"123\":1}}],[\"redistribution\",{\"1\":{\"37\":1}}],[\"redis\",{\"1\":{\"17\":1}}],[\"redshift\",{\"1\":{\"17\":1}}],[\"redrive\",{\"1\":{\"17\":1}}],[\"reduction\",{\"1\":{\"19\":1}}],[\"reduced\",{\"1\":{\"25\":1,\"170\":1}}],[\"reduces\",{\"1\":{\"11\":2,\"33\":1}}],[\"reduce\",{\"1\":{\"9\":1,\"10\":1,\"24\":1,\"25\":1,\"26\":1,\"196\":1}}],[\"redundant\",{\"1\":{\"10\":2,\"31\":1}}],[\"redundancy\",{\"1\":{\"10\":1,\"21\":2,\"31\":1,\"92\":1}}],[\"redundancies\",{\"1\":{\"10\":1}}],[\"red\",{\"1\":{\"6\":1,\"11\":1,\"32\":2,\"66\":1,\"146\":6}}],[\"reltype\",{\"1\":{\"230\":3}}],[\"relcount\",{\"1\":{\"230\":5}}],[\"relsize\",{\"1\":{\"230\":5}}],[\"relro\",{\"1\":{\"226\":1,\"228\":2,\"229\":3,\"234\":4}}],[\"rel\",{\"1\":{\"226\":4,\"228\":11,\"229\":9,\"234\":3,\"235\":2}}],[\"relent\",{\"1\":{\"230\":5}}],[\"relentsize\",{\"1\":{\"230\":4}}],[\"relevant\",{\"1\":{\"147\":1,\"227\":1,\"229\":1,\"233\":1,\"235\":2,\"248\":1}}],[\"releases\",{\"1\":{\"17\":1}}],[\"released\",{\"1\":{\"9\":1}}],[\"release\",{\"1\":{\"6\":7,\"11\":3,\"16\":1,\"35\":1,\"37\":1,\"141\":1}}],[\"relying\",{\"1\":{\"222\":1}}],[\"rely\",{\"1\":{\"60\":1,\"89\":1,\"122\":2,\"123\":1,\"124\":1,\"144\":1,\"149\":1,\"181\":1,\"201\":1,\"209\":1,\"231\":1,\"237\":1}}],[\"relies\",{\"1\":{\"83\":1,\"124\":1,\"225\":2}}],[\"relied\",{\"1\":{\"40\":1}}],[\"reliably\",{\"1\":{\"20\":1}}],[\"reliable\",{\"1\":{\"11\":1,\"17\":1,\"21\":2}}],[\"reliability\",{\"0\":{\"19\":1},\"1\":{\"19\":1,\"21\":1,\"29\":1,\"31\":1}}],[\"relasize\",{\"1\":{\"230\":2}}],[\"relasz\",{\"1\":{\"229\":2}}],[\"relacount\",{\"1\":{\"229\":2,\"230\":2}}],[\"relaentryinfo\",{\"1\":{\"230\":2}}],[\"relaentry\",{\"1\":{\"230\":3}}],[\"relaentsize\",{\"1\":{\"230\":2}}],[\"relaent\",{\"1\":{\"229\":2}}],[\"rela\",{\"1\":{\"147\":5,\"226\":2,\"228\":4,\"229\":12,\"230\":10,\"234\":3,\"235\":2}}],[\"relaying\",{\"1\":{\"21\":1}}],[\"relay\",{\"1\":{\"21\":3}}],[\"relax\",{\"1\":{\"12\":1}}],[\"relative\",{\"1\":{\"17\":1,\"87\":1,\"143\":1,\"225\":2,\"228\":34,\"230\":5,\"235\":1,\"237\":1}}],[\"relationship\",{\"1\":{\"17\":1,\"46\":1,\"57\":1,\"59\":1}}],[\"relationships\",{\"1\":{\"15\":3,\"17\":2,\"52\":1}}],[\"relational\",{\"1\":{\"9\":3,\"17\":8,\"102\":1}}],[\"related\",{\"1\":{\"6\":2,\"15\":1,\"21\":2,\"25\":1,\"32\":1,\"35\":1,\"36\":1,\"56\":1,\"186\":1,\"215\":1}}],[\"reloffset\",{\"1\":{\"230\":5}}],[\"relocated\",{\"1\":{\"226\":1,\"228\":2}}],[\"relocatable\",{\"1\":{\"147\":1,\"223\":2,\"235\":2,\"237\":1}}],[\"relocations\",{\"0\":{\"228\":1,\"229\":1,\"230\":1},\"1\":{\"142\":1,\"226\":1,\"228\":1,\"230\":5,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"236\":1,\"237\":2,\"243\":2}}],[\"relocation\",{\"1\":{\"10\":1,\"11\":1,\"179\":2,\"225\":4,\"227\":2,\"228\":6,\"229\":6,\"230\":11,\"233\":1,\"237\":2}}],[\"reloads\",{\"1\":{\"188\":1}}],[\"reload\",{\"1\":{\"7\":1,\"43\":1,\"188\":3,\"203\":1}}],[\"reboot\",{\"1\":{\"193\":1}}],[\"reboots\",{\"1\":{\"33\":1,\"134\":1}}],[\"rebase\",{\"1\":{\"35\":1}}],[\"rebases\",{\"1\":{\"6\":1}}],[\"rebuild\",{\"1\":{\"4\":1}}],[\"remember\",{\"1\":{\"110\":1,\"148\":1,\"161\":1,\"164\":1,\"199\":1,\"237\":2,\"239\":1}}],[\"remediate\",{\"1\":{\"22\":1}}],[\"remediation\",{\"1\":{\"6\":1,\"17\":1}}],[\"remapped\",{\"1\":{\"33\":1}}],[\"remap\",{\"1\":{\"21\":1}}],[\"remaining\",{\"1\":{\"21\":1,\"26\":1,\"66\":1,\"89\":3,\"110\":1,\"112\":1,\"186\":1,\"189\":1,\"192\":1,\"237\":1}}],[\"remain\",{\"1\":{\"6\":1,\"29\":1,\"37\":1,\"187\":1}}],[\"removable\",{\"1\":{\"31\":1}}],[\"removed\",{\"1\":{\"21\":1,\"170\":1,\"215\":1}}],[\"removes\",{\"1\":{\"10\":1,\"17\":1,\"170\":1}}],[\"remove\",{\"1\":{\"10\":2,\"89\":2,\"193\":1,\"223\":1,\"226\":2,\"230\":2,\"231\":2,\"234\":1,\"239\":1}}],[\"remotely\",{\"1\":{\"22\":1}}],[\"remote\",{\"1\":{\"4\":1,\"9\":3,\"11\":2,\"17\":2,\"21\":10,\"22\":4,\"25\":1,\"35\":1}}],[\"retfq\",{\"1\":{\"188\":3}}],[\"retina\",{\"1\":{\"32\":2}}],[\"ret\",{\"1\":{\"22\":1,\"191\":1,\"192\":1}}],[\"retail\",{\"1\":{\"21\":1}}],[\"retained\",{\"1\":{\"33\":1}}],[\"retains\",{\"1\":{\"29\":1}}],[\"retain\",{\"1\":{\"5\":1,\"147\":2}}],[\"retry\",{\"1\":{\"35\":1}}],[\"retro\",{\"1\":{\"29\":1}}],[\"retrocomputing\",{\"1\":{\"11\":1,\"24\":1}}],[\"retried\",{\"1\":{\"192\":1}}],[\"retrieving\",{\"1\":{\"18\":1,\"21\":1}}],[\"retrieval\",{\"1\":{\"18\":1,\"21\":3}}],[\"retrieve\",{\"1\":{\"11\":1,\"18\":1}}],[\"retries\",{\"1\":{\"17\":1}}],[\"returned\",{\"1\":{\"10\":1,\"77\":1,\"78\":1,\"130\":1,\"191\":2,\"192\":1,\"193\":1,\"197\":1}}],[\"return\",{\"1\":{\"10\":5,\"14\":2,\"17\":1,\"22\":1,\"51\":1,\"52\":1,\"53\":3,\"61\":2,\"62\":4,\"63\":1,\"64\":1,\"66\":7,\"72\":2,\"74\":4,\"75\":2,\"77\":5,\"78\":8,\"79\":4,\"82\":7,\"83\":1,\"87\":10,\"88\":1,\"89\":13,\"91\":3,\"95\":2,\"96\":6,\"97\":2,\"99\":2,\"101\":4,\"104\":34,\"106\":2,\"107\":3,\"108\":2,\"109\":3,\"110\":3,\"122\":1,\"123\":1,\"124\":3,\"127\":1,\"128\":1,\"130\":2,\"131\":2,\"133\":1,\"135\":2,\"140\":1,\"141\":3,\"159\":1,\"161\":1,\"170\":1,\"177\":5,\"181\":1,\"188\":4,\"191\":1,\"192\":2,\"194\":2,\"203\":1,\"208\":2,\"210\":4,\"211\":1,\"212\":5,\"213\":1,\"214\":1,\"215\":1,\"230\":4,\"237\":1,\"239\":2,\"240\":2,\"249\":2}}],[\"returns\",{\"1\":{\"7\":1,\"9\":1,\"22\":1,\"51\":1,\"53\":3,\"58\":4,\"72\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":4,\"78\":1,\"79\":1,\"83\":1,\"97\":1,\"127\":1,\"128\":1,\"135\":4,\"139\":1,\"170\":1,\"177\":1,\"191\":1,\"194\":2,\"212\":1,\"218\":1,\"238\":1}}],[\"returning\",{\"1\":{\"5\":1,\"58\":1,\"66\":1,\"87\":3,\"89\":1,\"104\":2,\"139\":1,\"168\":1,\"192\":2,\"208\":1,\"210\":1,\"237\":1}}],[\"ref\",{\"1\":{\"139\":2,\"141\":1,\"166\":2,\"217\":1,\"218\":1,\"239\":1}}],[\"reflect\",{\"1\":{\"44\":1,\"107\":1,\"109\":1,\"198\":1}}],[\"reflection\",{\"1\":{\"10\":1}}],[\"refer\",{\"1\":{\"52\":1,\"61\":1,\"218\":1}}],[\"referring\",{\"1\":{\"35\":1}}],[\"refers\",{\"1\":{\"33\":2,\"107\":1}}],[\"referential\",{\"1\":{\"17\":1}}],[\"referenced\",{\"1\":{\"17\":2,\"22\":1,\"75\":1,\"124\":18,\"179\":1}}],[\"references\",{\"1\":{\"9\":1,\"16\":1,\"17\":1,\"75\":1,\"77\":1,\"80\":1,\"81\":1,\"82\":3,\"84\":2,\"179\":1}}],[\"reference\",{\"0\":{\"74\":1},\"1\":{\"4\":1,\"7\":1,\"9\":1,\"21\":1,\"58\":2,\"72\":9,\"74\":5,\"75\":8,\"76\":4,\"77\":6,\"78\":7,\"79\":3,\"80\":5,\"81\":1,\"82\":2,\"84\":1,\"105\":1,\"192\":3}}],[\"refresh\",{\"1\":{\"20\":1,\"29\":2,\"32\":2}}],[\"refine\",{\"1\":{\"9\":1}}],[\"refactoringsupport\",{\"1\":{\"83\":1}}],[\"refactoringsupportprovider\",{\"1\":{\"83\":3}}],[\"refactoring\",{\"0\":{\"81\":1},\"1\":{\"6\":1,\"58\":1,\"59\":1,\"80\":1,\"81\":1,\"82\":2,\"83\":8,\"84\":2}}],[\"refactor\",{\"1\":{\"5\":1,\"6\":2,\"35\":1,\"82\":1,\"197\":1}}],[\"requiring\",{\"1\":{\"7\":1,\"17\":1,\"22\":1,\"32\":1,\"35\":1}}],[\"requirement\",{\"1\":{\"66\":1,\"85\":1}}],[\"requirements\",{\"1\":{\"5\":1,\"6\":2,\"9\":1,\"21\":2,\"29\":1,\"42\":1,\"209\":1}}],[\"require\",{\"1\":{\"29\":1,\"31\":1,\"69\":1,\"95\":1,\"176\":1,\"177\":1,\"246\":1}}],[\"requires\",{\"1\":{\"10\":1,\"32\":1,\"82\":1,\"83\":1,\"86\":1,\"99\":1,\"105\":1,\"110\":1,\"140\":1,\"153\":1,\"156\":1,\"160\":1,\"166\":2,\"176\":3,\"194\":1,\"200\":1,\"207\":1,\"224\":1}}],[\"required\",{\"1\":{\"6\":1,\"44\":1,\"89\":1,\"124\":1,\"147\":3,\"150\":1,\"159\":2,\"185\":1,\"188\":1,\"190\":1,\"234\":1,\"237\":1}}],[\"requestor\",{\"1\":{\"186\":1}}],[\"requested\",{\"1\":{\"177\":1}}],[\"requests\",{\"1\":{\"7\":2,\"20\":1,\"21\":1,\"22\":2,\"23\":2,\"31\":1,\"169\":1,\"250\":1}}],[\"request\",{\"1\":{\"4\":2,\"6\":2,\"19\":1,\"21\":1,\"22\":3,\"23\":2,\"33\":1,\"34\":1,\"35\":4,\"170\":1,\"171\":7,\"186\":1}}],[\"reprocess\",{\"1\":{\"87\":1}}],[\"repro\",{\"1\":{\"35\":1}}],[\"reprogrammed\",{\"1\":{\"29\":2}}],[\"represented\",{\"1\":{\"58\":2,\"59\":1}}],[\"represents\",{\"1\":{\"14\":1,\"58\":7,\"63\":1,\"74\":1,\"92\":2,\"129\":1}}],[\"representation\",{\"1\":{\"10\":4,\"15\":3,\"61\":1,\"105\":1}}],[\"representational\",{\"1\":{\"7\":1}}],[\"representing\",{\"1\":{\"9\":1,\"10\":1,\"15\":1,\"58\":1,\"60\":1,\"72\":2,\"150\":1,\"153\":1,\"187\":2}}],[\"represent\",{\"1\":{\"9\":1,\"52\":1,\"58\":5,\"61\":5,\"85\":1,\"96\":1,\"168\":3,\"190\":1,\"218\":1,\"230\":4}}],[\"rep\",{\"1\":{\"25\":1}}],[\"repair\",{\"1\":{\"19\":1}}],[\"repertoire\",{\"1\":{\"14\":1}}],[\"repetition\",{\"1\":{\"10\":2}}],[\"repeating\",{\"1\":{\"177\":1}}],[\"repeatedly\",{\"1\":{\"51\":1}}],[\"repeated\",{\"1\":{\"10\":1,\"16\":1,\"92\":3}}],[\"repeat\",{\"1\":{\"5\":1,\"48\":1,\"135\":1}}],[\"reply\",{\"1\":{\"21\":1}}],[\"replica\",{\"1\":{\"19\":1}}],[\"replicates\",{\"1\":{\"21\":1}}],[\"replicated\",{\"1\":{\"17\":1,\"21\":1}}],[\"replication\",{\"1\":{\"11\":1,\"17\":1}}],[\"repl\",{\"1\":{\"9\":2}}],[\"replacing\",{\"1\":{\"34\":1,\"35\":1,\"197\":1}}],[\"replace\",{\"1\":{\"16\":1,\"21\":2,\"33\":1,\"43\":1,\"82\":5,\"124\":1,\"222\":1}}],[\"replaces\",{\"1\":{\"16\":1,\"31\":1}}],[\"replaced\",{\"1\":{\"4\":2,\"15\":1,\"21\":4,\"29\":1,\"30\":2,\"122\":1,\"188\":1}}],[\"replaying\",{\"1\":{\"4\":1}}],[\"repository\",{\"1\":{\"9\":1,\"17\":1,\"97\":1}}],[\"repositories\",{\"1\":{\"9\":1,\"43\":2}}],[\"reporterror\",{\"1\":{\"66\":4}}],[\"report\",{\"1\":{\"8\":1,\"25\":1,\"31\":1,\"33\":1,\"66\":2,\"96\":1}}],[\"reports\",{\"1\":{\"8\":1,\"17\":1,\"33\":1,\"36\":1,\"96\":1}}],[\"reporting\",{\"1\":{\"6\":1,\"8\":1,\"22\":2,\"31\":1,\"63\":1}}],[\"resumes\",{\"1\":{\"240\":1}}],[\"resulting\",{\"1\":{\"82\":1,\"186\":1,\"229\":1}}],[\"results\",{\"1\":{\"6\":1,\"9\":2,\"10\":1,\"35\":1,\"36\":1,\"84\":1}}],[\"result\",{\"1\":{\"5\":1,\"9\":2,\"17\":1,\"60\":1,\"77\":1,\"78\":7,\"105\":1,\"109\":1,\"124\":4,\"139\":1,\"162\":1,\"168\":4,\"170\":1,\"177\":8,\"180\":5,\"181\":2,\"182\":2,\"187\":1,\"190\":1,\"197\":2,\"206\":1,\"209\":1,\"212\":1,\"213\":2,\"214\":1,\"218\":1,\"220\":11,\"230\":1,\"235\":7,\"237\":1,\"248\":1}}],[\"respectively\",{\"1\":{\"82\":1,\"95\":1,\"98\":1,\"110\":1,\"124\":1,\"201\":1,\"208\":1,\"210\":2,\"211\":1}}],[\"respective\",{\"1\":{\"77\":1,\"143\":1,\"237\":2}}],[\"responsible\",{\"1\":{\"21\":1,\"36\":1,\"46\":1,\"57\":2,\"64\":1,\"77\":3,\"112\":1,\"177\":1,\"221\":1,\"239\":1,\"247\":3,\"248\":1}}],[\"responsibilities\",{\"1\":{\"5\":1}}],[\"responsibility\",{\"1\":{\"4\":1,\"5\":1,\"21\":1,\"74\":1}}],[\"responsiveness\",{\"1\":{\"20\":1}}],[\"response\",{\"1\":{\"11\":2,\"20\":2,\"21\":1,\"35\":1}}],[\"responses\",{\"1\":{\"5\":1,\"15\":1,\"16\":1,\"18\":1}}],[\"resilience\",{\"1\":{\"24\":1}}],[\"resilient\",{\"1\":{\"17\":1}}],[\"resistant\",{\"1\":{\"22\":1}}],[\"residential\",{\"1\":{\"21\":1}}],[\"resident\",{\"1\":{\"11\":2}}],[\"resizable\",{\"1\":{\"9\":1}}],[\"resets\",{\"1\":{\"35\":1,\"110\":1}}],[\"reset\",{\"1\":{\"33\":1,\"110\":1,\"138\":1}}],[\"reserves\",{\"1\":{\"189\":1,\"192\":1}}],[\"reserved3\",{\"1\":{\"202\":1,\"248\":1}}],[\"reserved2\",{\"1\":{\"202\":2,\"248\":1}}],[\"reserved0\",{\"1\":{\"202\":1,\"249\":1}}],[\"reserved1\",{\"1\":{\"175\":1,\"202\":2,\"248\":1,\"249\":1}}],[\"reservedregions\",{\"1\":{\"168\":2,\"169\":2,\"171\":1,\"182\":1}}],[\"reserved\",{\"1\":{\"103\":1,\"138\":1,\"147\":1,\"151\":2,\"162\":2,\"165\":8,\"168\":1,\"169\":2,\"171\":7,\"190\":2,\"192\":4,\"197\":2,\"201\":6,\"241\":1}}],[\"reserve\",{\"1\":{\"21\":1}}],[\"reservation\",{\"1\":{\"11\":2,\"21\":1}}],[\"reservations\",{\"1\":{\"11\":2,\"21\":1}}],[\"research\",{\"1\":{\"6\":1,\"8\":1,\"11\":4,\"21\":6,\"36\":5}}],[\"resolving\",{\"1\":{\"72\":1,\"80\":1}}],[\"resolves\",{\"1\":{\"80\":2}}],[\"resolvestate\",{\"1\":{\"77\":1,\"78\":3,\"79\":2}}],[\"resolved\",{\"1\":{\"72\":1,\"75\":2,\"77\":1,\"225\":1}}],[\"resolve\",{\"1\":{\"11\":1,\"24\":1,\"72\":4,\"74\":3,\"76\":3,\"77\":3,\"78\":4,\"80\":1,\"225\":1,\"227\":1}}],[\"resolutions\",{\"1\":{\"32\":2}}],[\"resolution\",{\"0\":{\"76\":1,\"80\":1},\"1\":{\"13\":1,\"21\":4,\"32\":6,\"33\":2,\"75\":1,\"77\":2,\"78\":1,\"79\":1,\"80\":1,\"81\":1}}],[\"resource\",{\"1\":{\"7\":5,\"9\":2,\"11\":1,\"15\":1,\"21\":1,\"22\":4,\"116\":1}}],[\"resources\",{\"1\":{\"6\":1,\"7\":3,\"11\":2,\"13\":1,\"16\":1,\"21\":3,\"22\":1,\"24\":1,\"44\":2,\"47\":1,\"48\":1,\"64\":1,\"116\":3,\"158\":1}}],[\"restricted\",{\"1\":{\"207\":1}}],[\"restricting\",{\"1\":{\"194\":1}}],[\"restrictions\",{\"1\":{\"37\":1,\"68\":1}}],[\"restricts\",{\"1\":{\"22\":1}}],[\"restructuredtext\",{\"1\":{\"12\":1}}],[\"restoring\",{\"1\":{\"211\":1}}],[\"restored\",{\"1\":{\"210\":1}}],[\"restoretpl\",{\"1\":{\"151\":1}}],[\"restore\",{\"1\":{\"19\":4,\"51\":1,\"186\":1,\"210\":1,\"211\":3,\"240\":2}}],[\"restores\",{\"1\":{\"11\":1,\"146\":1,\"208\":1}}],[\"restorations\",{\"1\":{\"11\":1}}],[\"rest\",{\"1\":{\"4\":1,\"7\":1,\"9\":2,\"22\":1,\"35\":2,\"95\":1,\"124\":1,\"188\":1}}],[\"reaping\",{\"1\":{\"90\":1}}],[\"realloc\",{\"1\":{\"124\":2}}],[\"really\",{\"1\":{\"15\":1,\"200\":1}}],[\"real\",{\"1\":{\"11\":16,\"20\":2,\"21\":3,\"33\":1,\"35\":2,\"76\":1}}],[\"reached\",{\"1\":{\"77\":1,\"80\":1}}],[\"reaches\",{\"1\":{\"6\":1,\"96\":2}}],[\"reach\",{\"1\":{\"21\":1,\"87\":1,\"96\":1}}],[\"reaching\",{\"1\":{\"10\":1}}],[\"reactive\",{\"1\":{\"5\":1}}],[\"react\",{\"1\":{\"4\":1,\"7\":3}}],[\"reasons\",{\"1\":{\"96\":1}}],[\"reasoning\",{\"1\":{\"18\":4}}],[\"reason\",{\"1\":{\"5\":1,\"86\":1,\"88\":1,\"89\":1,\"107\":1,\"116\":1,\"147\":2,\"148\":1,\"181\":1,\"183\":1,\"206\":1,\"227\":1,\"247\":1}}],[\"readregister\",{\"1\":{\"248\":1}}],[\"readmsr\",{\"1\":{\"209\":2,\"248\":1}}],[\"readme\",{\"1\":{\"12\":1}}],[\"readonly=on\",{\"1\":{\"135\":1,\"136\":1,\"143\":1,\"148\":1,\"196\":1}}],[\"readthedocs\",{\"1\":{\"12\":1}}],[\"readex\",{\"1\":{\"153\":1}}],[\"reader\",{\"0\":{\"235\":1},\"1\":{\"13\":1,\"15\":1,\"151\":1,\"235\":2}}],[\"readers\",{\"1\":{\"11\":1,\"17\":1,\"21\":1}}],[\"readelf\",{\"1\":{\"10\":1,\"11\":1,\"147\":2,\"226\":2,\"228\":2,\"229\":3,\"234\":2}}],[\"reading\",{\"1\":{\"10\":1,\"30\":1,\"150\":2,\"157\":1,\"162\":1,\"185\":1,\"197\":1,\"209\":1}}],[\"readytasks\",{\"1\":{\"239\":5}}],[\"ready\",{\"1\":{\"6\":1,\"13\":1,\"35\":1,\"49\":1,\"107\":1,\"151\":1,\"152\":1,\"153\":1,\"154\":1,\"159\":1,\"160\":1,\"163\":1,\"169\":1,\"188\":1,\"191\":1,\"200\":1,\"204\":1,\"206\":1,\"237\":1,\"238\":1,\"239\":6,\"249\":1}}],[\"readable\",{\"1\":{\"5\":1,\"12\":1,\"15\":2,\"177\":1,\"185\":3,\"187\":1,\"235\":1,\"246\":1}}],[\"read\",{\"0\":{\"157\":1},\"1\":{\"4\":2,\"9\":4,\"11\":1,\"13\":1,\"17\":2,\"20\":1,\"21\":1,\"22\":1,\"29\":4,\"31\":2,\"35\":4,\"90\":1,\"147\":2,\"150\":1,\"153\":1,\"154\":1,\"155\":1,\"157\":8,\"185\":1,\"197\":2,\"209\":1,\"226\":1,\"228\":4,\"232\":2,\"234\":1,\"235\":3,\"236\":1,\"237\":1,\"248\":3}}],[\"reads\",{\"1\":{\"4\":1,\"11\":2,\"17\":1,\"32\":1,\"33\":1,\"35\":1,\"57\":2}}],[\"vhsic\",{\"1\":{\"33\":1}}],[\"vhdl\",{\"1\":{\"33\":2}}],[\"vga\",{\"1\":{\"32\":3,\"147\":1}}],[\"vt\",{\"1\":{\"28\":2}}],[\"v9\",{\"1\":{\"25\":1}}],[\"v8\",{\"1\":{\"25\":1}}],[\"v7\",{\"1\":{\"25\":1}}],[\"v=spf1\",{\"1\":{\"22\":1}}],[\"v=dmarc1\",{\"1\":{\"22\":1}}],[\"v2p\",{\"1\":{\"177\":4}}],[\"v2\",{\"1\":{\"21\":1,\"35\":1,\"133\":1,\"227\":1}}],[\"v2c\",{\"1\":{\"21\":1}}],[\"vdsl\",{\"1\":{\"21\":2}}],[\"vdso\",{\"1\":{\"11\":2}}],[\"vlb\",{\"1\":{\"30\":2}}],[\"vlan\",{\"1\":{\"21\":2}}],[\"vlm\",{\"1\":{\"18\":1}}],[\"v3\",{\"1\":{\"21\":3,\"27\":1}}],[\"vc\",{\"1\":{\"21\":1}}],[\"vcs\",{\"1\":{\"6\":2,\"24\":1}}],[\"vpn\",{\"1\":{\"21\":4,\"24\":2}}],[\"vpns\",{\"1\":{\"21\":2}}],[\"vpc\",{\"1\":{\"21\":1,\"24\":1}}],[\"vr\",{\"1\":{\"20\":1}}],[\"vram\",{\"1\":{\"9\":1,\"32\":1}}],[\"vqa\",{\"1\":{\"18\":1}}],[\"voluntarily\",{\"1\":{\"238\":1}}],[\"volume\",{\"1\":{\"11\":2,\"17\":1}}],[\"volumes\",{\"1\":{\"11\":1,\"16\":1,\"24\":1}}],[\"voltage\",{\"1\":{\"29\":1}}],[\"volatile\",{\"1\":{\"29\":6,\"31\":1}}],[\"voilà\",{\"1\":{\"228\":1}}],[\"void\",{\"1\":{\"51\":3,\"124\":2,\"127\":3,\"130\":1,\"131\":1,\"133\":1}}],[\"voice\",{\"1\":{\"21\":4}}],[\"voip\",{\"1\":{\"21\":1}}],[\"vocabulary\",{\"1\":{\"15\":1}}],[\"v5\",{\"1\":{\"14\":1}}],[\"v4\",{\"1\":{\"14\":1,\"27\":1}}],[\"vfat\",{\"1\":{\"11\":1}}],[\"vfs\",{\"1\":{\"11\":3}}],[\"vxworks\",{\"1\":{\"11\":1}}],[\"v\",{\"1\":{\"10\":6,\"11\":4,\"21\":2,\"24\":2,\"25\":6,\"28\":1,\"34\":1,\"118\":1,\"147\":2,\"164\":4,\"234\":1,\"235\":1}}],[\"vulnerability\",{\"1\":{\"22\":1}}],[\"vulnerabilities\",{\"1\":{\"22\":1}}],[\"vulkan\",{\"1\":{\"10\":5}}],[\"vue\",{\"1\":{\"7\":1}}],[\"vmregionflag\",{\"1\":{\"237\":2}}],[\"vmregionflags\",{\"1\":{\"237\":3}}],[\"vmregions\",{\"1\":{\"237\":12}}],[\"vmregion\",{\"1\":{\"218\":5,\"237\":7}}],[\"vmresume\",{\"1\":{\"28\":1}}],[\"vminit\",{\"1\":{\"177\":2,\"181\":1,\"182\":1,\"183\":1,\"219\":2}}],[\"vmmap\",{\"1\":{\"237\":1}}],[\"vmm\",{\"0\":{\"182\":1},\"1\":{\"172\":1,\"177\":9,\"181\":3,\"182\":2,\"217\":1,\"218\":3,\"219\":1,\"231\":2,\"237\":2,\"240\":1,\"248\":2}}],[\"vmaddregion\",{\"1\":{\"218\":1,\"219\":2}}],[\"vmaddressspace\",{\"1\":{\"218\":7,\"219\":2,\"220\":2}}],[\"vmalloc\",{\"1\":{\"218\":2,\"220\":2,\"231\":1,\"237\":1,\"248\":1}}],[\"vma\",{\"1\":{\"147\":5,\"179\":1,\"196\":1,\"227\":1,\"228\":2}}],[\"vmebus\",{\"1\":{\"30\":1}}],[\"vme\",{\"1\":{\"30\":2}}],[\"vmware\",{\"1\":{\"28\":1}}],[\"vmcs\",{\"1\":{\"28\":1}}],[\"vmlaunch\",{\"1\":{\"28\":1}}],[\"vmxoff\",{\"1\":{\"28\":1}}],[\"vmxon\",{\"1\":{\"28\":1}}],[\"vmx\",{\"1\":{\"28\":3}}],[\"vms\",{\"1\":{\"9\":1,\"11\":4,\"21\":1,\"24\":3,\"25\":1}}],[\"vm\",{\"1\":{\"9\":2,\"11\":10,\"24\":1,\"183\":2,\"188\":1,\"218\":2,\"219\":1,\"220\":1,\"231\":2,\"237\":3}}],[\"vb6\",{\"1\":{\"8\":1}}],[\"vbe\",{\"1\":{\"8\":1,\"9\":2}}],[\"vba\",{\"1\":{\"8\":2,\"9\":1}}],[\"vb\",{\"1\":{\"8\":4,\"10\":1,\"17\":3}}],[\"vbscript\",{\"1\":{\"7\":1}}],[\"v1\",{\"1\":{\"6\":1,\"21\":1}}],[\"ve\",{\"1\":{\"40\":3,\"48\":1,\"72\":1,\"80\":2,\"92\":1,\"96\":1,\"110\":2,\"147\":2,\"174\":1,\"192\":1,\"223\":1,\"231\":1}}],[\"vendor>\",{\"1\":{\"44\":1}}],[\"vendor\",{\"1\":{\"33\":1,\"123\":1,\"151\":1}}],[\"vesa\",{\"1\":{\"30\":1,\"32\":2}}],[\"velsky\",{\"1\":{\"9\":1}}],[\"velocity\",{\"1\":{\"4\":1,\"5\":1}}],[\"verbatim\",{\"1\":{\"53\":1}}],[\"verbose\",{\"1\":{\"8\":1,\"12\":1}}],[\"verify\",{\"1\":{\"21\":1,\"22\":2,\"45\":1,\"88\":1,\"163\":1,\"230\":1}}],[\"verified\",{\"1\":{\"11\":1}}],[\"verification\",{\"1\":{\"9\":1,\"22\":1}}],[\"very\",{\"1\":{\"16\":1,\"21\":1,\"29\":1,\"59\":1,\"63\":1,\"76\":1,\"92\":1,\"94\":1,\"96\":1,\"116\":1,\"170\":1,\"196\":2,\"200\":1,\"227\":1,\"238\":1}}],[\"ver\",{\"1\":{\"11\":1}}],[\"versa\",{\"1\":{\"21\":1,\"30\":1,\"75\":1,\"168\":1,\"177\":1}}],[\"versus\",{\"1\":{\"11\":1,\"29\":1}}],[\"version=4\",{\"1\":{\"124\":1}}],[\"version>\",{\"1\":{\"44\":1}}],[\"versioning\",{\"1\":{\"11\":1}}],[\"versions\",{\"1\":{\"6\":1,\"17\":2,\"21\":1,\"22\":1}}],[\"version\",{\"1\":{\"6\":3,\"7\":1,\"11\":4,\"15\":1,\"17\":1,\"21\":1,\"25\":1,\"34\":1,\"41\":1,\"43\":6,\"44\":1,\"55\":3,\"73\":1,\"103\":1,\"118\":2,\"119\":3,\"120\":2,\"139\":1,\"147\":7,\"226\":1,\"234\":4,\"235\":4,\"248\":1}}],[\"vertex\",{\"1\":{\"10\":1}}],[\"vertices\",{\"1\":{\"9\":1}}],[\"vectors\",{\"1\":{\"11\":1}}],[\"vector\",{\"1\":{\"5\":1,\"8\":1,\"11\":1,\"13\":3,\"18\":1,\"21\":1,\"26\":1,\"27\":2,\"28\":4,\"190\":6,\"191\":1,\"192\":3,\"206\":2,\"248\":2,\"249\":11}}],[\"vectorization\",{\"1\":{\"5\":1}}],[\"vsam\",{\"1\":{\"11\":1,\"17\":1}}],[\"vs\",{\"1\":{\"5\":1,\"6\":1,\"9\":4,\"11\":1,\"12\":1,\"14\":1,\"17\":1,\"20\":1,\"21\":1,\"35\":1,\"40\":1}}],[\"vaddr\",{\"1\":{\"235\":3,\"237\":4}}],[\"vacuum\",{\"1\":{\"17\":1,\"32\":1}}],[\"vax\",{\"1\":{\"11\":5,\"21\":1,\"24\":2,\"25\":3}}],[\"vaxeln\",{\"1\":{\"11\":2}}],[\"va\",{\"1\":{\"11\":1,\"24\":1,\"32\":1}}],[\"varargs\",{\"1\":{\"144\":2}}],[\"vars\",{\"1\":{\"97\":1,\"134\":3,\"135\":1,\"136\":1,\"140\":1,\"143\":1,\"148\":1,\"196\":1}}],[\"varsection\",{\"1\":{\"91\":2,\"92\":4,\"97\":2}}],[\"vary\",{\"1\":{\"25\":1,\"35\":1}}],[\"varying\",{\"1\":{\"5\":1,\"9\":1}}],[\"varies\",{\"1\":{\"20\":1}}],[\"variety\",{\"1\":{\"17\":1}}],[\"various\",{\"1\":{\"13\":1,\"39\":1,\"56\":1,\"59\":1,\"71\":1,\"138\":1,\"151\":1,\"235\":1}}],[\"variant\",{\"1\":{\"35\":1,\"187\":1}}],[\"variants\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"16\":2,\"25\":1,\"29\":1,\"31\":1,\"35\":1,\"37\":1}}],[\"variableinplacerenamehandler\",{\"1\":{\"83\":1}}],[\"variables\",{\"1\":{\"10\":1,\"29\":2,\"53\":1,\"83\":3,\"90\":2,\"100\":1,\"124\":1,\"129\":1,\"134\":1,\"135\":1,\"146\":2,\"168\":1,\"211\":1,\"216\":1,\"225\":2}}],[\"variable\",{\"1\":{\"9\":1,\"10\":2,\"11\":2,\"14\":1,\"25\":1,\"82\":3,\"83\":1,\"84\":5,\"89\":1,\"91\":1,\"92\":1,\"96\":1,\"97\":1,\"110\":1,\"124\":1,\"129\":1,\"135\":1,\"140\":2,\"168\":1,\"175\":1,\"217\":1,\"219\":1,\"222\":1,\"223\":3,\"227\":4,\"239\":2}}],[\"var\",{\"0\":{\"91\":1},\"1\":{\"11\":1,\"63\":2,\"66\":3,\"74\":1,\"78\":1,\"79\":1,\"91\":8,\"92\":2,\"97\":2,\"101\":1,\"106\":2,\"110\":1,\"124\":1,\"129\":1,\"131\":1,\"140\":1,\"151\":2,\"152\":1,\"153\":1,\"154\":3,\"156\":1,\"159\":5,\"162\":2,\"165\":1,\"168\":3,\"169\":4,\"170\":2,\"171\":4,\"175\":4,\"177\":11,\"180\":2,\"181\":2,\"182\":1,\"183\":1,\"190\":1,\"193\":1,\"197\":5,\"198\":2,\"202\":1,\"205\":2,\"209\":2,\"211\":1,\"213\":1,\"217\":1,\"218\":3,\"219\":1,\"220\":4,\"221\":1,\"222\":1,\"223\":4,\"230\":3,\"231\":1,\"237\":3,\"239\":2,\"240\":2,\"242\":1,\"243\":2,\"248\":1}}],[\"vanilla\",{\"1\":{\"7\":1,\"226\":1}}],[\"val\",{\"1\":{\"47\":1,\"61\":4,\"74\":1,\"77\":1,\"78\":2,\"79\":3,\"82\":4,\"95\":1,\"99\":2,\"101\":3}}],[\"valid\",{\"1\":{\"22\":1,\"29\":1,\"57\":1,\"99\":1,\"185\":1,\"187\":1,\"199\":1,\"214\":1,\"227\":1,\"230\":1,\"235\":1}}],[\"validating\",{\"1\":{\"169\":1}}],[\"validation\",{\"0\":{\"214\":1},\"1\":{\"5\":1,\"6\":1,\"87\":3,\"101\":1,\"214\":1}}],[\"validators\",{\"1\":{\"24\":1}}],[\"validated\",{\"1\":{\"24\":1,\"214\":1}}],[\"validate\",{\"1\":{\"6\":2,\"9\":1,\"12\":2,\"22\":1,\"87\":1,\"171\":1,\"214\":1,\"235\":1,\"237\":1}}],[\"value\",{\"1\":{\"6\":1,\"9\":5,\"10\":6,\"13\":1,\"16\":1,\"20\":1,\"21\":1,\"84\":1,\"97\":1,\"101\":1,\"102\":2,\"130\":1,\"135\":3,\"141\":1,\"162\":1,\"174\":1,\"185\":1,\"186\":1,\"187\":7,\"194\":1,\"195\":1,\"197\":4,\"202\":4,\"208\":1,\"209\":4,\"210\":4,\"212\":4,\"214\":1,\"227\":2,\"228\":2,\"229\":1,\"230\":10,\"248\":3}}],[\"values\",{\"1\":{\"5\":1,\"10\":1,\"15\":2,\"17\":2,\"162\":1,\"177\":1,\"185\":1,\"187\":2,\"197\":2,\"199\":1,\"208\":1,\"212\":1,\"229\":1,\"230\":1,\"234\":1}}],[\"vivado\",{\"1\":{\"33\":1}}],[\"virtmemorymap\",{\"1\":{\"180\":6,\"181\":2,\"197\":2}}],[\"virtaddr\",{\"1\":{\"147\":2,\"177\":21,\"181\":3,\"198\":4,\"204\":1,\"218\":12,\"219\":6,\"220\":3,\"222\":2,\"223\":2,\"230\":3,\"234\":3,\"237\":3,\"248\":1}}],[\"virt\",{\"1\":{\"24\":1,\"177\":5}}],[\"virtualmemorymap\",{\"1\":{\"180\":3,\"183\":1,\"197\":1}}],[\"virtualstart\",{\"1\":{\"159\":1}}],[\"virtualalloc\",{\"1\":{\"124\":1}}],[\"virtual→physical\",{\"1\":{\"26\":1}}],[\"virtualizer\",{\"1\":{\"24\":1}}],[\"virtualization\",{\"1\":{\"11\":4,\"24\":4,\"28\":2,\"192\":2}}],[\"virtual\",{\"0\":{\"172\":1,\"173\":1,\"231\":1},\"1\":{\"9\":3,\"10\":1,\"11\":14,\"17\":1,\"21\":3,\"24\":6,\"25\":1,\"26\":1,\"28\":1,\"31\":1,\"35\":1,\"116\":2,\"134\":1,\"135\":4,\"166\":3,\"171\":1,\"172\":7,\"173\":4,\"174\":5,\"176\":6,\"177\":7,\"179\":2,\"180\":5,\"182\":6,\"183\":5,\"188\":1,\"195\":1,\"196\":1,\"198\":1,\"199\":1,\"217\":2,\"218\":4,\"219\":1,\"223\":5,\"224\":1,\"231\":4,\"234\":1,\"235\":2,\"237\":4,\"248\":4,\"252\":1}}],[\"violation\",{\"1\":{\"192\":1}}],[\"violations\",{\"1\":{\"22\":1}}],[\"vios\",{\"1\":{\"11\":1}}],[\"victim\",{\"1\":{\"22\":1}}],[\"vice\",{\"1\":{\"21\":1,\"75\":1,\"168\":1,\"177\":1}}],[\"vitals\",{\"1\":{\"20\":4}}],[\"video\",{\"0\":{\"32\":1},\"1\":{\"11\":1,\"13\":2,\"20\":1,\"21\":3,\"27\":1,\"30\":2,\"32\":8,\"33\":1}}],[\"vintage\",{\"1\":{\"11\":1,\"24\":1}}],[\"vista\",{\"1\":{\"11\":1}}],[\"visited\",{\"1\":{\"79\":1}}],[\"visitor=\",{\"1\":{\"70\":1}}],[\"visitor\",{\"1\":{\"69\":3,\"70\":1}}],[\"visits\",{\"1\":{\"9\":1}}],[\"visible\",{\"1\":{\"30\":1,\"88\":1}}],[\"visibility\",{\"1\":{\"7\":1,\"9\":2,\"17\":1}}],[\"vision\",{\"1\":{\"18\":2}}],[\"visually\",{\"1\":{\"179\":1}}],[\"visuals\",{\"1\":{\"151\":1}}],[\"visualize\",{\"1\":{\"5\":1}}],[\"visual\",{\"1\":{\"4\":1,\"6\":1,\"8\":3,\"9\":4,\"17\":2,\"20\":1}}],[\"viewprovider\",{\"1\":{\"61\":2,\"64\":2,\"79\":2}}],[\"viewer\",{\"1\":{\"13\":1,\"22\":1,\"41\":1,\"60\":1,\"64\":1,\"65\":1}}],[\"viewers\",{\"1\":{\"13\":1}}],[\"viewed\",{\"1\":{\"13\":1}}],[\"viewmodel\",{\"1\":{\"5\":2}}],[\"views\",{\"1\":{\"5\":1,\"7\":1}}],[\"view\",{\"1\":{\"5\":2,\"13\":1,\"54\":2,\"57\":1,\"59\":1,\"65\":1,\"97\":1}}],[\"viable\",{\"1\":{\"6\":1}}],[\"via\",{\"1\":{\"4\":5,\"5\":2,\"6\":1,\"7\":5,\"9\":6,\"10\":4,\"11\":12,\"12\":1,\"13\":2,\"15\":2,\"16\":1,\"17\":3,\"18\":4,\"19\":1,\"21\":23,\"22\":3,\"24\":4,\"29\":2,\"30\":4,\"32\":1,\"33\":1,\"34\":2,\"35\":1}}],[\"kzk2hr9c7xdat5d89bt8rgra\",{\"1\":{\"228\":1}}],[\"kpml4\",{\"1\":{\"198\":2,\"204\":1,\"220\":2,\"237\":3,\"248\":1}}],[\"kpi\",{\"1\":{\"6\":1}}],[\"kbyte\",{\"1\":{\"248\":1}}],[\"kb\",{\"1\":{\"165\":2,\"169\":4,\"170\":14,\"171\":8,\"183\":6,\"188\":3}}],[\"kt\",{\"1\":{\"47\":3,\"61\":4,\"63\":1,\"64\":1,\"66\":1,\"71\":8,\"74\":2,\"77\":1,\"78\":2,\"82\":3,\"83\":1,\"95\":2,\"99\":1,\"106\":1}}],[\"kts\",{\"1\":{\"43\":2,\"54\":2,\"55\":1,\"71\":1}}],[\"kmip\",{\"1\":{\"36\":1}}],[\"kms\",{\"1\":{\"22\":2,\"24\":2}}],[\"konami\",{\"1\":{\"25\":1}}],[\"kotlin\",{\"1\":{\"9\":1,\"10\":1,\"41\":3,\"43\":2,\"47\":3,\"53\":1,\"54\":1,\"55\":2,\"61\":4,\"62\":1,\"63\":1,\"64\":1,\"66\":1,\"69\":1,\"71\":4,\"73\":1,\"74\":2,\"75\":2,\"77\":1,\"78\":2,\"82\":3,\"83\":1,\"87\":2,\"88\":2,\"89\":4,\"90\":1,\"95\":3,\"99\":2,\"100\":1,\"104\":1,\"106\":1}}],[\"kvms\",{\"1\":{\"30\":1}}],[\"kvm\",{\"1\":{\"24\":5,\"27\":1,\"28\":1,\"33\":2}}],[\"kubernetes\",{\"1\":{\"24\":1,\"36\":1}}],[\"kubectl\",{\"1\":{\"9\":1,\"24\":1}}],[\"k8s\",{\"1\":{\"24\":1}}],[\"kspace\",{\"1\":{\"219\":5,\"220\":1,\"230\":1,\"248\":1}}],[\"kstack\",{\"1\":{\"217\":1,\"218\":1,\"220\":10,\"221\":1,\"222\":1,\"240\":1}}],[\"ksk\",{\"1\":{\"24\":1}}],[\"ksds\",{\"1\":{\"17\":1}}],[\"knuth\",{\"1\":{\"12\":1}}],[\"know\",{\"1\":{\"35\":4,\"78\":1,\"89\":1,\"112\":1,\"124\":3,\"147\":1,\"159\":1,\"160\":1,\"177\":1,\"181\":1,\"182\":1,\"183\":1,\"193\":1,\"200\":1,\"225\":1,\"227\":1,\"229\":1,\"230\":1}}],[\"knows\",{\"1\":{\"15\":1,\"72\":1,\"197\":1,\"239\":1}}],[\"known\",{\"1\":{\"8\":3,\"9\":1,\"10\":1,\"11\":2,\"13\":1,\"21\":2,\"22\":1,\"25\":1,\"30\":1,\"176\":2,\"201\":1,\"227\":1}}],[\"knowledge\",{\"1\":{\"5\":1,\"15\":5,\"18\":1,\"35\":1}}],[\"kl\",{\"1\":{\"11\":1}}],[\"kwin\",{\"1\":{\"11\":1}}],[\"kde\",{\"1\":{\"11\":4}}],[\"khronos\",{\"1\":{\"10\":1}}],[\"khaledhammouda\",{\"1\":{\"171\":3,\"192\":3,\"193\":6,\"205\":9,\"206\":3}}],[\"khaledh\",{\"1\":{\"1\":1,\"47\":6,\"48\":1,\"53\":2,\"54\":2,\"55\":2,\"61\":4,\"62\":2,\"63\":1,\"64\":2,\"66\":1,\"70\":6,\"71\":6,\"73\":2,\"74\":4,\"75\":1,\"77\":1,\"78\":2,\"82\":3,\"83\":2,\"87\":2,\"88\":2,\"89\":4,\"90\":1,\"95\":3,\"99\":1,\"100\":1,\"104\":1,\"106\":2,\"116\":1,\"171\":3,\"192\":3,\"193\":6,\"205\":9,\"206\":3,\"250\":3}}],[\"khaled\",{\"0\":{\"0\":1},\"1\":{\"124\":22}}],[\"kruskal\",{\"1\":{\"9\":1}}],[\"krs\",{\"1\":{\"6\":1}}],[\"kib\",{\"1\":{\"147\":1,\"148\":1,\"156\":1,\"162\":1,\"165\":2,\"169\":2,\"170\":7,\"171\":4,\"174\":1,\"175\":1,\"181\":1,\"183\":2,\"185\":1,\"188\":1}}],[\"kind\",{\"1\":{\"92\":1,\"187\":1,\"189\":1}}],[\"kinds\",{\"1\":{\"86\":1,\"91\":1,\"97\":1,\"104\":1}}],[\"kilobytes\",{\"1\":{\"17\":1}}],[\"killer\",{\"1\":{\"9\":1}}],[\"ki\",{\"1\":{\"11\":1}}],[\"kit\",{\"0\":{\"67\":1},\"1\":{\"9\":2,\"11\":1,\"41\":2,\"42\":1,\"51\":1,\"54\":1,\"55\":1,\"56\":1,\"59\":1,\"66\":1,\"67\":1,\"69\":5,\"70\":2,\"71\":2,\"74\":5,\"75\":2,\"85\":2,\"92\":1,\"105\":2,\"106\":2,\"109\":1}}],[\"kiss\",{\"1\":{\"5\":1}}],[\"ka\",{\"1\":{\"11\":1}}],[\"kanban\",{\"1\":{\"6\":1}}],[\"kafka\",{\"1\":{\"4\":3,\"17\":2,\"36\":1}}],[\"keccak\",{\"1\":{\"22\":1}}],[\"kept\",{\"1\":{\"14\":1}}],[\"kernelvirtualbase\",{\"1\":{\"180\":4,\"181\":3}}],[\"kerneldata\",{\"1\":{\"162\":2,\"165\":1,\"180\":2,\"183\":2,\"188\":2,\"197\":2}}],[\"kernelcodesegmentselector\",{\"1\":{\"187\":1,\"190\":1,\"202\":1,\"209\":5}}],[\"kernelcode\",{\"1\":{\"162\":2,\"165\":1,\"180\":1,\"183\":1,\"188\":1,\"197\":2}}],[\"kernelentrypoint\",{\"1\":{\"161\":3,\"163\":3,\"164\":1}}],[\"kernelimagevirtualbase\",{\"1\":{\"219\":1}}],[\"kernelimagepages\",{\"1\":{\"156\":2,\"180\":5,\"181\":6,\"197\":3,\"219\":1}}],[\"kernelimagebase\",{\"1\":{\"156\":2,\"157\":1,\"161\":1,\"163\":1,\"181\":3,\"197\":1}}],[\"kernelinfosize\",{\"1\":{\"154\":2}}],[\"kernelinfo\",{\"1\":{\"154\":3,\"156\":1,\"157\":1}}],[\"kernelphysicalbase\",{\"1\":{\"156\":2,\"180\":2,\"197\":1}}],[\"kernelpath\",{\"1\":{\"154\":3}}],[\"kernelfile\",{\"1\":{\"154\":4,\"157\":2,\"158\":2}}],[\"kernelmaininner\",{\"1\":{\"166\":6,\"169\":1,\"170\":1,\"171\":2,\"179\":4,\"182\":1,\"183\":1,\"188\":1,\"191\":1,\"192\":2,\"193\":3,\"197\":1,\"198\":1,\"199\":1,\"200\":1,\"205\":3,\"206\":1,\"209\":1,\"211\":1,\"221\":1,\"222\":1,\"223\":2,\"243\":1,\"249\":1}}],[\"kernelmain\",{\"1\":{\"145\":2,\"147\":16,\"148\":1,\"161\":5,\"163\":5,\"165\":1,\"166\":2,\"171\":1,\"179\":3,\"192\":1,\"193\":2,\"204\":1,\"205\":3,\"206\":1,\"219\":1,\"222\":1,\"230\":1,\"231\":2}}],[\"kernelspacemaxaddress\",{\"1\":{\"219\":2}}],[\"kernelspaceminaddress\",{\"1\":{\"219\":2}}],[\"kernelstackaddr\",{\"1\":{\"211\":2}}],[\"kernelstackvirtualbase\",{\"1\":{\"180\":3,\"181\":3,\"219\":1}}],[\"kernelstacktop\",{\"1\":{\"164\":1,\"181\":1}}],[\"kernelstack\",{\"1\":{\"162\":2,\"165\":1,\"180\":1,\"183\":1,\"188\":1,\"197\":2,\"211\":2,\"213\":1,\"215\":1}}],[\"kernelstackpages\",{\"1\":{\"156\":2,\"180\":2,\"181\":4,\"219\":1}}],[\"kernelstackbase\",{\"1\":{\"156\":2,\"164\":1,\"181\":3}}],[\"kernelstacksize\",{\"1\":{\"156\":2,\"164\":1,\"180\":3,\"181\":1}}],[\"kernels\",{\"1\":{\"11\":1,\"21\":1,\"25\":1}}],[\"kernel\",{\"0\":{\"142\":1,\"147\":1,\"149\":1,\"154\":1,\"155\":1,\"157\":1,\"161\":1,\"163\":1,\"178\":1,\"179\":1,\"204\":1,\"205\":1,\"219\":1},\"1\":{\"11\":14,\"21\":2,\"24\":3,\"27\":2,\"34\":1,\"116\":1,\"141\":3,\"142\":2,\"143\":15,\"144\":4,\"145\":3,\"146\":7,\"147\":50,\"148\":25,\"149\":2,\"150\":9,\"151\":3,\"154\":14,\"155\":3,\"156\":6,\"157\":4,\"158\":3,\"159\":1,\"160\":2,\"161\":9,\"162\":12,\"163\":8,\"164\":11,\"165\":6,\"166\":7,\"168\":4,\"169\":14,\"170\":40,\"171\":24,\"173\":3,\"174\":3,\"175\":1,\"177\":4,\"178\":5,\"179\":11,\"180\":2,\"181\":15,\"182\":12,\"183\":18,\"184\":1,\"185\":6,\"186\":12,\"187\":11,\"188\":20,\"189\":1,\"190\":6,\"191\":15,\"192\":17,\"193\":22,\"194\":5,\"195\":9,\"196\":7,\"197\":20,\"198\":14,\"199\":4,\"200\":12,\"201\":4,\"202\":7,\"203\":1,\"204\":6,\"205\":23,\"206\":6,\"207\":4,\"208\":6,\"209\":15,\"210\":4,\"211\":14,\"212\":6,\"213\":6,\"214\":6,\"215\":7,\"216\":2,\"217\":3,\"218\":6,\"219\":5,\"220\":9,\"221\":3,\"222\":13,\"223\":15,\"227\":6,\"229\":1,\"230\":16,\"231\":8,\"232\":2,\"234\":1,\"235\":2,\"237\":14,\"238\":3,\"239\":6,\"240\":2,\"241\":5,\"242\":2,\"243\":13,\"244\":1,\"245\":2,\"246\":2,\"248\":1,\"249\":2,\"251\":1,\"252\":2}}],[\"kernighan\",{\"1\":{\"8\":1}}],[\"kerberos\",{\"1\":{\"4\":1,\"22\":2}}],[\"keyword\",{\"1\":{\"68\":3,\"89\":1,\"91\":1,\"92\":1,\"103\":1,\"104\":2,\"241\":1}}],[\"keywords\",{\"1\":{\"52\":1}}],[\"keying\",{\"1\":{\"29\":1}}],[\"keyed\",{\"1\":{\"22\":1}}],[\"keys\",{\"1\":{\"9\":1,\"14\":2,\"17\":1,\"22\":7,\"33\":1}}],[\"keyboards\",{\"1\":{\"30\":1,\"33\":1}}],[\"keyboard\",{\"1\":{\"7\":1,\"11\":2,\"25\":1,\"30\":1,\"33\":3,\"34\":1,\"35\":3,\"253\":1}}],[\"key\",{\"1\":{\"6\":2,\"9\":2,\"13\":1,\"14\":1,\"17\":5,\"21\":3,\"22\":9,\"24\":3,\"147\":2,\"150\":2,\"160\":1,\"234\":1}}],[\"keepeol\",{\"1\":{\"141\":1}}],[\"keeping\",{\"1\":{\"17\":1,\"90\":1,\"239\":1}}],[\"keeps\",{\"1\":{\"5\":1,\"33\":1,\"87\":1,\"95\":1,\"105\":1,\"231\":1}}],[\"keep\",{\"1\":{\"5\":2,\"21\":1,\"24\":1,\"69\":1,\"79\":4,\"85\":1,\"87\":4,\"96\":1,\"124\":1,\"130\":1,\"141\":1,\"147\":2,\"148\":1,\"162\":1,\"164\":1,\"167\":2,\"172\":1,\"175\":1,\"185\":1,\"214\":1,\"215\":1,\"216\":1,\"229\":1,\"231\":1,\"235\":1,\"237\":1,\"239\":2,\"249\":1}}],[\"k\",{\"1\":{\"5\":2,\"11\":1,\"18\":2,\"98\":1}}],[\"u23\",{\"1\":{\"210\":2}}],[\"u13\",{\"1\":{\"179\":2}}],[\"ultimately\",{\"1\":{\"166\":1}}],[\"ultra\",{\"1\":{\"30\":1,\"31\":1,\"32\":1}}],[\"ultrabooks\",{\"1\":{\"29\":1}}],[\"ultrasparc\",{\"1\":{\"25\":1}}],[\"u32\",{\"1\":{\"152\":1,\"154\":1,\"209\":4}}],[\"u3828\",{\"1\":{\"124\":1}}],[\"u6343\",{\"1\":{\"147\":3}}],[\"u62\",{\"1\":{\"147\":1}}],[\"u60\",{\"1\":{\"147\":1}}],[\"u64\",{\"1\":{\"98\":2,\"156\":1,\"180\":5,\"181\":1,\"219\":4,\"230\":4}}],[\"u5\",{\"1\":{\"227\":1}}],[\"u56\",{\"1\":{\"147\":1}}],[\"u5532\",{\"1\":{\"124\":2}}],[\"uenob\",{\"1\":{\"134\":1}}],[\"uefientry\",{\"1\":{\"162\":7,\"197\":5}}],[\"uefinummemorymapentries\",{\"1\":{\"162\":2,\"197\":1}}],[\"uefimemorymapdescriptorsize\",{\"1\":{\"162\":3}}],[\"uefimemorymapsize\",{\"1\":{\"162\":2}}],[\"uefimemorymap\",{\"1\":{\"162\":2}}],[\"uefi\",{\"0\":{\"122\":1,\"125\":1,\"132\":1,\"134\":1,\"137\":1,\"138\":1,\"150\":1,\"162\":1},\"1\":{\"29\":1,\"31\":1,\"33\":1,\"34\":4,\"119\":1,\"121\":1,\"122\":3,\"123\":4,\"124\":3,\"131\":1,\"132\":3,\"133\":7,\"134\":3,\"135\":8,\"137\":3,\"138\":3,\"139\":2,\"140\":8,\"141\":2,\"143\":1,\"144\":3,\"147\":1,\"148\":1,\"149\":1,\"150\":3,\"151\":7,\"152\":3,\"153\":3,\"154\":2,\"156\":3,\"157\":1,\"158\":1,\"159\":4,\"160\":6,\"161\":1,\"162\":9,\"172\":1,\"178\":1,\"180\":2,\"181\":1,\"197\":3,\"251\":1,\"252\":1}}],[\"u7+0x232\",{\"1\":{\"179\":1}}],[\"u7\",{\"1\":{\"124\":1,\"179\":1}}],[\"u4980\",{\"1\":{\"147\":1}}],[\"u4585\",{\"1\":{\"147\":1}}],[\"u4516\",{\"1\":{\"147\":1}}],[\"u4487\",{\"1\":{\"124\":3}}],[\"u4467\",{\"1\":{\"124\":1}}],[\"u4`\",{\"1\":{\"101\":1}}],[\"u4\",{\"1\":{\"101\":6,\"227\":1}}],[\"uv\",{\"1\":{\"29\":3}}],[\"uvicorn\",{\"1\":{\"7\":1}}],[\"u\",{\"1\":{\"21\":1,\"34\":1,\"36\":3}}],[\"uhd\",{\"1\":{\"32\":4}}],[\"uh\",{\"1\":{\"21\":1}}],[\"uunet\",{\"1\":{\"21\":1}}],[\"uucp\",{\"1\":{\"21\":4}}],[\"uuid\",{\"1\":{\"7\":1,\"14\":3,\"17\":1}}],[\"uk\",{\"1\":{\"21\":3}}],[\"ud\",{\"1\":{\"192\":2}}],[\"udma\",{\"1\":{\"31\":4}}],[\"udimms\",{\"1\":{\"29\":1}}],[\"udp\",{\"1\":{\"21\":6}}],[\"uds\",{\"1\":{\"11\":1}}],[\"umbrella\",{\"1\":{\"37\":2}}],[\"umbs\",{\"1\":{\"11\":1}}],[\"uma\",{\"1\":{\"11\":2}}],[\"uml\",{\"1\":{\"5\":1,\"6\":1,\"36\":1}}],[\"utask\",{\"1\":{\"196\":10,\"197\":1,\"205\":3,\"206\":1,\"210\":1,\"213\":1,\"214\":1,\"215\":1,\"226\":7,\"227\":2,\"228\":3,\"229\":6,\"234\":3,\"241\":1,\"246\":1}}],[\"util\",{\"1\":{\"47\":1}}],[\"utils\",{\"1\":{\"16\":1}}],[\"utility\",{\"1\":{\"11\":2,\"74\":1,\"77\":2,\"85\":1,\"104\":1,\"106\":2,\"110\":1,\"168\":1,\"179\":1}}],[\"utilities\",{\"1\":{\"11\":1,\"106\":1}}],[\"utf16char\",{\"1\":{\"139\":5,\"153\":1}}],[\"utf\",{\"1\":{\"14\":15,\"139\":3,\"140\":1}}],[\"utc\",{\"1\":{\"9\":2}}],[\"ucla\",{\"1\":{\"21\":1}}],[\"ucs\",{\"1\":{\"14\":4}}],[\"uc\",{\"1\":{\"11\":1}}],[\"ufcs\",{\"1\":{\"10\":1}}],[\"uwp\",{\"1\":{\"9\":3}}],[\"uwsgi\",{\"1\":{\"7\":1}}],[\"urgent\",{\"1\":{\"35\":1}}],[\"url=\",{\"1\":{\"44\":1}}],[\"url\",{\"1\":{\"7\":1,\"35\":1,\"36\":1}}],[\"urls\",{\"1\":{\"7\":2}}],[\"urn\",{\"1\":{\"7\":4}}],[\"urns\",{\"1\":{\"7\":1}}],[\"uring\",{\"1\":{\"9\":1}}],[\"uri\",{\"1\":{\"7\":2}}],[\"uart\",{\"1\":{\"30\":2}}],[\"uarts\",{\"1\":{\"30\":2}}],[\"uac\",{\"1\":{\"11\":1}}],[\"ua\",{\"1\":{\"7\":2}}],[\"uat\",{\"1\":{\"6\":2}}],[\"ux\",{\"1\":{\"6\":2,\"11\":5,\"25\":2}}],[\"uber\",{\"1\":{\"16\":1}}],[\"ub\",{\"1\":{\"9\":1}}],[\"ubuntu\",{\"1\":{\"6\":1}}],[\"ubiquitous\",{\"1\":{\"5\":1,\"16\":2}}],[\"upml4\",{\"1\":{\"198\":4,\"200\":1}}],[\"upon\",{\"1\":{\"135\":1,\"186\":1,\"192\":2,\"208\":1,\"239\":1}}],[\"updating\",{\"0\":{\"73\":1},\"1\":{\"73\":1,\"97\":1}}],[\"updates\",{\"1\":{\"6\":1,\"9\":1,\"11\":2,\"13\":2,\"15\":2,\"21\":1,\"82\":2}}],[\"update\",{\"1\":{\"4\":1,\"5\":2,\"9\":1,\"11\":1,\"13\":1,\"17\":1,\"20\":1,\"43\":1,\"44\":1,\"55\":1,\"62\":1,\"74\":1,\"75\":1,\"79\":1,\"84\":2,\"95\":1,\"97\":1,\"101\":1,\"107\":1,\"109\":2,\"110\":1,\"140\":1,\"147\":1,\"148\":1,\"153\":1,\"177\":2,\"182\":1,\"196\":1,\"197\":3,\"221\":1,\"229\":2}}],[\"updated\",{\"1\":{\"4\":1,\"43\":3,\"66\":1,\"81\":1,\"82\":1,\"87\":1,\"97\":2,\"100\":1,\"170\":2,\"187\":1,\"197\":1,\"239\":1}}],[\"upi\",{\"1\":{\"30\":2}}],[\"upstream\",{\"1\":{\"35\":1}}],[\"ups\",{\"1\":{\"24\":2,\"30\":1}}],[\"upnp\",{\"1\":{\"21\":2}}],[\"uptime\",{\"1\":{\"19\":1}}],[\"upper\",{\"1\":{\"11\":1,\"68\":1,\"218\":1}}],[\"uploads\",{\"1\":{\"21\":1}}],[\"upload\",{\"1\":{\"11\":1,\"21\":1}}],[\"upgrades\",{\"1\":{\"6\":1}}],[\"upfront\",{\"1\":{\"6\":2}}],[\"up\",{\"0\":{\"77\":1},\"1\":{\"6\":2,\"11\":1,\"21\":6,\"24\":1,\"26\":2,\"29\":1,\"31\":1,\"35\":1,\"41\":1,\"45\":1,\"59\":1,\"71\":2,\"75\":1,\"77\":3,\"78\":1,\"87\":1,\"88\":1,\"89\":1,\"93\":1,\"96\":1,\"97\":1,\"116\":1,\"117\":1,\"121\":3,\"135\":2,\"142\":1,\"143\":1,\"149\":1,\"156\":1,\"160\":1,\"164\":2,\"172\":1,\"177\":1,\"178\":1,\"179\":2,\"183\":1,\"185\":2,\"187\":1,\"193\":1,\"197\":1,\"201\":1,\"209\":4,\"226\":1,\"227\":2,\"241\":1}}],[\"unresponsive\",{\"1\":{\"238\":1}}],[\"unrar\",{\"1\":{\"16\":1}}],[\"unusable\",{\"1\":{\"201\":1}}],[\"unused2\",{\"1\":{\"230\":1}}],[\"unused1\",{\"1\":{\"230\":1}}],[\"unused\",{\"1\":{\"9\":1,\"10\":1,\"29\":1,\"106\":3,\"110\":3,\"131\":1,\"174\":2,\"185\":1}}],[\"unmapregion\",{\"1\":{\"237\":1}}],[\"unmap\",{\"1\":{\"237\":2}}],[\"unmapped\",{\"1\":{\"194\":1}}],[\"unmount\",{\"1\":{\"11\":1}}],[\"unhandled\",{\"1\":{\"141\":2,\"166\":1,\"171\":1}}],[\"unhandledexception\",{\"1\":{\"141\":2,\"166\":4}}],[\"unhandledexceptionhook\",{\"1\":{\"141\":1}}],[\"unaligned\",{\"1\":{\"171\":1}}],[\"unable\",{\"1\":{\"123\":1}}],[\"unary>>\",{\"1\":{\"106\":2,\"109\":1}}],[\"unary\",{\"0\":{\"106\":1},\"1\":{\"98\":2,\"99\":1,\"102\":3,\"106\":13,\"107\":4,\"108\":1,\"109\":1,\"110\":1}}],[\"unavailable\",{\"1\":{\"22\":2,\"35\":2}}],[\"unofficial\",{\"1\":{\"89\":1}}],[\"unordered\",{\"1\":{\"9\":1}}],[\"unknown\",{\"1\":{\"64\":2,\"123\":7,\"124\":8,\"143\":2,\"147\":3,\"164\":2,\"196\":1,\"234\":1,\"235\":1}}],[\"unpaired\",{\"1\":{\"53\":1}}],[\"unprivileged\",{\"1\":{\"27\":1}}],[\"unpredictable\",{\"1\":{\"9\":1}}],[\"unfortunately\",{\"1\":{\"40\":1,\"43\":1,\"55\":1,\"87\":1,\"88\":1,\"89\":2,\"160\":1,\"164\":1,\"175\":1,\"187\":1}}],[\"unforgeable\",{\"1\":{\"25\":1,\"116\":1}}],[\"unsupportedelfimage\",{\"1\":{\"235\":6}}],[\"unsupported\",{\"1\":{\"230\":1,\"237\":1}}],[\"unsuitable\",{\"1\":{\"22\":1}}],[\"unsigned\",{\"1\":{\"98\":1,\"101\":1}}],[\"unspecified\",{\"1\":{\"10\":1}}],[\"unencrypted\",{\"1\":{\"21\":1}}],[\"uncomment\",{\"1\":{\"227\":1}}],[\"unconditionally\",{\"1\":{\"10\":1}}],[\"uncheckedarray\",{\"1\":{\"139\":4,\"159\":1,\"162\":3,\"180\":2,\"220\":1,\"227\":1,\"230\":5,\"237\":1}}],[\"uncertainty\",{\"1\":{\"35\":1}}],[\"unclassified\",{\"1\":{\"21\":1}}],[\"unc\",{\"1\":{\"21\":1}}],[\"unzip\",{\"1\":{\"16\":1}}],[\"untyped\",{\"1\":{\"192\":1}}],[\"unterminated\",{\"1\":{\"96\":8}}],[\"untagged\",{\"1\":{\"21\":1}}],[\"untrusted\",{\"1\":{\"13\":1,\"22\":1}}],[\"until\",{\"1\":{\"5\":2,\"8\":1,\"11\":2,\"21\":1,\"35\":1,\"48\":1,\"51\":1,\"78\":1,\"87\":1,\"89\":1,\"94\":1,\"96\":2,\"105\":1,\"151\":1,\"160\":1,\"170\":1,\"194\":1,\"230\":1,\"237\":1}}],[\"unloadimage\",{\"1\":{\"151\":1}}],[\"unload\",{\"1\":{\"151\":1}}],[\"unloaded\",{\"1\":{\"11\":1}}],[\"unlike\",{\"1\":{\"94\":1,\"110\":1,\"124\":1}}],[\"unlimited\",{\"1\":{\"10\":1}}],[\"unless\",{\"1\":{\"71\":1,\"147\":1,\"186\":1,\"198\":1}}],[\"unnamed\",{\"1\":{\"10\":1}}],[\"undifferentiated\",{\"1\":{\"73\":1}}],[\"undirected\",{\"1\":{\"9\":1}}],[\"underscores\",{\"1\":{\"98\":1}}],[\"understand\",{\"1\":{\"35\":1,\"52\":1,\"77\":1,\"78\":1,\"86\":1,\"99\":1,\"124\":2,\"147\":1,\"186\":1,\"227\":1}}],[\"understanding\",{\"0\":{\"228\":1},\"1\":{\"18\":1,\"35\":1,\"59\":1,\"66\":1}}],[\"underlying\",{\"1\":{\"11\":1,\"17\":1,\"19\":1,\"85\":1,\"139\":1}}],[\"under\",{\"1\":{\"9\":1,\"11\":2,\"13\":1,\"17\":1,\"20\":1,\"21\":1,\"29\":1,\"36\":1,\"37\":2,\"43\":2,\"44\":1,\"45\":1,\"48\":1,\"53\":2,\"54\":1,\"65\":1,\"69\":3,\"71\":1,\"72\":1,\"78\":1,\"79\":1,\"90\":1,\"93\":1,\"104\":1,\"107\":1,\"109\":1,\"110\":1,\"143\":1,\"162\":1,\"175\":1,\"185\":4}}],[\"undefined\",{\"1\":{\"9\":2,\"123\":1,\"124\":12}}],[\"unbalanced\",{\"1\":{\"9\":1}}],[\"unweighted\",{\"1\":{\"9\":1}}],[\"union\",{\"1\":{\"36\":1,\"187\":3}}],[\"unibus\",{\"1\":{\"30\":4}}],[\"unidirectional\",{\"1\":{\"21\":1}}],[\"unique\",{\"1\":{\"14\":3,\"17\":2,\"21\":1,\"102\":1,\"217\":2,\"245\":1}}],[\"uninstallmultipleprotocolinterfaces\",{\"1\":{\"151\":1}}],[\"uninstallprotocolinterface\",{\"1\":{\"151\":1}}],[\"uninstalls\",{\"1\":{\"13\":1}}],[\"uninterruptible\",{\"1\":{\"24\":1}}],[\"unintended\",{\"1\":{\"22\":1}}],[\"uninitialized\",{\"1\":{\"11\":1,\"147\":1,\"148\":1,\"235\":1}}],[\"universities\",{\"1\":{\"21\":2,\"25\":1}}],[\"university\",{\"1\":{\"11\":1,\"21\":2}}],[\"universally\",{\"1\":{\"14\":1}}],[\"universal\",{\"1\":{\"9\":2,\"14\":1,\"21\":3,\"30\":2}}],[\"unisys\",{\"1\":{\"11\":2}}],[\"unistd\",{\"1\":{\"11\":1}}],[\"unixware\",{\"1\":{\"11\":1}}],[\"unixes\",{\"1\":{\"11\":1}}],[\"unix\",{\"1\":{\"11\":33,\"14\":2,\"17\":1,\"21\":9,\"36\":1,\"53\":1,\"116\":1,\"147\":4,\"234\":1}}],[\"unifying\",{\"1\":{\"11\":1}}],[\"uniform\",{\"1\":{\"7\":3,\"10\":1,\"11\":2,\"16\":1,\"25\":1}}],[\"unified\",{\"1\":{\"5\":1,\"25\":1,\"34\":2,\"122\":1}}],[\"unicode\",{\"1\":{\"6\":2,\"7\":1,\"14\":6,\"53\":3}}],[\"units\",{\"1\":{\"6\":1,\"9\":1,\"10\":1}}],[\"unit\",{\"1\":{\"6\":1,\"9\":2,\"21\":3,\"26\":4,\"31\":2,\"32\":1,\"33\":1}}],[\"uint16\",{\"1\":{\"144\":1,\"151\":2,\"153\":1,\"187\":6,\"190\":6,\"202\":6,\"206\":2,\"230\":1,\"235\":12,\"248\":2}}],[\"uint32\",{\"1\":{\"138\":5,\"151\":3,\"153\":1,\"159\":3,\"187\":1,\"190\":3,\"202\":4,\"206\":1,\"209\":6,\"230\":1,\"235\":8,\"237\":1,\"248\":4,\"249\":7}}],[\"uint\",{\"1\":{\"133\":1,\"138\":2,\"140\":1,\"154\":2,\"156\":3,\"157\":2,\"159\":9,\"160\":1,\"162\":4,\"180\":2,\"181\":2,\"197\":4}}],[\"uintn\",{\"1\":{\"133\":2}}],[\"uint64\",{\"1\":{\"133\":1,\"138\":1,\"151\":1,\"152\":1,\"153\":6,\"154\":3,\"156\":2,\"159\":4,\"162\":5,\"168\":16,\"169\":4,\"170\":2,\"171\":8,\"175\":53,\"177\":24,\"180\":11,\"181\":17,\"182\":4,\"183\":3,\"187\":4,\"190\":1,\"193\":1,\"197\":10,\"198\":1,\"199\":8,\"202\":18,\"204\":1,\"206\":1,\"209\":6,\"211\":3,\"212\":8,\"213\":8,\"214\":2,\"215\":2,\"217\":5,\"218\":5,\"219\":1,\"220\":10,\"227\":4,\"230\":16,\"231\":1,\"235\":15,\"237\":5,\"239\":1,\"241\":1,\"242\":1,\"248\":8}}],[\"uint8\",{\"1\":{\"101\":1,\"144\":2,\"151\":1,\"153\":8,\"181\":1,\"187\":28,\"190\":6,\"192\":1,\"193\":1,\"202\":16,\"206\":3,\"217\":1,\"230\":3,\"235\":3}}],[\"uins\",{\"1\":{\"21\":1}}],[\"ui\",{\"1\":{\"4\":1,\"5\":2,\"6\":2,\"9\":6,\"13\":1}}],[\"usual\",{\"1\":{\"226\":1}}],[\"usually\",{\"1\":{\"40\":1,\"97\":1,\"105\":1,\"108\":1,\"192\":1,\"247\":1}}],[\"uspace\",{\"1\":{\"220\":5,\"231\":1,\"237\":1}}],[\"ustack\",{\"1\":{\"217\":1,\"218\":1,\"220\":4}}],[\"usr\",{\"1\":{\"124\":7,\"134\":2}}],[\"usb\",{\"1\":{\"30\":8,\"31\":1,\"32\":1,\"33\":4,\"34\":2,\"135\":1}}],[\"us\",{\"1\":{\"23\":2,\"59\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"73\":1,\"77\":1,\"82\":1,\"84\":1,\"87\":1,\"89\":1,\"110\":1,\"135\":1,\"137\":1,\"140\":1,\"143\":1,\"146\":1,\"147\":4,\"150\":1,\"164\":1,\"168\":1,\"172\":2,\"176\":1,\"177\":2,\"183\":1,\"185\":1,\"192\":1,\"195\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"213\":1,\"217\":1,\"229\":4,\"232\":1,\"233\":1,\"234\":2,\"235\":1,\"246\":1}}],[\"usages\",{\"1\":{\"80\":1,\"84\":1}}],[\"usage\",{\"1\":{\"22\":1,\"31\":1,\"37\":2}}],[\"usable\",{\"1\":{\"20\":1,\"180\":1}}],[\"usability\",{\"1\":{\"6\":3}}],[\"usaf\",{\"1\":{\"11\":1}}],[\"uss\",{\"1\":{\"11\":2}}],[\"using\",{\"0\":{\"140\":1,\"246\":1},\"1\":{\"4\":2,\"5\":1,\"7\":2,\"8\":1,\"9\":1,\"10\":2,\"11\":3,\"12\":1,\"13\":2,\"15\":3,\"16\":3,\"17\":5,\"18\":3,\"20\":1,\"21\":19,\"22\":1,\"24\":4,\"28\":1,\"29\":2,\"30\":2,\"31\":3,\"33\":2,\"35\":2,\"42\":1,\"43\":2,\"45\":1,\"53\":1,\"56\":1,\"61\":2,\"64\":1,\"66\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"82\":1,\"83\":1,\"85\":1,\"90\":1,\"96\":1,\"98\":1,\"102\":2,\"103\":1,\"104\":1,\"105\":2,\"106\":2,\"117\":1,\"118\":1,\"122\":2,\"124\":4,\"130\":1,\"135\":2,\"136\":2,\"138\":2,\"139\":3,\"141\":1,\"142\":1,\"143\":1,\"144\":2,\"146\":3,\"147\":5,\"151\":1,\"153\":1,\"162\":1,\"164\":2,\"166\":1,\"172\":1,\"176\":1,\"179\":1,\"181\":2,\"185\":1,\"186\":1,\"188\":5,\"191\":4,\"192\":1,\"203\":1,\"207\":1,\"208\":1,\"212\":1,\"223\":1,\"225\":3,\"229\":1,\"231\":1,\"232\":1,\"234\":1,\"240\":1,\"243\":1}}],[\"useful\",{\"1\":{\"147\":1,\"169\":1,\"170\":1,\"194\":1,\"197\":2,\"200\":1,\"211\":1}}],[\"usemalloc\",{\"1\":{\"124\":6}}],[\"usenet\",{\"1\":{\"21\":5}}],[\"useraddrspaceend\",{\"1\":{\"214\":2}}],[\"userrsp\",{\"1\":{\"211\":1}}],[\"userdata\",{\"1\":{\"197\":2}}],[\"userimagevirtualbase\",{\"1\":{\"198\":3,\"199\":1,\"222\":2,\"223\":2,\"230\":3,\"231\":1}}],[\"userimagephysicalbase\",{\"1\":{\"197\":3,\"198\":2,\"222\":1,\"223\":1,\"230\":1,\"231\":1,\"243\":2}}],[\"userimagepages\",{\"1\":{\"197\":7,\"198\":1,\"222\":1,\"223\":1,\"230\":1,\"231\":1,\"243\":2}}],[\"userimagebase\",{\"1\":{\"197\":4}}],[\"usercode\",{\"1\":{\"197\":4}}],[\"usercodesegmentselector\",{\"1\":{\"187\":1,\"199\":1,\"202\":1,\"209\":1,\"220\":1}}],[\"usermain\",{\"1\":{\"196\":6,\"200\":3,\"205\":3,\"206\":1,\"210\":2,\"213\":1,\"215\":1,\"226\":1,\"229\":2,\"241\":1,\"246\":1}}],[\"userland\",{\"1\":{\"36\":1}}],[\"userstackptr\",{\"1\":{\"199\":11}}],[\"userstackphysaddr\",{\"1\":{\"198\":3,\"199\":1}}],[\"userstackbottom\",{\"1\":{\"199\":4}}],[\"userstackvirtualbase\",{\"1\":{\"198\":3,\"199\":2}}],[\"userstack\",{\"1\":{\"197\":2}}],[\"userspacemaxaddress\",{\"1\":{\"219\":1,\"220\":1}}],[\"userspaceminaddress\",{\"1\":{\"219\":1,\"220\":1}}],[\"userspace\",{\"1\":{\"11\":1}}],[\"users\",{\"1\":{\"6\":3,\"9\":1,\"15\":2,\"17\":4,\"20\":1,\"21\":2,\"22\":2,\"81\":1,\"89\":1,\"171\":3,\"192\":3,\"193\":6,\"205\":9,\"206\":3}}],[\"user\",{\"0\":{\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"200\":1,\"206\":1},\"1\":{\"5\":1,\"6\":6,\"7\":2,\"9\":3,\"11\":13,\"17\":1,\"20\":2,\"21\":8,\"22\":6,\"27\":1,\"35\":2,\"37\":2,\"53\":3,\"66\":2,\"89\":1,\"96\":2,\"116\":1,\"121\":1,\"135\":1,\"166\":3,\"173\":3,\"175\":4,\"176\":1,\"177\":5,\"184\":1,\"185\":6,\"186\":7,\"187\":6,\"188\":3,\"190\":1,\"192\":1,\"193\":2,\"194\":16,\"195\":19,\"196\":26,\"197\":17,\"198\":14,\"199\":3,\"200\":13,\"201\":3,\"202\":1,\"204\":1,\"205\":8,\"206\":8,\"207\":2,\"208\":4,\"209\":3,\"210\":11,\"211\":10,\"212\":10,\"213\":7,\"214\":8,\"215\":11,\"216\":5,\"217\":2,\"218\":2,\"220\":5,\"222\":6,\"223\":9,\"226\":9,\"227\":9,\"228\":13,\"229\":3,\"230\":16,\"231\":14,\"232\":1,\"234\":6,\"235\":1,\"237\":7,\"240\":1,\"241\":2,\"243\":11,\"244\":2,\"246\":8,\"252\":2}}],[\"usescope\",{\"1\":{\"83\":1}}],[\"uses\",{\"1\":{\"4\":1,\"10\":1,\"11\":2,\"15\":1,\"16\":1,\"17\":1,\"21\":4,\"22\":2,\"31\":1,\"32\":1,\"33\":1,\"34\":2,\"41\":1,\"43\":1,\"67\":1,\"74\":1,\"82\":1,\"85\":1,\"88\":1,\"89\":1,\"92\":1,\"106\":1,\"136\":1,\"141\":1,\"146\":1,\"147\":1,\"184\":1,\"190\":1,\"201\":2,\"225\":1,\"238\":1}}],[\"used\",{\"1\":{\"4\":4,\"6\":2,\"7\":1,\"8\":5,\"9\":5,\"10\":10,\"11\":12,\"12\":2,\"13\":5,\"14\":6,\"15\":2,\"16\":5,\"17\":4,\"18\":2,\"21\":18,\"22\":6,\"25\":6,\"26\":2,\"29\":7,\"30\":5,\"31\":6,\"32\":3,\"33\":5,\"34\":4,\"41\":1,\"46\":1,\"50\":1,\"51\":2,\"52\":2,\"53\":5,\"57\":1,\"58\":2,\"59\":1,\"61\":3,\"66\":1,\"69\":2,\"70\":2,\"75\":1,\"77\":1,\"78\":1,\"80\":1,\"85\":1,\"89\":1,\"94\":1,\"96\":1,\"97\":3,\"102\":2,\"103\":1,\"104\":1,\"105\":1,\"106\":2,\"108\":1,\"123\":1,\"124\":4,\"131\":3,\"135\":1,\"140\":1,\"144\":1,\"146\":1,\"147\":2,\"153\":1,\"156\":2,\"159\":1,\"162\":2,\"169\":1,\"170\":2,\"174\":1,\"185\":5,\"186\":3,\"189\":1,\"190\":1,\"191\":2,\"192\":1,\"196\":1,\"197\":1,\"201\":4,\"206\":1,\"209\":1,\"217\":1,\"221\":1,\"225\":2,\"227\":1,\"229\":1,\"232\":1,\"233\":2,\"234\":1,\"235\":1,\"237\":1,\"243\":1,\"247\":1}}],[\"use\",{\"1\":{\"3\":1,\"4\":2,\"5\":2,\"6\":1,\"7\":2,\"8\":1,\"9\":9,\"10\":6,\"11\":6,\"12\":1,\"14\":2,\"15\":1,\"16\":3,\"17\":1,\"18\":1,\"21\":5,\"22\":4,\"24\":2,\"25\":2,\"28\":1,\"30\":1,\"31\":1,\"33\":2,\"35\":3,\"37\":2,\"41\":2,\"43\":1,\"50\":1,\"51\":1,\"53\":1,\"55\":1,\"59\":1,\"61\":3,\"63\":1,\"69\":1,\"70\":1,\"72\":2,\"73\":1,\"74\":3,\"75\":1,\"77\":2,\"78\":3,\"79\":3,\"82\":3,\"83\":3,\"85\":2,\"86\":2,\"87\":2,\"88\":2,\"89\":5,\"91\":1,\"92\":10,\"95\":3,\"97\":3,\"100\":2,\"101\":2,\"103\":1,\"104\":3,\"105\":1,\"106\":5,\"109\":1,\"110\":3,\"112\":1,\"116\":1,\"117\":2,\"119\":1,\"122\":1,\"123\":2,\"124\":4,\"127\":1,\"131\":1,\"134\":3,\"135\":7,\"136\":1,\"137\":1,\"138\":1,\"139\":3,\"140\":4,\"141\":1,\"143\":2,\"144\":2,\"146\":1,\"147\":7,\"148\":1,\"150\":10,\"151\":4,\"153\":1,\"154\":1,\"156\":3,\"157\":2,\"159\":1,\"161\":2,\"162\":4,\"166\":1,\"167\":1,\"168\":1,\"169\":1,\"172\":1,\"173\":3,\"175\":1,\"176\":1,\"177\":8,\"180\":1,\"181\":2,\"185\":6,\"186\":3,\"187\":5,\"188\":2,\"190\":4,\"191\":2,\"192\":3,\"193\":1,\"194\":1,\"195\":1,\"197\":3,\"200\":2,\"201\":6,\"203\":1,\"204\":1,\"208\":3,\"209\":1,\"210\":1,\"211\":2,\"212\":1,\"218\":3,\"223\":1,\"224\":1,\"225\":2,\"226\":2,\"227\":1,\"228\":1,\"229\":3,\"230\":4,\"231\":2,\"234\":1,\"235\":3,\"236\":1,\"237\":1,\"239\":1,\"246\":2,\"247\":1,\"248\":4}}],[\"pf\",{\"1\":{\"192\":1}}],[\"pfx\",{\"1\":{\"22\":1}}],[\"p2v\",{\"1\":{\"177\":8,\"199\":1,\"204\":1}}],[\"p2\",{\"1\":{\"168\":4}}],[\"p2p\",{\"1\":{\"21\":1}}],[\"p1\",{\"1\":{\"168\":4}}],[\"p12\",{\"1\":{\"22\":1}}],[\"pmebpdrnfb5mbiqztcopkw\",{\"1\":{\"228\":1}}],[\"pmsg\",{\"1\":{\"213\":1,\"214\":1,\"227\":1,\"246\":2}}],[\"pmsupervisor\",{\"1\":{\"175\":1,\"181\":5,\"204\":1,\"220\":1,\"230\":1,\"237\":1,\"248\":1}}],[\"pmuser\",{\"1\":{\"175\":1,\"198\":3,\"220\":2,\"231\":1,\"237\":1}}],[\"pml4index\",{\"1\":{\"177\":7}}],[\"pml4entry\",{\"1\":{\"174\":5,\"175\":4}}],[\"pml4table\",{\"1\":{\"174\":2,\"175\":3,\"176\":1,\"177\":8,\"181\":2,\"198\":3,\"217\":1,\"218\":2,\"220\":2}}],[\"pml4\",{\"1\":{\"174\":6,\"175\":4,\"176\":3,\"177\":15,\"181\":11,\"198\":4,\"204\":1,\"217\":1,\"218\":2,\"219\":1,\"220\":4,\"221\":1,\"230\":2,\"237\":2,\"240\":1,\"248\":1}}],[\"pmfree\",{\"1\":{\"171\":13}}],[\"pmfreeregions\",{\"1\":{\"169\":2,\"183\":1}}],[\"pmalloc\",{\"1\":{\"170\":6,\"171\":1,\"177\":3,\"182\":1,\"183\":1,\"198\":1,\"204\":1,\"218\":1,\"219\":2}}],[\"pminit\",{\"1\":{\"169\":2,\"182\":2,\"183\":1}}],[\"pmregion\",{\"1\":{\"168\":4,\"169\":2,\"171\":1,\"182\":1}}],[\"pmnode\",{\"1\":{\"168\":15,\"169\":2,\"170\":2,\"171\":1,\"182\":6}}],[\"pmm\",{\"0\":{\"182\":1},\"1\":{\"167\":2,\"168\":4,\"169\":5,\"170\":1,\"171\":3,\"177\":2,\"181\":1,\"182\":4,\"183\":1,\"219\":1}}],[\"pbes\",{\"1\":{\"22\":1}}],[\"pgp\",{\"1\":{\"22\":1}}],[\"p=quarantine\",{\"1\":{\"22\":1}}],[\"pvc\",{\"1\":{\"21\":1}}],[\"pxe\",{\"1\":{\"21\":5,\"135\":1}}],[\"ppi\",{\"1\":{\"32\":5}}],[\"ppc\",{\"1\":{\"25\":1}}],[\"pptp\",{\"1\":{\"21\":2}}],[\"pppoe\",{\"1\":{\"21\":1}}],[\"ppp\",{\"1\":{\"21\":5}}],[\"ppo\",{\"1\":{\"18\":1}}],[\"p99\",{\"1\":{\"20\":1}}],[\"p95\",{\"1\":{\"6\":1,\"19\":1,\"20\":2}}],[\"p50\",{\"1\":{\"20\":1}}],[\"pki\",{\"1\":{\"22\":1}}],[\"pkcs\",{\"1\":{\"22\":3}}],[\"pk\",{\"1\":{\"17\":1}}],[\"pnp\",{\"1\":{\"34\":2}}],[\"pnputil\",{\"1\":{\"13\":1}}],[\"png\",{\"1\":{\"13\":4,\"16\":3,\"21\":1,\"32\":1,\"47\":1}}],[\"pytorch\",{\"1\":{\"25\":1}}],[\"python\",{\"1\":{\"7\":2,\"9\":2,\"12\":1,\"35\":1,\"85\":1,\"94\":1}}],[\"pyproject\",{\"1\":{\"13\":1}}],[\"pypi\",{\"1\":{\"12\":1}}],[\"pdindex\",{\"1\":{\"177\":7}}],[\"pdentry\",{\"1\":{\"174\":4,\"175\":3}}],[\"pdtable\",{\"1\":{\"174\":3,\"175\":2,\"177\":3}}],[\"pd\",{\"1\":{\"174\":6,\"175\":2,\"177\":7}}],[\"pda\",{\"1\":{\"33\":1}}],[\"pdftex\",{\"1\":{\"12\":1}}],[\"pdf\",{\"1\":{\"12\":2,\"13\":2}}],[\"pdflatex\",{\"1\":{\"12\":1}}],[\"pdphysaddr\",{\"1\":{\"177\":2}}],[\"pdptphysaddr\",{\"1\":{\"177\":2}}],[\"pdptindex\",{\"1\":{\"177\":7}}],[\"pdptentry\",{\"1\":{\"174\":4,\"175\":3}}],[\"pdptable\",{\"1\":{\"174\":3,\"175\":2,\"176\":3,\"177\":3}}],[\"pdpt\",{\"1\":{\"174\":5,\"175\":2,\"177\":7}}],[\"pdp\",{\"1\":{\"11\":12,\"24\":2,\"25\":3,\"30\":4,\"174\":1}}],[\"ptphysaddr\",{\"1\":{\"177\":2}}],[\"ptindex\",{\"1\":{\"177\":8}}],[\"ptentry\",{\"1\":{\"174\":5,\"175\":3}}],[\"ptable\",{\"1\":{\"174\":3,\"175\":2,\"177\":2}}],[\"pt\",{\"1\":{\"174\":6,\"175\":2,\"177\":8}}],[\"pto\",{\"1\":{\"35\":2}}],[\"ptr\",{\"1\":{\"34\":1,\"127\":3,\"133\":1,\"135\":1,\"138\":4,\"139\":6,\"140\":2,\"141\":2,\"151\":5,\"152\":3,\"153\":5,\"154\":9,\"156\":3,\"157\":4,\"158\":2,\"159\":14,\"160\":3,\"161\":1,\"162\":7,\"163\":4,\"164\":1,\"165\":1,\"166\":4,\"168\":13,\"169\":3,\"170\":3,\"171\":2,\"175\":4,\"177\":12,\"180\":5,\"181\":3,\"182\":5,\"183\":1,\"188\":1,\"191\":1,\"192\":1,\"193\":1,\"197\":10,\"198\":2,\"199\":2,\"200\":1,\"202\":1,\"204\":1,\"205\":2,\"209\":1,\"211\":1,\"212\":1,\"213\":4,\"214\":2,\"215\":1,\"217\":2,\"218\":1,\"219\":1,\"220\":2,\"222\":1,\"223\":1,\"227\":5,\"230\":7,\"231\":1,\"235\":6,\"237\":1,\"241\":1,\"242\":1,\"243\":1,\"245\":1,\"248\":2,\"249\":2}}],[\"pts\",{\"1\":{\"11\":1}}],[\"pty\",{\"1\":{\"11\":2}}],[\"pthread\",{\"1\":{\"9\":1,\"11\":2}}],[\"pstr\",{\"1\":{\"245\":1}}],[\"pstn\",{\"1\":{\"21\":1}}],[\"psiscopeprocessor\",{\"1\":{\"77\":4,\"78\":2,\"79\":2}}],[\"psinameidentifierowner\",{\"1\":{\"75\":6}}],[\"psinamedelement\",{\"1\":{\"75\":4,\"82\":1}}],[\"psitreeutil\",{\"1\":{\"74\":2,\"77\":4,\"78\":1,\"79\":1,\"82\":2}}],[\"psireferencebase<identref>\",{\"1\":{\"74\":1,\"78\":1,\"82\":1}}],[\"psireference\",{\"1\":{\"72\":3,\"74\":3,\"82\":1}}],[\"psiimplpackage=\",{\"1\":{\"70\":1}}],[\"psipackage=\",{\"1\":{\"70\":1}}],[\"psiparser\",{\"1\":{\"63\":2,\"64\":1,\"66\":1}}],[\"psifilefactory\",{\"1\":{\"82\":1}}],[\"psifilebase\",{\"1\":{\"61\":2,\"79\":1}}],[\"psifile\",{\"1\":{\"59\":2,\"61\":1,\"64\":1,\"82\":2}}],[\"psielement\",{\"1\":{\"59\":2,\"61\":1,\"64\":1,\"74\":1,\"75\":3,\"77\":6,\"78\":3,\"79\":8,\"82\":3,\"83\":3}}],[\"psibuilder\",{\"1\":{\"57\":2,\"58\":6,\"63\":5,\"66\":5,\"106\":2,\"110\":3}}],[\"psi\",{\"0\":{\"59\":1,\"61\":1,\"93\":1},\"1\":{\"41\":3,\"50\":1,\"53\":2,\"54\":1,\"56\":1,\"57\":6,\"59\":8,\"60\":3,\"61\":10,\"64\":4,\"65\":3,\"66\":1,\"67\":1,\"68\":1,\"69\":6,\"70\":4,\"71\":4,\"72\":4,\"73\":2,\"74\":7,\"75\":5,\"77\":2,\"78\":2,\"82\":3,\"88\":2,\"89\":1,\"90\":1,\"93\":3,\"112\":3}}],[\"psci\",{\"1\":{\"34\":2}}],[\"psus\",{\"1\":{\"33\":1}}],[\"psu\",{\"1\":{\"33\":1}}],[\"ps3\",{\"1\":{\"25\":1}}],[\"pseudo\",{\"1\":{\"11\":1,\"34\":1}}],[\"ps\",{\"1\":{\"11\":1,\"13\":2,\"30\":4}}],[\"p\",{\"1\":{\"9\":1,\"15\":2,\"32\":1,\"124\":4,\"135\":1,\"136\":1,\"143\":1,\"147\":2,\"148\":2,\"177\":4,\"182\":4,\"185\":2,\"187\":2,\"188\":1,\"190\":1,\"193\":2,\"196\":2,\"200\":1,\"202\":1,\"227\":6,\"228\":2,\"230\":4,\"231\":1,\"234\":1}}],[\"pcmcia\",{\"1\":{\"30\":1}}],[\"pch\",{\"1\":{\"30\":2,\"33\":2}}],[\"pc133\",{\"1\":{\"29\":1}}],[\"pc100\",{\"1\":{\"29\":1}}],[\"pcs\",{\"1\":{\"11\":5,\"25\":1,\"29\":1,\"30\":2,\"31\":1,\"32\":1,\"33\":4}}],[\"pc\",{\"1\":{\"11\":5,\"25\":4,\"30\":6,\"32\":3,\"33\":4,\"34\":2}}],[\"pcb\",{\"1\":{\"11\":3}}],[\"pcre2\",{\"1\":{\"9\":2}}],[\"pcre\",{\"1\":{\"9\":4}}],[\"pcie\",{\"1\":{\"9\":1,\"30\":2,\"31\":1,\"32\":1,\"33\":4,\"36\":1}}],[\"pci\",{\"1\":{\"9\":1,\"30\":7,\"34\":1,\"36\":3,\"135\":1,\"252\":1}}],[\"pies\",{\"1\":{\"225\":2,\"227\":1}}],[\"pie\",{\"0\":{\"225\":1,\"226\":1},\"1\":{\"224\":1,\"225\":6,\"226\":6,\"227\":1,\"229\":1,\"231\":1,\"234\":2,\"237\":2}}],[\"pieces\",{\"1\":{\"94\":2}}],[\"piece\",{\"1\":{\"9\":1,\"58\":1,\"79\":1,\"94\":3,\"214\":1}}],[\"pick\",{\"1\":{\"143\":1,\"149\":1}}],[\"picks\",{\"1\":{\"17\":1}}],[\"picture\",{\"1\":{\"112\":1}}],[\"pics\",{\"1\":{\"33\":1}}],[\"pic\",{\"0\":{\"225\":1},\"1\":{\"33\":1,\"224\":1,\"225\":3,\"247\":4}}],[\"pilot\",{\"1\":{\"33\":1}}],[\"pita\",{\"1\":{\"35\":2}}],[\"pit\",{\"1\":{\"33\":3}}],[\"pio\",{\"1\":{\"31\":1}}],[\"pioneered\",{\"1\":{\"21\":1,\"36\":1}}],[\"pioneering\",{\"1\":{\"8\":2,\"11\":4,\"17\":1,\"21\":2,\"36\":1}}],[\"piix\",{\"1\":{\"135\":1}}],[\"pii\",{\"1\":{\"23\":1}}],[\"pins\",{\"1\":{\"30\":1}}],[\"pinout\",{\"1\":{\"21\":1}}],[\"pin\",{\"1\":{\"21\":1,\"25\":1,\"29\":3,\"30\":3,\"33\":3}}],[\"ping\",{\"1\":{\"21\":1,\"35\":1}}],[\"pixels\",{\"1\":{\"32\":2}}],[\"pixel\",{\"1\":{\"13\":1,\"32\":4}}],[\"pi\",{\"1\":{\"11\":1,\"23\":1,\"25\":1,\"30\":1,\"33\":1}}],[\"pid=1\",{\"1\":{\"11\":1}}],[\"pid\",{\"1\":{\"11\":4}}],[\"pipes\",{\"1\":{\"11\":1}}],[\"pipelined\",{\"1\":{\"29\":1}}],[\"pipelines\",{\"1\":{\"9\":2,\"10\":2,\"12\":1,\"17\":1,\"25\":1,\"26\":1}}],[\"pipeline\",{\"1\":{\"6\":2,\"17\":1,\"22\":1,\"25\":1,\"35\":1}}],[\"pwa\",{\"1\":{\"7\":1}}],[\"please\",{\"1\":{\"35\":2,\"124\":1}}],[\"plots\",{\"1\":{\"11\":1}}],[\"plugin>\",{\"1\":{\"44\":2,\"48\":2,\"64\":2,\"83\":2}}],[\"plugin\",{\"0\":{\"41\":1,\"43\":1,\"44\":1,\"45\":1},\"1\":{\"40\":2,\"41\":10,\"42\":1,\"43\":7,\"44\":10,\"45\":6,\"48\":2,\"49\":1,\"50\":1,\"51\":1,\"54\":1,\"55\":2,\"64\":3,\"65\":2,\"66\":1,\"67\":1,\"71\":2,\"80\":1,\"83\":2,\"113\":2}}],[\"plugins\",{\"1\":{\"7\":1,\"11\":1,\"41\":5,\"42\":1,\"43\":2,\"44\":2,\"45\":1,\"51\":1,\"55\":1}}],[\"plug\",{\"1\":{\"21\":1,\"31\":1,\"34\":2}}],[\"plugging\",{\"1\":{\"21\":1}}],[\"plus\",{\"1\":{\"11\":1,\"33\":1}}],[\"pl\",{\"1\":{\"8\":1}}],[\"platters\",{\"1\":{\"31\":1}}],[\"plato\",{\"1\":{\"11\":2}}],[\"platform<\",{\"1\":{\"44\":1}}],[\"platforms\",{\"1\":{\"10\":1,\"11\":2,\"16\":1,\"17\":1,\"25\":1,\"35\":1}}],[\"platform\",{\"1\":{\"4\":1,\"8\":1,\"9\":5,\"10\":1,\"13\":2,\"17\":1,\"24\":1,\"25\":2,\"30\":1,\"33\":2,\"34\":1,\"36\":1,\"40\":2,\"41\":1,\"42\":1,\"43\":2,\"44\":3,\"45\":1,\"51\":1,\"52\":1,\"54\":1,\"55\":1,\"75\":1,\"77\":1,\"124\":3}}],[\"plasma\",{\"1\":{\"11\":2}}],[\"playing\",{\"1\":{\"35\":3}}],[\"players\",{\"1\":{\"35\":1}}],[\"player\",{\"1\":{\"25\":1}}],[\"playback\",{\"1\":{\"22\":1,\"32\":1}}],[\"playready\",{\"1\":{\"22\":1}}],[\"play\",{\"1\":{\"11\":1,\"21\":1,\"34\":1}}],[\"playwright\",{\"1\":{\"6\":1}}],[\"places\",{\"1\":{\"72\":1,\"85\":1,\"89\":2,\"97\":6,\"104\":1,\"190\":1,\"249\":1}}],[\"placed\",{\"1\":{\"47\":1,\"147\":1}}],[\"place\",{\"0\":{\"83\":1,\"84\":1},\"1\":{\"10\":1,\"15\":1,\"72\":1,\"75\":2,\"79\":4,\"83\":7,\"84\":2,\"89\":1,\"147\":1,\"148\":1,\"166\":1,\"168\":1,\"171\":1,\"195\":1,\"196\":1,\"220\":1,\"223\":1}}],[\"placeholder\",{\"1\":{\"9\":1,\"58\":1}}],[\"plane\",{\"1\":{\"21\":4}}],[\"planes\",{\"1\":{\"9\":1}}],[\"planned\",{\"0\":{\"253\":1}}],[\"planner\",{\"1\":{\"17\":2}}],[\"planning\",{\"1\":{\"6\":2,\"35\":1}}],[\"plans\",{\"1\":{\"6\":1,\"17\":1}}],[\"plan\",{\"1\":{\"6\":1,\"150\":2,\"151\":1,\"155\":1,\"195\":1}}],[\"plaintext\",{\"1\":{\"12\":1,\"21\":2}}],[\"plain\",{\"1\":{\"5\":1,\"7\":1,\"12\":2,\"13\":2,\"14\":1,\"15\":2,\"29\":1}}],[\"pe32\",{\"1\":{\"123\":1}}],[\"pe32+\",{\"0\":{\"123\":1,\"124\":1},\"1\":{\"123\":6,\"131\":2,\"133\":1}}],[\"peek\",{\"1\":{\"87\":2}}],[\"peering\",{\"1\":{\"21\":1}}],[\"peer\",{\"1\":{\"11\":2,\"21\":10}}],[\"peace\",{\"1\":{\"35\":1}}],[\"peak\",{\"1\":{\"20\":2}}],[\"pebkac\",{\"1\":{\"35\":1}}],[\"pentium\",{\"1\":{\"28\":1,\"29\":3,\"30\":1}}],[\"pending\",{\"1\":{\"6\":1,\"96\":1,\"249\":2}}],[\"pem\",{\"1\":{\"14\":3}}],[\"pe\",{\"1\":{\"11\":4,\"21\":2,\"142\":1,\"147\":2}}],[\"pest\",{\"1\":{\"10\":1}}],[\"pegtl\",{\"1\":{\"10\":1}}],[\"peg\",{\"1\":{\"10\":4}}],[\"people\",{\"1\":{\"7\":1,\"15\":1}}],[\"perf\",{\"1\":{\"248\":1}}],[\"performs\",{\"1\":{\"26\":1}}],[\"performing\",{\"1\":{\"21\":1}}],[\"performed\",{\"1\":{\"10\":1}}],[\"perform\",{\"1\":{\"8\":1,\"10\":1,\"18\":1,\"21\":1,\"22\":2,\"40\":1,\"77\":1,\"79\":1,\"185\":1,\"239\":1}}],[\"performance\",{\"0\":{\"20\":1},\"1\":{\"6\":2,\"9\":2,\"10\":1,\"11\":3,\"17\":1,\"20\":3,\"21\":1,\"24\":2,\"25\":1,\"27\":1,\"29\":1,\"30\":5,\"31\":1,\"36\":4,\"115\":1,\"146\":1,\"248\":1}}],[\"peripheral\",{\"1\":{\"30\":5,\"31\":1,\"36\":1}}],[\"peripherals\",{\"1\":{\"27\":1,\"30\":9,\"33\":3}}],[\"periodic\",{\"1\":{\"21\":1,\"29\":1,\"33\":2,\"249\":1}}],[\"period\",{\"1\":{\"6\":1,\"11\":1,\"22\":1}}],[\"percentiles\",{\"1\":{\"20\":1}}],[\"perception\",{\"1\":{\"18\":1}}],[\"perspective\",{\"1\":{\"35\":1}}],[\"personally\",{\"1\":{\"23\":1}}],[\"personal\",{\"1\":{\"22\":1,\"23\":3,\"30\":2,\"33\":2}}],[\"person\",{\"1\":{\"15\":2,\"18\":1}}],[\"persisted\",{\"1\":{\"148\":1}}],[\"persistent\",{\"1\":{\"7\":1}}],[\"persistence\",{\"1\":{\"5\":1,\"32\":1}}],[\"persist\",{\"1\":{\"4\":1,\"17\":1,\"134\":1}}],[\"permissions\",{\"1\":{\"11\":1,\"22\":6,\"25\":1,\"234\":2,\"235\":1,\"237\":2}}],[\"permissive\",{\"1\":{\"11\":1,\"37\":2}}],[\"permits\",{\"1\":{\"9\":1}}],[\"perl\",{\"1\":{\"9\":2}}],[\"per\",{\"1\":{\"5\":1,\"6\":2,\"9\":1,\"10\":1,\"11\":3,\"14\":1,\"15\":1,\"16\":1,\"18\":1,\"19\":1,\"20\":7,\"22\":1,\"24\":1,\"25\":1,\"26\":2,\"28\":1,\"32\":4,\"35\":1,\"104\":1,\"116\":1,\"188\":1,\"237\":1,\"247\":1}}],[\"putting\",{\"1\":{\"82\":1,\"84\":1,\"229\":1}}],[\"put\",{\"1\":{\"79\":1,\"96\":1,\"143\":1,\"147\":8,\"162\":1,\"175\":1,\"181\":1,\"210\":1,\"220\":1,\"229\":3,\"239\":1,\"240\":1,\"242\":1,\"246\":1}}],[\"puzzled\",{\"1\":{\"87\":1}}],[\"puzzle\",{\"1\":{\"58\":1}}],[\"pup\",{\"1\":{\"21\":1}}],[\"public\",{\"1\":{\"21\":4,\"22\":5,\"37\":1,\"51\":11,\"74\":1,\"75\":3,\"77\":1,\"83\":1,\"140\":1}}],[\"publication\",{\"1\":{\"13\":1}}],[\"publishes\",{\"1\":{\"17\":1,\"36\":2}}],[\"published\",{\"1\":{\"7\":1}}],[\"publishing\",{\"1\":{\"7\":1,\"13\":1,\"15\":1,\"21\":1,\"36\":1}}],[\"publish\",{\"1\":{\"4\":1,\"21\":1,\"22\":1}}],[\"purple\",{\"1\":{\"84\":1}}],[\"purposes\",{\"1\":{\"103\":1,\"173\":1,\"185\":1,\"212\":1}}],[\"purpose\",{\"1\":{\"8\":2,\"25\":2,\"30\":1,\"33\":1,\"34\":1,\"77\":1,\"93\":1,\"94\":1,\"176\":1,\"185\":1,\"186\":1,\"194\":1}}],[\"purgeoldfiles\",{\"1\":{\"55\":1,\"71\":1}}],[\"pure\",{\"1\":{\"9\":1,\"24\":1,\"130\":1,\"209\":1}}],[\"pushregs\",{\"1\":{\"240\":3}}],[\"pushq\",{\"1\":{\"200\":1}}],[\"pushing\",{\"1\":{\"199\":1,\"212\":1}}],[\"pushed\",{\"1\":{\"191\":1,\"195\":1}}],[\"pushes\",{\"1\":{\"191\":1}}],[\"pushdown\",{\"1\":{\"15\":1}}],[\"push\",{\"1\":{\"9\":1,\"21\":2,\"87\":4,\"188\":2,\"191\":1,\"211\":3,\"212\":8,\"240\":15}}],[\"pull\",{\"1\":{\"6\":1,\"30\":1,\"51\":1,\"250\":1}}],[\"ph\",{\"1\":{\"235\":3,\"237\":21}}],[\"phnum\",{\"1\":{\"235\":5}}],[\"phentsize\",{\"1\":{\"235\":5}}],[\"phew\",{\"1\":{\"171\":1,\"188\":1}}],[\"phdr\",{\"1\":{\"147\":1,\"234\":1,\"235\":2}}],[\"phys\",{\"1\":{\"177\":2,\"248\":1}}],[\"physmemorypages\",{\"1\":{\"180\":6,\"181\":7,\"197\":2}}],[\"physmemoryvirtualbase\",{\"1\":{\"177\":2,\"181\":1,\"182\":2,\"219\":2}}],[\"physmemorymapsize\",{\"1\":{\"180\":2}}],[\"physmemorymap\",{\"1\":{\"162\":4,\"180\":11,\"181\":6,\"197\":2}}],[\"physalloc\",{\"1\":{\"177\":5,\"181\":1,\"219\":3}}],[\"physaddress\",{\"1\":{\"175\":4,\"176\":2,\"177\":7}}],[\"physaddr\",{\"1\":{\"147\":2,\"168\":25,\"169\":8,\"170\":2,\"171\":4,\"177\":30,\"180\":2,\"181\":9,\"182\":4,\"198\":3,\"204\":1,\"218\":2,\"220\":2,\"222\":1,\"223\":1,\"230\":3,\"231\":2,\"234\":1,\"237\":3,\"243\":2,\"248\":2}}],[\"physicalmemoryvirtualbase\",{\"1\":{\"177\":3,\"180\":4,\"181\":2,\"182\":6,\"183\":2,\"197\":1,\"219\":2}}],[\"physicalmemorymap\",{\"1\":{\"162\":4,\"163\":1,\"165\":3,\"169\":1,\"180\":3,\"182\":1,\"183\":1,\"197\":1}}],[\"physicalstart\",{\"1\":{\"159\":1,\"162\":1}}],[\"physicalsize\",{\"1\":{\"153\":1}}],[\"physically\",{\"1\":{\"29\":1,\"198\":1}}],[\"physical→application\",{\"1\":{\"21\":1}}],[\"physical\",{\"0\":{\"167\":1},\"1\":{\"11\":1,\"24\":1,\"35\":1,\"161\":1,\"162\":1,\"166\":4,\"167\":4,\"168\":5,\"169\":5,\"170\":13,\"171\":10,\"172\":4,\"173\":1,\"174\":8,\"176\":9,\"177\":9,\"179\":2,\"180\":6,\"181\":11,\"182\":10,\"183\":5,\"188\":3,\"195\":2,\"197\":5,\"199\":1,\"218\":2,\"220\":1,\"235\":1,\"237\":2,\"248\":7,\"252\":1}}],[\"physicssystem\",{\"1\":{\"4\":1}}],[\"phased\",{\"1\":{\"34\":1}}],[\"phase\",{\"1\":{\"21\":2}}],[\"phases\",{\"1\":{\"6\":1}}],[\"phoff\",{\"1\":{\"235\":5}}],[\"phosphor\",{\"1\":{\"32\":3}}],[\"phone\",{\"1\":{\"32\":1}}],[\"phones\",{\"1\":{\"21\":1,\"31\":1,\"32\":1}}],[\"photoshop\",{\"1\":{\"5\":1}}],[\"philips\",{\"1\":{\"25\":1}}],[\"philosophy\",{\"1\":{\"25\":1,\"36\":1}}],[\"phi\",{\"1\":{\"10\":1,\"23\":1}}],[\"php\",{\"1\":{\"8\":3,\"9\":1}}],[\"pause\",{\"1\":{\"196\":3,\"200\":3,\"210\":3,\"213\":1}}],[\"palo\",{\"1\":{\"36\":1}}],[\"palm\",{\"1\":{\"33\":1}}],[\"pal\",{\"1\":{\"32\":1}}],[\"panels\",{\"1\":{\"32\":3}}],[\"panel\",{\"1\":{\"32\":1}}],[\"pa\",{\"1\":{\"25\":3}}],[\"paas\",{\"1\":{\"24\":1}}],[\"pacman\",{\"1\":{\"119\":1,\"120\":1,\"134\":1}}],[\"pac\",{\"1\":{\"22\":1}}],[\"packard\",{\"1\":{\"25\":1}}],[\"packaging\",{\"1\":{\"13\":1,\"16\":3}}],[\"packages\",{\"1\":{\"7\":1,\"11\":2,\"12\":1,\"13\":3,\"16\":2,\"121\":1,\"134\":1}}],[\"package\",{\"1\":{\"7\":3,\"11\":7,\"13\":2,\"29\":1,\"33\":1,\"47\":3,\"53\":3,\"54\":1,\"70\":1,\"118\":1,\"121\":2,\"134\":1}}],[\"packetized\",{\"1\":{\"29\":1}}],[\"packet\",{\"1\":{\"21\":12,\"33\":1}}],[\"packets\",{\"1\":{\"11\":1,\"21\":8,\"22\":1,\"30\":1}}],[\"packed\",{\"1\":{\"14\":1,\"175\":4,\"187\":4,\"190\":3,\"202\":2,\"230\":3,\"235\":4,\"248\":1,\"249\":1}}],[\"packrat\",{\"1\":{\"10\":1}}],[\"pap\",{\"1\":{\"21\":1}}],[\"papers\",{\"1\":{\"12\":1}}],[\"paddr\",{\"1\":{\"168\":10,\"169\":1,\"170\":6,\"171\":20,\"235\":2}}],[\"padding\",{\"1\":{\"15\":1,\"226\":1,\"228\":1,\"234\":3}}],[\"pad2\",{\"1\":{\"153\":1}}],[\"pad1\",{\"1\":{\"153\":1}}],[\"pads\",{\"1\":{\"21\":1}}],[\"pad\",{\"1\":{\"21\":2,\"235\":1}}],[\"padlock\",{\"1\":{\"21\":1}}],[\"pay\",{\"1\":{\"87\":1,\"148\":1}}],[\"payload\",{\"1\":{\"21\":1,\"227\":1,\"228\":1}}],[\"payloads\",{\"1\":{\"12\":1,\"13\":1,\"15\":2,\"16\":1,\"22\":1}}],[\"payments\",{\"1\":{\"11\":1,\"20\":1}}],[\"paging\",{\"0\":{\"181\":1},\"1\":{\"11\":4,\"25\":1,\"26\":2,\"166\":1,\"173\":1,\"174\":1,\"175\":1,\"178\":1,\"179\":1,\"181\":1,\"185\":1,\"186\":1,\"253\":1}}],[\"pagecount\",{\"1\":{\"177\":4,\"198\":2,\"204\":1,\"218\":5,\"220\":1,\"230\":1,\"237\":3,\"248\":1}}],[\"pagemode\",{\"1\":{\"175\":1,\"177\":9,\"198\":3,\"204\":1,\"218\":3,\"220\":2,\"230\":1,\"237\":1,\"248\":1}}],[\"pageaccess\",{\"1\":{\"175\":1,\"177\":9,\"198\":2,\"204\":1,\"218\":3,\"220\":1,\"230\":1,\"237\":1,\"248\":1}}],[\"pagetables\",{\"1\":{\"175\":2,\"177\":1,\"217\":1}}],[\"paged\",{\"1\":{\"11\":1}}],[\"pages=32500\",{\"1\":{\"188\":1}}],[\"pages=4\",{\"1\":{\"188\":1}}],[\"pages=288\",{\"1\":{\"188\":1}}],[\"pages=290\",{\"1\":{\"188\":1}}],[\"pages=1\",{\"1\":{\"188\":1}}],[\"pages=\",{\"1\":{\"181\":5}}],[\"pagesize\",{\"1\":{\"156\":3,\"175\":8,\"177\":2,\"180\":3,\"181\":4,\"197\":1,\"199\":1,\"204\":1,\"218\":2,\"220\":1,\"237\":6}}],[\"pages\",{\"0\":{\"177\":1},\"1\":{\"7\":10,\"11\":2,\"13\":1,\"14\":1,\"15\":1,\"17\":1,\"21\":1,\"22\":2,\"150\":1,\"156\":4,\"165\":3,\"166\":1,\"167\":1,\"169\":2,\"170\":19,\"171\":4,\"174\":2,\"177\":3,\"180\":1,\"181\":1,\"183\":4,\"185\":1,\"188\":2,\"197\":5,\"231\":1}}],[\"page\",{\"0\":{\"174\":1,\"175\":1,\"176\":1,\"193\":1,\"198\":1},\"1\":{\"7\":4,\"11\":2,\"13\":1,\"20\":1,\"29\":3,\"116\":1,\"156\":1,\"159\":1,\"162\":2,\"164\":1,\"167\":1,\"168\":1,\"171\":1,\"173\":2,\"174\":12,\"175\":9,\"176\":6,\"177\":16,\"178\":2,\"179\":1,\"181\":9,\"188\":1,\"189\":1,\"190\":3,\"192\":5,\"193\":14,\"194\":2,\"195\":6,\"197\":1,\"198\":14,\"199\":2,\"200\":3,\"201\":1,\"204\":1,\"205\":6,\"214\":1,\"216\":1,\"217\":1,\"220\":3,\"221\":2,\"231\":1,\"234\":6,\"237\":5,\"248\":4}}],[\"paid\",{\"1\":{\"35\":1}}],[\"pain\",{\"1\":{\"35\":1}}],[\"painless\",{\"1\":{\"35\":1}}],[\"paint\",{\"1\":{\"20\":2}}],[\"painter\",{\"1\":{\"9\":1}}],[\"paired\",{\"1\":{\"21\":2,\"29\":1}}],[\"pairs\",{\"1\":{\"14\":1,\"18\":2,\"69\":1}}],[\"pairing\",{\"1\":{\"11\":1}}],[\"pair\",{\"1\":{\"6\":1,\"11\":1,\"21\":2,\"24\":1,\"82\":1,\"207\":1,\"227\":1}}],[\"patient\",{\"1\":{\"43\":1}}],[\"pata\",{\"1\":{\"31\":3}}],[\"pat\",{\"1\":{\"21\":1,\"175\":1}}],[\"patent\",{\"1\":{\"16\":1}}],[\"patched\",{\"1\":{\"228\":2}}],[\"patches\",{\"1\":{\"6\":1,\"13\":1,\"22\":1}}],[\"patch\",{\"1\":{\"11\":1,\"225\":2,\"228\":4,\"229\":1}}],[\"patching\",{\"1\":{\"9\":1,\"225\":2,\"227\":1}}],[\"patterns\",{\"1\":{\"58\":1,\"92\":1,\"103\":1}}],[\"pattern\",{\"1\":{\"9\":3,\"10\":1,\"18\":1,\"51\":1,\"53\":3,\"92\":6,\"110\":1,\"147\":1}}],[\"path`\",{\"1\":{\"124\":2}}],[\"pathtopsiroot\",{\"1\":{\"71\":1}}],[\"pathtoparser\",{\"1\":{\"71\":1}}],[\"pathnames\",{\"1\":{\"11\":1}}],[\"paths\",{\"1\":{\"9\":1,\"10\":2,\"21\":10,\"143\":1}}],[\"path\",{\"1\":{\"7\":1,\"11\":1,\"16\":1,\"17\":1,\"21\":5,\"30\":1,\"124\":1,\"135\":1,\"143\":2,\"150\":1,\"154\":1}}],[\"pareadwrite\",{\"1\":{\"175\":1,\"181\":5,\"198\":2,\"204\":1,\"220\":2,\"230\":1,\"231\":1,\"237\":2,\"248\":1}}],[\"paread\",{\"1\":{\"175\":1,\"237\":1}}],[\"parenexpr\",{\"1\":{\"107\":1,\"108\":2}}],[\"parenthandle\",{\"1\":{\"151\":1}}],[\"parentheses\",{\"0\":{\"108\":1},\"1\":{\"9\":1,\"102\":1,\"108\":4}}],[\"parentscope\",{\"1\":{\"79\":3,\"83\":1}}],[\"parents\",{\"1\":{\"9\":1}}],[\"parent\",{\"1\":{\"5\":1,\"77\":3,\"79\":1,\"83\":1,\"87\":1,\"110\":1,\"130\":1,\"143\":1,\"177\":8}}],[\"parity\",{\"1\":{\"26\":1,\"31\":1}}],[\"parc\",{\"1\":{\"21\":3,\"36\":3}}],[\"parameter\",{\"1\":{\"36\":1,\"92\":4,\"106\":4,\"110\":3,\"159\":1,\"164\":2,\"182\":2}}],[\"parameterized\",{\"1\":{\"22\":1,\"92\":1}}],[\"parameters\",{\"1\":{\"18\":1,\"36\":1,\"83\":1,\"92\":3,\"151\":1,\"164\":3,\"197\":1}}],[\"parallelism\",{\"1\":{\"26\":1}}],[\"parallel\",{\"1\":{\"17\":1,\"24\":2,\"25\":3,\"28\":1,\"30\":3,\"31\":3,\"32\":1,\"116\":1}}],[\"paragraph\",{\"1\":{\"13\":1}}],[\"paradigm\",{\"1\":{\"5\":1}}],[\"parses\",{\"1\":{\"63\":1}}],[\"parsestmt\",{\"1\":{\"63\":5,\"66\":2}}],[\"parsefile\",{\"1\":{\"63\":4,\"66\":3}}],[\"parse\",{\"1\":{\"10\":1,\"57\":1,\"58\":2,\"60\":1,\"63\":1,\"66\":2,\"70\":1,\"82\":1,\"105\":1,\"142\":1,\"230\":3}}],[\"parsed\",{\"1\":{\"10\":3,\"13\":1,\"33\":1,\"58\":2,\"63\":1,\"66\":2,\"88\":2,\"105\":1,\"107\":3,\"108\":1,\"109\":2,\"110\":2}}],[\"parserutilclass=\",{\"1\":{\"106\":1}}],[\"parserimports=\",{\"1\":{\"70\":1}}],[\"parserclass=\",{\"1\":{\"68\":1,\"70\":1}}],[\"parserdefinition\",{\"1\":{\"57\":1,\"58\":2,\"59\":3,\"64\":3,\"69\":1,\"95\":1}}],[\"parser\",{\"0\":{\"56\":1,\"60\":1,\"63\":1,\"64\":1,\"65\":1,\"69\":1,\"71\":1},\"1\":{\"10\":2,\"41\":2,\"50\":1,\"52\":1,\"53\":1,\"55\":1,\"56\":3,\"57\":4,\"58\":12,\"59\":4,\"60\":2,\"61\":1,\"63\":4,\"64\":2,\"65\":1,\"66\":6,\"67\":2,\"68\":2,\"69\":4,\"70\":6,\"71\":11,\"73\":3,\"74\":1,\"75\":1,\"85\":5,\"87\":1,\"88\":5,\"89\":8,\"90\":1,\"94\":2,\"95\":2,\"96\":1,\"97\":2,\"100\":1,\"104\":2,\"105\":1,\"106\":9,\"107\":1,\"110\":2}}],[\"parsers\",{\"1\":{\"9\":1,\"10\":3,\"105\":1}}],[\"parsing\",{\"0\":{\"88\":1,\"89\":1,\"105\":1},\"1\":{\"5\":1,\"10\":2,\"56\":1,\"57\":1,\"60\":1,\"61\":1,\"63\":3,\"66\":1,\"67\":1,\"80\":1,\"85\":2,\"89\":1,\"105\":5,\"230\":1}}],[\"parts\",{\"1\":{\"31\":1,\"33\":1,\"92\":1,\"147\":1,\"166\":1,\"173\":1,\"174\":1,\"209\":2,\"233\":1}}],[\"part\",{\"0\":{\"122\":1,\"125\":1,\"132\":1,\"137\":1,\"149\":1,\"155\":1,\"161\":1,\"232\":1,\"236\":1},\"1\":{\"11\":1,\"16\":1,\"30\":1,\"31\":1,\"36\":1,\"53\":3,\"71\":1,\"85\":1,\"86\":1,\"89\":2,\"90\":1,\"94\":1,\"96\":1,\"98\":1,\"104\":1,\"122\":1,\"123\":1,\"143\":1,\"148\":1,\"161\":1,\"162\":2,\"186\":1,\"187\":1,\"197\":1,\"203\":1,\"221\":1,\"229\":1,\"234\":1,\"235\":1}}],[\"particularly\",{\"1\":{\"138\":1,\"237\":1}}],[\"particular\",{\"1\":{\"25\":1,\"74\":1,\"77\":2,\"78\":1,\"86\":1,\"116\":1,\"147\":1,\"186\":1,\"187\":1,\"190\":2,\"193\":1,\"208\":1,\"218\":2,\"220\":1,\"225\":1}}],[\"particles\",{\"1\":{\"5\":2}}],[\"particle\",{\"1\":{\"5\":1}}],[\"partition\",{\"1\":{\"17\":2,\"31\":2}}],[\"partitions\",{\"1\":{\"11\":1,\"17\":1,\"21\":1,\"31\":2}}],[\"partitioned\",{\"1\":{\"11\":2}}],[\"partitioning\",{\"1\":{\"9\":1,\"31\":2}}],[\"partially\",{\"1\":{\"10\":1}}],[\"partial\",{\"1\":{\"10\":1}}],[\"party\",{\"1\":{\"4\":1,\"11\":1,\"35\":1}}],[\"past\",{\"1\":{\"16\":1}}],[\"pasting\",{\"1\":{\"5\":1}}],[\"pascalcase\",{\"1\":{\"68\":1}}],[\"pascal\",{\"1\":{\"8\":1}}],[\"passl\",{\"1\":{\"124\":24,\"133\":1,\"143\":5,\"147\":4,\"148\":1,\"196\":5,\"226\":3}}],[\"passc\",{\"1\":{\"124\":16,\"143\":2,\"146\":2,\"147\":3,\"179\":1,\"196\":4,\"226\":1}}],[\"passcodes\",{\"1\":{\"22\":1}}],[\"passed\",{\"1\":{\"78\":1,\"124\":1,\"138\":1,\"150\":1,\"160\":1,\"169\":1,\"177\":1,\"227\":2,\"230\":1}}],[\"passes\",{\"1\":{\"9\":1,\"10\":2,\"58\":1,\"83\":2,\"164\":2,\"245\":2}}],[\"passwd\",{\"1\":{\"11\":1}}],[\"passwords\",{\"1\":{\"22\":2}}],[\"password\",{\"1\":{\"11\":1,\"22\":4}}],[\"pass\",{\"0\":{\"163\":1},\"1\":{\"5\":1,\"6\":1,\"78\":2,\"92\":1,\"124\":7,\"139\":2,\"150\":2,\"161\":1,\"162\":5,\"163\":2,\"164\":2,\"177\":2,\"180\":1,\"182\":1,\"195\":1,\"197\":1,\"210\":2,\"211\":2,\"212\":2,\"214\":2,\"227\":1,\"237\":1}}],[\"passing\",{\"1\":{\"5\":3,\"10\":1,\"21\":1,\"24\":1,\"77\":2,\"78\":1,\"116\":1,\"123\":4,\"124\":3,\"147\":2,\"150\":1,\"160\":1,\"164\":1,\"212\":1,\"213\":1,\"214\":1,\"252\":1}}],[\"pragma\",{\"1\":{\"124\":2,\"130\":1,\"131\":1,\"175\":1,\"177\":1,\"191\":1,\"212\":1,\"223\":1,\"239\":1}}],[\"practitioner\",{\"1\":{\"6\":1}}],[\"practices\",{\"1\":{\"6\":2,\"36\":1}}],[\"practice\",{\"1\":{\"6\":1,\"24\":1,\"51\":1}}],[\"prs\",{\"1\":{\"6\":1,\"24\":1}}],[\"pr\",{\"1\":{\"6\":4,\"35\":1}}],[\"preempt\",{\"1\":{\"238\":1}}],[\"preempted\",{\"1\":{\"238\":1}}],[\"preemptive\",{\"1\":{\"231\":1,\"238\":2,\"246\":1,\"252\":1}}],[\"preemption\",{\"1\":{\"21\":1}}],[\"preinit\",{\"1\":{\"235\":1}}],[\"preinitarray\",{\"1\":{\"235\":1}}],[\"preinstalled\",{\"1\":{\"33\":1}}],[\"prebuilt\",{\"1\":{\"134\":1}}],[\"preboot\",{\"1\":{\"21\":1}}],[\"prev\",{\"1\":{\"169\":7,\"170\":4,\"171\":20}}],[\"prevparent\",{\"1\":{\"77\":4}}],[\"previously\",{\"1\":{\"70\":1,\"234\":1,\"240\":1}}],[\"previous\",{\"1\":{\"53\":1,\"70\":1,\"85\":1,\"110\":1,\"124\":2,\"125\":1,\"137\":1,\"155\":1,\"159\":1,\"169\":2}}],[\"preventry\",{\"1\":{\"169\":5}}],[\"prevents\",{\"1\":{\"24\":1,\"70\":1,\"194\":1}}],[\"prevention\",{\"1\":{\"22\":1}}],[\"prevent\",{\"1\":{\"21\":1,\"22\":3,\"32\":1,\"135\":1,\"190\":1}}],[\"premain\",{\"1\":{\"196\":1}}],[\"premaininner\",{\"1\":{\"196\":2}}],[\"premature\",{\"1\":{\"35\":1}}],[\"premises\",{\"1\":{\"21\":1}}],[\"pretty\",{\"1\":{\"22\":1}}],[\"pretrained\",{\"1\":{\"18\":1}}],[\"prefixexpr\",{\"1\":{\"106\":3,\"107\":1,\"108\":2}}],[\"prefixed\",{\"1\":{\"101\":1}}],[\"prefixes\",{\"1\":{\"21\":2,\"98\":1,\"104\":1}}],[\"prefix\",{\"1\":{\"98\":2,\"102\":1,\"104\":1,\"106\":2,\"135\":1,\"139\":1}}],[\"preface\",{\"1\":{\"35\":4}}],[\"preferences\",{\"1\":{\"21\":1}}],[\"preference\",{\"1\":{\"18\":2}}],[\"prefer\",{\"1\":{\"5\":2,\"14\":1,\"75\":1}}],[\"predefined\",{\"1\":{\"103\":1,\"104\":1}}],[\"predecessor\",{\"1\":{\"4\":1,\"11\":6,\"17\":1,\"21\":1,\"25\":1,\"29\":1,\"30\":1}}],[\"predict\",{\"1\":{\"31\":1}}],[\"predicate\",{\"1\":{\"15\":2}}],[\"predating\",{\"1\":{\"21\":1,\"28\":1}}],[\"preparing\",{\"0\":{\"180\":1,\"195\":1},\"1\":{\"140\":1,\"180\":1,\"181\":1,\"188\":1}}],[\"preparation\",{\"1\":{\"12\":1}}],[\"prepared\",{\"1\":{\"237\":1}}],[\"prepare\",{\"1\":{\"11\":1,\"179\":1,\"180\":1,\"212\":1,\"217\":1}}],[\"preprocessor\",{\"1\":{\"8\":1}}],[\"pre\",{\"1\":{\"10\":2,\"18\":2,\"21\":2,\"31\":1,\"32\":1,\"34\":1,\"147\":1,\"224\":1,\"231\":1}}],[\"preheaders\",{\"1\":{\"10\":1}}],[\"preserving\",{\"1\":{\"24\":1}}],[\"preserved\",{\"1\":{\"11\":1,\"208\":1}}],[\"preserve\",{\"1\":{\"11\":1,\"35\":1}}],[\"presence\",{\"1\":{\"21\":2,\"139\":1}}],[\"present\",{\"1\":{\"22\":1,\"31\":1,\"85\":1,\"135\":1,\"175\":4,\"177\":9,\"185\":2,\"190\":2,\"192\":2}}],[\"presented\",{\"1\":{\"21\":1,\"45\":1}}],[\"presentation\",{\"1\":{\"5\":1,\"9\":1}}],[\"pressing\",{\"1\":{\"82\":1,\"84\":1}}],[\"pressures\",{\"1\":{\"35\":1}}],[\"press\",{\"1\":{\"9\":1,\"75\":2,\"82\":1}}],[\"precendence\",{\"1\":{\"104\":1}}],[\"precedencelevel\",{\"1\":{\"103\":1}}],[\"precedence\",{\"1\":{\"102\":4,\"103\":2,\"104\":8,\"105\":8,\"108\":3,\"109\":2,\"110\":1}}],[\"preceded\",{\"1\":{\"95\":1,\"98\":1}}],[\"preceding\",{\"1\":{\"11\":1,\"94\":1,\"106\":1}}],[\"preceeded\",{\"1\":{\"94\":1}}],[\"precision\",{\"1\":{\"25\":1,\"33\":1}}],[\"precise\",{\"1\":{\"9\":1,\"12\":1,\"14\":1,\"32\":1,\"33\":1}}],[\"precursors\",{\"1\":{\"21\":1}}],[\"precursor\",{\"1\":{\"10\":1,\"11\":2,\"17\":2,\"21\":3,\"33\":1,\"35\":1}}],[\"preconditions\",{\"1\":{\"5\":1}}],[\"price\",{\"1\":{\"87\":1,\"148\":1}}],[\"pri\",{\"1\":{\"21\":1}}],[\"privately\",{\"1\":{\"35\":1}}],[\"private\",{\"1\":{\"21\":1,\"22\":2,\"24\":2,\"35\":1,\"63\":2,\"66\":3,\"77\":1,\"78\":1,\"82\":1,\"87\":3,\"88\":3,\"89\":8,\"92\":8,\"93\":3,\"96\":1,\"97\":5,\"104\":1,\"105\":1,\"106\":4,\"107\":1,\"109\":5,\"110\":1,\"124\":2}}],[\"privacy\",{\"0\":{\"23\":1},\"1\":{\"14\":1,\"21\":2,\"22\":2,\"23\":6,\"36\":1}}],[\"privileges\",{\"1\":{\"184\":1,\"186\":1}}],[\"privileged\",{\"1\":{\"34\":1,\"185\":2,\"186\":1,\"190\":1,\"205\":1,\"207\":1}}],[\"privilege\",{\"1\":{\"11\":1,\"22\":1,\"25\":1,\"27\":1,\"185\":7,\"186\":9,\"187\":1,\"190\":2,\"201\":1}}],[\"primitives\",{\"1\":{\"11\":1,\"124\":4,\"252\":1}}],[\"prim\",{\"1\":{\"9\":1}}],[\"primarysuffix\",{\"1\":{\"107\":2}}],[\"primaryexpr\",{\"1\":{\"105\":3,\"106\":4,\"107\":1,\"108\":2,\"109\":1}}],[\"primary\",{\"1\":{\"7\":1,\"11\":3,\"17\":3,\"19\":1,\"22\":1,\"26\":1,\"31\":1,\"34\":1,\"105\":1,\"108\":1}}],[\"primarily\",{\"1\":{\"4\":1,\"8\":1,\"13\":1,\"14\":1,\"17\":1}}],[\"principals\",{\"1\":{\"22\":2}}],[\"principles\",{\"1\":{\"5\":1,\"9\":1,\"21\":1}}],[\"principle\",{\"1\":{\"5\":5,\"22\":1}}],[\"printvmregions\",{\"1\":{\"183\":2}}],[\"printfreeregions\",{\"1\":{\"169\":2,\"170\":1,\"171\":5,\"183\":2}}],[\"prints\",{\"1\":{\"141\":1,\"166\":1,\"191\":1,\"243\":2}}],[\"printstmtimpl\",{\"1\":{\"69\":2}}],[\"printstmt\",{\"1\":{\"68\":3,\"69\":3}}],[\"printed\",{\"1\":{\"139\":1,\"140\":1,\"141\":2,\"160\":1,\"191\":1,\"192\":1,\"212\":1,\"214\":1,\"227\":2,\"230\":1,\"231\":1}}],[\"printer\",{\"1\":{\"21\":1,\"30\":2}}],[\"printers\",{\"1\":{\"13\":1,\"21\":2,\"30\":1}}],[\"printable\",{\"1\":{\"14\":1}}],[\"printing\",{\"0\":{\"139\":1},\"1\":{\"13\":1,\"36\":1,\"124\":1,\"141\":1,\"160\":3,\"161\":1,\"170\":1,\"197\":1,\"215\":1}}],[\"print\",{\"0\":{\"165\":1,\"183\":1},\"1\":{\"8\":3,\"9\":1,\"11\":1,\"13\":1,\"14\":1,\"21\":3,\"32\":3,\"68\":2,\"72\":1,\"135\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":3,\"141\":2,\"144\":6,\"145\":1,\"160\":1,\"161\":1,\"163\":1,\"165\":2,\"169\":2,\"183\":2,\"192\":2,\"193\":1,\"213\":5,\"214\":6,\"215\":6,\"222\":1,\"223\":1,\"227\":14,\"230\":6,\"231\":3,\"241\":3,\"243\":5,\"244\":1,\"245\":3,\"246\":1}}],[\"prioritization\",{\"1\":{\"35\":1}}],[\"prioritize\",{\"1\":{\"21\":1}}],[\"prioritized\",{\"1\":{\"10\":1}}],[\"priority\",{\"1\":{\"9\":1,\"11\":1,\"21\":2,\"26\":1,\"34\":1,\"151\":1,\"238\":1,\"247\":1,\"249\":1,\"252\":1}}],[\"prior\",{\"1\":{\"6\":1,\"14\":1,\"17\":1,\"21\":1}}],[\"prologue\",{\"1\":{\"209\":1}}],[\"pros\",{\"1\":{\"176\":4}}],[\"progbits\",{\"1\":{\"147\":7,\"226\":6,\"228\":8,\"229\":4,\"234\":6,\"235\":2}}],[\"programmer\",{\"1\":{\"29\":1}}],[\"programmed\",{\"1\":{\"11\":1,\"25\":1,\"29\":1,\"248\":2}}],[\"programmable\",{\"1\":{\"10\":1,\"28\":1,\"29\":4,\"33\":4,\"247\":2}}],[\"programmatic\",{\"1\":{\"9\":1}}],[\"programming\",{\"0\":{\"8\":1,\"9\":1},\"1\":{\"4\":1,\"5\":1,\"6\":2,\"8\":4,\"9\":4,\"10\":2,\"13\":1,\"21\":1,\"22\":1,\"24\":1,\"25\":1,\"27\":1,\"30\":1,\"31\":1,\"35\":1,\"39\":1,\"40\":1,\"44\":1,\"113\":1,\"115\":1,\"117\":1}}],[\"program\",{\"0\":{\"196\":1,\"197\":1},\"1\":{\"8\":1,\"9\":2,\"10\":5,\"11\":6,\"21\":1,\"33\":1,\"57\":1,\"72\":2,\"123\":1,\"124\":4,\"147\":10,\"186\":2,\"187\":1,\"191\":1,\"194\":7,\"195\":6,\"196\":4,\"197\":4,\"199\":1,\"208\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":4,\"216\":1,\"223\":1,\"232\":1,\"233\":4,\"234\":5,\"235\":6,\"248\":1,\"249\":1}}],[\"programs\",{\"1\":{\"7\":1,\"9\":1,\"10\":3,\"11\":4,\"21\":1,\"36\":1,\"124\":1,\"166\":1,\"185\":1,\"190\":1,\"194\":2,\"207\":2,\"208\":1}}],[\"progressing\",{\"1\":{\"87\":2}}],[\"progressive\",{\"1\":{\"7\":1}}],[\"progress\",{\"1\":{\"6\":2,\"87\":1,\"89\":1,\"251\":1}}],[\"prone\",{\"1\":{\"59\":1}}],[\"prod\",{\"1\":{\"35\":1}}],[\"producing\",{\"1\":{\"36\":1,\"94\":1}}],[\"produces\",{\"1\":{\"33\":1,\"57\":3,\"121\":1}}],[\"produced\",{\"1\":{\"10\":1,\"22\":1,\"49\":1,\"58\":1}}],[\"produce\",{\"1\":{\"9\":1,\"32\":1,\"33\":1,\"87\":1,\"234\":1}}],[\"producers\",{\"1\":{\"4\":1,\"17\":1}}],[\"products\",{\"1\":{\"9\":1,\"17\":1,\"33\":1,\"44\":1}}],[\"product\",{\"1\":{\"6\":4}}],[\"productivity\",{\"1\":{\"20\":1}}],[\"productive\",{\"1\":{\"6\":1}}],[\"productions\",{\"1\":{\"10\":2}}],[\"production\",{\"1\":{\"6\":3,\"58\":1}}],[\"prometheus\",{\"1\":{\"36\":1}}],[\"proms\",{\"1\":{\"29\":1}}],[\"prom\",{\"1\":{\"29\":1}}],[\"prompting\",{\"1\":{\"18\":1}}],[\"prompt\",{\"1\":{\"11\":3,\"18\":1,\"121\":1}}],[\"probably\",{\"1\":{\"35\":1}}],[\"probabilistic\",{\"1\":{\"17\":1}}],[\"problems\",{\"1\":{\"146\":1}}],[\"problem\",{\"1\":{\"6\":1,\"9\":1,\"35\":2,\"85\":1,\"89\":2,\"104\":1,\"141\":1,\"146\":1,\"148\":2,\"163\":1,\"179\":1,\"223\":2,\"229\":1}}],[\"profit\",{\"1\":{\"36\":3}}],[\"profiles\",{\"1\":{\"22\":1}}],[\"profile\",{\"1\":{\"15\":1}}],[\"profiling\",{\"1\":{\"5\":1}}],[\"professional\",{\"1\":{\"13\":1,\"35\":1,\"36\":1}}],[\"protects\",{\"1\":{\"22\":1}}],[\"protection\",{\"1\":{\"11\":1,\"21\":3,\"23\":2,\"32\":2,\"116\":1,\"185\":1,\"186\":2,\"192\":5,\"205\":3,\"206\":3,\"231\":1}}],[\"protected\",{\"1\":{\"11\":2,\"23\":1,\"25\":1,\"32\":2,\"185\":1,\"195\":1,\"205\":1}}],[\"proto\",{\"1\":{\"9\":1}}],[\"protobuf\",{\"1\":{\"9\":1}}],[\"prototypes\",{\"1\":{\"36\":1}}],[\"prototype\",{\"1\":{\"6\":3,\"33\":1}}],[\"prototyping\",{\"1\":{\"6\":2}}],[\"protocolsperhandle\",{\"1\":{\"151\":1}}],[\"protocols\",{\"0\":{\"21\":1},\"1\":{\"14\":1,\"21\":6,\"30\":1}}],[\"protocol\",{\"1\":{\"4\":1,\"9\":3,\"11\":2,\"15\":1,\"18\":2,\"21\":74,\"22\":2,\"30\":4,\"31\":1,\"36\":2,\"151\":5,\"152\":2}}],[\"procs\",{\"1\":{\"97\":1,\"124\":1,\"168\":1,\"177\":3,\"179\":1,\"180\":1,\"183\":1,\"209\":1,\"240\":1,\"244\":1,\"248\":1}}],[\"proc\",{\"1\":{\"11\":1,\"61\":1,\"77\":1,\"85\":2,\"86\":2,\"101\":4,\"102\":1,\"109\":1,\"124\":10,\"127\":1,\"128\":1,\"130\":1,\"131\":3,\"133\":2,\"135\":2,\"138\":2,\"139\":4,\"140\":5,\"141\":4,\"144\":3,\"145\":1,\"147\":1,\"151\":3,\"152\":1,\"153\":2,\"154\":4,\"156\":2,\"157\":2,\"158\":2,\"159\":3,\"160\":3,\"161\":8,\"162\":6,\"163\":6,\"164\":1,\"165\":1,\"166\":9,\"168\":11,\"169\":3,\"170\":2,\"171\":2,\"175\":4,\"177\":18,\"180\":6,\"181\":6,\"182\":4,\"183\":3,\"187\":2,\"188\":3,\"190\":2,\"191\":3,\"192\":6,\"193\":3,\"196\":2,\"197\":8,\"198\":1,\"199\":1,\"200\":1,\"203\":2,\"204\":1,\"205\":3,\"206\":6,\"209\":8,\"210\":2,\"211\":3,\"212\":5,\"213\":5,\"214\":1,\"215\":3,\"218\":4,\"219\":2,\"220\":4,\"221\":2,\"222\":1,\"223\":5,\"227\":2,\"230\":9,\"231\":5,\"235\":2,\"237\":11,\"239\":4,\"240\":4,\"241\":4,\"242\":3,\"243\":1,\"245\":3,\"246\":2,\"248\":4,\"249\":6}}],[\"proceed\",{\"1\":{\"17\":1}}],[\"proceeds\",{\"1\":{\"7\":2}}],[\"procedures\",{\"1\":{\"9\":1,\"102\":1,\"144\":2,\"191\":2,\"235\":1}}],[\"procedure\",{\"1\":{\"9\":1,\"11\":1,\"130\":1,\"140\":2,\"141\":2,\"169\":1,\"170\":1,\"190\":2,\"191\":1}}],[\"processindent\",{\"1\":{\"87\":5,\"88\":1,\"89\":1}}],[\"processindentation\",{\"1\":{\"87\":1}}],[\"processing\",{\"0\":{\"17\":1,\"79\":1},\"1\":{\"5\":1,\"8\":2,\"9\":3,\"10\":1,\"11\":6,\"17\":7,\"18\":1,\"26\":1,\"27\":1,\"32\":1,\"36\":2,\"79\":1,\"88\":1,\"147\":2,\"234\":1}}],[\"processdeclarations\",{\"1\":{\"77\":5,\"78\":2,\"79\":6}}],[\"processeof\",{\"1\":{\"89\":6,\"96\":1}}],[\"processes\",{\"1\":{\"5\":3,\"6\":1,\"9\":1,\"11\":6,\"17\":1,\"18\":1,\"24\":2,\"25\":1,\"116\":2,\"124\":1,\"173\":1}}],[\"processed\",{\"1\":{\"4\":1,\"17\":1,\"79\":2,\"124\":1,\"249\":1}}],[\"processorpriority\",{\"1\":{\"248\":1}}],[\"processors\",{\"1\":{\"13\":1,\"25\":1,\"26\":1,\"30\":1,\"188\":1}}],[\"processor\",{\"0\":{\"78\":1},\"1\":{\"4\":1,\"11\":1,\"25\":3,\"26\":4,\"30\":3,\"32\":1,\"77\":3,\"78\":5,\"79\":4,\"147\":2,\"185\":1,\"196\":1,\"234\":1,\"248\":3,\"249\":4}}],[\"process\",{\"1\":{\"4\":1,\"6\":2,\"11\":11,\"15\":1,\"17\":1,\"23\":1,\"33\":1,\"55\":1,\"59\":1,\"78\":1,\"79\":2,\"85\":1,\"116\":1,\"124\":1,\"130\":1,\"140\":1,\"172\":1,\"225\":2}}],[\"proxies\",{\"1\":{\"9\":1}}],[\"proxy\",{\"1\":{\"7\":1,\"20\":1}}],[\"proves\",{\"1\":{\"230\":1}}],[\"provers\",{\"1\":{\"8\":1}}],[\"provision\",{\"1\":{\"24\":1}}],[\"provisioning\",{\"1\":{\"21\":1}}],[\"providers\",{\"1\":{\"21\":1}}],[\"provider\",{\"1\":{\"17\":1,\"21\":5,\"22\":2,\"37\":1}}],[\"provided\",{\"1\":{\"11\":2,\"21\":5,\"30\":1,\"32\":1,\"34\":1,\"57\":1,\"124\":1,\"137\":1,\"197\":1,\"213\":1}}],[\"provide\",{\"1\":{\"5\":1,\"11\":2,\"18\":1,\"21\":1,\"41\":2,\"47\":2,\"49\":1,\"50\":1,\"57\":1,\"59\":1,\"85\":1,\"94\":1,\"124\":4,\"143\":1,\"177\":1,\"207\":1,\"218\":1}}],[\"provides\",{\"1\":{\"4\":1,\"11\":3,\"12\":1,\"17\":2,\"21\":4,\"33\":1,\"34\":2,\"44\":1,\"51\":1,\"54\":1,\"55\":1,\"57\":2,\"58\":2,\"59\":1,\"61\":2,\"64\":1,\"75\":1,\"77\":2,\"95\":1,\"113\":1,\"115\":1,\"121\":1,\"150\":1,\"159\":1,\"194\":1,\"207\":1,\"235\":1}}],[\"providing\",{\"1\":{\"4\":1,\"11\":3,\"12\":1,\"15\":1,\"17\":1,\"21\":5,\"24\":2,\"28\":2,\"30\":1,\"31\":1,\"33\":2,\"34\":1,\"35\":1,\"141\":1}}],[\"proprietary\",{\"1\":{\"10\":1,\"16\":1,\"21\":3,\"30\":2,\"34\":1,\"37\":2}}],[\"propagation\",{\"1\":{\"10\":3}}],[\"propagates\",{\"1\":{\"9\":1}}],[\"property\",{\"1\":{\"75\":1,\"82\":2}}],[\"properties\",{\"1\":{\"7\":1,\"15\":2,\"106\":1,\"185\":1}}],[\"properly\",{\"1\":{\"66\":1,\"96\":1,\"105\":1,\"165\":1,\"166\":1,\"193\":1}}],[\"proper\",{\"1\":{\"7\":1,\"63\":1,\"124\":1,\"164\":2}}],[\"proposal\",{\"1\":{\"6\":1}}],[\"propose\",{\"1\":{\"6\":1}}],[\"proofs\",{\"1\":{\"22\":1}}],[\"proof\",{\"1\":{\"6\":1,\"191\":1}}],[\"project\",{\"0\":{\"42\":1,\"43\":1,\"121\":1,\"143\":1},\"1\":{\"7\":1,\"11\":2,\"12\":1,\"21\":2,\"34\":1,\"35\":1,\"36\":2,\"41\":3,\"43\":5,\"45\":5,\"54\":3,\"55\":1,\"64\":4,\"71\":1,\"82\":11,\"116\":1,\"121\":4,\"124\":4,\"134\":2,\"135\":1,\"136\":2,\"143\":3}}],[\"projections\",{\"1\":{\"4\":1}}],[\"projection\",{\"1\":{\"4\":1}}],[\"projects\",{\"1\":{\"0\":1,\"6\":1,\"21\":1,\"36\":3,\"37\":1}}],[\"pods\",{\"1\":{\"24\":1}}],[\"popregs\",{\"1\":{\"240\":3}}],[\"popfirst\",{\"1\":{\"239\":1}}],[\"popframe\",{\"1\":{\"147\":1}}],[\"pops\",{\"1\":{\"188\":1,\"191\":1,\"194\":1}}],[\"popped\",{\"1\":{\"186\":2}}],[\"pop\",{\"1\":{\"87\":3,\"89\":3,\"195\":1,\"211\":2,\"212\":9,\"240\":15}}],[\"popover\",{\"1\":{\"84\":1}}],[\"pop3\",{\"1\":{\"21\":1}}],[\"populate\",{\"1\":{\"29\":1,\"197\":1,\"199\":2}}],[\"populates\",{\"1\":{\"11\":1}}],[\"popular\",{\"1\":{\"8\":3,\"9\":1,\"10\":1,\"11\":1,\"13\":2,\"21\":2,\"25\":1,\"31\":1,\"34\":1,\"35\":1,\"167\":1}}],[\"popularized\",{\"1\":{\"5\":1,\"6\":1}}],[\"poe++\",{\"1\":{\"21\":1}}],[\"poe+\",{\"1\":{\"21\":1}}],[\"poe\",{\"1\":{\"21\":2}}],[\"poor\",{\"1\":{\"20\":1}}],[\"pool\",{\"1\":{\"159\":2}}],[\"pooltype\",{\"1\":{\"159\":1}}],[\"pools\",{\"1\":{\"11\":1}}],[\"pooled\",{\"1\":{\"4\":1}}],[\"poisoning\",{\"1\":{\"24\":1}}],[\"poison\",{\"1\":{\"17\":1,\"21\":1}}],[\"pointed\",{\"1\":{\"127\":1,\"128\":1,\"201\":1,\"248\":1}}],[\"pointers\",{\"1\":{\"11\":1,\"25\":1,\"34\":3,\"129\":1,\"138\":1,\"201\":3,\"225\":1,\"240\":2}}],[\"pointer\",{\"1\":{\"5\":1,\"9\":2,\"11\":1,\"22\":1,\"34\":1,\"35\":1,\"124\":6,\"127\":4,\"131\":3,\"133\":2,\"138\":14,\"139\":2,\"140\":1,\"141\":1,\"151\":51,\"152\":2,\"153\":14,\"154\":1,\"156\":1,\"157\":1,\"159\":2,\"168\":4,\"174\":1,\"175\":2,\"177\":4,\"182\":1,\"187\":2,\"188\":1,\"190\":3,\"191\":1,\"192\":2,\"193\":1,\"194\":1,\"197\":1,\"199\":1,\"201\":1,\"206\":1,\"210\":1,\"211\":1,\"212\":2,\"213\":1,\"214\":5,\"217\":2,\"218\":1,\"225\":1,\"227\":3,\"228\":4,\"235\":2,\"237\":14,\"240\":6,\"245\":1}}],[\"points\",{\"1\":{\"10\":1,\"14\":3,\"21\":2,\"44\":1,\"174\":8,\"190\":1,\"202\":1,\"227\":1,\"230\":1,\"238\":1,\"239\":1}}],[\"point\",{\"0\":{\"133\":1,\"145\":1},\"1\":{\"9\":1,\"19\":2,\"20\":1,\"21\":7,\"26\":2,\"30\":6,\"31\":2,\"35\":1,\"36\":1,\"44\":1,\"48\":1,\"55\":1,\"59\":1,\"64\":1,\"78\":1,\"89\":1,\"97\":1,\"98\":2,\"99\":5,\"122\":1,\"123\":2,\"124\":1,\"132\":1,\"133\":6,\"135\":1,\"137\":1,\"141\":3,\"142\":1,\"145\":1,\"147\":10,\"150\":1,\"151\":1,\"160\":2,\"161\":1,\"162\":1,\"164\":4,\"175\":1,\"176\":2,\"181\":1,\"190\":1,\"192\":8,\"193\":1,\"194\":3,\"195\":1,\"198\":1,\"199\":1,\"200\":2,\"202\":1,\"204\":1,\"205\":1,\"209\":6,\"220\":1,\"221\":2,\"222\":1,\"223\":1,\"226\":1,\"228\":1,\"229\":1,\"230\":4,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"237\":2,\"240\":1}}],[\"pointing\",{\"1\":{\"5\":1,\"21\":1,\"162\":1,\"212\":1}}],[\"powerpc\",{\"1\":{\"25\":4,\"235\":2}}],[\"power4+\",{\"1\":{\"25\":1}}],[\"powerful\",{\"1\":{\"12\":1}}],[\"power10\",{\"1\":{\"11\":1,\"25\":1}}],[\"power9\",{\"1\":{\"11\":1,\"25\":1}}],[\"power\",{\"1\":{\"11\":3,\"17\":1,\"18\":1,\"21\":2,\"24\":2,\"25\":3,\"29\":4,\"33\":6,\"34\":17,\"177\":1,\"196\":1}}],[\"powers\",{\"1\":{\"9\":1}}],[\"powershell\",{\"1\":{\"6\":1}}],[\"polp\",{\"1\":{\"22\":1}}],[\"pollutes\",{\"1\":{\"176\":1}}],[\"poll\",{\"1\":{\"21\":2}}],[\"polling\",{\"1\":{\"21\":1,\"30\":1}}],[\"polite\",{\"1\":{\"35\":1}}],[\"policies\",{\"1\":{\"21\":1,\"22\":4,\"36\":1}}],[\"policy\",{\"1\":{\"9\":1,\"15\":1,\"17\":1,\"18\":1,\"22\":5,\"36\":1}}],[\"polish\",{\"1\":{\"9\":1}}],[\"polymorphism\",{\"1\":{\"4\":1,\"9\":1,\"10\":1}}],[\"portion\",{\"1\":{\"198\":1}}],[\"portions\",{\"1\":{\"11\":1}}],[\"portout8\",{\"1\":{\"144\":2}}],[\"portal\",{\"1\":{\"21\":1}}],[\"portability\",{\"1\":{\"11\":1,\"23\":3}}],[\"portable\",{\"1\":{\"7\":1,\"10\":2,\"11\":3,\"13\":1,\"15\":2,\"31\":1,\"123\":1}}],[\"ports\",{\"1\":{\"21\":4,\"30\":1,\"36\":1}}],[\"port\",{\"1\":{\"9\":1,\"21\":2,\"30\":2,\"32\":1,\"36\":1,\"124\":4,\"144\":5}}],[\"poc\",{\"1\":{\"6\":1}}],[\"possibly\",{\"1\":{\"98\":1,\"101\":1}}],[\"possible\",{\"1\":{\"9\":1,\"10\":2,\"22\":1,\"35\":2,\"75\":1,\"85\":1,\"171\":1,\"185\":1,\"209\":1}}],[\"poses\",{\"1\":{\"110\":1,\"148\":1}}],[\"pose\",{\"1\":{\"96\":1}}],[\"pos\",{\"1\":{\"21\":2}}],[\"positive\",{\"1\":{\"170\":1,\"171\":1}}],[\"positions\",{\"1\":{\"36\":1,\"237\":1}}],[\"positional\",{\"1\":{\"9\":2}}],[\"position\",{\"0\":{\"224\":1},\"1\":{\"4\":1,\"5\":1,\"51\":2,\"89\":1,\"224\":3,\"225\":1,\"234\":1,\"235\":1}}],[\"posix\",{\"1\":{\"9\":3,\"11\":5,\"124\":1}}],[\"poster\",{\"1\":{\"35\":1}}],[\"posted\",{\"1\":{\"35\":1}}],[\"posting\",{\"1\":{\"21\":1}}],[\"postmortem\",{\"1\":{\"19\":1,\"35\":1}}],[\"postfix\",{\"1\":{\"9\":1}}],[\"postgresql\",{\"1\":{\"17\":4}}],[\"postgres\",{\"1\":{\"9\":1,\"17\":1}}],[\"post\",{\"1\":{\"7\":1,\"10\":1,\"21\":2,\"34\":2,\"35\":1}}],[\"postscript\",{\"1\":{\"13\":5}}],[\"posts\",{\"1\":{\"7\":1,\"21\":1}}],[\"postconditions\",{\"1\":{\"5\":1}}],[\"lvterror\",{\"1\":{\"248\":1}}],[\"lvtlint1\",{\"1\":{\"248\":1}}],[\"lvtlint0\",{\"1\":{\"248\":1}}],[\"lvtperfmoncounters\",{\"1\":{\"248\":1}}],[\"lvtthermalsensor\",{\"1\":{\"248\":1}}],[\"lvttimer\",{\"1\":{\"248\":1}}],[\"lvtcmci\",{\"1\":{\"248\":1}}],[\"lvt\",{\"1\":{\"248\":2}}],[\"lk\",{\"1\":{\"147\":2,\"226\":1,\"228\":2,\"229\":1,\"234\":1}}],[\"l\",{\"1\":{\"95\":4,\"97\":2,\"98\":1,\"147\":4,\"185\":3,\"187\":2,\"234\":2,\"235\":1}}],[\"lgdt\",{\"1\":{\"188\":2,\"203\":1}}],[\"lgpl\",{\"1\":{\"37\":1}}],[\"lgtm\",{\"1\":{\"35\":2}}],[\"lcomment\",{\"1\":{\"96\":1}}],[\"lcds\",{\"1\":{\"32\":1}}],[\"lcd\",{\"1\":{\"32\":4}}],[\"lcp\",{\"1\":{\"20\":2}}],[\"lparen\",{\"1\":{\"108\":2}}],[\"lpars\",{\"1\":{\"11\":1}}],[\"lpmud\",{\"1\":{\"35\":1}}],[\"lpt2\",{\"1\":{\"30\":1}}],[\"lpt1\",{\"1\":{\"30\":1}}],[\"lpt\",{\"1\":{\"30\":1}}],[\"lpc\",{\"1\":{\"30\":1}}],[\"lpddr4\",{\"1\":{\"29\":1}}],[\"lpddr\",{\"1\":{\"29\":1}}],[\"l3\",{\"1\":{\"26\":2,\"29\":1}}],[\"l3vpn\",{\"1\":{\"21\":1}}],[\"l3vpns\",{\"1\":{\"21\":2}}],[\"l1\",{\"1\":{\"26\":2,\"29\":1}}],[\"l10n\",{\"1\":{\"6\":1}}],[\"lxc\",{\"1\":{\"24\":1}}],[\"lba\",{\"1\":{\"31\":4}}],[\"lb\",{\"1\":{\"24\":1}}],[\"l2\",{\"1\":{\"21\":1,\"26\":2,\"29\":1}}],[\"l2tp\",{\"1\":{\"21\":3}}],[\"lu\",{\"1\":{\"21\":1}}],[\"lunch\",{\"1\":{\"35\":1}}],[\"luns\",{\"1\":{\"21\":1,\"31\":1}}],[\"lun\",{\"1\":{\"21\":1,\"31\":2}}],[\"luw\",{\"1\":{\"17\":1}}],[\"luatex\",{\"1\":{\"12\":1}}],[\"lww\",{\"1\":{\"17\":1}}],[\"lzw\",{\"1\":{\"16\":1}}],[\"lz4\",{\"1\":{\"16\":3}}],[\"lz77+huffman\",{\"1\":{\"16\":1}}],[\"lz77\",{\"1\":{\"16\":2}}],[\"lzma2\",{\"1\":{\"16\":5}}],[\"lzma\",{\"1\":{\"16\":3}}],[\"lf\",{\"1\":{\"14\":2,\"141\":1}}],[\"lma\",{\"1\":{\"147\":3,\"179\":1,\"196\":1,\"227\":1,\"228\":2}}],[\"lmk\",{\"1\":{\"35\":2}}],[\"lmgtfy\",{\"1\":{\"35\":2}}],[\"lm\",{\"1\":{\"11\":1}}],[\"l4\",{\"1\":{\"11\":2}}],[\"ldt=0000\",{\"1\":{\"188\":1,\"200\":1,\"210\":2}}],[\"ldt\",{\"1\":{\"186\":1,\"188\":1,\"200\":1,\"210\":2}}],[\"ld=lld\",{\"1\":{\"123\":4,\"124\":5,\"143\":1}}],[\"ldap\",{\"1\":{\"21\":3}}],[\"ldp\",{\"1\":{\"21\":8}}],[\"ld+json\",{\"1\":{\"15\":1}}],[\"ld\",{\"1\":{\"10\":1,\"11\":1,\"15\":3,\"119\":1,\"147\":10,\"148\":1,\"179\":2,\"196\":3,\"225\":1,\"226\":2,\"229\":1,\"234\":1}}],[\"lstar\",{\"1\":{\"209\":3}}],[\"lstm\",{\"1\":{\"18\":1}}],[\"lsass\",{\"1\":{\"22\":1}}],[\"lsm\",{\"1\":{\"17\":1}}],[\"lsmt\",{\"1\":{\"17\":1}}],[\"lsb\",{\"1\":{\"9\":3,\"147\":1,\"226\":1,\"234\":1}}],[\"lspci\",{\"1\":{\"30\":1}}],[\"lsps\",{\"1\":{\"21\":4}}],[\"lsp\",{\"1\":{\"5\":2,\"9\":1,\"21\":2}}],[\"lru\",{\"1\":{\"9\":2}}],[\"lr\",{\"1\":{\"9\":1,\"10\":1}}],[\"lld\",{\"1\":{\"117\":1,\"119\":4,\"123\":5,\"124\":12,\"147\":5,\"179\":1,\"196\":1,\"229\":1}}],[\"lldb\",{\"1\":{\"10\":1,\"11\":1}}],[\"llava\",{\"1\":{\"18\":1}}],[\"llama\",{\"1\":{\"18\":1}}],[\"llm\",{\"1\":{\"18\":5}}],[\"llc\",{\"1\":{\"10\":1}}],[\"llvm\",{\"0\":{\"119\":1},\"1\":{\"10\":11,\"22\":1,\"117\":1,\"119\":1,\"147\":6,\"188\":1,\"226\":2,\"228\":4,\"229\":3}}],[\"ll\",{\"1\":{\"9\":1,\"10\":1,\"35\":2,\"41\":2,\"42\":1,\"43\":1,\"45\":1,\"49\":1,\"55\":2,\"61\":2,\"63\":2,\"66\":3,\"69\":1,\"73\":4,\"74\":4,\"75\":2,\"77\":1,\"79\":1,\"82\":2,\"83\":1,\"84\":1,\"87\":2,\"92\":2,\"94\":2,\"95\":1,\"96\":4,\"97\":3,\"98\":1,\"99\":3,\"101\":3,\"102\":1,\"104\":6,\"109\":1,\"116\":2,\"117\":6,\"119\":1,\"121\":2,\"122\":2,\"123\":1,\"124\":10,\"127\":2,\"128\":1,\"130\":1,\"131\":1,\"132\":2,\"133\":2,\"134\":1,\"135\":1,\"137\":1,\"138\":2,\"139\":2,\"140\":5,\"141\":3,\"142\":1,\"143\":5,\"144\":1,\"145\":1,\"146\":1,\"147\":9,\"149\":2,\"150\":5,\"151\":5,\"154\":4,\"155\":2,\"156\":5,\"157\":1,\"159\":2,\"160\":4,\"161\":2,\"162\":3,\"163\":2,\"164\":5,\"165\":1,\"166\":1,\"167\":2,\"168\":1,\"169\":2,\"171\":1,\"172\":2,\"173\":2,\"174\":1,\"175\":2,\"176\":2,\"177\":11,\"178\":1,\"179\":2,\"180\":3,\"181\":5,\"183\":1,\"185\":5,\"186\":3,\"187\":1,\"188\":6,\"189\":2,\"190\":9,\"191\":3,\"192\":2,\"193\":2,\"194\":2,\"196\":1,\"197\":6,\"198\":1,\"199\":2,\"200\":3,\"202\":2,\"203\":1,\"208\":3,\"209\":1,\"210\":2,\"211\":4,\"212\":3,\"213\":3,\"214\":3,\"215\":4,\"218\":4,\"220\":1,\"223\":3,\"226\":2,\"228\":2,\"229\":2,\"230\":6,\"231\":3,\"234\":2,\"235\":6,\"237\":1,\"238\":1,\"239\":8,\"240\":6,\"241\":1,\"243\":1,\"245\":1,\"246\":1,\"248\":2,\"249\":1}}],[\"ltext\",{\"1\":{\"179\":4,\"196\":4,\"210\":1}}],[\"ltfs\",{\"1\":{\"31\":2}}],[\"lto\",{\"1\":{\"10\":1,\"31\":6}}],[\"ltr\",{\"1\":{\"7\":2,\"203\":1}}],[\"lts\",{\"1\":{\"6\":3}}],[\"lo\",{\"1\":{\"201\":5,\"228\":1}}],[\"lose\",{\"1\":{\"124\":1}}],[\"loss\",{\"1\":{\"19\":1,\"21\":1,\"22\":1,\"192\":1}}],[\"lossless\",{\"1\":{\"13\":2,\"16\":10}}],[\"lossy\",{\"1\":{\"13\":2}}],[\"lot\",{\"1\":{\"40\":1,\"110\":1,\"124\":1,\"141\":1,\"150\":1,\"168\":1,\"171\":2,\"177\":1,\"220\":1,\"226\":1,\"228\":1,\"232\":1}}],[\"lotus\",{\"1\":{\"11\":1}}],[\"loadaddress\",{\"1\":{\"197\":6}}],[\"loadable\",{\"1\":{\"11\":1,\"235\":1,\"237\":3}}],[\"loadimage\",{\"1\":{\"151\":1,\"197\":6}}],[\"loading\",{\"0\":{\"135\":1,\"149\":1,\"155\":1,\"161\":1,\"188\":1,\"197\":1,\"203\":1,\"237\":1},\"1\":{\"22\":1,\"186\":1,\"187\":1,\"192\":1,\"197\":3,\"225\":1,\"229\":1,\"236\":1}}],[\"loadoptions\",{\"1\":{\"151\":1}}],[\"loadoptionssize\",{\"1\":{\"151\":1}}],[\"loadererror\",{\"1\":{\"237\":5}}],[\"loader\",{\"0\":{\"232\":1,\"236\":1},\"1\":{\"148\":1,\"225\":2,\"227\":1,\"228\":4,\"229\":1,\"230\":3,\"232\":3,\"233\":1,\"235\":2,\"236\":2,\"237\":11,\"252\":1}}],[\"loaders\",{\"1\":{\"11\":1,\"21\":1,\"229\":1}}],[\"loadedelfimage\",{\"1\":{\"237\":3}}],[\"loadedimage\",{\"1\":{\"151\":4,\"152\":1,\"181\":2}}],[\"loaded\",{\"1\":{\"11\":8,\"22\":1,\"34\":1,\"41\":1,\"45\":3,\"133\":1,\"147\":1,\"151\":2,\"186\":4,\"197\":1,\"224\":1,\"225\":4,\"228\":1,\"231\":2,\"233\":1,\"234\":1,\"235\":3,\"237\":5}}],[\"loadlibrary\",{\"1\":{\"11\":1}}],[\"load\",{\"1\":{\"11\":6,\"17\":5,\"21\":1,\"24\":1,\"47\":1,\"48\":1,\"122\":1,\"133\":1,\"135\":1,\"139\":2,\"140\":1,\"141\":3,\"142\":1,\"147\":8,\"148\":3,\"149\":1,\"151\":1,\"177\":1,\"181\":1,\"188\":1,\"190\":1,\"191\":1,\"195\":4,\"197\":5,\"201\":1,\"203\":1,\"223\":2,\"224\":1,\"226\":1,\"227\":1,\"229\":1,\"230\":2,\"231\":3,\"232\":2,\"233\":1,\"234\":6,\"235\":4,\"237\":13,\"240\":1}}],[\"loads\",{\"1\":{\"5\":1,\"34\":1,\"41\":1,\"186\":1,\"188\":1,\"192\":1,\"194\":3,\"197\":1,\"236\":1}}],[\"looking\",{\"1\":{\"74\":1,\"171\":1,\"179\":1,\"206\":1}}],[\"look\",{\"1\":{\"66\":1,\"72\":1,\"75\":2,\"77\":1,\"78\":1,\"80\":1,\"86\":1,\"97\":1,\"99\":1,\"143\":1,\"147\":3,\"148\":1,\"168\":1,\"172\":1,\"173\":1,\"176\":1,\"177\":1,\"179\":1,\"183\":1,\"190\":1,\"194\":1,\"200\":1,\"212\":1,\"215\":1,\"226\":3,\"227\":2,\"228\":6,\"229\":2,\"246\":1,\"249\":2}}],[\"looks\",{\"1\":{\"35\":1,\"54\":1,\"76\":1,\"84\":1,\"90\":1,\"93\":2,\"96\":1,\"97\":1,\"100\":1,\"105\":1,\"108\":1,\"124\":1,\"141\":1,\"143\":1,\"147\":5,\"165\":1,\"170\":1,\"179\":1,\"182\":1,\"188\":1,\"196\":1,\"200\":1,\"210\":2,\"215\":1,\"227\":1,\"234\":1,\"246\":1}}],[\"lookaside\",{\"1\":{\"26\":1}}],[\"lookahead\",{\"1\":{\"10\":1,\"95\":1,\"104\":1}}],[\"lookup\",{\"1\":{\"21\":1}}],[\"lookups\",{\"1\":{\"21\":1}}],[\"looker\",{\"1\":{\"17\":1}}],[\"loopback\",{\"1\":{\"21\":1}}],[\"loop\",{\"1\":{\"9\":2,\"10\":4,\"21\":1,\"51\":1,\"105\":1,\"130\":3,\"131\":2,\"192\":1,\"196\":4,\"200\":1,\"210\":3,\"213\":2,\"215\":1}}],[\"loops\",{\"1\":{\"6\":1,\"8\":1,\"9\":1,\"10\":2,\"21\":1,\"77\":1}}],[\"loc\",{\"1\":{\"18\":1,\"20\":2}}],[\"locks\",{\"1\":{\"9\":1}}],[\"lock\",{\"1\":{\"9\":2,\"11\":1,\"30\":1}}],[\"locateprotocol\",{\"1\":{\"151\":1}}],[\"locatehandlebuffer\",{\"1\":{\"151\":1}}],[\"locatehandle\",{\"1\":{\"151\":1}}],[\"locatedevicepath\",{\"1\":{\"151\":1}}],[\"located\",{\"1\":{\"124\":3,\"155\":1,\"229\":1,\"248\":1}}],[\"locate\",{\"1\":{\"72\":1,\"148\":1,\"229\":4}}],[\"locates\",{\"1\":{\"34\":1}}],[\"location\",{\"1\":{\"7\":2,\"9\":1,\"17\":1,\"69\":1,\"87\":3,\"88\":4,\"89\":2,\"96\":1,\"127\":1,\"151\":2,\"176\":1,\"227\":2,\"228\":2}}],[\"locator\",{\"1\":{\"7\":1}}],[\"locators\",{\"1\":{\"7\":1}}],[\"localsearchscope\",{\"1\":{\"83\":5}}],[\"locally\",{\"1\":{\"18\":1,\"79\":1}}],[\"localhost\",{\"1\":{\"11\":1}}],[\"local\",{\"0\":{\"248\":1},\"1\":{\"9\":3,\"10\":1,\"11\":2,\"21\":3,\"25\":1,\"28\":2,\"30\":2,\"83\":5,\"146\":2,\"186\":1,\"247\":5,\"248\":7,\"249\":2}}],[\"localized\",{\"1\":{\"6\":1}}],[\"localization\",{\"1\":{\"6\":1}}],[\"locality\",{\"1\":{\"5\":1,\"147\":2}}],[\"locale\",{\"1\":{\"6\":2}}],[\"locales\",{\"1\":{\"6\":1}}],[\"lowers\",{\"1\":{\"17\":1}}],[\"lower\",{\"1\":{\"10\":1,\"11\":1,\"30\":2,\"31\":1,\"32\":1,\"105\":1,\"173\":2,\"174\":1,\"176\":1,\"179\":1,\"181\":1,\"185\":1,\"218\":1,\"249\":1}}],[\"lowest\",{\"1\":{\"9\":1,\"103\":1,\"105\":1}}],[\"low\",{\"1\":{\"6\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"16\":1,\"17\":1,\"21\":2,\"29\":3,\"30\":4,\"31\":2,\"33\":1,\"34\":1,\"35\":1,\"115\":1,\"202\":2,\"209\":1,\"248\":1}}],[\"long\",{\"1\":{\"6\":1,\"11\":2,\"21\":1,\"25\":1,\"35\":2,\"40\":1,\"85\":1,\"87\":2,\"95\":1,\"110\":1,\"122\":1,\"124\":1,\"127\":1,\"163\":1,\"185\":1,\"186\":1,\"196\":1,\"202\":1,\"232\":1}}],[\"longer\",{\"1\":{\"6\":1,\"11\":1,\"29\":1,\"122\":1,\"181\":1,\"185\":1,\"220\":1,\"237\":1}}],[\"logo\",{\"1\":{\"47\":1}}],[\"logging\",{\"1\":{\"13\":1,\"17\":1}}],[\"logged\",{\"1\":{\"11\":1}}],[\"logger\",{\"1\":{\"5\":2,\"249\":2}}],[\"login\",{\"1\":{\"21\":2,\"22\":3,\"35\":2}}],[\"logins\",{\"1\":{\"11\":1}}],[\"logicaldestination\",{\"1\":{\"248\":1}}],[\"logical\",{\"1\":{\"7\":1,\"11\":1,\"31\":4,\"102\":1,\"141\":1}}],[\"logic\",{\"1\":{\"4\":1,\"5\":1,\"6\":1,\"8\":1,\"10\":1,\"11\":1,\"18\":1,\"26\":1,\"33\":1,\"63\":1,\"79\":2,\"87\":1}}],[\"logs\",{\"1\":{\"9\":1,\"15\":1,\"16\":4,\"26\":1,\"29\":1,\"35\":1}}],[\"log\",{\"1\":{\"4\":1,\"9\":2,\"17\":2}}],[\"laser\",{\"1\":{\"36\":1}}],[\"lastaccesstime\",{\"1\":{\"153\":1}}],[\"lasterror\",{\"1\":{\"135\":1}}],[\"lastparent\",{\"1\":{\"79\":4}}],[\"last\",{\"1\":{\"10\":1,\"45\":1,\"64\":1,\"79\":4,\"88\":1,\"89\":4,\"93\":1,\"102\":1,\"104\":2,\"149\":1,\"162\":1,\"169\":1,\"171\":1,\"185\":1,\"187\":1,\"188\":1,\"192\":1,\"193\":2,\"195\":1,\"200\":1,\"205\":3,\"206\":1,\"212\":1,\"228\":1,\"229\":1,\"234\":1}}],[\"laws\",{\"1\":{\"23\":1}}],[\"lawful\",{\"1\":{\"23\":1}}],[\"law\",{\"1\":{\"23\":3}}],[\"lacked\",{\"1\":{\"30\":1}}],[\"lacks\",{\"1\":{\"21\":1}}],[\"lack\",{\"1\":{\"21\":1,\"35\":1}}],[\"laptop\",{\"1\":{\"30\":1,\"32\":1}}],[\"laptops\",{\"1\":{\"29\":2}}],[\"lapicinit\",{\"1\":{\"249\":3}}],[\"lapicid\",{\"1\":{\"248\":1}}],[\"lapicversion\",{\"1\":{\"248\":1}}],[\"lapicoffset\",{\"1\":{\"248\":3,\"249\":1}}],[\"lapic\",{\"1\":{\"28\":2,\"248\":2,\"249\":2}}],[\"lapd\",{\"1\":{\"21\":1}}],[\"lapb\",{\"1\":{\"21\":1}}],[\"labs\",{\"1\":{\"11\":2}}],[\"lab\",{\"1\":{\"11\":2,\"36\":1}}],[\"labelled\",{\"1\":{\"58\":1}}],[\"labels\",{\"1\":{\"21\":2,\"24\":1}}],[\"labeled\",{\"1\":{\"18\":1}}],[\"label\",{\"1\":{\"7\":1,\"18\":1,\"21\":11,\"188\":1}}],[\"laid\",{\"1\":{\"11\":1,\"80\":1}}],[\"launched\",{\"1\":{\"11\":1}}],[\"launch\",{\"1\":{\"11\":1,\"24\":1,\"25\":1,\"35\":1}}],[\"lazy\",{\"1\":{\"10\":1}}],[\"lang\",{\"1\":{\"44\":1,\"47\":1,\"64\":1,\"71\":1,\"118\":2}}],[\"lang<\",{\"1\":{\"44\":1}}],[\"language=\",{\"1\":{\"48\":1,\"64\":1,\"83\":1}}],[\"languagefiletype\",{\"1\":{\"46\":1,\"47\":2}}],[\"languages\",{\"0\":{\"8\":1},\"1\":{\"6\":1,\"7\":1,\"8\":3,\"9\":4,\"10\":8,\"12\":1,\"15\":1,\"17\":2,\"69\":1,\"85\":2,\"86\":1,\"115\":2}}],[\"language\",{\"0\":{\"41\":1,\"47\":1},\"1\":{\"4\":1,\"5\":2,\"7\":6,\"8\":17,\"9\":17,\"10\":16,\"11\":4,\"12\":8,\"13\":3,\"15\":3,\"17\":3,\"18\":5,\"33\":2,\"34\":1,\"35\":1,\"39\":1,\"40\":1,\"44\":2,\"45\":1,\"46\":7,\"47\":6,\"48\":1,\"50\":1,\"51\":2,\"52\":2,\"53\":2,\"57\":1,\"58\":2,\"66\":1,\"67\":2,\"68\":2,\"71\":1,\"72\":1,\"80\":1,\"85\":1,\"94\":1,\"103\":1,\"113\":1,\"117\":1}}],[\"lanes\",{\"1\":{\"26\":1,\"30\":1,\"33\":1}}],[\"lans\",{\"1\":{\"21\":7}}],[\"landscape\",{\"1\":{\"36\":1}}],[\"landmark\",{\"1\":{\"11\":1}}],[\"landis\",{\"1\":{\"9\":1}}],[\"lan\",{\"1\":{\"11\":1,\"21\":7,\"22\":1}}],[\"lambda\",{\"1\":{\"8\":1,\"24\":1,\"79\":1}}],[\"largest\",{\"1\":{\"20\":1,\"21\":1,\"26\":1}}],[\"larger\",{\"1\":{\"16\":1,\"25\":1,\"26\":1,\"31\":1,\"170\":1,\"235\":1,\"237\":1}}],[\"large\",{\"1\":{\"11\":3,\"13\":1,\"15\":1,\"16\":1,\"17\":2,\"18\":2,\"21\":2,\"24\":1,\"31\":1,\"147\":2,\"151\":1,\"168\":1,\"170\":3,\"179\":1,\"234\":1,\"237\":1}}],[\"largely\",{\"1\":{\"4\":1,\"9\":1,\"21\":4,\"25\":1,\"30\":1,\"31\":3}}],[\"laravel\",{\"1\":{\"8\":1}}],[\"latter\",{\"1\":{\"58\":1,\"82\":1,\"187\":1,\"197\":1}}],[\"lattice\",{\"1\":{\"10\":1}}],[\"latin\",{\"1\":{\"7\":1}}],[\"latest\",{\"1\":{\"118\":1}}],[\"late\",{\"1\":{\"21\":1,\"89\":1}}],[\"latex\",{\"1\":{\"12\":3}}],[\"later\",{\"1\":{\"6\":1,\"10\":2,\"11\":8,\"13\":1,\"17\":1,\"21\":10,\"25\":1,\"30\":2,\"35\":3,\"41\":1,\"47\":1,\"50\":1,\"52\":1,\"53\":1,\"59\":1,\"61\":1,\"63\":1,\"73\":1,\"74\":2,\"77\":1,\"94\":1,\"96\":3,\"98\":1,\"99\":1,\"102\":1,\"105\":1,\"122\":1,\"124\":1,\"132\":1,\"133\":2,\"140\":2,\"143\":1,\"144\":1,\"147\":3,\"161\":2,\"172\":1,\"176\":1,\"183\":1,\"185\":2,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":2,\"193\":1,\"194\":1,\"197\":1,\"202\":1,\"211\":1,\"223\":1,\"226\":1,\"231\":2,\"238\":1,\"239\":3,\"242\":1,\"248\":1}}],[\"latency\",{\"1\":{\"6\":1,\"11\":1,\"16\":1,\"19\":1,\"20\":4,\"21\":3,\"25\":1,\"26\":1,\"31\":3}}],[\"layer\",{\"1\":{\"5\":1,\"11\":5,\"13\":1,\"21\":13,\"22\":3}}],[\"layers\",{\"1\":{\"5\":1,\"21\":3}}],[\"layouts\",{\"1\":{\"7\":1,\"9\":1}}],[\"layout\",{\"1\":{\"5\":1,\"6\":1,\"11\":2,\"12\":1,\"20\":1,\"187\":1,\"196\":1,\"232\":1,\"234\":1,\"239\":1}}],[\"legit\",{\"1\":{\"188\":1}}],[\"legal\",{\"1\":{\"12\":1}}],[\"legacy\",{\"1\":{\"3\":2,\"4\":8,\"5\":1,\"6\":1,\"7\":4,\"8\":3,\"11\":3,\"12\":2,\"13\":2,\"14\":2,\"15\":2,\"16\":1,\"17\":5,\"21\":17,\"22\":4,\"25\":1,\"28\":1,\"30\":4,\"31\":7,\"32\":3,\"33\":3,\"34\":10,\"35\":1,\"122\":1,\"133\":1,\"134\":1,\"147\":1,\"247\":1}}],[\"leverage\",{\"1\":{\"124\":1,\"144\":1,\"231\":1}}],[\"leveraging\",{\"1\":{\"22\":1,\"79\":1}}],[\"leveldb\",{\"1\":{\"17\":1}}],[\"level\",{\"0\":{\"88\":1},\"1\":{\"4\":1,\"5\":1,\"6\":1,\"8\":2,\"9\":4,\"10\":4,\"11\":1,\"12\":2,\"17\":1,\"19\":3,\"20\":1,\"21\":4,\"24\":2,\"26\":1,\"29\":1,\"57\":2,\"59\":1,\"77\":2,\"85\":8,\"86\":3,\"87\":15,\"88\":4,\"89\":4,\"95\":1,\"96\":4,\"104\":7,\"105\":6,\"106\":3,\"109\":1,\"110\":9,\"115\":1,\"124\":1,\"141\":1,\"143\":1,\"147\":1,\"166\":1,\"173\":1,\"174\":1,\"175\":4,\"177\":3,\"185\":9,\"186\":9,\"187\":1,\"190\":2,\"201\":1,\"209\":1,\"245\":1}}],[\"levels\",{\"1\":{\"4\":1,\"9\":1,\"21\":1,\"25\":1,\"27\":2,\"30\":1,\"36\":1,\"85\":3,\"87\":3,\"89\":3,\"96\":1,\"104\":2,\"105\":2,\"186\":1}}],[\"letting\",{\"1\":{\"177\":1}}],[\"letters\",{\"1\":{\"62\":1}}],[\"letter\",{\"1\":{\"17\":1,\"35\":1,\"62\":1}}],[\"let\",{\"0\":{\"91\":1},\"1\":{\"18\":1,\"22\":1,\"35\":4,\"42\":1,\"44\":1,\"45\":1,\"47\":3,\"49\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"61\":2,\"62\":1,\"63\":2,\"64\":1,\"65\":1,\"66\":2,\"69\":1,\"70\":1,\"71\":1,\"72\":4,\"73\":3,\"74\":3,\"75\":6,\"76\":1,\"77\":2,\"78\":4,\"79\":1,\"80\":2,\"81\":1,\"82\":7,\"83\":3,\"84\":3,\"86\":2,\"87\":2,\"88\":6,\"89\":10,\"90\":5,\"91\":8,\"92\":6,\"93\":1,\"94\":2,\"95\":4,\"96\":5,\"97\":8,\"98\":1,\"99\":1,\"100\":2,\"101\":3,\"102\":3,\"104\":2,\"105\":1,\"106\":4,\"107\":2,\"108\":2,\"109\":2,\"110\":4,\"115\":1,\"118\":1,\"120\":1,\"121\":2,\"123\":2,\"124\":5,\"125\":1,\"131\":2,\"133\":3,\"134\":1,\"135\":4,\"136\":1,\"139\":5,\"140\":3,\"141\":3,\"143\":6,\"144\":1,\"145\":1,\"146\":1,\"147\":16,\"148\":6,\"151\":4,\"152\":1,\"153\":2,\"154\":3,\"156\":4,\"157\":1,\"158\":1,\"159\":1,\"160\":2,\"161\":3,\"162\":8,\"163\":3,\"164\":3,\"165\":2,\"166\":5,\"168\":2,\"169\":5,\"170\":10,\"171\":4,\"172\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":16,\"179\":3,\"180\":7,\"181\":10,\"182\":2,\"183\":3,\"187\":4,\"188\":2,\"190\":4,\"191\":3,\"192\":3,\"193\":5,\"195\":1,\"196\":5,\"197\":13,\"198\":2,\"199\":3,\"200\":2,\"202\":5,\"204\":3,\"205\":6,\"206\":6,\"208\":1,\"209\":5,\"210\":6,\"211\":2,\"212\":4,\"213\":6,\"214\":4,\"215\":3,\"217\":3,\"218\":3,\"219\":2,\"220\":5,\"221\":2,\"222\":1,\"223\":2,\"226\":6,\"227\":3,\"228\":5,\"229\":2,\"230\":11,\"231\":4,\"232\":1,\"234\":3,\"235\":16,\"237\":16,\"239\":2,\"240\":2,\"241\":2,\"242\":2,\"243\":3,\"245\":4,\"246\":3,\"248\":8,\"249\":5}}],[\"letsectionimpl\",{\"1\":{\"73\":1}}],[\"letsection\",{\"1\":{\"72\":3,\"73\":4,\"88\":2,\"90\":4,\"91\":2,\"92\":4,\"97\":2}}],[\"lets\",{\"1\":{\"6\":1,\"17\":1,\"177\":1}}],[\"lempel\",{\"1\":{\"16\":3}}],[\"le\",{\"1\":{\"14\":1}}],[\"leds\",{\"1\":{\"32\":1}}],[\"led\",{\"1\":{\"11\":1,\"22\":1,\"32\":5}}],[\"lesser\",{\"1\":{\"37\":1}}],[\"lessons\",{\"1\":{\"11\":2}}],[\"less\",{\"1\":{\"11\":1,\"35\":1,\"87\":1,\"92\":1,\"124\":1,\"186\":1}}],[\"len\",{\"1\":{\"10\":1,\"141\":1,\"162\":4,\"163\":1,\"165\":2,\"166\":1,\"169\":1,\"180\":8,\"181\":1,\"183\":1,\"227\":6,\"228\":1,\"230\":2,\"231\":1,\"237\":1,\"239\":1}}],[\"length\",{\"1\":{\"10\":1,\"14\":1,\"16\":2,\"22\":1,\"25\":1,\"27\":1,\"31\":1,\"85\":1,\"87\":1,\"106\":3,\"124\":1,\"163\":3,\"164\":1,\"227\":2,\"228\":1}}],[\"lexeme\",{\"1\":{\"104\":1}}],[\"lexerposition\",{\"1\":{\"51\":2}}],[\"lexer\",{\"0\":{\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"62\":1,\"87\":1,\"99\":1},\"1\":{\"41\":2,\"49\":2,\"50\":2,\"51\":13,\"52\":8,\"53\":14,\"54\":5,\"55\":6,\"57\":3,\"58\":2,\"62\":1,\"63\":1,\"64\":2,\"66\":2,\"67\":1,\"69\":8,\"70\":2,\"71\":3,\"85\":4,\"87\":17,\"88\":4,\"89\":12,\"91\":1,\"94\":2,\"95\":5,\"96\":4,\"99\":2,\"101\":1,\"104\":3,\"106\":2,\"108\":1,\"109\":1,\"110\":3}}],[\"lexers\",{\"1\":{\"10\":2}}],[\"lexing\",{\"0\":{\"95\":1,\"104\":1},\"1\":{\"69\":1}}],[\"lexical\",{\"1\":{\"8\":1,\"53\":5}}],[\"lex\",{\"1\":{\"53\":1}}],[\"leaq\",{\"1\":{\"200\":1}}],[\"lea\",{\"1\":{\"188\":1}}],[\"leaving\",{\"1\":{\"151\":1}}],[\"leave\",{\"1\":{\"96\":1,\"134\":1,\"140\":1,\"215\":1}}],[\"leaves\",{\"1\":{\"40\":1}}],[\"lean\",{\"1\":{\"92\":1}}],[\"leaf\",{\"1\":{\"58\":2,\"68\":1,\"146\":1}}],[\"leased\",{\"1\":{\"21\":6}}],[\"least\",{\"1\":{\"9\":3,\"22\":1,\"124\":1,\"147\":1,\"179\":1,\"185\":1,\"229\":1,\"237\":1}}],[\"learned\",{\"1\":{\"18\":1,\"35\":2,\"36\":1,\"227\":1}}],[\"learning\",{\"1\":{\"6\":1,\"11\":1,\"18\":6,\"25\":1,\"28\":1}}],[\"leads\",{\"1\":{\"105\":1}}],[\"leader\",{\"1\":{\"35\":1}}],[\"leading\",{\"1\":{\"17\":1,\"85\":3,\"87\":1,\"88\":1,\"89\":3,\"104\":1,\"106\":4}}],[\"lead\",{\"1\":{\"9\":1}}],[\"leftover\",{\"1\":{\"110\":1}}],[\"left\",{\"1\":{\"7\":4,\"105\":2,\"109\":1,\"149\":1,\"248\":1}}],[\"living\",{\"1\":{\"36\":2}}],[\"lives\",{\"1\":{\"72\":1}}],[\"lived\",{\"1\":{\"22\":1}}],[\"liveness\",{\"1\":{\"10\":3}}],[\"live\",{\"1\":{\"4\":1,\"21\":1,\"35\":1}}],[\"lidt\",{\"1\":{\"191\":2,\"192\":1}}],[\"lid\",{\"1\":{\"34\":1}}],[\"liquid\",{\"1\":{\"32\":2}}],[\"lit\",{\"1\":{\"58\":1,\"61\":4,\"62\":2,\"63\":4,\"64\":1,\"65\":1,\"66\":2,\"68\":1,\"70\":1,\"73\":1,\"88\":1,\"90\":1,\"92\":1,\"97\":1,\"99\":4,\"100\":6,\"101\":10}}],[\"literal\",{\"1\":{\"53\":1,\"58\":1,\"61\":1,\"62\":1,\"63\":1,\"66\":1,\"68\":1,\"70\":1,\"84\":3,\"98\":3,\"99\":4,\"100\":3,\"101\":4,\"102\":2,\"105\":2,\"106\":1,\"107\":1,\"108\":1}}],[\"literals\",{\"0\":{\"98\":1,\"101\":1},\"1\":{\"16\":1,\"58\":1,\"95\":1,\"98\":5,\"99\":7,\"100\":3,\"101\":4,\"102\":1,\"107\":1,\"147\":1}}],[\"little\",{\"1\":{\"0\":1,\"9\":1,\"147\":2,\"234\":1,\"235\":4}}],[\"lim\",{\"1\":{\"11\":1}}],[\"limit16\",{\"1\":{\"187\":2,\"202\":2}}],[\"limit00\",{\"1\":{\"187\":2,\"202\":2}}],[\"limits\",{\"1\":{\"23\":1,\"83\":1}}],[\"limited\",{\"1\":{\"9\":1,\"13\":1,\"21\":1,\"31\":2,\"185\":1,\"246\":1,\"247\":2}}],[\"limit\",{\"1\":{\"6\":1,\"11\":2,\"31\":1,\"35\":1,\"185\":9,\"187\":5,\"188\":1,\"190\":2}}],[\"licensing\",{\"0\":{\"37\":1},\"1\":{\"22\":1,\"25\":1}}],[\"licenses\",{\"1\":{\"33\":2,\"36\":1,\"37\":1}}],[\"license\",{\"1\":{\"11\":1,\"22\":1,\"37\":5}}],[\"licm\",{\"1\":{\"10\":1}}],[\"libc\",{\"1\":{\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":6,\"133\":1,\"140\":2,\"141\":1,\"143\":1,\"145\":2,\"161\":1,\"163\":1,\"246\":1}}],[\"libcmt\",{\"1\":{\"123\":2}}],[\"lib\",{\"1\":{\"123\":4,\"124\":4,\"139\":1}}],[\"libre\",{\"1\":{\"37\":1}}],[\"library\",{\"0\":{\"126\":1,\"131\":1,\"244\":1,\"245\":1,\"246\":1},\"1\":{\"9\":4,\"10\":1,\"11\":7,\"15\":2,\"35\":1,\"36\":1,\"121\":2,\"122\":2,\"123\":4,\"124\":3,\"125\":1,\"131\":2,\"147\":1,\"151\":1,\"218\":1,\"227\":1,\"243\":1,\"244\":2,\"246\":4,\"252\":1}}],[\"libraries\",{\"1\":{\"6\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":2,\"13\":1,\"15\":1,\"16\":1,\"22\":1,\"31\":2,\"37\":1,\"123\":1,\"225\":3}}],[\"liberties\",{\"1\":{\"36\":1}}],[\"libera\",{\"1\":{\"21\":1}}],[\"libgpiod\",{\"1\":{\"30\":1}}],[\"libvirt\",{\"1\":{\"24\":1}}],[\"libfoo\",{\"1\":{\"11\":3}}],[\"libs\",{\"1\":{\"9\":1,\"11\":1,\"37\":1}}],[\"list>\",{\"1\":{\"88\":1}}],[\"listen\",{\"1\":{\"21\":1}}],[\"listserv\",{\"1\":{\"21\":2}}],[\"lists\",{\"1\":{\"12\":1,\"21\":6,\"135\":1}}],[\"list<t>\",{\"1\":{\"9\":1}}],[\"list\",{\"0\":{\"168\":1},\"1\":{\"8\":1,\"9\":1,\"22\":2,\"36\":1,\"88\":1,\"89\":1,\"92\":4,\"97\":3,\"167\":2,\"168\":11,\"169\":3,\"170\":4,\"171\":4,\"181\":1,\"192\":1,\"229\":1,\"233\":2,\"237\":3,\"239\":1}}],[\"lisp\",{\"1\":{\"8\":3}}],[\"liskov\",{\"1\":{\"5\":1}}],[\"like\",{\"0\":{\"107\":1},\"1\":{\"6\":1,\"7\":3,\"8\":1,\"9\":4,\"10\":3,\"11\":15,\"12\":1,\"13\":2,\"15\":3,\"17\":3,\"18\":2,\"21\":5,\"22\":3,\"24\":1,\"25\":1,\"30\":1,\"31\":2,\"33\":1,\"34\":1,\"35\":3,\"43\":1,\"54\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"77\":1,\"79\":1,\"85\":4,\"86\":1,\"87\":1,\"93\":1,\"96\":2,\"97\":1,\"102\":1,\"103\":5,\"104\":4,\"105\":2,\"106\":1,\"107\":10,\"109\":2,\"116\":4,\"122\":1,\"124\":1,\"141\":1,\"142\":1,\"143\":1,\"147\":3,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"175\":1,\"186\":1,\"194\":1,\"197\":1,\"200\":1,\"220\":1,\"222\":1,\"227\":1,\"246\":1}}],[\"linalg\",{\"1\":{\"10\":1}}],[\"linters\",{\"1\":{\"10\":1}}],[\"linkable\",{\"1\":{\"11\":1,\"37\":1}}],[\"linkage\",{\"1\":{\"11\":1}}],[\"linkerexe=\",{\"1\":{\"147\":1,\"196\":1}}],[\"linkers\",{\"1\":{\"119\":1}}],[\"linker\",{\"1\":{\"11\":2,\"123\":7,\"124\":4,\"133\":1,\"147\":32,\"148\":3,\"179\":2,\"196\":3,\"210\":1,\"224\":1,\"225\":7,\"226\":3,\"227\":4,\"228\":4,\"229\":3,\"232\":1,\"234\":4,\"235\":1}}],[\"linked\",{\"1\":{\"10\":1,\"11\":1,\"15\":2,\"147\":2,\"168\":1,\"178\":2,\"179\":2,\"196\":1,\"225\":1,\"226\":1,\"234\":1}}],[\"link\",{\"1\":{\"10\":4,\"11\":1,\"21\":6,\"23\":1,\"30\":3,\"35\":1,\"123\":10,\"124\":18,\"131\":3,\"143\":1,\"147\":5,\"174\":1,\"179\":4,\"196\":1,\"223\":1,\"224\":1,\"225\":2,\"226\":1,\"227\":1,\"229\":2,\"234\":1,\"235\":1}}],[\"linking\",{\"0\":{\"131\":1,\"147\":1,\"179\":1},\"1\":{\"9\":2,\"10\":1,\"11\":1,\"15\":2,\"17\":1,\"21\":1,\"37\":1,\"123\":1,\"124\":1,\"179\":1,\"223\":1,\"233\":1}}],[\"links\",{\"1\":{\"4\":1,\"12\":1,\"21\":13,\"30\":1}}],[\"linq\",{\"1\":{\"9\":2,\"17\":1}}],[\"linux\",{\"1\":{\"9\":2,\"11\":12,\"14\":1,\"16\":1,\"17\":1,\"24\":3,\"25\":5,\"30\":1,\"31\":1,\"33\":2,\"34\":2,\"36\":1,\"118\":1,\"123\":2,\"124\":2,\"134\":2,\"207\":1}}],[\"line>\",{\"1\":{\"87\":1}}],[\"lineage\",{\"1\":{\"11\":2,\"17\":1,\"25\":1}}],[\"linear\",{\"1\":{\"10\":1,\"31\":3}}],[\"lines\",{\"1\":{\"9\":1,\"14\":2,\"15\":1,\"20\":2,\"21\":5,\"30\":2,\"85\":2,\"86\":2,\"87\":2,\"89\":2,\"94\":3,\"95\":3,\"97\":1,\"141\":1,\"222\":1,\"227\":1}}],[\"line\",{\"1\":{\"6\":1,\"9\":1,\"10\":1,\"11\":3,\"14\":5,\"15\":2,\"21\":9,\"25\":1,\"30\":1,\"33\":1,\"66\":1,\"72\":4,\"76\":3,\"85\":4,\"86\":3,\"87\":24,\"88\":7,\"89\":7,\"94\":12,\"95\":10,\"97\":4,\"124\":1,\"141\":3,\"147\":3,\"162\":1,\"179\":1,\"193\":1,\"212\":1,\"226\":1,\"247\":1}}],[\"lifetime\",{\"1\":{\"9\":1,\"21\":1}}],[\"life\",{\"1\":{\"6\":2,\"35\":2}}],[\"light\",{\"1\":{\"21\":1,\"29\":1,\"32\":4}}],[\"lighter\",{\"1\":{\"4\":1}}],[\"lightweight\",{\"1\":{\"4\":1,\"12\":1,\"21\":2,\"24\":1}}],[\"nm\",{\"1\":{\"192\":1}}],[\"nmi\",{\"1\":{\"26\":3,\"130\":1,\"192\":3}}],[\"nr\",{\"1\":{\"147\":2,\"226\":1,\"228\":2,\"229\":1,\"234\":1}}],[\"nrvo\",{\"1\":{\"10\":1}}],[\"n|\",{\"1\":{\"87\":1}}],[\"nbd\",{\"1\":{\"35\":2}}],[\"nbt\",{\"1\":{\"21\":4}}],[\"nkro\",{\"1\":{\"30\":1}}],[\"nv8hg9cq7k8zpnb0afnx9cyq\",{\"1\":{\"228\":1}}],[\"nvram\",{\"1\":{\"29\":3,\"134\":2}}],[\"nvidia\",{\"1\":{\"25\":1,\"33\":1}}],[\"nvme\",{\"1\":{\"20\":1,\"30\":1,\"31\":4}}],[\"nx\",{\"1\":{\"22\":3,\"237\":1}}],[\"ncc\",{\"1\":{\"36\":1}}],[\"ncq\",{\"1\":{\"31\":2}}],[\"ncp\",{\"1\":{\"21\":5}}],[\"ncurses\",{\"1\":{\"9\":2}}],[\"nntps\",{\"1\":{\"21\":1}}],[\"nntp\",{\"1\":{\"21\":4}}],[\"nsfw\",{\"1\":{\"35\":2}}],[\"nsfnet\",{\"1\":{\"21\":3}}],[\"nsf\",{\"1\":{\"21\":1}}],[\"ns1\",{\"1\":{\"21\":1}}],[\"ns\",{\"1\":{\"21\":2}}],[\"nsap\",{\"1\":{\"21\":5}}],[\"nlb\",{\"1\":{\"24\":1}}],[\"nlp\",{\"1\":{\"18\":2}}],[\"nlm\",{\"1\":{\"11\":2}}],[\"nd\",{\"1\":{\"144\":1}}],[\"nds\",{\"1\":{\"21\":1}}],[\"ndjson\",{\"1\":{\"15\":1}}],[\"ndis\",{\"1\":{\"11\":2}}],[\"ng\",{\"1\":{\"12\":1}}],[\"nginx\",{\"1\":{\"9\":1,\"24\":1}}],[\"nframes=96\",{\"1\":{\"171\":1}}],[\"nframes=2\",{\"1\":{\"171\":1}}],[\"nframes=\",{\"1\":{\"171\":4}}],[\"nframes\",{\"1\":{\"162\":2,\"165\":2,\"168\":9,\"169\":16,\"170\":10,\"171\":25,\"177\":1,\"180\":5,\"181\":2,\"183\":6}}],[\"nfsv4\",{\"1\":{\"21\":1}}],[\"nfsv3\",{\"1\":{\"21\":1}}],[\"nfs\",{\"1\":{\"11\":1,\"21\":1,\"24\":1}}],[\"nfa\",{\"1\":{\"10\":2}}],[\"ntiv2\",{\"1\":{\"228\":4}}],[\"ntsc\",{\"1\":{\"32\":1}}],[\"ntlm\",{\"1\":{\"22\":1}}],[\"ntpd\",{\"1\":{\"21\":1}}],[\"ntp\",{\"1\":{\"21\":2}}],[\"nt\",{\"1\":{\"11\":8,\"22\":1}}],[\"ntfs\",{\"1\":{\"11\":5}}],[\"ni\",{\"1\":{\"124\":2,\"228\":1}}],[\"nil\",{\"1\":{\"124\":1,\"129\":1,\"140\":1,\"159\":3,\"168\":1,\"169\":1,\"171\":2,\"213\":1,\"227\":1,\"240\":1}}],[\"nih\",{\"1\":{\"35\":1}}],[\"nicely\",{\"1\":{\"179\":1}}],[\"nice\",{\"1\":{\"135\":1,\"151\":1,\"186\":1,\"222\":1,\"234\":1}}],[\"nic\",{\"1\":{\"33\":2,\"36\":3,\"135\":1}}],[\"nics\",{\"1\":{\"33\":2,\"36\":2}}],[\"niche\",{\"1\":{\"11\":1}}],[\"niprnet\",{\"1\":{\"21\":1}}],[\"nist\",{\"1\":{\"36\":3}}],[\"nis\",{\"1\":{\"21\":1}}],[\"nibble\",{\"1\":{\"14\":1}}],[\"nimerrorflag\",{\"1\":{\"147\":1,\"179\":1}}],[\"nimelementfactory\",{\"1\":{\"82\":5}}],[\"nimelement\",{\"1\":{\"61\":1,\"63\":4,\"64\":1,\"66\":2,\"70\":2,\"71\":1,\"73\":1}}],[\"nimelementtype\",{\"1\":{\"58\":1,\"61\":4,\"70\":2,\"71\":1}}],[\"nimv2\",{\"1\":{\"139\":5}}],[\"nimframe\",{\"1\":{\"147\":5,\"179\":2,\"196\":2}}],[\"nimflags\",{\"1\":{\"136\":2,\"143\":3,\"148\":3,\"196\":1}}],[\"nimfile\",{\"1\":{\"59\":1,\"61\":5,\"64\":1,\"65\":1,\"71\":1,\"77\":5,\"78\":3,\"79\":5,\"82\":3}}],[\"nimfiletype\",{\"1\":{\"46\":1,\"47\":2,\"48\":2,\"61\":2,\"71\":1,\"82\":1}}],[\"nimnolibc\",{\"1\":{\"124\":3}}],[\"nimcstrlen\",{\"1\":{\"124\":1}}],[\"nimcopymem\",{\"1\":{\"124\":2}}],[\"nimcall\",{\"1\":{\"124\":2}}],[\"nimcache\",{\"1\":{\"124\":5}}],[\"nimmain\",{\"1\":{\"124\":4,\"133\":2,\"135\":2,\"139\":3,\"140\":1,\"141\":1,\"147\":5,\"161\":2,\"163\":2,\"165\":1,\"166\":2,\"196\":2,\"205\":3,\"206\":1,\"210\":1,\"213\":1,\"215\":1,\"241\":1,\"246\":2}}],[\"nimble\",{\"1\":{\"121\":2}}],[\"nimrefactoringsupportprovider\",{\"1\":{\"83\":5}}],[\"nimstringv2\",{\"1\":{\"227\":3,\"228\":4}}],[\"nimstrpayload\",{\"1\":{\"227\":4,\"228\":5}}],[\"nimstmtimpl\",{\"1\":{\"71\":1}}],[\"nimstmt\",{\"1\":{\"61\":3,\"64\":2,\"65\":2,\"70\":2,\"71\":1}}],[\"nimsetmem\",{\"1\":{\"124\":1}}],[\"nimscope\",{\"1\":{\"79\":7,\"83\":1}}],[\"nimparserutil\",{\"1\":{\"106\":4,\"110\":1}}],[\"nimparserdefinition\",{\"1\":{\"64\":5,\"71\":1,\"95\":4}}],[\"nimparser\",{\"1\":{\"58\":1,\"63\":3,\"64\":1,\"66\":2,\"70\":2,\"71\":2,\"73\":1}}],[\"nimtokenset\",{\"1\":{\"95\":3}}],[\"nimtokensets\",{\"1\":{\"52\":1,\"95\":2}}],[\"nimtoken\",{\"1\":{\"61\":3,\"62\":2,\"63\":2,\"64\":1,\"66\":2,\"70\":1,\"71\":1,\"87\":5,\"89\":5,\"91\":4,\"95\":3,\"96\":3,\"97\":2,\"99\":4,\"101\":5,\"104\":32,\"107\":3,\"108\":2,\"109\":3,\"110\":6}}],[\"nimtokentype\",{\"1\":{\"52\":2,\"58\":1,\"61\":5,\"62\":1,\"71\":1,\"99\":2,\"101\":3}}],[\"nimlexeradapter\",{\"1\":{\"52\":1,\"64\":1,\"71\":1}}],[\"nimlexer\",{\"1\":{\"52\":2,\"53\":2,\"54\":1}}],[\"nimlanguage\",{\"1\":{\"46\":1,\"47\":3,\"61\":4,\"71\":1,\"79\":1}}],[\"nimicons\",{\"1\":{\"47\":5,\"71\":1}}],[\"nimjet\",{\"0\":{\"113\":1},\"1\":{\"47\":6,\"48\":1,\"53\":2,\"54\":2,\"55\":2,\"61\":4,\"62\":2,\"63\":1,\"64\":2,\"66\":1,\"70\":6,\"71\":6,\"73\":2,\"74\":4,\"75\":1,\"77\":1,\"78\":2,\"82\":3,\"83\":2,\"87\":2,\"88\":2,\"89\":4,\"90\":1,\"95\":3,\"99\":1,\"100\":1,\"104\":1,\"106\":2,\"113\":1}}],[\"nimjet<\",{\"1\":{\"44\":1,\"48\":1}}],[\"nim\",{\"0\":{\"70\":1,\"71\":1,\"103\":1,\"114\":1,\"118\":1,\"124\":1,\"166\":1},\"1\":{\"1\":1,\"39\":1,\"40\":4,\"44\":1,\"45\":2,\"47\":11,\"48\":3,\"49\":5,\"51\":1,\"52\":1,\"53\":2,\"54\":2,\"55\":1,\"58\":1,\"59\":1,\"60\":1,\"62\":1,\"64\":1,\"69\":1,\"70\":2,\"71\":4,\"72\":7,\"73\":2,\"74\":1,\"82\":1,\"83\":1,\"85\":2,\"87\":2,\"88\":2,\"89\":5,\"90\":2,\"91\":1,\"94\":5,\"95\":3,\"97\":3,\"98\":5,\"99\":1,\"100\":1,\"101\":1,\"102\":2,\"103\":2,\"104\":2,\"106\":1,\"107\":2,\"109\":1,\"110\":1,\"113\":1,\"115\":3,\"117\":2,\"118\":8,\"119\":1,\"122\":1,\"123\":1,\"124\":89,\"127\":3,\"128\":1,\"129\":2,\"130\":1,\"131\":9,\"133\":6,\"135\":1,\"136\":3,\"138\":2,\"139\":12,\"140\":5,\"141\":5,\"143\":26,\"144\":1,\"145\":1,\"146\":2,\"147\":19,\"148\":7,\"151\":5,\"152\":2,\"153\":4,\"154\":4,\"156\":2,\"157\":2,\"158\":2,\"159\":2,\"160\":3,\"161\":2,\"162\":6,\"163\":2,\"164\":3,\"165\":1,\"166\":3,\"168\":4,\"169\":2,\"170\":2,\"171\":5,\"175\":4,\"177\":6,\"179\":8,\"180\":3,\"181\":2,\"182\":2,\"183\":1,\"187\":5,\"188\":3,\"190\":5,\"191\":3,\"192\":10,\"193\":9,\"196\":14,\"197\":8,\"198\":1,\"199\":1,\"200\":1,\"202\":5,\"203\":1,\"204\":1,\"205\":12,\"206\":6,\"209\":6,\"210\":3,\"211\":4,\"212\":2,\"213\":3,\"214\":2,\"215\":3,\"217\":2,\"218\":3,\"219\":2,\"220\":1,\"221\":1,\"222\":1,\"223\":4,\"226\":3,\"227\":8,\"228\":12,\"230\":9,\"231\":2,\"235\":2,\"237\":10,\"239\":7,\"240\":7,\"241\":4,\"242\":3,\"243\":1,\"245\":8,\"246\":2,\"248\":2,\"249\":1,\"250\":1}}],[\"nutshell\",{\"1\":{\"77\":1}}],[\"nudge\",{\"1\":{\"35\":1}}],[\"nucs\",{\"1\":{\"29\":1}}],[\"nullsegmentdescriptor\",{\"1\":{\"187\":3,\"202\":1}}],[\"nullability\",{\"1\":{\"43\":1}}],[\"nullable\",{\"1\":{\"9\":1,\"77\":1}}],[\"nullreferenceexception\",{\"1\":{\"9\":1}}],[\"nullpointerexception\",{\"1\":{\"9\":1}}],[\"null\",{\"1\":{\"9\":4,\"17\":1,\"30\":1,\"51\":1,\"74\":1,\"77\":1,\"78\":2,\"83\":1,\"89\":3,\"139\":2,\"147\":2,\"186\":3,\"187\":5,\"188\":2,\"226\":1,\"228\":1,\"229\":3,\"234\":1,\"235\":4}}],[\"numpages\",{\"1\":{\"237\":2}}],[\"num=2\",{\"1\":{\"215\":1,\"222\":1,\"223\":1,\"227\":3,\"230\":2,\"231\":1}}],[\"num=1\",{\"1\":{\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"222\":1,\"223\":1,\"227\":3,\"230\":2,\"231\":1}}],[\"num=\",{\"1\":{\"212\":1,\"213\":1}}],[\"numtableentries\",{\"1\":{\"138\":1}}],[\"num\",{\"1\":{\"124\":2,\"212\":2,\"213\":5}}],[\"numactl\",{\"1\":{\"25\":1}}],[\"numa\",{\"1\":{\"25\":2}}],[\"numberofpages\",{\"1\":{\"159\":1,\"162\":1}}],[\"numbering\",{\"1\":{\"10\":2,\"36\":1}}],[\"number\",{\"1\":{\"9\":3,\"11\":6,\"21\":1,\"31\":1,\"41\":1,\"85\":1,\"87\":1,\"89\":1,\"106\":1,\"110\":1,\"125\":1,\"127\":1,\"147\":4,\"150\":1,\"165\":1,\"170\":2,\"171\":1,\"180\":1,\"184\":1,\"185\":2,\"197\":2,\"208\":2,\"210\":2,\"212\":3,\"213\":2,\"214\":1,\"215\":2,\"216\":1,\"234\":2,\"235\":3,\"245\":1}}],[\"numbers\",{\"1\":{\"6\":1,\"21\":1,\"36\":3,\"208\":1,\"245\":1}}],[\"numerically\",{\"1\":{\"186\":1}}],[\"numeric>\",{\"1\":{\"101\":1}}],[\"numeric\",{\"0\":{\"98\":1,\"101\":1},\"1\":{\"8\":1,\"11\":2,\"98\":5,\"99\":3,\"100\":2,\"101\":9,\"135\":1}}],[\"npages\",{\"1\":{\"218\":6,\"220\":3,\"237\":4}}],[\"np\",{\"1\":{\"35\":2,\"192\":1}}],[\"npe\",{\"1\":{\"9\":1}}],[\"npm\",{\"1\":{\"7\":3,\"35\":1}}],[\"nj\",{\"1\":{\"8\":1}}],[\"naive\",{\"1\":{\"74\":2,\"76\":1,\"110\":1}}],[\"navigate\",{\"1\":{\"59\":1,\"72\":1,\"74\":1,\"75\":2}}],[\"navigation\",{\"1\":{\"7\":1,\"13\":1,\"17\":2,\"59\":1,\"75\":1}}],[\"nas\",{\"1\":{\"24\":2}}],[\"nasm\",{\"1\":{\"9\":1}}],[\"nacl\",{\"1\":{\"22\":1}}],[\"narrow\",{\"1\":{\"29\":1}}],[\"narrowly\",{\"1\":{\"22\":1}}],[\"narrows\",{\"1\":{\"9\":1}}],[\"na\",{\"1\":{\"21\":1}}],[\"naur\",{\"1\":{\"10\":2}}],[\"national\",{\"1\":{\"21\":2,\"36\":3}}],[\"native\",{\"1\":{\"9\":1,\"11\":1,\"22\":2,\"24\":1,\"31\":2,\"36\":2,\"123\":1}}],[\"nat\",{\"1\":{\"21\":2}}],[\"natural\",{\"1\":{\"18\":1}}],[\"naturally\",{\"1\":{\"9\":1}}],[\"nanosecond\",{\"1\":{\"153\":1}}],[\"nan\",{\"1\":{\"9\":4}}],[\"nameoffset\",{\"1\":{\"235\":1}}],[\"name=\",{\"1\":{\"48\":1}}],[\"name>\",{\"1\":{\"44\":1,\"147\":1}}],[\"named\",{\"1\":{\"10\":2,\"17\":1,\"18\":1,\"21\":1,\"57\":1}}],[\"name\",{\"1\":{\"7\":1,\"11\":1,\"15\":1,\"21\":7,\"22\":1,\"24\":4,\"25\":1,\"36\":1,\"44\":1,\"46\":1,\"47\":1,\"48\":1,\"53\":2,\"57\":1,\"58\":1,\"61\":1,\"68\":1,\"70\":2,\"74\":2,\"75\":3,\"76\":1,\"77\":2,\"78\":11,\"82\":10,\"92\":1,\"101\":1,\"104\":1,\"106\":1,\"116\":2,\"123\":1,\"124\":2,\"141\":1,\"147\":5,\"166\":1,\"192\":2,\"226\":1,\"228\":2,\"229\":2,\"234\":1,\"241\":1}}],[\"namespaces\",{\"1\":{\"24\":1}}],[\"namespace\",{\"1\":{\"9\":1,\"11\":1,\"14\":1}}],[\"names\",{\"1\":{\"7\":3,\"21\":4,\"23\":1,\"24\":1,\"36\":1,\"58\":1,\"68\":3,\"70\":1,\"123\":1,\"147\":2,\"235\":1}}],[\"naming\",{\"1\":{\"4\":1,\"21\":2,\"74\":1}}],[\"noexec\",{\"1\":{\"237\":3,\"248\":1}}],[\"nobits\",{\"1\":{\"147\":2,\"226\":2,\"228\":2,\"234\":2,\"235\":2}}],[\"nomain\",{\"1\":{\"124\":4,\"141\":1}}],[\"nov\",{\"1\":{\"123\":1}}],[\"novell\",{\"1\":{\"11\":2,\"21\":5}}],[\"noreturn\",{\"1\":{\"221\":1,\"223\":1}}],[\"northbridge\",{\"1\":{\"30\":1}}],[\"normal\",{\"1\":{\"26\":1,\"130\":1,\"141\":1,\"191\":2}}],[\"normalized\",{\"1\":{\"17\":1}}],[\"normally\",{\"1\":{\"5\":1,\"74\":1,\"88\":1,\"146\":1,\"227\":1,\"240\":1}}],[\"nosignalhandler\",{\"1\":{\"124\":3}}],[\"nostdlib\",{\"1\":{\"123\":4,\"124\":5,\"143\":1,\"147\":1,\"196\":1}}],[\"nosql\",{\"1\":{\"17\":1}}],[\"nos\",{\"1\":{\"11\":1}}],[\"now\",{\"1\":{\"11\":1,\"16\":1,\"25\":2,\"29\":2,\"31\":1,\"35\":1,\"36\":1,\"43\":4,\"49\":1,\"53\":1,\"59\":1,\"63\":1,\"64\":3,\"65\":1,\"66\":1,\"69\":2,\"71\":2,\"72\":1,\"73\":2,\"74\":2,\"75\":2,\"78\":2,\"79\":2,\"80\":2,\"81\":1,\"82\":2,\"83\":1,\"84\":1,\"87\":1,\"88\":2,\"89\":5,\"90\":2,\"92\":2,\"93\":1,\"95\":2,\"96\":2,\"97\":2,\"100\":1,\"102\":2,\"104\":1,\"105\":1,\"108\":1,\"109\":1,\"110\":1,\"119\":1,\"121\":2,\"123\":2,\"124\":3,\"125\":1,\"128\":1,\"131\":2,\"132\":1,\"135\":2,\"136\":1,\"139\":1,\"140\":2,\"141\":2,\"143\":1,\"144\":1,\"145\":2,\"147\":5,\"148\":3,\"151\":1,\"152\":2,\"153\":1,\"154\":2,\"159\":2,\"160\":2,\"161\":3,\"162\":1,\"163\":1,\"166\":2,\"169\":3,\"170\":2,\"171\":3,\"177\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"187\":1,\"188\":4,\"190\":2,\"191\":3,\"192\":3,\"193\":4,\"194\":1,\"196\":1,\"197\":3,\"198\":2,\"199\":2,\"200\":1,\"202\":1,\"204\":2,\"206\":1,\"209\":3,\"210\":4,\"211\":2,\"212\":3,\"213\":2,\"215\":2,\"218\":2,\"222\":1,\"223\":3,\"226\":2,\"227\":1,\"229\":2,\"230\":6,\"231\":3,\"235\":1,\"236\":1,\"237\":8,\"239\":2,\"241\":2,\"242\":1,\"243\":3,\"245\":1,\"246\":2,\"247\":1,\"248\":1,\"249\":2}}],[\"nop\",{\"1\":{\"9\":2}}],[\"nonmaskable\",{\"1\":{\"192\":1}}],[\"none\",{\"1\":{\"87\":1,\"110\":1,\"135\":2,\"136\":1,\"143\":1,\"147\":2,\"148\":1,\"170\":2,\"177\":4,\"196\":2,\"197\":2,\"213\":1,\"214\":1,\"235\":9}}],[\"nonstop\",{\"1\":{\"11\":1}}],[\"nondeterministic\",{\"1\":{\"10\":1}}],[\"non\",{\"1\":{\"9\":1,\"17\":2,\"21\":1,\"22\":2,\"25\":1,\"26\":2,\"28\":1,\"29\":3,\"31\":2,\"34\":1,\"36\":4,\"88\":3}}],[\"nodes\",{\"1\":{\"7\":1,\"10\":2,\"11\":1,\"21\":4,\"57\":1,\"58\":8,\"61\":2,\"63\":1,\"65\":1,\"68\":2,\"72\":1,\"90\":1,\"92\":2,\"93\":1,\"168\":1,\"169\":1}}],[\"node\",{\"1\":{\"6\":1,\"7\":3,\"9\":1,\"25\":2,\"57\":1,\"58\":14,\"59\":1,\"61\":3,\"63\":5,\"64\":5,\"65\":1,\"69\":1,\"72\":3,\"74\":2,\"75\":6,\"77\":3,\"78\":4,\"79\":2,\"82\":2,\"83\":2,\"89\":1,\"90\":1,\"93\":2,\"168\":16,\"169\":14}}],[\"notopr\",{\"1\":{\"104\":9}}],[\"notnull\",{\"1\":{\"75\":2,\"77\":3}}],[\"notin\",{\"1\":{\"103\":1,\"104\":1}}],[\"notice\",{\"1\":{\"35\":1,\"70\":1,\"73\":1,\"74\":1,\"75\":1,\"80\":1,\"82\":1,\"84\":1,\"97\":1,\"104\":1,\"105\":1,\"123\":1,\"124\":1,\"140\":1,\"165\":1,\"177\":1,\"181\":2,\"191\":1,\"197\":1,\"200\":1,\"202\":1,\"208\":1,\"210\":1,\"212\":2,\"213\":1,\"215\":1,\"218\":2,\"228\":1,\"229\":1,\"230\":1,\"234\":1,\"237\":1,\"241\":1}}],[\"notifications\",{\"1\":{\"21\":1}}],[\"notable\",{\"1\":{\"11\":1}}],[\"notably\",{\"1\":{\"11\":1,\"30\":1,\"36\":1}}],[\"notation\",{\"1\":{\"5\":1,\"9\":2,\"10\":1,\"15\":2,\"17\":2,\"21\":2,\"102\":2,\"106\":1}}],[\"nothing\",{\"1\":{\"9\":1,\"35\":1,\"58\":1,\"122\":1,\"130\":1,\"227\":1,\"240\":1}}],[\"not\",{\"1\":{\"5\":2,\"9\":2,\"10\":1,\"16\":1,\"17\":2,\"20\":1,\"23\":1,\"29\":2,\"32\":1,\"35\":5,\"36\":1,\"45\":2,\"48\":1,\"52\":1,\"53\":1,\"57\":3,\"58\":3,\"66\":2,\"67\":1,\"69\":2,\"72\":1,\"75\":3,\"77\":2,\"78\":1,\"79\":2,\"80\":2,\"82\":2,\"83\":1,\"85\":5,\"87\":3,\"88\":3,\"89\":3,\"91\":1,\"94\":2,\"95\":3,\"96\":3,\"97\":8,\"102\":2,\"103\":3,\"104\":2,\"105\":2,\"107\":1,\"110\":1,\"113\":1,\"116\":2,\"123\":6,\"124\":12,\"130\":1,\"134\":1,\"136\":1,\"140\":3,\"141\":2,\"144\":1,\"146\":4,\"147\":9,\"148\":1,\"153\":1,\"158\":1,\"161\":2,\"168\":2,\"169\":3,\"170\":4,\"171\":11,\"176\":1,\"178\":1,\"179\":1,\"182\":1,\"185\":2,\"186\":6,\"187\":2,\"188\":2,\"189\":1,\"190\":2,\"191\":2,\"192\":8,\"197\":1,\"199\":1,\"200\":1,\"201\":2,\"205\":1,\"208\":2,\"211\":1,\"215\":1,\"220\":2,\"223\":3,\"224\":1,\"225\":3,\"226\":1,\"227\":1,\"229\":3,\"234\":1,\"235\":4,\"237\":3,\"238\":1,\"239\":1,\"240\":3,\"249\":3,\"254\":1}}],[\"notes\",{\"1\":{\"105\":1,\"135\":1,\"190\":1}}],[\"noteworthy\",{\"1\":{\"35\":1}}],[\"note\",{\"1\":{\"3\":1,\"30\":1,\"35\":1,\"58\":1,\"61\":1,\"94\":1,\"106\":2,\"124\":4,\"147\":1,\"175\":1,\"185\":1,\"194\":1,\"198\":1,\"235\":4,\"248\":1,\"249\":1,\"250\":1,\"251\":1}}],[\"no\",{\"1\":{\"5\":1,\"6\":1,\"9\":6,\"10\":1,\"11\":2,\"21\":1,\"22\":1,\"31\":1,\"35\":3,\"68\":1,\"70\":2,\"79\":1,\"88\":1,\"89\":5,\"92\":1,\"94\":1,\"98\":1,\"106\":2,\"110\":1,\"116\":1,\"122\":2,\"123\":2,\"124\":1,\"127\":1,\"131\":1,\"160\":2,\"162\":1,\"170\":3,\"176\":1,\"180\":1,\"181\":1,\"185\":1,\"186\":1,\"191\":1,\"192\":16,\"220\":1,\"227\":1,\"237\":3,\"238\":1,\"239\":3,\"241\":1,\"243\":4,\"246\":2}}],[\"n\",{\"1\":{\"5\":4,\"8\":1,\"9\":3,\"10\":1,\"14\":3,\"21\":1,\"53\":2,\"62\":1,\"87\":1,\"101\":1,\"124\":4,\"139\":2,\"141\":2,\"144\":1,\"147\":3,\"151\":1,\"166\":2,\"171\":4,\"179\":1,\"190\":1,\"192\":1,\"196\":1}}],[\"nesting\",{\"1\":{\"95\":1,\"96\":5}}],[\"nested\",{\"1\":{\"89\":1,\"92\":1,\"94\":2,\"95\":1,\"96\":3,\"105\":1,\"108\":2}}],[\"neat\",{\"1\":{\"75\":1,\"84\":1}}],[\"nearest\",{\"1\":{\"156\":1,\"197\":1,\"234\":1}}],[\"near\",{\"1\":{\"18\":1,\"24\":1}}],[\"negative\",{\"1\":{\"95\":1,\"98\":2}}],[\"negates\",{\"1\":{\"70\":1}}],[\"negotiates\",{\"1\":{\"31\":1}}],[\"negotiation\",{\"1\":{\"21\":1}}],[\"necessarily\",{\"1\":{\"58\":1,\"77\":1,\"234\":1}}],[\"necessary\",{\"1\":{\"5\":1,\"22\":1,\"41\":1,\"64\":1,\"146\":2,\"168\":2,\"170\":1,\"195\":1}}],[\"neill\",{\"1\":{\"30\":1}}],[\"neighbors\",{\"1\":{\"9\":1,\"21\":1}}],[\"nehalem\",{\"1\":{\"30\":1}}],[\"neon\",{\"1\":{\"26\":1,\"27\":2}}],[\"neoverse\",{\"1\":{\"25\":1}}],[\"neovim\",{\"1\":{\"9\":1}}],[\"ner\",{\"1\":{\"18\":2}}],[\"neurons\",{\"1\":{\"18\":1}}],[\"neural\",{\"1\":{\"18\":4}}],[\"neutrino\",{\"1\":{\"11\":1}}],[\"neutral\",{\"1\":{\"4\":1}}],[\"never\",{\"1\":{\"9\":1,\"130\":1,\"161\":1,\"163\":1,\"164\":1,\"181\":1,\"187\":1,\"194\":1,\"238\":1}}],[\"nexttask\",{\"1\":{\"239\":2}}],[\"nextid\",{\"1\":{\"217\":2,\"220\":2}}],[\"nextstate\",{\"1\":{\"87\":2,\"89\":2}}],[\"next\",{\"1\":{\"6\":1,\"7\":1,\"10\":1,\"20\":1,\"22\":1,\"27\":1,\"35\":2,\"41\":1,\"45\":1,\"47\":1,\"49\":2,\"51\":1,\"53\":1,\"55\":1,\"56\":1,\"59\":1,\"61\":2,\"66\":1,\"75\":1,\"77\":1,\"78\":2,\"84\":1,\"89\":1,\"94\":1,\"95\":1,\"97\":2,\"99\":1,\"105\":1,\"110\":2,\"116\":1,\"120\":1,\"121\":1,\"124\":1,\"135\":3,\"139\":1,\"141\":3,\"148\":1,\"153\":1,\"154\":1,\"157\":1,\"159\":1,\"160\":1,\"166\":2,\"168\":4,\"169\":3,\"170\":5,\"171\":9,\"177\":2,\"183\":2,\"192\":2,\"193\":1,\"195\":1,\"200\":3,\"215\":1,\"223\":1,\"231\":1,\"235\":4,\"237\":1,\"238\":1,\"239\":3,\"240\":7,\"241\":1,\"243\":1,\"245\":1,\"246\":2,\"249\":1}}],[\"needless\",{\"1\":{\"63\":1}}],[\"needs\",{\"1\":{\"45\":1,\"48\":1,\"74\":2,\"75\":1,\"116\":1,\"124\":1,\"134\":1,\"177\":3,\"178\":2,\"187\":1,\"201\":1,\"216\":1,\"219\":1,\"225\":1,\"226\":1,\"228\":3,\"229\":1,\"239\":1}}],[\"needing\",{\"1\":{\"11\":1,\"48\":1}}],[\"needed\",{\"1\":{\"7\":1,\"35\":1,\"48\":1,\"52\":1,\"67\":1,\"106\":1,\"147\":1,\"158\":1,\"177\":1,\"232\":1,\"235\":1,\"237\":2}}],[\"need\",{\"1\":{\"5\":2,\"29\":1,\"35\":1,\"42\":1,\"43\":3,\"46\":1,\"47\":1,\"48\":2,\"49\":1,\"52\":1,\"54\":1,\"55\":2,\"57\":1,\"61\":1,\"64\":1,\"66\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":3,\"76\":1,\"77\":1,\"79\":2,\"82\":1,\"83\":2,\"85\":3,\"86\":3,\"87\":4,\"88\":2,\"89\":2,\"95\":1,\"96\":3,\"99\":1,\"101\":2,\"104\":3,\"105\":1,\"106\":1,\"109\":1,\"110\":3,\"117\":3,\"118\":1,\"119\":1,\"122\":1,\"123\":3,\"124\":12,\"125\":1,\"133\":1,\"134\":2,\"139\":1,\"141\":1,\"147\":3,\"150\":1,\"151\":4,\"153\":3,\"154\":3,\"160\":1,\"161\":1,\"164\":3,\"169\":1,\"171\":1,\"172\":1,\"174\":3,\"175\":4,\"176\":4,\"177\":6,\"178\":1,\"179\":2,\"180\":1,\"181\":3,\"182\":2,\"183\":2,\"184\":1,\"185\":3,\"187\":7,\"188\":1,\"193\":1,\"195\":2,\"197\":1,\"200\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"206\":1,\"209\":1,\"210\":1,\"211\":3,\"213\":1,\"217\":1,\"218\":3,\"220\":1,\"222\":1,\"223\":3,\"224\":1,\"225\":3,\"226\":1,\"227\":3,\"229\":2,\"231\":1,\"234\":2,\"237\":8,\"239\":4,\"240\":2,\"244\":1,\"245\":1,\"246\":2,\"248\":3,\"249\":3}}],[\"newinterruptgate\",{\"1\":{\"190\":1,\"191\":2,\"192\":1,\"206\":2}}],[\"newidentref\",{\"1\":{\"82\":2}}],[\"newidentdecl\",{\"1\":{\"82\":2}}],[\"newexception\",{\"1\":{\"171\":3,\"220\":1,\"230\":3,\"231\":1,\"235\":6,\"237\":4}}],[\"newelementname\",{\"1\":{\"82\":2}}],[\"newnode\",{\"1\":{\"170\":7,\"171\":13}}],[\"newhandle\",{\"1\":{\"154\":1}}],[\"newwidecstring\",{\"1\":{\"139\":3}}],[\"newman\",{\"1\":{\"36\":1}}],[\"newton\",{\"1\":{\"33\":1}}],[\"newsgroups\",{\"1\":{\"21\":2}}],[\"news\",{\"1\":{\"21\":3,\"35\":3}}],[\"newlines\",{\"1\":{\"53\":1,\"141\":1}}],[\"newline\",{\"1\":{\"14\":1,\"15\":1,\"95\":1,\"141\":1,\"144\":1}}],[\"new\",{\"0\":{\"43\":1},\"1\":{\"5\":1,\"6\":2,\"11\":3,\"23\":1,\"25\":1,\"35\":3,\"41\":1,\"43\":2,\"45\":2,\"46\":3,\"49\":1,\"65\":1,\"78\":1,\"79\":2,\"82\":23,\"87\":5,\"88\":1,\"89\":3,\"91\":1,\"94\":1,\"96\":2,\"97\":3,\"100\":1,\"101\":2,\"105\":1,\"121\":2,\"123\":1,\"124\":3,\"140\":1,\"141\":1,\"163\":1,\"166\":1,\"168\":1,\"169\":2,\"176\":1,\"177\":2,\"181\":6,\"182\":1,\"186\":4,\"187\":2,\"188\":3,\"190\":2,\"191\":1,\"193\":1,\"195\":1,\"196\":1,\"197\":3,\"198\":3,\"202\":1,\"204\":1,\"217\":1,\"218\":2,\"220\":4,\"226\":1,\"230\":1,\"231\":1,\"235\":1,\"237\":1,\"239\":5,\"240\":5,\"241\":1,\"245\":1,\"246\":1,\"248\":1,\"249\":1}}],[\"netnews\",{\"1\":{\"21\":1}}],[\"netbeui\",{\"1\":{\"21\":3}}],[\"netbios\",{\"1\":{\"21\":9}}],[\"netbsd\",{\"1\":{\"11\":1}}],[\"nets\",{\"1\":{\"18\":1}}],[\"netcdf\",{\"1\":{\"15\":2}}],[\"netware\",{\"1\":{\"11\":4,\"21\":8}}],[\"netwide\",{\"1\":{\"9\":1}}],[\"networked\",{\"1\":{\"11\":3,\"21\":1,\"24\":1}}],[\"networks\",{\"1\":{\"11\":1,\"21\":16,\"22\":1,\"30\":1,\"36\":2}}],[\"networking\",{\"0\":{\"21\":1},\"1\":{\"11\":4,\"21\":8,\"25\":1,\"33\":1,\"36\":2,\"253\":1}}],[\"network\",{\"1\":{\"4\":1,\"7\":1,\"9\":2,\"11\":8,\"13\":1,\"14\":1,\"15\":1,\"17\":5,\"18\":4,\"21\":62,\"22\":2,\"24\":9,\"30\":3,\"33\":2,\"36\":1,\"37\":1,\"135\":2}}],[\"net\",{\"1\":{\"4\":5,\"7\":5,\"8\":6,\"9\":6,\"10\":3,\"17\":5,\"135\":1,\"136\":1,\"143\":1,\"148\":1,\"193\":1,\"196\":1}}],[\"jmp\",{\"1\":{\"130\":1,\"131\":1,\"164\":2,\"181\":1,\"196\":1,\"200\":2,\"210\":2,\"213\":1}}],[\"j\",{\"1\":{\"98\":1,\"102\":1}}],[\"jflex\",{\"1\":{\"41\":1,\"51\":1,\"52\":1,\"53\":3,\"54\":3,\"55\":1,\"62\":1,\"69\":2,\"89\":1,\"95\":1,\"99\":1}}],[\"jfs2\",{\"1\":{\"11\":1}}],[\"jtc\",{\"1\":{\"36\":1}}],[\"jtag\",{\"1\":{\"30\":2}}],[\"jwt\",{\"1\":{\"22\":2}}],[\"jumps\",{\"1\":{\"188\":2}}],[\"jumping\",{\"1\":{\"144\":1,\"150\":1,\"164\":1,\"181\":2,\"188\":1}}],[\"jump\",{\"1\":{\"40\":1,\"142\":1,\"147\":2,\"148\":1,\"150\":1,\"155\":1,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"177\":1,\"178\":1,\"181\":1,\"188\":2,\"195\":1,\"200\":1,\"230\":1,\"232\":1,\"235\":2}}],[\"jumbo\",{\"1\":{\"21\":1}}],[\"jukeboxes\",{\"1\":{\"31\":1}}],[\"justfile\",{\"1\":{\"136\":3,\"143\":2,\"148\":2,\"188\":1,\"196\":1}}],[\"justifies\",{\"1\":{\"35\":1}}],[\"just\",{\"1\":{\"10\":1,\"35\":2,\"72\":2,\"74\":1,\"87\":3,\"88\":1,\"106\":1,\"116\":1,\"124\":1,\"127\":1,\"128\":1,\"130\":1,\"136\":3,\"140\":1,\"141\":1,\"145\":1,\"147\":2,\"148\":2,\"151\":1,\"160\":1,\"162\":3,\"165\":1,\"175\":2,\"177\":1,\"179\":2,\"182\":1,\"191\":2,\"192\":1,\"193\":1,\"194\":3,\"196\":2,\"197\":1,\"198\":1,\"199\":1,\"209\":2,\"210\":2,\"211\":1,\"214\":2,\"215\":1,\"217\":1,\"218\":1,\"220\":1,\"222\":1,\"226\":2,\"227\":1,\"229\":2,\"234\":1,\"235\":1,\"245\":1,\"249\":1}}],[\"jetbrains\",{\"1\":{\"40\":3,\"43\":2,\"55\":3,\"67\":1,\"113\":2}}],[\"jet\",{\"1\":{\"17\":1}}],[\"jes2\",{\"1\":{\"11\":1}}],[\"jp\",{\"1\":{\"14\":1}}],[\"jpeg\",{\"1\":{\"13\":1}}],[\"jisc\",{\"1\":{\"21\":1}}],[\"jis\",{\"1\":{\"14\":1}}],[\"jitter\",{\"1\":{\"21\":1}}],[\"jit\",{\"1\":{\"10\":2}}],[\"jop\",{\"1\":{\"22\":1}}],[\"joint\",{\"1\":{\"21\":1,\"30\":1}}],[\"jointly\",{\"1\":{\"11\":1,\"18\":1}}],[\"join\",{\"1\":{\"21\":1,\"35\":1}}],[\"joins\",{\"1\":{\"17\":1}}],[\"jobs\",{\"1\":{\"11\":4,\"17\":1,\"24\":1}}],[\"job\",{\"1\":{\"11\":3,\"17\":1,\"142\":1}}],[\"journals\",{\"1\":{\"36\":1}}],[\"journaling\",{\"1\":{\"11\":2}}],[\"journey\",{\"1\":{\"1\":1,\"6\":1,\"40\":1,\"115\":1}}],[\"jcl\",{\"1\":{\"11\":6}}],[\"jrmp\",{\"1\":{\"9\":1}}],[\"jre\",{\"1\":{\"9\":1}}],[\"jdk\",{\"1\":{\"9\":1}}],[\"jdbc\",{\"1\":{\"9\":1}}],[\"jvmfield\",{\"1\":{\"61\":5,\"95\":1,\"99\":2,\"101\":3}}],[\"jvmstatic\",{\"1\":{\"106\":1,\"110\":3}}],[\"jvms\",{\"1\":{\"9\":1}}],[\"jvm\",{\"1\":{\"9\":3,\"43\":1,\"55\":1}}],[\"jsys\",{\"1\":{\"11\":1}}],[\"jsp\",{\"1\":{\"7\":2}}],[\"jsonp\",{\"1\":{\"15\":1}}],[\"jsonl\",{\"1\":{\"15\":1}}],[\"json\",{\"1\":{\"7\":1,\"9\":1,\"14\":1,\"15\":14,\"22\":1}}],[\"js\",{\"1\":{\"6\":1,\"7\":6,\"9\":1,\"10\":1,\"37\":1}}],[\"jacks\",{\"1\":{\"30\":1}}],[\"japan\",{\"1\":{\"25\":1}}],[\"janet\",{\"1\":{\"21\":2}}],[\"jabber\",{\"1\":{\"21\":1}}],[\"jars\",{\"1\":{\"16\":1}}],[\"jar\",{\"1\":{\"9\":3,\"16\":5}}],[\"jargon\",{\"1\":{\"3\":1}}],[\"jakarta\",{\"1\":{\"4\":1,\"7\":1}}],[\"javac\",{\"1\":{\"9\":1}}],[\"javaserver\",{\"1\":{\"7\":1}}],[\"javascript\",{\"1\":{\"7\":6,\"15\":1,\"36\":1}}],[\"java\",{\"1\":{\"4\":2,\"6\":1,\"7\":2,\"9\":10,\"10\":1,\"16\":2,\"42\":1,\"43\":2,\"47\":1,\"53\":2,\"54\":1,\"69\":8,\"71\":6,\"73\":14,\"74\":2,\"77\":1,\"79\":1,\"82\":2}}],[\"javabeans\",{\"1\":{\"4\":1}}],[\"ehsize\",{\"1\":{\"235\":1}}],[\"ew\",{\"1\":{\"234\":1}}],[\"e9\",{\"1\":{\"200\":1,\"210\":1}}],[\"e0\",{\"1\":{\"200\":2,\"228\":2}}],[\"e8\",{\"1\":{\"200\":1}}],[\"e89b\",{\"1\":{\"7\":1}}],[\"e5\",{\"1\":{\"200\":1}}],[\"eqtrace\",{\"1\":{\"147\":3}}],[\"eqd>>>>\",{\"1\":{\"92\":2,\"97\":1}}],[\"eqd>>\",{\"1\":{\"92\":3,\"97\":1}}],[\"eqd\",{\"1\":{\"86\":5,\"87\":2,\"88\":6,\"89\":4,\"90\":2,\"91\":3,\"92\":5,\"110\":4}}],[\"eq\",{\"1\":{\"73\":1,\"88\":1,\"90\":1,\"92\":1,\"97\":1,\"100\":1,\"104\":1}}],[\"equipment\",{\"1\":{\"21\":3,\"24\":1,\"33\":1}}],[\"equivalent\",{\"1\":{\"10\":2,\"27\":2,\"60\":1,\"92\":1,\"127\":2,\"173\":1}}],[\"equivalents\",{\"1\":{\"4\":1}}],[\"equality\",{\"1\":{\"10\":1}}],[\"equal\",{\"1\":{\"9\":1,\"87\":2,\"110\":3,\"186\":2,\"206\":1,\"234\":1}}],[\"equals\",{\"1\":{\"9\":1,\"11\":1,\"104\":1}}],[\"ega\",{\"1\":{\"32\":1}}],[\"egress\",{\"1\":{\"21\":1}}],[\"eib\",{\"1\":{\"173\":1}}],[\"eide\",{\"1\":{\"31\":1}}],[\"eisa\",{\"1\":{\"30\":3}}],[\"either\",{\"1\":{\"9\":1,\"58\":1,\"75\":1,\"78\":1,\"89\":3,\"95\":1,\"99\":1,\"105\":1,\"169\":2,\"170\":1,\"171\":1,\"173\":1}}],[\"ept\",{\"1\":{\"192\":1}}],[\"epilogue\",{\"1\":{\"209\":1}}],[\"epitaph\",{\"1\":{\"35\":1}}],[\"epic\",{\"1\":{\"25\":1}}],[\"eps12v\",{\"1\":{\"33\":1}}],[\"epp\",{\"1\":{\"30\":1}}],[\"eproms\",{\"1\":{\"29\":1}}],[\"eprom\",{\"1\":{\"29\":1}}],[\"epub\",{\"1\":{\"13\":2}}],[\"e1\",{\"1\":{\"21\":1}}],[\"eula\",{\"1\":{\"37\":2}}],[\"eurocard\",{\"1\":{\"30\":1}}],[\"europa\",{\"1\":{\"30\":1}}],[\"europe\",{\"1\":{\"25\":1}}],[\"european\",{\"1\":{\"21\":1}}],[\"eu\",{\"1\":{\"21\":1,\"23\":1,\"24\":1}}],[\"euc\",{\"1\":{\"14\":1}}],[\"eta\",{\"1\":{\"35\":2}}],[\"ethernet=l2\",{\"1\":{\"21\":1}}],[\"ethernet\",{\"1\":{\"21\":10,\"30\":1,\"33\":1,\"36\":3}}],[\"etl\",{\"1\":{\"17\":1}}],[\"etc\",{\"1\":{\"9\":1,\"11\":1,\"24\":1,\"35\":1,\"36\":1,\"44\":1,\"53\":1,\"77\":1,\"83\":1,\"92\":1,\"97\":1,\"116\":1,\"122\":1,\"135\":1,\"147\":1,\"235\":1}}],[\"ebpf\",{\"1\":{\"21\":2}}],[\"ebcdic\",{\"1\":{\"14\":2}}],[\"ebnf\",{\"1\":{\"10\":3}}],[\"efer\",{\"1\":{\"209\":4}}],[\"efer=0000000000000d00\",{\"1\":{\"188\":1}}],[\"efiinvalidparameter\",{\"1\":{\"160\":1}}],[\"efivirtualaddress\",{\"1\":{\"159\":3}}],[\"efiallocatetype\",{\"1\":{\"156\":4}}],[\"efiacpimemorynvs\",{\"1\":{\"151\":1}}],[\"efiacpireclaimmemory\",{\"1\":{\"151\":1}}],[\"efitime\",{\"1\":{\"153\":5}}],[\"efitableheader\",{\"1\":{\"138\":2,\"151\":1}}],[\"efiguid\",{\"1\":{\"151\":4,\"152\":1,\"154\":2}}],[\"efiunacceptedmemory\",{\"1\":{\"151\":1}}],[\"efiunusablememory\",{\"1\":{\"151\":1}}],[\"efiphysicaladdress\",{\"1\":{\"156\":4,\"159\":2,\"197\":8}}],[\"efipersistentmemory\",{\"1\":{\"151\":1}}],[\"efipalcode\",{\"1\":{\"151\":1}}],[\"eficonventionalmemory\",{\"1\":{\"151\":1,\"162\":1}}],[\"efiruntimeservicesdata\",{\"1\":{\"151\":1}}],[\"efiruntimeservicescode\",{\"1\":{\"151\":1}}],[\"efireservedmemory\",{\"1\":{\"151\":1}}],[\"efibootservices\",{\"1\":{\"151\":1,\"156\":1,\"159\":2,\"160\":1}}],[\"efibootservicesdata\",{\"1\":{\"151\":1,\"162\":1}}],[\"efibootservicescode\",{\"1\":{\"151\":1,\"162\":1}}],[\"efimaxmemorytype\",{\"1\":{\"151\":1,\"197\":1}}],[\"efimaininner\",{\"1\":{\"141\":3,\"151\":1,\"152\":1,\"153\":1,\"154\":2,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":2,\"161\":1,\"162\":3,\"163\":1,\"164\":1,\"180\":2,\"181\":2,\"197\":2}}],[\"efimain\",{\"1\":{\"133\":3,\"135\":1,\"139\":3,\"140\":1,\"141\":3,\"143\":1,\"197\":1}}],[\"efimemorydescriptor\",{\"1\":{\"159\":6,\"160\":1,\"162\":2}}],[\"efimemorymappedioportspace\",{\"1\":{\"151\":1}}],[\"efimemorymappedio\",{\"1\":{\"151\":1}}],[\"efimemorytype\",{\"1\":{\"151\":4,\"156\":2,\"159\":2,\"197\":3}}],[\"efifileinfoguid\",{\"1\":{\"154\":3,\"197\":1}}],[\"efifileinfo\",{\"1\":{\"150\":1,\"153\":6,\"154\":2,\"197\":2}}],[\"efifileprotocol\",{\"1\":{\"150\":3,\"153\":4,\"154\":10,\"157\":3,\"158\":3,\"197\":3}}],[\"efifilesysteminfo\",{\"1\":{\"150\":1}}],[\"efiloaderdata\",{\"1\":{\"151\":1,\"159\":1,\"162\":1}}],[\"efiloadercode\",{\"1\":{\"151\":1,\"162\":1}}],[\"efiloaderror\",{\"1\":{\"135\":2,\"138\":1}}],[\"efiloadedimageprotocolguid\",{\"1\":{\"151\":2}}],[\"efiloadedimageprotocol\",{\"1\":{\"150\":2,\"151\":7,\"152\":2}}],[\"efisimplefilesystemprotocolguid\",{\"1\":{\"152\":2}}],[\"efisimplefilesystemprotocol\",{\"1\":{\"150\":3,\"151\":1,\"152\":5,\"153\":3}}],[\"efisuccess\",{\"1\":{\"133\":2,\"135\":1,\"138\":1,\"151\":1,\"160\":2}}],[\"efisystemtable\",{\"1\":{\"133\":2,\"135\":1,\"138\":1,\"139\":3,\"140\":2,\"141\":2,\"151\":2,\"152\":1,\"153\":1,\"154\":2,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":2,\"161\":1,\"162\":2,\"163\":1,\"164\":1,\"180\":1,\"181\":1,\"197\":2}}],[\"efistatus\",{\"1\":{\"133\":2,\"135\":1,\"138\":3,\"139\":3,\"140\":2,\"141\":2,\"151\":4,\"152\":1,\"153\":2,\"154\":4,\"156\":2,\"157\":2,\"158\":2,\"159\":3,\"160\":3,\"161\":1,\"162\":2,\"163\":1,\"164\":1,\"180\":1,\"181\":1,\"197\":2}}],[\"efihandle\",{\"1\":{\"133\":2,\"135\":1,\"138\":4,\"139\":3,\"140\":1,\"141\":2,\"150\":1,\"151\":4,\"152\":1,\"153\":1,\"154\":2,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":3,\"161\":1,\"162\":2,\"163\":1,\"164\":1,\"180\":1,\"181\":1,\"197\":2}}],[\"efi\",{\"1\":{\"123\":3,\"124\":5,\"131\":1,\"133\":14,\"135\":9,\"136\":5,\"143\":6,\"148\":7,\"154\":1,\"195\":1,\"196\":8,\"197\":2}}],[\"eff\",{\"1\":{\"36\":1}}],[\"effort\",{\"1\":{\"35\":1,\"40\":1}}],[\"efficiency\",{\"1\":{\"20\":1,\"29\":1,\"33\":3}}],[\"efficient\",{\"1\":{\"10\":3,\"11\":1,\"15\":2,\"25\":1,\"207\":1}}],[\"effective\",{\"1\":{\"186\":2}}],[\"effects\",{\"1\":{\"10\":1}}],[\"effect\",{\"1\":{\"10\":1,\"186\":2}}],[\"ef\",{\"1\":{\"9\":1,\"17\":2}}],[\"eoibroadcastsuppression\",{\"1\":{\"249\":1}}],[\"eoi\",{\"1\":{\"248\":1,\"249\":3}}],[\"eois\",{\"1\":{\"11\":1}}],[\"eoy\",{\"1\":{\"35\":2}}],[\"eow\",{\"1\":{\"35\":2}}],[\"eod\",{\"1\":{\"35\":3}}],[\"eof\",{\"1\":{\"9\":2,\"66\":2,\"70\":1,\"89\":17,\"95\":1,\"96\":3,\"97\":1,\"128\":1}}],[\"eol\",{\"1\":{\"6\":3,\"87\":4,\"95\":1,\"97\":1}}],[\"e\",{\"1\":{\"9\":1,\"10\":1,\"11\":2,\"13\":2,\"14\":1,\"16\":2,\"21\":2,\"25\":3,\"26\":1,\"30\":3,\"31\":1,\"32\":2,\"33\":2,\"36\":1,\"44\":1,\"53\":1,\"58\":3,\"72\":1,\"74\":1,\"78\":1,\"83\":1,\"85\":1,\"89\":1,\"98\":4,\"99\":1,\"102\":5,\"103\":3,\"106\":2,\"107\":1,\"116\":1,\"124\":2,\"135\":1,\"141\":6,\"146\":2,\"147\":4,\"166\":8,\"175\":1,\"179\":1,\"185\":2,\"187\":1,\"188\":2,\"189\":1,\"192\":2,\"194\":2,\"195\":2,\"201\":1,\"207\":1,\"208\":2,\"217\":2,\"223\":1,\"234\":3,\"235\":4,\"237\":2,\"239\":1,\"242\":1}}],[\"else\",{\"1\":{\"40\":1,\"53\":1,\"64\":1,\"74\":1,\"85\":1,\"86\":5,\"102\":2,\"110\":1,\"139\":1,\"162\":1,\"169\":2,\"170\":3,\"171\":2,\"177\":1,\"197\":2,\"229\":1,\"230\":1,\"237\":1,\"239\":1,\"240\":1}}],[\"el3\",{\"1\":{\"27\":1}}],[\"el2\",{\"1\":{\"27\":2}}],[\"el1\",{\"1\":{\"27\":2}}],[\"el0\",{\"1\":{\"27\":3}}],[\"elt\",{\"1\":{\"17\":2}}],[\"elegance\",{\"1\":{\"115\":1}}],[\"electron\",{\"1\":{\"32\":1}}],[\"electronics\",{\"1\":{\"31\":1,\"32\":1,\"36\":1}}],[\"electronic\",{\"1\":{\"13\":1,\"33\":1,\"36\":1}}],[\"electrically\",{\"1\":{\"29\":3}}],[\"electrical\",{\"1\":{\"21\":1,\"36\":1}}],[\"electric\",{\"1\":{\"11\":1}}],[\"elevation\",{\"1\":{\"11\":1}}],[\"elementtypeholderclass=\",{\"1\":{\"70\":1}}],[\"elementtypeclass=\",{\"1\":{\"70\":1}}],[\"elementtype\",{\"1\":{\"64\":2}}],[\"elements\",{\"1\":{\"12\":1,\"44\":1,\"57\":2,\"61\":1,\"69\":1,\"73\":1,\"77\":3,\"79\":4,\"82\":2,\"83\":1,\"85\":1,\"88\":2,\"127\":2}}],[\"element\",{\"0\":{\"61\":1},\"1\":{\"5\":1,\"17\":1,\"58\":2,\"59\":1,\"61\":10,\"63\":2,\"64\":5,\"69\":2,\"70\":3,\"72\":5,\"74\":12,\"75\":7,\"76\":1,\"77\":14,\"78\":13,\"79\":20,\"82\":17,\"83\":10,\"88\":4,\"97\":1}}],[\"elfsectiontype\",{\"1\":{\"235\":2}}],[\"elfsectionheader\",{\"1\":{\"235\":4}}],[\"elfprogramheaderflag\",{\"1\":{\"235\":2}}],[\"elfprogramheaderflags\",{\"1\":{\"235\":2}}],[\"elfprogramheadertype\",{\"1\":{\"235\":2,\"237\":3}}],[\"elfprogramheader\",{\"1\":{\"235\":5}}],[\"elfversion\",{\"1\":{\"235\":4}}],[\"elfendianness\",{\"1\":{\"235\":3}}],[\"elfclass\",{\"1\":{\"235\":3}}],[\"elfmachine\",{\"1\":{\"235\":3}}],[\"elftype\",{\"1\":{\"235\":3}}],[\"elfident\",{\"1\":{\"235\":2}}],[\"elfimage\",{\"1\":{\"235\":6}}],[\"elfheader\",{\"1\":{\"235\":5}}],[\"elf64\",{\"1\":{\"147\":4,\"228\":1,\"234\":1}}],[\"elf\",{\"0\":{\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":1},\"1\":{\"10\":1,\"11\":2,\"142\":1,\"147\":9,\"148\":1,\"164\":1,\"226\":2,\"229\":3,\"232\":4,\"233\":3,\"234\":6,\"235\":18,\"236\":3,\"237\":6,\"252\":1}}],[\"elif\",{\"1\":{\"162\":3,\"169\":2,\"171\":3,\"197\":4}}],[\"eli5\",{\"1\":{\"35\":2}}],[\"elicit\",{\"1\":{\"18\":1}}],[\"elision\",{\"1\":{\"10\":1}}],[\"elides\",{\"1\":{\"10\":2}}],[\"eliminate\",{\"1\":{\"10\":2,\"124\":1}}],[\"eliminates\",{\"1\":{\"9\":1}}],[\"elimination\",{\"1\":{\"10\":3}}],[\"elixir\",{\"1\":{\"9\":2}}],[\"erd\",{\"1\":{\"17\":2}}],[\"eraser\",{\"1\":{\"29\":1}}],[\"erase\",{\"1\":{\"29\":1}}],[\"erased\",{\"1\":{\"29\":3}}],[\"erasable\",{\"1\":{\"29\":3}}],[\"erasure\",{\"1\":{\"23\":2}}],[\"era\",{\"1\":{\"11\":3,\"12\":1,\"21\":2,\"25\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1}}],[\"error\",{\"0\":{\"66\":1},\"1\":{\"9\":3,\"17\":3,\"19\":1,\"21\":3,\"29\":1,\"35\":1,\"53\":2,\"58\":1,\"59\":1,\"62\":1,\"63\":2,\"64\":1,\"66\":9,\"70\":1,\"87\":1,\"88\":2,\"89\":2,\"96\":5,\"123\":3,\"124\":21,\"128\":1,\"129\":1,\"135\":1,\"147\":1,\"160\":4,\"179\":1,\"189\":1,\"191\":5,\"192\":10,\"193\":2,\"214\":1,\"229\":2,\"235\":1,\"248\":1}}],[\"errorstatus\",{\"1\":{\"248\":1}}],[\"errors\",{\"1\":{\"6\":1,\"20\":1,\"26\":1,\"29\":3,\"63\":1,\"66\":1,\"94\":1,\"96\":1,\"124\":1,\"179\":1,\"192\":2}}],[\"erlang\",{\"1\":{\"9\":3}}],[\"ecx\",{\"1\":{\"209\":2}}],[\"ec\",{\"1\":{\"200\":1}}],[\"ecns\",{\"1\":{\"36\":1}}],[\"ecall\",{\"1\":{\"34\":1}}],[\"ecp\",{\"1\":{\"30\":1}}],[\"ecc\",{\"1\":{\"26\":1,\"29\":2}}],[\"ec2\",{\"1\":{\"24\":1}}],[\"ecosystem\",{\"1\":{\"12\":1}}],[\"ecosystems\",{\"1\":{\"9\":1,\"11\":1}}],[\"echo\",{\"1\":{\"11\":1,\"21\":1,\"60\":1,\"61\":1,\"65\":1,\"66\":1,\"70\":1,\"72\":4,\"76\":2,\"85\":3,\"86\":3,\"97\":2,\"102\":1,\"106\":1,\"109\":2,\"121\":1,\"140\":3,\"141\":3,\"151\":1,\"154\":1,\"160\":3,\"196\":1,\"197\":1}}],[\"ecma\",{\"1\":{\"9\":1,\"36\":4}}],[\"ecmascript\",{\"1\":{\"7\":1,\"36\":1}}],[\"ecs\",{\"1\":{\"4\":1}}],[\"e2e\",{\"1\":{\"6\":1}}],[\"edx\",{\"1\":{\"209\":4}}],[\"edk2\",{\"1\":{\"134\":3}}],[\"edk\",{\"1\":{\"134\":1}}],[\"edo\",{\"1\":{\"29\":5}}],[\"edid\",{\"1\":{\"32\":3}}],[\"edirectory\",{\"1\":{\"21\":2}}],[\"editable\",{\"1\":{\"84\":1}}],[\"edition\",{\"1\":{\"42\":1,\"43\":1}}],[\"editing\",{\"1\":{\"5\":1,\"9\":1,\"11\":1}}],[\"editor\",{\"1\":{\"9\":2,\"22\":1,\"40\":1,\"49\":1,\"50\":1,\"54\":1,\"83\":1,\"96\":1}}],[\"editors\",{\"1\":{\"9\":2,\"13\":1}}],[\"education\",{\"1\":{\"11\":1,\"21\":1}}],[\"educational\",{\"1\":{\"11\":1,\"25\":1}}],[\"edges\",{\"1\":{\"9\":2,\"10\":1,\"29\":1}}],[\"edge\",{\"1\":{\"7\":1,\"21\":2,\"30\":1,\"33\":1,\"171\":1}}],[\"eda\",{\"1\":{\"4\":1}}],[\"eax\",{\"1\":{\"209\":4}}],[\"easily\",{\"1\":{\"79\":1,\"88\":1,\"90\":1,\"218\":1,\"239\":1,\"249\":1}}],[\"easier\",{\"1\":{\"72\":2,\"139\":1,\"142\":1,\"179\":1,\"187\":1,\"188\":1,\"246\":1}}],[\"easy\",{\"1\":{\"15\":1,\"52\":1,\"86\":1,\"90\":1,\"118\":1,\"171\":1,\"172\":1,\"218\":2,\"239\":1}}],[\"earlier\",{\"1\":{\"35\":1,\"47\":1,\"59\":1,\"90\":1,\"92\":1,\"105\":1,\"123\":1,\"124\":1,\"139\":1,\"147\":1,\"157\":1,\"191\":1,\"192\":1,\"194\":1,\"206\":1,\"210\":1,\"211\":1,\"227\":1}}],[\"earliest\",{\"1\":{\"15\":1}}],[\"early\",{\"1\":{\"4\":1,\"5\":1,\"6\":1,\"8\":2,\"9\":1,\"11\":17,\"17\":2,\"21\":13,\"25\":2,\"28\":1,\"29\":3,\"30\":2,\"31\":1,\"32\":1,\"33\":1,\"36\":2,\"66\":2,\"79\":1,\"144\":1,\"209\":1}}],[\"earth\",{\"1\":{\"15\":1}}],[\"each\",{\"1\":{\"5\":5,\"9\":2,\"10\":2,\"14\":1,\"32\":1,\"41\":1,\"53\":1,\"58\":1,\"61\":1,\"63\":2,\"66\":1,\"69\":1,\"72\":1,\"77\":4,\"78\":3,\"79\":2,\"85\":3,\"86\":1,\"89\":1,\"97\":1,\"105\":3,\"109\":1,\"110\":1,\"116\":1,\"127\":1,\"141\":1,\"146\":1,\"147\":3,\"165\":1,\"168\":1,\"169\":1,\"173\":1,\"174\":5,\"175\":2,\"176\":1,\"185\":2,\"189\":1,\"190\":2,\"192\":1,\"194\":1,\"201\":1,\"208\":1,\"217\":2,\"223\":1,\"229\":1,\"230\":4,\"231\":1,\"233\":1,\"235\":2,\"237\":2,\"239\":1,\"247\":1,\"248\":2}}],[\"emissive\",{\"1\":{\"32\":2}}],[\"emitted\",{\"1\":{\"88\":1,\"89\":3}}],[\"emitting\",{\"1\":{\"32\":2,\"86\":1,\"88\":1,\"89\":2}}],[\"emit\",{\"1\":{\"10\":2,\"85\":2,\"86\":4,\"87\":7,\"88\":1,\"89\":1,\"96\":4,\"164\":1}}],[\"emits\",{\"1\":{\"4\":1,\"16\":1,\"32\":1}}],[\"empty\",{\"1\":{\"29\":1,\"45\":1,\"64\":1,\"66\":1,\"70\":2,\"72\":1,\"87\":2,\"88\":5,\"89\":4,\"143\":1,\"171\":2,\"239\":1}}],[\"emphasizes\",{\"1\":{\"12\":1}}],[\"emphasizing\",{\"1\":{\"6\":2,\"11\":1,\"25\":1}}],[\"emphasis\",{\"1\":{\"12\":1}}],[\"em64t\",{\"1\":{\"25\":2}}],[\"eme\",{\"1\":{\"22\":1}}],[\"emerged\",{\"1\":{\"21\":1}}],[\"emm386\",{\"1\":{\"11\":1}}],[\"ems\",{\"1\":{\"11\":2}}],[\"emulation\",{\"1\":{\"24\":2,\"34\":1}}],[\"emulator\",{\"1\":{\"24\":3,\"35\":2,\"120\":1}}],[\"emulators\",{\"1\":{\"11\":3}}],[\"emulated\",{\"1\":{\"11\":1,\"24\":1}}],[\"emulate\",{\"1\":{\"11\":1}}],[\"embed\",{\"1\":{\"9\":1,\"15\":1}}],[\"embedded\",{\"1\":{\"7\":1,\"11\":6,\"13\":1,\"24\":1,\"25\":6,\"29\":1,\"30\":2,\"33\":2}}],[\"embedding\",{\"1\":{\"4\":1,\"9\":2,\"17\":1}}],[\"emacs\",{\"1\":{\"8\":1}}],[\"email=\",{\"1\":{\"44\":1}}],[\"emails\",{\"1\":{\"23\":1}}],[\"email\",{\"1\":{\"4\":1,\"21\":7,\"22\":4,\"24\":1}}],[\"eeproms\",{\"1\":{\"29\":1,\"30\":1}}],[\"eeprom\",{\"1\":{\"29\":2}}],[\"ee\",{\"1\":{\"4\":2,\"99\":1}}],[\"ejb\",{\"1\":{\"4\":1}}],[\"exited\",{\"1\":{\"161\":2}}],[\"exitbootservices\",{\"1\":{\"150\":3,\"151\":1,\"160\":8}}],[\"exiting\",{\"1\":{\"124\":1,\"160\":2,\"194\":1}}],[\"exit\",{\"0\":{\"160\":1},\"1\":{\"96\":1,\"124\":4,\"130\":3,\"131\":1,\"135\":2,\"139\":1,\"144\":1,\"151\":1,\"155\":1,\"160\":3,\"191\":1,\"215\":13,\"222\":1,\"223\":1,\"227\":3,\"230\":2,\"231\":1,\"241\":3,\"242\":4,\"243\":7,\"244\":1,\"245\":5,\"246\":4}}],[\"exits\",{\"0\":{\"242\":1},\"1\":{\"95\":1,\"215\":1,\"239\":2}}],[\"existence\",{\"1\":{\"88\":1}}],[\"exists\",{\"1\":{\"35\":1,\"141\":1,\"177\":1}}],[\"existing\",{\"1\":{\"22\":1,\"35\":1,\"82\":3,\"90\":1,\"100\":1,\"101\":1,\"124\":1,\"143\":1,\"218\":2,\"219\":1,\"240\":1}}],[\"exist\",{\"1\":{\"17\":1,\"177\":1}}],[\"exfat\",{\"1\":{\"31\":1}}],[\"exact\",{\"1\":{\"170\":2}}],[\"exactly\",{\"1\":{\"10\":2,\"63\":1,\"87\":1,\"135\":1,\"147\":1,\"170\":1,\"171\":5,\"179\":1,\"229\":1}}],[\"exasperation\",{\"1\":{\"35\":1}}],[\"example\",{\"1\":{\"4\":1,\"5\":1,\"6\":1,\"7\":4,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":9,\"22\":2,\"23\":1,\"24\":2,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"52\":1,\"57\":1,\"68\":1,\"69\":1,\"73\":1,\"76\":1,\"77\":2,\"78\":1,\"79\":1,\"85\":1,\"86\":1,\"90\":1,\"97\":1,\"101\":2,\"110\":1,\"176\":1,\"187\":1,\"190\":2,\"225\":1,\"228\":1}}],[\"examples\",{\"1\":{\"2\":1,\"3\":1,\"6\":1,\"94\":1,\"98\":1,\"102\":2}}],[\"exec\",{\"1\":{\"11\":2,\"22\":1,\"147\":4}}],[\"executable\",{\"0\":{\"123\":1},\"1\":{\"11\":6,\"22\":2,\"121\":1,\"122\":2,\"123\":9,\"124\":2,\"131\":3,\"133\":2,\"142\":2,\"147\":8,\"148\":1,\"185\":1,\"226\":1,\"232\":1,\"233\":1,\"234\":2,\"235\":5}}],[\"executables\",{\"1\":{\"10\":1,\"11\":4,\"123\":1,\"224\":1}}],[\"executive\",{\"1\":{\"11\":3}}],[\"executing\",{\"1\":{\"10\":1,\"26\":2,\"187\":1,\"194\":1,\"200\":1,\"208\":3,\"210\":2,\"211\":1,\"216\":1,\"217\":2,\"249\":1}}],[\"execution\",{\"1\":{\"9\":1,\"11\":2,\"17\":1,\"21\":2,\"22\":2,\"25\":2,\"33\":2,\"188\":1,\"192\":1,\"210\":1,\"215\":1,\"238\":1,\"240\":1}}],[\"executes\",{\"1\":{\"26\":1,\"34\":1,\"141\":1}}],[\"executed\",{\"1\":{\"11\":1,\"26\":1,\"53\":1,\"124\":1,\"145\":1,\"185\":3,\"194\":1,\"205\":1}}],[\"execute\",{\"1\":{\"7\":1,\"22\":3,\"33\":1,\"77\":3,\"78\":5,\"79\":2,\"147\":2,\"192\":1,\"196\":1,\"205\":1,\"206\":1,\"221\":1,\"234\":2,\"237\":2,\"249\":1}}],[\"exe\",{\"1\":{\"10\":1,\"11\":6,\"13\":2,\"21\":1,\"22\":1,\"123\":8,\"124\":6,\"131\":3}}],[\"exercise\",{\"1\":{\"151\":1}}],[\"exercised\",{\"1\":{\"9\":1}}],[\"exercises\",{\"1\":{\"9\":1}}],[\"exhausted\",{\"1\":{\"9\":1}}],[\"exciting\",{\"1\":{\"243\":1}}],[\"exclusive\",{\"1\":{\"168\":2,\"182\":1,\"198\":1}}],[\"exclude\",{\"1\":{\"123\":1,\"147\":2,\"234\":1}}],[\"exceeded\",{\"1\":{\"192\":2}}],[\"except\",{\"1\":{\"97\":2,\"141\":1,\"166\":1,\"168\":1,\"187\":1,\"196\":1,\"197\":1}}],[\"exception│\",{\"1\":{\"192\":1}}],[\"exceptions\",{\"0\":{\"141\":1,\"166\":1,\"192\":1},\"1\":{\"11\":1,\"104\":1,\"141\":3,\"147\":1,\"166\":1,\"183\":2,\"188\":1,\"189\":1,\"191\":2,\"192\":5,\"193\":1,\"246\":1}}],[\"exception\",{\"1\":{\"9\":1,\"27\":1,\"87\":1,\"103\":1,\"141\":8,\"166\":7,\"171\":6,\"185\":1,\"186\":2,\"189\":2,\"190\":1,\"192\":16,\"193\":7,\"201\":1,\"205\":6,\"206\":3,\"220\":1,\"230\":3,\"231\":1}}],[\"excellent\",{\"1\":{\"12\":1}}],[\"excel\",{\"1\":{\"8\":1,\"9\":2}}],[\"exchangeability\",{\"1\":{\"25\":1}}],[\"exchanged\",{\"1\":{\"21\":1}}],[\"exchanger\",{\"1\":{\"21\":1}}],[\"exchange\",{\"1\":{\"4\":4,\"11\":1,\"15\":1,\"21\":3}}],[\"ext4\",{\"1\":{\"11\":2}}],[\"extra\",{\"1\":{\"89\":1,\"147\":2,\"234\":1}}],[\"extracts\",{\"1\":{\"13\":1}}],[\"extraction\",{\"1\":{\"8\":1}}],[\"extract\",{\"1\":{\"5\":2,\"16\":3,\"17\":2,\"18\":2,\"82\":3,\"83\":1,\"177\":1}}],[\"extremely\",{\"1\":{\"16\":1,\"146\":1}}],[\"extreme\",{\"1\":{\"6\":1,\"11\":1}}],[\"extern\",{\"1\":{\"9\":1}}],[\"external\",{\"1\":{\"7\":1,\"9\":1,\"18\":1,\"21\":1,\"28\":1,\"31\":1,\"70\":1,\"106\":8,\"110\":6,\"192\":2,\"247\":1,\"248\":1}}],[\"externalize\",{\"1\":{\"6\":1}}],[\"extender\",{\"1\":{\"21\":1}}],[\"extended\",{\"1\":{\"4\":1,\"6\":1,\"10\":1,\"11\":3,\"14\":1,\"21\":1,\"25\":2,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"174\":2,\"248\":1}}],[\"extending\",{\"1\":{\"21\":1,\"25\":1,\"51\":1,\"69\":1,\"74\":1}}],[\"extends\",{\"1\":{\"21\":1,\"32\":1,\"46\":2,\"47\":1,\"52\":2,\"59\":1,\"61\":2,\"63\":1,\"74\":3,\"75\":1,\"83\":1,\"105\":2}}],[\"extend\",{\"1\":{\"10\":1,\"51\":1,\"58\":2,\"61\":1,\"74\":1,\"105\":2}}],[\"extensive\",{\"1\":{\"146\":1}}],[\"extensible\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"12\":2,\"21\":1,\"30\":1,\"34\":1,\"122\":1}}],[\"extensions=\",{\"1\":{\"48\":1}}],[\"extensions>\",{\"1\":{\"44\":1,\"48\":1,\"64\":1,\"83\":1}}],[\"extensions\",{\"1\":{\"9\":1,\"14\":1,\"21\":2,\"24\":1,\"25\":4,\"26\":1,\"28\":9,\"31\":1,\"32\":1}}],[\"extension\",{\"1\":{\"4\":2,\"5\":1,\"10\":2,\"11\":1,\"25\":1,\"27\":2,\"44\":2,\"46\":1,\"47\":1,\"48\":2,\"49\":1,\"64\":2,\"79\":1,\"123\":1,\"173\":1}}],[\"expired\",{\"1\":{\"238\":1}}],[\"exprindentend\",{\"1\":{\"110\":4}}],[\"exprindent\",{\"1\":{\"110\":5}}],[\"exprindentstart\",{\"1\":{\"110\":4}}],[\"exprindentlevel++\",{\"1\":{\"110\":1}}],[\"exprindentlevel\",{\"1\":{\"110\":10}}],[\"expr\",{\"1\":{\"105\":3,\"110\":5}}],[\"expresses\",{\"1\":{\"35\":1}}],[\"expressed\",{\"1\":{\"10\":1}}],[\"expresscard\",{\"1\":{\"30\":1}}],[\"expressing\",{\"1\":{\"10\":1}}],[\"expressions\",{\"0\":{\"102\":1,\"105\":1},\"1\":{\"9\":2,\"10\":4,\"99\":1,\"102\":6,\"105\":8,\"106\":1,\"108\":2,\"110\":5}}],[\"expression\",{\"1\":{\"9\":2,\"10\":1,\"17\":1,\"35\":2,\"53\":2,\"102\":9,\"105\":8,\"108\":1,\"109\":1,\"110\":16}}],[\"expressive\",{\"1\":{\"9\":1}}],[\"express\",{\"1\":{\"5\":1,\"30\":1,\"31\":1,\"36\":1,\"135\":1}}],[\"exp\",{\"1\":{\"99\":3}}],[\"expansion\",{\"1\":{\"30\":4}}],[\"expanddown\",{\"1\":{\"187\":1}}],[\"expanders\",{\"1\":{\"31\":1}}],[\"expanded\",{\"1\":{\"11\":1,\"21\":1}}],[\"expands\",{\"1\":{\"23\":1}}],[\"expand\",{\"1\":{\"6\":1,\"13\":1,\"185\":1}}],[\"exponent\",{\"1\":{\"98\":3,\"99\":1}}],[\"exponential\",{\"1\":{\"35\":1}}],[\"exposing\",{\"1\":{\"24\":1}}],[\"exposures\",{\"1\":{\"22\":1}}],[\"exposed\",{\"1\":{\"11\":1}}],[\"expose\",{\"1\":{\"7\":1,\"9\":1,\"18\":1,\"21\":1,\"33\":1,\"61\":1}}],[\"exposes\",{\"1\":{\"5\":1,\"11\":1}}],[\"exportc\",{\"1\":{\"124\":7,\"127\":1,\"128\":1,\"129\":2,\"130\":1,\"131\":5,\"133\":2,\"135\":2,\"139\":3,\"140\":2,\"141\":2,\"145\":1,\"161\":1,\"163\":1,\"165\":1,\"166\":1,\"197\":1,\"204\":1,\"205\":3,\"206\":1,\"210\":1,\"212\":2,\"213\":2,\"215\":1,\"219\":1,\"222\":1,\"223\":2,\"230\":1,\"231\":1,\"239\":2,\"241\":1,\"246\":1}}],[\"exported\",{\"1\":{\"83\":1,\"131\":1}}],[\"exports\",{\"1\":{\"15\":2}}],[\"export\",{\"1\":{\"11\":1,\"13\":1,\"124\":1,\"212\":1}}],[\"expensive\",{\"1\":{\"214\":1}}],[\"expectations\",{\"1\":{\"235\":1}}],[\"expecting\",{\"1\":{\"66\":2,\"88\":1,\"89\":2,\"96\":2,\"164\":1,\"237\":1}}],[\"expects\",{\"1\":{\"52\":1,\"89\":1,\"123\":2,\"124\":2,\"135\":1,\"141\":1}}],[\"expect\",{\"1\":{\"40\":1,\"85\":1,\"89\":2,\"97\":1,\"154\":1}}],[\"expected\",{\"1\":{\"9\":2,\"35\":1,\"55\":1,\"65\":1,\"88\":4,\"89\":1,\"91\":1,\"95\":1,\"96\":1,\"101\":1,\"109\":1,\"110\":1,\"135\":5,\"139\":2,\"140\":1,\"147\":1,\"163\":1,\"171\":1,\"188\":1,\"200\":1,\"205\":1,\"212\":1,\"214\":1,\"246\":1}}],[\"expert\",{\"1\":{\"18\":1,\"35\":2}}],[\"experts\",{\"1\":{\"18\":2}}],[\"experiment\",{\"1\":{\"116\":1}}],[\"experimental\",{\"1\":{\"11\":1,\"177\":2}}],[\"experiences\",{\"1\":{\"35\":1}}],[\"experience\",{\"1\":{\"6\":2,\"11\":1,\"21\":1,\"40\":1,\"89\":1,\"96\":1}}],[\"explanatory\",{\"1\":{\"64\":1,\"106\":1}}],[\"explanation\",{\"1\":{\"35\":1}}],[\"explains\",{\"1\":{\"35\":1,\"188\":1}}],[\"explain\",{\"1\":{\"35\":1,\"185\":1}}],[\"exploit\",{\"1\":{\"22\":1}}],[\"exploits\",{\"1\":{\"11\":1}}],[\"explore\",{\"1\":{\"11\":2,\"56\":1,\"116\":2}}],[\"explores\",{\"1\":{\"9\":1}}],[\"explorer\",{\"1\":{\"7\":1}}],[\"exploratory\",{\"1\":{\"6\":1}}],[\"explicitly\",{\"1\":{\"25\":1,\"124\":1}}],[\"explicit\",{\"1\":{\"5\":1,\"9\":1,\"21\":4,\"35\":1,\"85\":1,\"92\":1}}],[\"evident\",{\"1\":{\"227\":1}}],[\"eviction\",{\"1\":{\"9\":1}}],[\"evolving\",{\"1\":{\"21\":2}}],[\"evolved\",{\"1\":{\"11\":4,\"13\":1,\"21\":1}}],[\"evolution\",{\"1\":{\"4\":1}}],[\"evaluation\",{\"1\":{\"9\":1,\"36\":1,\"108\":1}}],[\"evaluating\",{\"1\":{\"6\":1}}],[\"evaluate\",{\"1\":{\"9\":1,\"34\":1}}],[\"evaluated\",{\"1\":{\"9\":1,\"72\":1}}],[\"eval\",{\"1\":{\"9\":1}}],[\"even\",{\"1\":{\"9\":1,\"72\":1,\"80\":1,\"85\":2,\"86\":1,\"96\":1,\"107\":2,\"124\":1,\"184\":1,\"185\":1,\"194\":1,\"205\":1,\"227\":1}}],[\"eventually\",{\"1\":{\"139\":1,\"150\":1}}],[\"eventual\",{\"1\":{\"17\":3}}],[\"event\",{\"1\":{\"4\":4,\"5\":1,\"8\":1,\"11\":2,\"30\":1,\"33\":1,\"151\":1,\"253\":1}}],[\"eventsource\",{\"1\":{\"21\":1}}],[\"events\",{\"1\":{\"4\":4,\"9\":1,\"17\":4,\"21\":2,\"22\":1,\"34\":5,\"116\":1}}],[\"every\",{\"1\":{\"6\":1,\"35\":1,\"55\":2,\"58\":1,\"71\":1,\"75\":1,\"77\":1,\"110\":1,\"124\":2,\"140\":1,\"151\":1,\"177\":2,\"223\":1}}],[\"everything\",{\"1\":{\"5\":1,\"43\":1,\"45\":1,\"96\":2,\"105\":1,\"151\":1,\"177\":1,\"181\":1,\"183\":1,\"200\":2,\"204\":1,\"210\":2,\"212\":1,\"244\":1,\"246\":1}}],[\"everyday\",{\"1\":{\"3\":1}}],[\"escape\",{\"1\":{\"62\":1,\"106\":1}}],[\"escalation\",{\"1\":{\"11\":1}}],[\"esp\",{\"1\":{\"21\":2,\"34\":1}}],[\"especially\",{\"1\":{\"8\":1,\"87\":1,\"193\":1}}],[\"estimated\",{\"1\":{\"35\":1}}],[\"estimation\",{\"1\":{\"17\":1}}],[\"estimating\",{\"1\":{\"17\":1}}],[\"establishes\",{\"1\":{\"21\":1}}],[\"establish\",{\"1\":{\"21\":1}}],[\"esa\",{\"1\":{\"11\":2}}],[\"es2023\",{\"1\":{\"7\":1}}],[\"esb\",{\"1\":{\"4\":1}}],[\"es\",{\"1\":{\"4\":1,\"7\":1,\"147\":2,\"186\":1,\"187\":1,\"188\":2,\"200\":1,\"210\":2,\"212\":1,\"226\":1,\"228\":2,\"229\":1,\"234\":1}}],[\"enough\",{\"1\":{\"69\":1,\"82\":1,\"150\":1,\"156\":1,\"168\":1,\"170\":5,\"173\":1,\"187\":1,\"237\":1}}],[\"enriched\",{\"1\":{\"59\":1}}],[\"enrollment\",{\"1\":{\"22\":1}}],[\"enum\",{\"1\":{\"97\":1,\"151\":2,\"156\":3,\"162\":1,\"175\":2,\"197\":5,\"213\":1,\"214\":1,\"230\":4,\"235\":8,\"237\":1,\"239\":1,\"248\":1}}],[\"enumeration\",{\"1\":{\"34\":1,\"252\":1}}],[\"enumerate\",{\"1\":{\"34\":1}}],[\"enumerated\",{\"1\":{\"30\":1,\"34\":1}}],[\"enums\",{\"1\":{\"9\":1}}],[\"energy\",{\"1\":{\"29\":1,\"36\":1}}],[\"envoy\",{\"1\":{\"36\":1}}],[\"env\",{\"1\":{\"35\":1,\"124\":2}}],[\"envelope\",{\"1\":{\"24\":1}}],[\"environments\",{\"1\":{\"11\":1,\"21\":2,\"24\":1}}],[\"environment\",{\"0\":{\"117\":1},\"1\":{\"4\":1,\"9\":5,\"11\":12,\"18\":1,\"21\":1,\"24\":1,\"36\":1,\"40\":1,\"41\":1,\"116\":1,\"117\":2,\"119\":1,\"121\":2,\"122\":3,\"132\":1,\"135\":1,\"145\":1,\"178\":1,\"181\":1,\"194\":2,\"200\":1,\"207\":1}}],[\"enforce\",{\"1\":{\"22\":2,\"25\":1}}],[\"enforces\",{\"1\":{\"6\":1,\"17\":1}}],[\"enqueue\",{\"1\":{\"17\":1}}],[\"enhanced\",{\"1\":{\"14\":1,\"25\":2,\"31\":1,\"32\":1}}],[\"enclosed\",{\"1\":{\"62\":1,\"89\":1}}],[\"encounters\",{\"1\":{\"95\":1,\"96\":1,\"105\":1,\"189\":1}}],[\"encountered\",{\"1\":{\"95\":1}}],[\"encounter\",{\"1\":{\"40\":1,\"64\":1,\"87\":1,\"89\":2,\"92\":1,\"96\":4}}],[\"encompassing\",{\"1\":{\"21\":1}}],[\"encodes\",{\"1\":{\"21\":2}}],[\"encoded\",{\"1\":{\"18\":1}}],[\"encode\",{\"1\":{\"15\":1}}],[\"encoding\",{\"1\":{\"14\":9,\"15\":1,\"16\":3,\"22\":1,\"27\":1,\"31\":1}}],[\"encodings\",{\"0\":{\"14\":1},\"1\":{\"14\":4}}],[\"encapsulate\",{\"1\":{\"217\":2,\"222\":1}}],[\"encapsulates\",{\"1\":{\"21\":3}}],[\"encapsulating\",{\"1\":{\"21\":2,\"215\":1}}],[\"encapsulation\",{\"1\":{\"9\":1,\"21\":1}}],[\"encrypt\",{\"1\":{\"22\":2}}],[\"encrypting\",{\"1\":{\"21\":1}}],[\"encryption\",{\"1\":{\"15\":1,\"16\":1,\"21\":4,\"22\":8,\"24\":1,\"33\":1}}],[\"encrypted\",{\"1\":{\"21\":3,\"22\":1}}],[\"ensuring\",{\"1\":{\"11\":1,\"87\":1}}],[\"ensures\",{\"1\":{\"21\":1,\"95\":1,\"110\":1,\"160\":1,\"238\":1}}],[\"ensure\",{\"1\":{\"6\":1,\"7\":1,\"9\":1,\"66\":2,\"104\":1,\"186\":1}}],[\"enabling\",{\"1\":{\"9\":4,\"11\":1,\"13\":1,\"14\":1,\"17\":1,\"21\":5,\"24\":1,\"25\":1,\"29\":2,\"31\":1}}],[\"enablecursor\",{\"1\":{\"138\":1}}],[\"enabled\",{\"1\":{\"11\":3,\"45\":1,\"124\":1,\"172\":1,\"178\":1,\"210\":1,\"248\":2,\"249\":2}}],[\"enable\",{\"1\":{\"5\":1,\"6\":1,\"9\":1,\"10\":4,\"18\":1,\"28\":1,\"34\":1,\"75\":1,\"80\":1,\"83\":1,\"173\":1,\"209\":3,\"248\":1,\"249\":9}}],[\"enables\",{\"1\":{\"5\":1,\"10\":1,\"11\":1,\"22\":1,\"41\":2,\"83\":1,\"194\":1,\"209\":1}}],[\"english\",{\"1\":{\"8\":1}}],[\"engines\",{\"1\":{\"9\":1,\"12\":1,\"21\":1}}],[\"engineers\",{\"1\":{\"36\":1}}],[\"engineered\",{\"1\":{\"11\":1,\"21\":3}}],[\"engineer\",{\"1\":{\"6\":1}}],[\"engineering\",{\"0\":{\"6\":1},\"1\":{\"3\":1,\"8\":1,\"19\":1,\"21\":5,\"24\":1,\"36\":2}}],[\"engine\",{\"1\":{\"4\":1,\"7\":2,\"9\":1,\"24\":3}}],[\"endaddr\",{\"1\":{\"168\":4,\"169\":3}}],[\"end>>\",{\"1\":{\"110\":2}}],[\"ends\",{\"1\":{\"86\":1,\"89\":1,\"110\":2}}],[\"endoffset\",{\"1\":{\"51\":1}}],[\"endorsement\",{\"1\":{\"35\":1}}],[\"ending\",{\"1\":{\"22\":1,\"68\":1,\"89\":1,\"171\":1}}],[\"endings\",{\"1\":{\"14\":1}}],[\"endianness\",{\"1\":{\"14\":1,\"235\":2}}],[\"endian\",{\"1\":{\"9\":2,\"147\":2,\"234\":1,\"235\":3}}],[\"endpoints\",{\"1\":{\"9\":1,\"11\":1,\"22\":1}}],[\"endpoint\",{\"1\":{\"7\":1,\"9\":1,\"21\":1}}],[\"end\",{\"1\":{\"5\":1,\"6\":4,\"9\":3,\"21\":3,\"22\":1,\"29\":1,\"35\":6,\"37\":2,\"43\":1,\"51\":2,\"63\":1,\"66\":2,\"68\":2,\"70\":1,\"71\":1,\"85\":1,\"89\":18,\"94\":5,\"95\":1,\"96\":3,\"97\":3,\"103\":2,\"105\":1,\"106\":1,\"110\":4,\"121\":1,\"144\":1,\"168\":1,\"169\":1,\"171\":2,\"185\":1,\"198\":1,\"217\":1,\"221\":1,\"229\":2,\"237\":1,\"239\":1,\"248\":2}}],[\"entsize\",{\"1\":{\"235\":1}}],[\"entrance\",{\"1\":{\"77\":6,\"78\":2}}],[\"entrypoint\",{\"1\":{\"220\":2,\"222\":1,\"223\":1,\"230\":3,\"237\":2}}],[\"entry=usermain\",{\"1\":{\"196\":1}}],[\"entry\",{\"0\":{\"133\":1,\"145\":1},\"1\":{\"59\":1,\"122\":1,\"123\":5,\"124\":6,\"132\":1,\"133\":7,\"135\":1,\"137\":1,\"141\":3,\"142\":1,\"143\":1,\"145\":1,\"147\":12,\"150\":1,\"161\":1,\"162\":1,\"164\":3,\"165\":10,\"169\":14,\"174\":4,\"175\":4,\"177\":6,\"181\":1,\"183\":5,\"188\":1,\"189\":1,\"190\":2,\"191\":2,\"194\":3,\"199\":1,\"200\":1,\"201\":3,\"202\":1,\"205\":1,\"209\":6,\"222\":1,\"223\":1,\"225\":1,\"227\":1,\"228\":2,\"229\":8,\"230\":9,\"232\":1,\"233\":1,\"234\":1,\"235\":7,\"237\":3}}],[\"entries\",{\"1\":{\"11\":1,\"16\":2,\"162\":7,\"165\":3,\"169\":4,\"174\":7,\"175\":10,\"177\":9,\"180\":6,\"183\":1,\"188\":1,\"189\":3,\"190\":1,\"192\":1,\"195\":1,\"198\":5,\"199\":2,\"220\":2,\"225\":2,\"228\":7,\"229\":7,\"230\":7,\"235\":2,\"237\":1}}],[\"entire\",{\"1\":{\"58\":1,\"59\":1,\"96\":1,\"105\":1,\"176\":3,\"185\":2}}],[\"entities\",{\"1\":{\"4\":1,\"5\":1,\"9\":1,\"17\":1,\"18\":1,\"23\":1}}],[\"entity\",{\"1\":{\"4\":2,\"5\":1,\"17\":2,\"18\":1,\"33\":1,\"52\":1}}],[\"enthusiastic\",{\"1\":{\"35\":1}}],[\"enthusiasts\",{\"1\":{\"11\":1}}],[\"entering\",{\"1\":{\"187\":1,\"201\":1,\"209\":1}}],[\"entered\",{\"1\":{\"95\":1}}],[\"enter\",{\"1\":{\"34\":1,\"82\":3,\"96\":3,\"121\":1}}],[\"enterprises\",{\"1\":{\"11\":2,\"21\":1}}],[\"enterprise\",{\"1\":{\"4\":5,\"11\":4,\"13\":1,\"17\":2,\"21\":3,\"31\":3}}],[\"d038\",{\"1\":{\"228\":2}}],[\"d000\",{\"1\":{\"228\":2}}],[\"d0\",{\"1\":{\"200\":2}}],[\"d8\",{\"1\":{\"200\":1}}],[\"dvd\",{\"1\":{\"32\":1,\"135\":2}}],[\"dvipdfmx\",{\"1\":{\"13\":1}}],[\"dvips\",{\"1\":{\"13\":1}}],[\"dvi\",{\"1\":{\"12\":1,\"13\":2}}],[\"dpl=0\",{\"1\":{\"188\":4,\"200\":2,\"210\":7}}],[\"dpl=3\",{\"1\":{\"186\":1,\"188\":5,\"200\":6,\"210\":11,\"212\":3}}],[\"dpl\",{\"1\":{\"185\":5,\"186\":7,\"187\":6,\"190\":4,\"202\":5,\"206\":10}}],[\"dpi\",{\"1\":{\"32\":3}}],[\"dpia\",{\"1\":{\"23\":1}}],[\"dp\",{\"1\":{\"32\":4}}],[\"dpo\",{\"1\":{\"23\":1}}],[\"dpc\",{\"1\":{\"11\":2}}],[\"dm\",{\"1\":{\"35\":2}}],[\"dmt\",{\"1\":{\"32\":1}}],[\"dmesg\",{\"1\":{\"31\":1}}],[\"dma\",{\"1\":{\"31\":1,\"33\":2,\"34\":1}}],[\"dmarc\",{\"1\":{\"22\":2}}],[\"dmi\",{\"1\":{\"30\":2,\"33\":1}}],[\"dml\",{\"1\":{\"17\":1}}],[\"dkim\",{\"1\":{\"22\":3}}],[\"dht\",{\"1\":{\"21\":3}}],[\"dhcp\",{\"1\":{\"21\":8,\"36\":1}}],[\"dnssec\",{\"1\":{\"24\":1}}],[\"dns\",{\"1\":{\"21\":15,\"22\":2,\"24\":2,\"36\":2}}],[\"dnf\",{\"1\":{\"11\":1}}],[\"dwdm\",{\"1\":{\"21\":2}}],[\"dw\",{\"1\":{\"17\":1}}],[\"dwarfdump\",{\"1\":{\"10\":1}}],[\"dwarf\",{\"1\":{\"10\":3}}],[\"dte\",{\"1\":{\"21\":3}}],[\"dtes\",{\"1\":{\"21\":1}}],[\"dtd\",{\"1\":{\"12\":3}}],[\"dtss\",{\"1\":{\"11\":2}}],[\"dtos\",{\"1\":{\"5\":1}}],[\"dto\",{\"1\":{\"5\":1}}],[\"dg\",{\"1\":{\"11\":3}}],[\"dlt\",{\"1\":{\"31\":2}}],[\"dl\",{\"1\":{\"18\":1}}],[\"dlq\",{\"1\":{\"17\":3}}],[\"dlsym\",{\"1\":{\"11\":1}}],[\"dlopen\",{\"1\":{\"11\":2}}],[\"dlls\",{\"1\":{\"11\":2}}],[\"dll\",{\"1\":{\"11\":3}}],[\"dynoffset\",{\"1\":{\"237\":5}}],[\"dyn\",{\"1\":{\"226\":1,\"228\":2,\"229\":9,\"230\":12,\"234\":3}}],[\"dynstr\",{\"1\":{\"226\":1,\"228\":1,\"234\":2}}],[\"dynsym\",{\"1\":{\"226\":2,\"228\":2,\"234\":3,\"235\":2}}],[\"dynamicentrytype\",{\"1\":{\"230\":6}}],[\"dynamicentry\",{\"1\":{\"230\":3}}],[\"dynamically\",{\"1\":{\"7\":2,\"11\":2,\"231\":2}}],[\"dynamic\",{\"0\":{\"231\":1},\"1\":{\"4\":1,\"7\":3,\"10\":2,\"11\":8,\"21\":1,\"22\":1,\"24\":1,\"29\":2,\"198\":1,\"225\":5,\"226\":2,\"228\":3,\"229\":13,\"230\":6,\"234\":7,\"235\":5,\"237\":3}}],[\"dyld\",{\"1\":{\"11\":1}}],[\"dylib\",{\"1\":{\"11\":4}}],[\"d\",{\"1\":{\"10\":1,\"21\":1,\"25\":1,\"26\":1,\"35\":2,\"95\":1,\"97\":9,\"98\":1,\"102\":1,\"116\":2,\"124\":35,\"136\":1,\"139\":1,\"185\":2,\"187\":1,\"209\":1,\"229\":2,\"234\":1,\"246\":1}}],[\"dfvzadezeiwvksytakgksq\",{\"1\":{\"228\":1}}],[\"df\",{\"1\":{\"192\":1}}],[\"dfa\",{\"1\":{\"10\":4}}],[\"dfs\",{\"1\":{\"9\":1}}],[\"dsdt\",{\"1\":{\"34\":5}}],[\"ds\",{\"1\":{\"24\":2,\"36\":2,\"186\":1,\"187\":2,\"188\":6,\"200\":6,\"210\":12,\"212\":2}}],[\"dsar\",{\"1\":{\"23\":1}}],[\"dsp\",{\"1\":{\"21\":1}}],[\"dso\",{\"1\":{\"11\":2}}],[\"dsns\",{\"1\":{\"9\":1}}],[\"dsus\",{\"1\":{\"21\":1}}],[\"dsu\",{\"1\":{\"9\":1,\"21\":6}}],[\"dsls\",{\"1\":{\"9\":1}}],[\"dsl\",{\"1\":{\"9\":1,\"21\":6}}],[\"dscp\",{\"1\":{\"21\":1}}],[\"dsc\",{\"1\":{\"6\":2}}],[\"darpa\",{\"1\":{\"36\":1}}],[\"dartmouth\",{\"1\":{\"8\":1,\"11\":2}}],[\"daisy\",{\"1\":{\"30\":1,\"32\":1}}],[\"daw\",{\"1\":{\"30\":1}}],[\"daylight\",{\"1\":{\"153\":1}}],[\"day\",{\"1\":{\"21\":1,\"35\":3,\"153\":1}}],[\"dao\",{\"1\":{\"17\":1}}],[\"dast\",{\"1\":{\"22\":1}}],[\"dashboards\",{\"1\":{\"17\":1}}],[\"das\",{\"1\":{\"14\":1}}],[\"dasd\",{\"1\":{\"11\":2}}],[\"daa\",{\"1\":{\"14\":1}}],[\"dag\",{\"1\":{\"9\":1}}],[\"dat72\",{\"1\":{\"31\":1}}],[\"dat\",{\"1\":{\"11\":1,\"31\":2}}],[\"date\",{\"1\":{\"6\":4,\"15\":1,\"35\":1}}],[\"dates\",{\"1\":{\"6\":2,\"36\":1}}],[\"datasegmentselector\",{\"1\":{\"187\":1,\"199\":1,\"202\":1,\"209\":2,\"220\":1}}],[\"datasegmentdescriptor\",{\"1\":{\"187\":4,\"202\":1}}],[\"dataset\",{\"1\":{\"17\":2,\"22\":1}}],[\"datasets\",{\"1\":{\"11\":4,\"15\":4,\"17\":1,\"18\":1,\"22\":1}}],[\"data4\",{\"1\":{\"151\":2,\"152\":1,\"154\":1}}],[\"data3\",{\"1\":{\"151\":2,\"152\":1,\"154\":1}}],[\"data2\",{\"1\":{\"151\":2,\"152\":1,\"154\":1}}],[\"data1\",{\"1\":{\"151\":2,\"152\":1,\"154\":1}}],[\"datagrams\",{\"1\":{\"21\":1}}],[\"datagram\",{\"1\":{\"21\":5}}],[\"databases\",{\"1\":{\"9\":2,\"15\":1,\"17\":5}}],[\"database\",{\"1\":{\"6\":1,\"8\":1,\"9\":2,\"13\":1,\"17\":15,\"21\":1,\"22\":1,\"36\":1}}],[\"data\",{\"0\":{\"14\":1,\"15\":1,\"16\":1,\"17\":1},\"1\":{\"4\":3,\"5\":4,\"7\":1,\"8\":4,\"9\":13,\"10\":5,\"11\":10,\"12\":2,\"13\":1,\"14\":1,\"15\":13,\"16\":3,\"17\":34,\"18\":3,\"19\":1,\"21\":25,\"22\":1,\"23\":8,\"24\":2,\"25\":1,\"26\":3,\"27\":1,\"29\":11,\"30\":3,\"31\":5,\"32\":2,\"33\":1,\"127\":1,\"138\":1,\"139\":3,\"144\":1,\"147\":23,\"148\":6,\"151\":1,\"162\":3,\"179\":4,\"181\":1,\"184\":1,\"185\":13,\"186\":5,\"187\":5,\"188\":5,\"192\":2,\"194\":1,\"195\":2,\"196\":3,\"202\":2,\"209\":1,\"210\":2,\"217\":1,\"218\":1,\"219\":1,\"220\":9,\"226\":12,\"227\":1,\"228\":20,\"229\":15,\"233\":2,\"234\":7,\"235\":1}}],[\"django\",{\"1\":{\"7\":2}}],[\"db8\",{\"1\":{\"21\":1}}],[\"dbs\",{\"1\":{\"17\":2}}],[\"dbtg\",{\"1\":{\"17\":4}}],[\"dbt\",{\"1\":{\"17\":1}}],[\"db2\",{\"1\":{\"17\":3}}],[\"dbmss\",{\"1\":{\"17\":1}}],[\"dbms\",{\"1\":{\"17\":4}}],[\"dbcs\",{\"1\":{\"14\":1}}],[\"db\",{\"1\":{\"6\":1,\"9\":1,\"17\":6,\"18\":1,\"19\":1,\"24\":1,\"30\":2,\"35\":1,\"192\":1}}],[\"dxc\",{\"1\":{\"10\":1}}],[\"dxbc\",{\"1\":{\"10\":1}}],[\"dxil\",{\"1\":{\"10\":1}}],[\"dx\",{\"1\":{\"6\":1}}],[\"dummy\",{\"1\":{\"82\":4,\"127\":1,\"128\":1,\"209\":1,\"210\":1,\"212\":3}}],[\"dumptree\",{\"1\":{\"72\":4}}],[\"dumpbin\",{\"1\":{\"11\":2}}],[\"dump\",{\"1\":{\"10\":1}}],[\"dungeon\",{\"1\":{\"35\":1}}],[\"duplex\",{\"1\":{\"21\":2,\"30\":1}}],[\"duplication\",{\"1\":{\"90\":1}}],[\"duplicating\",{\"1\":{\"5\":1}}],[\"duplicates\",{\"1\":{\"10\":1}}],[\"duplicate\",{\"1\":{\"5\":1}}],[\"due\",{\"1\":{\"21\":2}}],[\"dual\",{\"1\":{\"21\":2,\"29\":2,\"33\":1}}],[\"duration\",{\"1\":{\"21\":1}}],[\"durability\",{\"1\":{\"17\":2}}],[\"durable\",{\"1\":{\"4\":1,\"17\":1}}],[\"during\",{\"1\":{\"10\":1,\"11\":2,\"17\":1,\"20\":1,\"33\":2,\"34\":1,\"37\":1,\"41\":1,\"58\":1,\"78\":1,\"146\":1,\"172\":1,\"190\":2,\"193\":1,\"213\":1}}],[\"ddc\",{\"1\":{\"32\":1}}],[\"dds\",{\"1\":{\"31\":4}}],[\"ddr2+\",{\"1\":{\"29\":1}}],[\"ddr2\",{\"1\":{\"29\":1}}],[\"ddr5\",{\"1\":{\"29\":4}}],[\"ddr4\",{\"1\":{\"29\":4}}],[\"ddr\",{\"1\":{\"29\":7}}],[\"ddos\",{\"1\":{\"22\":1}}],[\"ddl\",{\"1\":{\"17\":1}}],[\"dd\",{\"1\":{\"11\":1,\"99\":1}}],[\"ddd\",{\"1\":{\"5\":1}}],[\"dde\",{\"1\":{\"4\":2}}],[\"dc\",{\"1\":{\"17\":1,\"31\":1,\"33\":1}}],[\"dcl\",{\"1\":{\"11\":1}}],[\"dce\",{\"1\":{\"4\":2,\"10\":5,\"21\":5}}],[\"dcomcnfg\",{\"1\":{\"4\":1}}],[\"dcom\",{\"1\":{\"4\":2}}],[\"did\",{\"1\":{\"71\":1,\"145\":1,\"166\":1,\"197\":1,\"200\":1,\"214\":1}}],[\"didn\",{\"1\":{\"35\":1,\"124\":1,\"151\":1,\"163\":1,\"237\":1}}],[\"dikumud\",{\"1\":{\"35\":1}}],[\"dictator\",{\"1\":{\"35\":1}}],[\"dictionaries\",{\"1\":{\"16\":2}}],[\"dictionary\",{\"1\":{\"16\":3}}],[\"die\",{\"1\":{\"33\":1}}],[\"divmodshlshr\",{\"1\":{\"103\":1}}],[\"div\",{\"1\":{\"103\":1,\"104\":1,\"156\":2,\"162\":1,\"165\":2,\"169\":3,\"180\":2,\"181\":2,\"183\":2,\"192\":1,\"197\":1,\"220\":1,\"237\":2}}],[\"diverge\",{\"1\":{\"79\":1}}],[\"divergence\",{\"1\":{\"33\":1}}],[\"divide\",{\"1\":{\"166\":1,\"192\":7,\"248\":1}}],[\"divides\",{\"1\":{\"33\":1}}],[\"division\",{\"1\":{\"8\":1,\"21\":2,\"109\":1,\"189\":1}}],[\"diode\",{\"1\":{\"32\":2}}],[\"din\",{\"1\":{\"30\":2}}],[\"dimming\",{\"1\":{\"32\":1}}],[\"dimms\",{\"1\":{\"29\":4}}],[\"dimm\",{\"1\":{\"29\":2}}],[\"difficult\",{\"1\":{\"85\":1,\"95\":1,\"146\":1,\"232\":1}}],[\"diffserv\",{\"1\":{\"21\":1}}],[\"difference\",{\"1\":{\"92\":1,\"139\":1,\"159\":1,\"163\":1,\"185\":1,\"190\":1,\"192\":1}}],[\"differentiate\",{\"1\":{\"140\":1,\"151\":1,\"184\":1}}],[\"differentiated\",{\"1\":{\"34\":1}}],[\"differently\",{\"1\":{\"95\":1,\"191\":1,\"223\":1}}],[\"different\",{\"1\":{\"11\":1,\"29\":1,\"33\":1,\"35\":1,\"50\":2,\"52\":2,\"53\":1,\"59\":1,\"75\":1,\"76\":1,\"85\":3,\"91\":2,\"97\":1,\"104\":4,\"124\":1,\"147\":1,\"164\":2,\"174\":3,\"178\":1,\"191\":1,\"195\":1,\"201\":2,\"223\":2,\"230\":2,\"231\":2,\"248\":1}}],[\"differ\",{\"1\":{\"35\":1,\"92\":1}}],[\"differs\",{\"1\":{\"10\":1}}],[\"digest\",{\"1\":{\"22\":1}}],[\"dig\",{\"1\":{\"21\":1}}],[\"digit\",{\"1\":{\"14\":1,\"22\":1,\"99\":4}}],[\"digital\",{\"1\":{\"11\":3,\"13\":3,\"21\":12,\"22\":3,\"24\":1,\"26\":1,\"30\":2,\"31\":4,\"32\":4,\"33\":3,\"36\":2}}],[\"digits\",{\"1\":{\"6\":1,\"62\":1,\"98\":1}}],[\"dialog\",{\"1\":{\"45\":1,\"82\":1,\"83\":1}}],[\"dial\",{\"1\":{\"21\":6}}],[\"dialect\",{\"1\":{\"8\":1}}],[\"dialects\",{\"1\":{\"8\":1,\"10\":2}}],[\"diagnoses\",{\"1\":{\"26\":1}}],[\"diagnostic\",{\"1\":{\"15\":1,\"34\":1}}],[\"diagnostics\",{\"1\":{\"9\":1,\"21\":2}}],[\"diagrams\",{\"1\":{\"4\":1,\"5\":1,\"13\":1}}],[\"diagram\",{\"1\":{\"4\":1,\"17\":1,\"41\":1,\"46\":1,\"52\":1,\"57\":1,\"58\":3,\"59\":1,\"87\":1,\"173\":1,\"174\":3,\"185\":1,\"186\":1,\"187\":2,\"190\":1,\"191\":1,\"201\":1,\"248\":2,\"249\":1}}],[\"diagramming\",{\"1\":{\"4\":1}}],[\"dirty\",{\"1\":{\"175\":1}}],[\"dir\",{\"1\":{\"11\":1,\"16\":3,\"196\":9}}],[\"dir=\",{\"1\":{\"7\":2}}],[\"directive\",{\"1\":{\"105\":1,\"106\":1}}],[\"directives\",{\"1\":{\"12\":2}}],[\"direction\",{\"1\":{\"7\":2,\"11\":1}}],[\"directories\",{\"1\":{\"11\":1,\"16\":1,\"21\":1,\"143\":4}}],[\"directory\",{\"0\":{\"153\":1},\"1\":{\"4\":1,\"21\":7,\"24\":2,\"36\":1,\"44\":1,\"54\":6,\"69\":3,\"71\":1,\"121\":2,\"123\":2,\"134\":1,\"135\":3,\"136\":1,\"143\":8,\"147\":1,\"150\":1,\"153\":5,\"154\":1,\"158\":3,\"174\":2,\"175\":4,\"177\":2,\"195\":1,\"196\":1,\"197\":4,\"235\":1,\"239\":1,\"245\":1}}],[\"direct3d\",{\"1\":{\"10\":1}}],[\"directx\",{\"1\":{\"10\":1}}],[\"direct\",{\"1\":{\"9\":1,\"21\":2,\"30\":1,\"31\":1,\"33\":1,\"35\":1,\"93\":1,\"246\":1}}],[\"directly\",{\"1\":{\"9\":1,\"10\":2,\"11\":2,\"12\":1,\"13\":1,\"55\":1,\"75\":2,\"83\":1,\"93\":1,\"97\":1,\"124\":1,\"127\":1,\"131\":1,\"144\":1,\"172\":1,\"175\":1,\"191\":1,\"207\":1,\"248\":3}}],[\"directed\",{\"1\":{\"9\":2,\"10\":1}}],[\"disbelief\",{\"1\":{\"35\":1}}],[\"disinformation\",{\"1\":{\"35\":1}}],[\"dispatch\",{\"1\":{\"211\":1,\"213\":1}}],[\"dispatches\",{\"1\":{\"33\":1}}],[\"displaced\",{\"1\":{\"29\":1}}],[\"displayhdr\",{\"1\":{\"32\":1}}],[\"display\",{\"1\":{\"32\":14,\"46\":1,\"84\":1,\"141\":1}}],[\"displayport\",{\"1\":{\"32\":2}}],[\"displayed\",{\"1\":{\"13\":1,\"66\":1}}],[\"displays\",{\"0\":{\"32\":1},\"1\":{\"11\":2,\"32\":4}}],[\"disadvantage\",{\"1\":{\"238\":1}}],[\"disappointment\",{\"1\":{\"35\":1}}],[\"disassembles\",{\"1\":{\"210\":1}}],[\"disassemble\",{\"1\":{\"200\":1}}],[\"disassembler\",{\"1\":{\"21\":1}}],[\"disaster\",{\"1\":{\"19\":1}}],[\"disabled\",{\"1\":{\"26\":1,\"43\":1}}],[\"disable\",{\"1\":{\"21\":1,\"124\":3,\"135\":1,\"146\":1,\"190\":1,\"209\":1,\"248\":1,\"249\":6}}],[\"disabilities\",{\"1\":{\"7\":1}}],[\"dismissive\",{\"1\":{\"35\":1}}],[\"dism\",{\"1\":{\"13\":1}}],[\"diskimg\",{\"1\":{\"135\":5,\"136\":3,\"143\":3,\"148\":5}}],[\"diskless\",{\"1\":{\"21\":2}}],[\"disks\",{\"1\":{\"11\":1,\"31\":4,\"34\":1,\"195\":1}}],[\"disk\",{\"1\":{\"11\":4,\"17\":1,\"22\":1,\"31\":9,\"33\":1,\"135\":2,\"141\":1,\"148\":1,\"195\":1,\"196\":9,\"253\":1}}],[\"discarded\",{\"1\":{\"196\":1,\"226\":1,\"229\":2}}],[\"discarding\",{\"1\":{\"147\":1}}],[\"discard\",{\"1\":{\"124\":1,\"139\":5,\"140\":3,\"141\":1,\"147\":7,\"148\":1,\"166\":1,\"179\":1,\"196\":1,\"226\":1,\"229\":2,\"230\":1}}],[\"discards\",{\"1\":{\"9\":1}}],[\"discussed\",{\"1\":{\"58\":1}}],[\"discussions\",{\"1\":{\"37\":1}}],[\"discussion\",{\"1\":{\"21\":1,\"35\":2}}],[\"disclosure\",{\"1\":{\"36\":1}}],[\"disclosed\",{\"1\":{\"22\":1}}],[\"discrete\",{\"1\":{\"32\":1,\"33\":1}}],[\"disc\",{\"1\":{\"25\":1}}],[\"disconnectcontroller\",{\"1\":{\"151\":1}}],[\"discontinued\",{\"1\":{\"11\":2,\"25\":1}}],[\"discovering\",{\"1\":{\"21\":1}}],[\"discovery\",{\"1\":{\"21\":5}}],[\"discover\",{\"1\":{\"10\":1}}],[\"discipline\",{\"1\":{\"6\":1,\"9\":1}}],[\"distract\",{\"1\":{\"229\":1}}],[\"distros\",{\"1\":{\"16\":1}}],[\"distributions\",{\"1\":{\"11\":2,\"13\":1,\"34\":1}}],[\"distribution\",{\"1\":{\"11\":1,\"16\":1,\"20\":1,\"21\":2,\"36\":1,\"37\":1}}],[\"distributing\",{\"1\":{\"7\":1,\"21\":2}}],[\"distributes\",{\"1\":{\"24\":1}}],[\"distribute\",{\"1\":{\"11\":1}}],[\"distributed\",{\"1\":{\"4\":6,\"9\":2,\"17\":3,\"20\":1,\"21\":5,\"22\":1,\"24\":2}}],[\"distance\",{\"1\":{\"16\":1,\"21\":1}}],[\"distances\",{\"1\":{\"9\":1,\"21\":1}}],[\"distinguished\",{\"1\":{\"14\":1}}],[\"distinction\",{\"1\":{\"14\":1}}],[\"distinct\",{\"1\":{\"5\":1,\"17\":2,\"25\":4,\"29\":1,\"101\":1,\"168\":1,\"177\":1,\"187\":1}}],[\"dip\",{\"1\":{\"5\":2}}],[\"di\",{\"1\":{\"5\":1}}],[\"dollar\",{\"1\":{\"109\":3}}],[\"dozen\",{\"1\":{\"89\":1}}],[\"doubt\",{\"1\":{\"35\":1}}],[\"double\",{\"1\":{\"29\":2,\"62\":1,\"106\":1,\"188\":1,\"192\":2,\"193\":4,\"210\":1}}],[\"doubles\",{\"1\":{\"9\":1}}],[\"dotdot\",{\"1\":{\"104\":3,\"105\":2,\"106\":1,\"109\":1}}],[\"dots\",{\"1\":{\"32\":1}}],[\"dot\",{\"1\":{\"24\":1,\"103\":2,\"104\":5,\"105\":2,\"106\":1,\"109\":1}}],[\"dod\",{\"1\":{\"21\":1}}],[\"doh\",{\"1\":{\"21\":2}}],[\"downwards\",{\"1\":{\"199\":1}}],[\"down\",{\"1\":{\"47\":1,\"174\":1,\"185\":2,\"234\":1}}],[\"downs\",{\"1\":{\"30\":1}}],[\"downloading\",{\"1\":{\"118\":1}}],[\"downloaded\",{\"1\":{\"47\":1}}],[\"download\",{\"1\":{\"21\":1,\"43\":2}}],[\"downloads\",{\"1\":{\"21\":2}}],[\"downtime\",{\"1\":{\"19\":1}}],[\"downcasts\",{\"1\":{\"10\":1}}],[\"dos=high\",{\"1\":{\"11\":2}}],[\"dos\",{\"1\":{\"11\":16,\"21\":1,\"22\":2}}],[\"doesn\",{\"1\":{\"40\":1,\"45\":1,\"63\":1,\"80\":1,\"87\":2,\"88\":3,\"89\":3,\"92\":1,\"93\":1,\"95\":1,\"96\":2,\"110\":1,\"124\":2,\"142\":1,\"146\":2,\"147\":2,\"151\":1,\"161\":2,\"164\":1,\"175\":1,\"176\":1,\"177\":1,\"185\":2,\"186\":1,\"187\":1,\"196\":1,\"201\":1,\"208\":1,\"209\":1,\"211\":1,\"234\":1,\"235\":1,\"245\":1}}],[\"does\",{\"1\":{\"9\":1,\"29\":1,\"52\":1,\"57\":1,\"58\":2,\"67\":1,\"74\":1,\"94\":2,\"95\":1,\"96\":1,\"104\":1,\"112\":1,\"122\":1,\"124\":2,\"146\":1,\"178\":1,\"185\":1,\"186\":1,\"201\":1,\"209\":1,\"215\":1,\"225\":2,\"238\":1}}],[\"do\",{\"1\":{\"8\":1,\"23\":1,\"40\":1,\"48\":1,\"54\":2,\"58\":1,\"74\":2,\"77\":1,\"79\":1,\"83\":1,\"87\":2,\"89\":3,\"93\":1,\"96\":2,\"105\":1,\"107\":1,\"124\":2,\"133\":1,\"134\":1,\"135\":1,\"141\":1,\"142\":1,\"147\":7,\"149\":1,\"150\":1,\"154\":1,\"159\":1,\"160\":1,\"162\":1,\"164\":2,\"166\":2,\"168\":1,\"175\":1,\"176\":1,\"177\":1,\"181\":1,\"183\":1,\"190\":2,\"192\":2,\"194\":1,\"195\":1,\"197\":1,\"198\":1,\"200\":2,\"201\":1,\"203\":1,\"206\":2,\"207\":3,\"208\":1,\"209\":2,\"210\":1,\"211\":1,\"213\":1,\"220\":1,\"223\":2,\"225\":1,\"226\":1,\"227\":1,\"229\":2,\"230\":1,\"242\":1,\"243\":1,\"249\":1}}],[\"dominant\",{\"1\":{\"14\":1}}],[\"dominator\",{\"1\":{\"10\":1}}],[\"dominators\",{\"1\":{\"10\":1}}],[\"dom\",{\"1\":{\"7\":1,\"36\":3}}],[\"domainkeys\",{\"1\":{\"22\":1}}],[\"domains\",{\"1\":{\"21\":2}}],[\"domain\",{\"1\":{\"4\":1,\"5\":3,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"15\":2,\"21\":8,\"22\":3,\"24\":4,\"35\":1,\"36\":2}}],[\"doing\",{\"1\":{\"6\":1,\"45\":1,\"77\":1,\"124\":1,\"160\":1,\"162\":1,\"211\":1}}],[\"done\",{\"1\":{\"51\":1,\"57\":1,\"58\":2,\"63\":7,\"66\":2,\"77\":1,\"121\":1,\"122\":1,\"124\":1,\"146\":1,\"150\":1,\"158\":2,\"160\":1,\"161\":1,\"178\":1,\"184\":1,\"186\":2,\"194\":1,\"207\":1,\"209\":1,\"237\":1,\"238\":1}}],[\"dongles\",{\"1\":{\"30\":1}}],[\"donald\",{\"1\":{\"12\":1}}],[\"don\",{\"1\":{\"5\":2,\"10\":1,\"35\":3,\"43\":1,\"66\":1,\"70\":1,\"71\":1,\"77\":1,\"79\":1,\"80\":1,\"85\":1,\"87\":3,\"88\":2,\"106\":1,\"123\":1,\"124\":5,\"127\":1,\"130\":1,\"131\":1,\"135\":1,\"140\":1,\"141\":1,\"144\":1,\"147\":3,\"148\":1,\"162\":2,\"168\":1,\"177\":2,\"186\":1,\"195\":1,\"198\":1,\"208\":1,\"215\":1,\"222\":1,\"223\":1,\"229\":2,\"234\":1,\"237\":1,\"240\":1,\"249\":1}}],[\"doccomment\",{\"1\":{\"97\":5,\"100\":1}}],[\"doctype\",{\"1\":{\"12\":1}}],[\"docbook\",{\"1\":{\"12\":1}}],[\"docker\",{\"1\":{\"11\":1,\"13\":1}}],[\"doc\",{\"1\":{\"9\":1,\"97\":13}}],[\"documents\",{\"1\":{\"7\":1,\"9\":1,\"12\":6,\"15\":1,\"17\":1,\"18\":2,\"19\":1,\"97\":2}}],[\"document\",{\"0\":{\"12\":1},\"1\":{\"5\":4,\"7\":2,\"12\":2,\"13\":1,\"21\":1,\"97\":2,\"115\":1}}],[\"documentation\",{\"0\":{\"97\":1},\"1\":{\"1\":1,\"12\":2,\"40\":1,\"94\":4,\"95\":1,\"97\":9,\"250\":2}}],[\"docs\",{\"1\":{\"5\":2,\"6\":1,\"7\":1,\"10\":1,\"12\":2,\"17\":1,\"18\":1,\"35\":1,\"75\":1,\"124\":1}}],[\"dr7=0000000000000400\",{\"1\":{\"188\":1}}],[\"dr6=00000000ffff0ff0\",{\"1\":{\"188\":1}}],[\"dr3=0000000000000000\",{\"1\":{\"188\":1}}],[\"dr2=0000000000000000\",{\"1\":{\"188\":1}}],[\"dr1=0000000000000000\",{\"1\":{\"188\":1}}],[\"dr0=0000000000000000\",{\"1\":{\"188\":1}}],[\"drafts\",{\"1\":{\"36\":1}}],[\"draft\",{\"1\":{\"35\":1}}],[\"dram\",{\"1\":{\"29\":12}}],[\"draw\",{\"1\":{\"4\":1}}],[\"drm\",{\"1\":{\"22\":1}}],[\"dropped\",{\"1\":{\"135\":1}}],[\"dropping\",{\"1\":{\"22\":1}}],[\"drop\",{\"1\":{\"21\":1,\"66\":3}}],[\"dr\",{\"1\":{\"11\":1,\"19\":2,\"35\":2}}],[\"drupal\",{\"1\":{\"7\":1}}],[\"driving\",{\"1\":{\"30\":1,\"95\":1}}],[\"drives\",{\"1\":{\"9\":1,\"21\":1,\"30\":1,\"31\":8,\"58\":1,\"63\":1}}],[\"drivers\",{\"1\":{\"9\":1,\"10\":1,\"11\":7,\"13\":3,\"15\":1,\"34\":1}}],[\"drivermanager\",{\"1\":{\"9\":1}}],[\"driver\",{\"1\":{\"6\":1,\"9\":1,\"11\":7,\"13\":2,\"31\":1,\"144\":1,\"151\":1,\"252\":1}}],[\"drive\",{\"1\":{\"6\":1,\"13\":1,\"25\":1,\"31\":8,\"33\":1,\"34\":1,\"135\":4,\"136\":3,\"143\":3,\"148\":3,\"196\":3}}],[\"driven\",{\"1\":{\"4\":1,\"5\":1,\"6\":2,\"8\":1,\"9\":2,\"11\":1,\"22\":1,\"44\":1}}],[\"drills\",{\"1\":{\"19\":1}}],[\"drift\",{\"1\":{\"6\":1}}],[\"dry\",{\"1\":{\"5\":2,\"92\":1}}],[\"deques\",{\"1\":{\"239\":1}}],[\"deals\",{\"1\":{\"235\":1}}],[\"deal\",{\"1\":{\"35\":1,\"140\":1,\"214\":1,\"236\":1}}],[\"deadline\",{\"1\":{\"35\":3}}],[\"dead\",{\"1\":{\"10\":1,\"17\":1,\"124\":1,\"148\":1}}],[\"detail\",{\"1\":{\"147\":1,\"185\":1}}],[\"details\",{\"1\":{\"35\":2,\"44\":1,\"66\":1,\"67\":1,\"185\":1,\"246\":1}}],[\"determine\",{\"1\":{\"57\":2,\"83\":1,\"85\":1,\"89\":1,\"147\":1,\"184\":1}}],[\"determined\",{\"1\":{\"35\":1,\"85\":1,\"155\":1,\"224\":1}}],[\"determines\",{\"1\":{\"9\":1,\"79\":1,\"179\":1,\"185\":8,\"190\":2}}],[\"deterministically\",{\"1\":{\"17\":1}}],[\"deterministic\",{\"1\":{\"10\":1,\"11\":1,\"115\":1}}],[\"detects\",{\"1\":{\"146\":1}}],[\"detected\",{\"1\":{\"22\":1}}],[\"detecting\",{\"1\":{\"21\":1}}],[\"detection\",{\"1\":{\"9\":1,\"21\":2,\"22\":1,\"34\":1}}],[\"detect\",{\"1\":{\"9\":1,\"21\":2,\"22\":1,\"29\":2,\"31\":1,\"66\":1}}],[\"de\",{\"1\":{\"32\":1,\"54\":1,\"192\":2}}],[\"dedicating\",{\"1\":{\"176\":1}}],[\"dedicated\",{\"1\":{\"24\":1,\"32\":2,\"34\":1,\"72\":1,\"89\":1,\"95\":1}}],[\"dedents\",{\"1\":{\"110\":3}}],[\"dedent\",{\"1\":{\"87\":4,\"110\":3}}],[\"ded\",{\"1\":{\"86\":7,\"87\":9,\"89\":25,\"90\":1,\"91\":3,\"92\":5,\"96\":1,\"97\":1,\"110\":6}}],[\"deduces\",{\"1\":{\"10\":1}}],[\"denotes\",{\"1\":{\"33\":1}}],[\"density\",{\"1\":{\"32\":1}}],[\"denser\",{\"1\":{\"31\":1}}],[\"dense\",{\"1\":{\"21\":1}}],[\"denial\",{\"1\":{\"22\":2}}],[\"deny\",{\"1\":{\"22\":1}}],[\"dentry\",{\"1\":{\"11\":1}}],[\"deeply\",{\"1\":{\"105\":1}}],[\"deeper\",{\"1\":{\"59\":1}}],[\"deep\",{\"1\":{\"18\":1,\"28\":1,\"29\":1}}],[\"debezium\",{\"1\":{\"17\":1}}],[\"debugln\",{\"1\":{\"144\":2,\"145\":1,\"161\":1,\"163\":2,\"165\":7,\"166\":6,\"169\":7,\"170\":3,\"171\":10,\"180\":1,\"181\":8,\"182\":4,\"183\":11,\"188\":3,\"191\":7,\"192\":8,\"193\":7,\"197\":2,\"198\":6,\"199\":6,\"200\":1,\"204\":1,\"206\":1,\"209\":3,\"211\":4,\"212\":1,\"213\":3,\"214\":3,\"215\":1,\"219\":1,\"222\":3,\"223\":3,\"227\":4,\"230\":2,\"231\":1,\"239\":1,\"241\":1,\"242\":1,\"243\":3}}],[\"debugconport\",{\"1\":{\"144\":2}}],[\"debugcon\",{\"1\":{\"144\":4,\"145\":1,\"161\":1,\"163\":1,\"188\":1,\"196\":1}}],[\"debugname\",{\"1\":{\"61\":4}}],[\"debugger\",{\"1\":{\"30\":1,\"87\":1}}],[\"debugging\",{\"1\":{\"10\":1,\"15\":1,\"30\":1,\"147\":1,\"179\":1,\"233\":1}}],[\"debug\",{\"0\":{\"144\":1},\"1\":{\"9\":1,\"10\":2,\"30\":1,\"88\":1,\"141\":1,\"144\":12,\"145\":1,\"146\":1,\"161\":1,\"163\":1,\"165\":11,\"166\":1,\"169\":9,\"182\":2,\"183\":19,\"188\":1,\"191\":4,\"192\":5,\"193\":1,\"209\":1,\"211\":1,\"213\":1,\"219\":1,\"222\":1,\"223\":1,\"229\":1}}],[\"derivatives\",{\"1\":{\"21\":1,\"37\":1}}],[\"derive\",{\"1\":{\"11\":1}}],[\"derived\",{\"1\":{\"11\":2,\"17\":1,\"21\":1,\"31\":1}}],[\"der\",{\"1\":{\"14\":2}}],[\"dereferencing\",{\"1\":{\"9\":1,\"214\":1}}],[\"demonstrates\",{\"1\":{\"205\":1}}],[\"demonstrate\",{\"1\":{\"74\":1}}],[\"demonstrated\",{\"1\":{\"11\":1}}],[\"demarc\",{\"1\":{\"21\":1}}],[\"demanding\",{\"1\":{\"30\":1}}],[\"demand\",{\"1\":{\"11\":2,\"253\":1}}],[\"demux\",{\"1\":{\"21\":1}}],[\"deletion\",{\"1\":{\"23\":1}}],[\"delete\",{\"1\":{\"9\":3,\"17\":2,\"21\":1,\"23\":2,\"153\":1}}],[\"delegated\",{\"1\":{\"22\":1}}],[\"delegates\",{\"1\":{\"21\":1,\"77\":1,\"105\":1}}],[\"delimit\",{\"1\":{\"85\":1,\"88\":2}}],[\"delimiting\",{\"1\":{\"21\":1}}],[\"delimiter\",{\"1\":{\"92\":2}}],[\"delimiters\",{\"1\":{\"15\":1,\"21\":1,\"85\":1}}],[\"delimited\",{\"1\":{\"15\":2}}],[\"delivers\",{\"1\":{\"248\":1}}],[\"delivering\",{\"1\":{\"21\":2}}],[\"delivered\",{\"1\":{\"11\":1,\"17\":1,\"22\":1,\"190\":1,\"247\":1,\"248\":1}}],[\"deliver\",{\"1\":{\"6\":1,\"249\":1}}],[\"delivery\",{\"1\":{\"4\":1,\"6\":3,\"13\":1,\"21\":2,\"24\":2,\"28\":1}}],[\"deprecating\",{\"1\":{\"35\":1}}],[\"deprecated\",{\"1\":{\"21\":1,\"22\":1,\"35\":1}}],[\"dep\",{\"1\":{\"22\":2}}],[\"departments\",{\"1\":{\"21\":1}}],[\"deps\",{\"1\":{\"16\":1}}],[\"depths\",{\"1\":{\"13\":1}}],[\"depth\",{\"1\":{\"9\":1}}],[\"deployed\",{\"1\":{\"21\":1}}],[\"deploying\",{\"1\":{\"6\":1}}],[\"deploy\",{\"1\":{\"6\":2,\"9\":1,\"11\":1,\"13\":1,\"21\":1,\"24\":1,\"35\":3}}],[\"deployments\",{\"1\":{\"21\":1}}],[\"deployment\",{\"1\":{\"6\":3,\"19\":1}}],[\"dependent\",{\"1\":{\"192\":1}}],[\"dependencies\",{\"1\":{\"5\":2,\"7\":2,\"9\":2,\"22\":1,\"41\":1,\"43\":4,\"44\":1}}],[\"dependency\",{\"1\":{\"5\":2,\"43\":1,\"44\":4,\"55\":1}}],[\"depends\",{\"1\":{\"58\":1}}],[\"dependson\",{\"1\":{\"55\":2,\"71\":4}}],[\"depends>\",{\"1\":{\"44\":2}}],[\"depending\",{\"1\":{\"25\":1,\"50\":1,\"53\":1,\"72\":1,\"134\":1,\"224\":1,\"231\":1}}],[\"depend\",{\"1\":{\"5\":1,\"162\":1}}],[\"devkit\",{\"1\":{\"41\":1,\"42\":1,\"43\":1}}],[\"devirtualization\",{\"1\":{\"10\":1}}],[\"devicehandle\",{\"1\":{\"151\":2,\"152\":1}}],[\"devicehigh\",{\"1\":{\"11\":1}}],[\"devices\",{\"1\":{\"9\":2,\"11\":2,\"13\":1,\"21\":5,\"22\":2,\"24\":2,\"25\":1,\"30\":4,\"31\":3,\"33\":2,\"34\":4,\"116\":1,\"147\":2,\"234\":1,\"247\":1}}],[\"device\",{\"0\":{\"151\":1},\"1\":{\"5\":1,\"7\":1,\"9\":1,\"11\":1,\"13\":3,\"21\":4,\"22\":4,\"24\":1,\"25\":1,\"29\":1,\"30\":1,\"31\":2,\"33\":8,\"34\":3,\"36\":1,\"150\":2,\"151\":3,\"152\":4,\"190\":2,\"192\":2,\"247\":1,\"252\":1}}],[\"dev\",{\"1\":{\"9\":2,\"11\":2,\"30\":3}}],[\"developing\",{\"0\":{\"41\":1},\"1\":{\"41\":1,\"123\":1}}],[\"develops\",{\"1\":{\"36\":8}}],[\"develop\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"41\":2}}],[\"developed\",{\"1\":{\"8\":1,\"11\":4,\"21\":1,\"25\":4,\"30\":1,\"36\":1,\"53\":1}}],[\"developers\",{\"1\":{\"6\":1}}],[\"developer\",{\"1\":{\"6\":1,\"11\":1,\"185\":1}}],[\"development\",{\"0\":{\"7\":1},\"1\":{\"6\":4,\"8\":2,\"9\":6,\"11\":1,\"35\":1,\"36\":1,\"40\":3,\"41\":2,\"113\":1,\"115\":1,\"116\":1,\"117\":1}}],[\"dest\",{\"1\":{\"237\":3}}],[\"destinationformat\",{\"1\":{\"248\":1}}],[\"destination\",{\"1\":{\"190\":2}}],[\"destructors\",{\"1\":{\"115\":1}}],[\"deserialization\",{\"1\":{\"22\":1}}],[\"descent\",{\"1\":{\"63\":2,\"105\":1}}],[\"descendents\",{\"1\":{\"79\":1}}],[\"descended\",{\"1\":{\"11\":1}}],[\"descending\",{\"1\":{\"79\":1}}],[\"descendants\",{\"1\":{\"79\":5}}],[\"descend\",{\"1\":{\"63\":1,\"79\":2}}],[\"descends\",{\"1\":{\"58\":1}}],[\"descriptive\",{\"1\":{\"96\":1}}],[\"description>\",{\"1\":{\"44\":1}}],[\"description\",{\"1\":{\"7\":1,\"13\":1,\"15\":1,\"33\":2,\"34\":9,\"44\":1,\"47\":1,\"192\":1,\"248\":1}}],[\"descriptorversion\",{\"1\":{\"159\":1}}],[\"descriptorsize\",{\"1\":{\"159\":1}}],[\"descriptors\",{\"0\":{\"185\":1,\"190\":1},\"1\":{\"33\":1,\"184\":1,\"187\":5,\"190\":2}}],[\"descriptor\",{\"0\":{\"187\":1},\"1\":{\"11\":2,\"124\":1,\"140\":1,\"183\":1,\"184\":1,\"185\":5,\"186\":5,\"187\":7,\"188\":4,\"189\":1,\"190\":5,\"201\":1,\"202\":6}}],[\"describing\",{\"1\":{\"7\":2,\"13\":1,\"15\":2,\"21\":1,\"25\":1,\"230\":1,\"232\":1}}],[\"described\",{\"1\":{\"58\":1,\"95\":1,\"185\":1}}],[\"describes\",{\"1\":{\"34\":1}}],[\"describe\",{\"1\":{\"7\":1,\"9\":1,\"15\":1,\"32\":1,\"33\":2,\"34\":1}}],[\"desugar\",{\"1\":{\"10\":1}}],[\"desired\",{\"1\":{\"6\":1,\"40\":1,\"187\":1}}],[\"designation\",{\"1\":{\"30\":1}}],[\"designated\",{\"1\":{\"22\":1}}],[\"designed\",{\"1\":{\"8\":1,\"11\":1,\"12\":1,\"15\":2,\"21\":1,\"27\":1,\"35\":1,\"36\":1,\"150\":1,\"201\":1}}],[\"designs\",{\"1\":{\"6\":1,\"11\":1,\"33\":1}}],[\"designing\",{\"1\":{\"6\":2}}],[\"design\",{\"0\":{\"5\":1},\"1\":{\"5\":3,\"6\":4,\"9\":2,\"11\":2,\"19\":1,\"21\":1,\"25\":3,\"33\":2}}],[\"desktop\",{\"1\":{\"5\":2,\"9\":3,\"11\":11,\"13\":2,\"21\":1,\"33\":1,\"120\":1}}],[\"desktops\",{\"1\":{\"5\":1,\"25\":1}}],[\"deflate\",{\"1\":{\"13\":1,\"16\":6}}],[\"defending\",{\"1\":{\"36\":1}}],[\"defense\",{\"1\":{\"11\":1,\"21\":2,\"30\":1,\"36\":1}}],[\"deferring\",{\"1\":{\"11\":1}}],[\"deferred\",{\"1\":{\"11\":1}}],[\"defun\",{\"1\":{\"8\":1}}],[\"defining\",{\"0\":{\"175\":1,\"191\":1},\"1\":{\"11\":1,\"12\":3,\"14\":2,\"15\":1,\"17\":1,\"22\":1,\"33\":1,\"37\":1,\"46\":1,\"47\":1,\"66\":1,\"77\":2,\"79\":4,\"85\":1,\"99\":1,\"101\":1,\"138\":1,\"153\":1,\"156\":1,\"168\":1,\"175\":1,\"187\":1,\"191\":1,\"192\":1,\"196\":1,\"235\":1,\"240\":1,\"248\":1}}],[\"definition\",{\"0\":{\"64\":1,\"217\":1},\"1\":{\"7\":1,\"8\":2,\"9\":1,\"12\":2,\"17\":1,\"32\":5,\"34\":1,\"36\":1,\"55\":1,\"61\":1,\"124\":2,\"133\":1,\"161\":1,\"227\":1,\"248\":1}}],[\"definitions\",{\"1\":{\"2\":1,\"3\":1,\"10\":1,\"34\":1}}],[\"defined\",{\"1\":{\"9\":1,\"17\":1,\"25\":1,\"48\":1,\"52\":1,\"53\":2,\"57\":1,\"62\":1,\"68\":1,\"70\":2,\"77\":1,\"92\":1,\"103\":1,\"124\":1,\"127\":1,\"133\":1,\"139\":1,\"140\":1,\"151\":1,\"175\":1,\"176\":1,\"177\":1,\"191\":1,\"192\":2,\"218\":2,\"228\":1,\"239\":1}}],[\"defines\",{\"1\":{\"6\":1,\"7\":1,\"11\":1,\"32\":1,\"34\":1,\"46\":1,\"47\":1,\"63\":1,\"68\":2,\"72\":1,\"77\":1,\"92\":2,\"124\":2,\"133\":1,\"139\":2,\"151\":1,\"208\":2,\"227\":1}}],[\"define\",{\"1\":{\"4\":1,\"9\":3,\"10\":4,\"15\":3,\"22\":1,\"47\":1,\"51\":1,\"53\":4,\"61\":6,\"77\":3,\"85\":1,\"89\":1,\"92\":6,\"99\":1,\"101\":1,\"102\":1,\"104\":1,\"105\":1,\"110\":1,\"127\":1,\"129\":1,\"133\":1,\"136\":1,\"140\":1,\"151\":6,\"152\":1,\"153\":2,\"154\":3,\"156\":1,\"157\":1,\"158\":1,\"159\":2,\"160\":1,\"161\":2,\"164\":2,\"166\":1,\"168\":2,\"175\":2,\"177\":1,\"185\":1,\"187\":4,\"188\":1,\"190\":4,\"191\":4,\"192\":2,\"196\":1,\"202\":3,\"204\":1,\"208\":2,\"209\":1,\"211\":2,\"212\":2,\"213\":1,\"217\":2,\"218\":1,\"230\":3,\"235\":2,\"239\":1,\"240\":1,\"245\":1,\"248\":2}}],[\"defaults\",{\"1\":{\"88\":1,\"124\":3}}],[\"defaultextensionns=\",{\"1\":{\"44\":1,\"48\":1,\"64\":1,\"83\":1}}],[\"defaultrepositories\",{\"1\":{\"43\":2}}],[\"default\",{\"1\":{\"4\":1,\"6\":1,\"7\":2,\"11\":2,\"21\":2,\"22\":1,\"28\":1,\"43\":1,\"47\":1,\"61\":2,\"69\":1,\"77\":2,\"87\":9,\"88\":1,\"95\":1,\"96\":2,\"97\":1,\"108\":1,\"123\":1,\"124\":4,\"129\":1,\"133\":1,\"134\":1,\"135\":4,\"141\":2,\"146\":2,\"179\":1,\"185\":2,\"187\":1,\"234\":1,\"249\":2}}],[\"decnum\",{\"1\":{\"99\":6}}],[\"decnet\",{\"1\":{\"21\":4}}],[\"decrementing\",{\"1\":{\"110\":1}}],[\"decrement\",{\"1\":{\"96\":2}}],[\"decreases\",{\"1\":{\"87\":1}}],[\"decrease\",{\"1\":{\"87\":4}}],[\"decreasing\",{\"1\":{\"86\":1}}],[\"decls\",{\"1\":{\"79\":6}}],[\"declaring\",{\"1\":{\"90\":2}}],[\"declares\",{\"1\":{\"139\":1}}],[\"declare\",{\"1\":{\"44\":1,\"52\":1,\"53\":1,\"110\":1,\"177\":1,\"190\":1}}],[\"declared\",{\"1\":{\"43\":1,\"79\":1,\"106\":1,\"187\":1}}],[\"declaration\",{\"0\":{\"72\":1,\"75\":1,\"90\":1},\"1\":{\"72\":8,\"73\":1,\"74\":6,\"75\":8,\"76\":4,\"77\":4,\"78\":12,\"79\":3,\"80\":3,\"82\":7,\"84\":4,\"90\":3,\"91\":1,\"92\":1,\"93\":1,\"97\":3,\"103\":1,\"110\":1}}],[\"declarations\",{\"0\":{\"79\":1},\"1\":{\"12\":1,\"53\":6,\"72\":1,\"73\":1,\"76\":2,\"77\":1,\"78\":1,\"79\":4,\"82\":1,\"90\":4,\"91\":3,\"94\":1,\"97\":3,\"166\":1}}],[\"declarative\",{\"1\":{\"4\":1,\"6\":2,\"9\":2,\"12\":1}}],[\"decentralized\",{\"1\":{\"21\":3}}],[\"decides\",{\"1\":{\"238\":1}}],[\"decided\",{\"1\":{\"115\":1,\"116\":1,\"147\":1}}],[\"decide\",{\"1\":{\"88\":1,\"147\":1,\"239\":1}}],[\"deciding\",{\"1\":{\"77\":2,\"239\":1}}],[\"decisions\",{\"1\":{\"124\":1,\"239\":1}}],[\"decision\",{\"1\":{\"17\":1,\"201\":1}}],[\"decimal\",{\"1\":{\"14\":5,\"98\":5,\"99\":2}}],[\"decsystem\",{\"1\":{\"11\":3}}],[\"dec\",{\"1\":{\"11\":9,\"21\":2,\"25\":2,\"30\":4}}],[\"deck\",{\"1\":{\"11\":1}}],[\"decommissioning\",{\"1\":{\"21\":1}}],[\"decompression\",{\"1\":{\"16\":1}}],[\"decompose\",{\"1\":{\"4\":2}}],[\"decode\",{\"1\":{\"15\":1}}],[\"decouple\",{\"1\":{\"4\":1,\"17\":1}}],[\"decoupling\",{\"1\":{\"4\":1}}],[\"gs\",{\"1\":{\"186\":1,\"187\":1,\"188\":2,\"200\":1,\"210\":2}}],[\"gssapi\",{\"1\":{\"4\":1}}],[\"gtld\",{\"1\":{\"36\":1}}],[\"gtk\",{\"1\":{\"35\":2}}],[\"gbit\",{\"1\":{\"21\":2}}],[\"gflops\",{\"1\":{\"20\":1}}],[\"gp\",{\"1\":{\"186\":1,\"192\":1}}],[\"gpl\",{\"1\":{\"36\":2,\"37\":3}}],[\"gpio\",{\"1\":{\"30\":3}}],[\"gpg\",{\"1\":{\"22\":2}}],[\"gpt\",{\"1\":{\"18\":3,\"31\":2,\"34\":1}}],[\"gpu\",{\"1\":{\"9\":1,\"10\":2,\"20\":1,\"24\":1,\"25\":1,\"30\":1,\"32\":2,\"33\":3}}],[\"gpus\",{\"1\":{\"9\":1,\"20\":1,\"25\":1,\"29\":3,\"30\":2,\"32\":2,\"34\":1}}],[\"gz\",{\"1\":{\"16\":2}}],[\"gzip\",{\"1\":{\"16\":7}}],[\"gnome\",{\"1\":{\"11\":3}}],[\"gnuc\",{\"1\":{\"124\":1}}],[\"gnu\",{\"1\":{\"10\":1,\"11\":2,\"16\":1,\"22\":1,\"34\":1,\"36\":4,\"37\":3,\"119\":1,\"124\":1,\"147\":3,\"226\":2,\"228\":2,\"229\":1,\"234\":5}}],[\"gddr6x\",{\"1\":{\"29\":1}}],[\"gddr6\",{\"1\":{\"29\":1,\"32\":1}}],[\"gddr\",{\"1\":{\"29\":1,\"32\":1}}],[\"gdpr\",{\"1\":{\"23\":1}}],[\"gds\",{\"1\":{\"11\":1}}],[\"gdt=\",{\"1\":{\"188\":1,\"200\":1,\"210\":2}}],[\"gdtinit\",{\"1\":{\"188\":4,\"191\":1,\"203\":2}}],[\"gdtentries\",{\"1\":{\"187\":3,\"202\":1}}],[\"gdtdescriptor\",{\"1\":{\"187\":4}}],[\"gdtr\",{\"1\":{\"187\":5,\"188\":1}}],[\"gdt\",{\"0\":{\"188\":1},\"1\":{\"11\":2,\"183\":1,\"184\":1,\"186\":3,\"187\":15,\"188\":10,\"190\":1,\"191\":1,\"197\":1,\"201\":1,\"202\":8,\"203\":1,\"209\":1,\"222\":1,\"223\":1,\"240\":1}}],[\"gdb\",{\"1\":{\"10\":1}}],[\"gvn\",{\"1\":{\"10\":1}}],[\"g++\",{\"1\":{\"10\":1}}],[\"glance\",{\"1\":{\"124\":1}}],[\"glsl\",{\"1\":{\"10\":2}}],[\"gl\",{\"1\":{\"10\":2,\"121\":1}}],[\"glr\",{\"1\":{\"10\":1}}],[\"globalsearchscope\",{\"1\":{\"83\":1}}],[\"globally\",{\"1\":{\"14\":1,\"21\":1,\"24\":1}}],[\"global\",{\"0\":{\"187\":1},\"1\":{\"9\":1,\"10\":2,\"11\":2,\"21\":1,\"36\":2,\"80\":2,\"83\":2,\"85\":1,\"124\":2,\"129\":1,\"168\":1,\"175\":1,\"183\":1,\"184\":1,\"211\":1,\"216\":1,\"219\":1,\"220\":1,\"222\":1,\"223\":1,\"225\":2,\"227\":2,\"239\":2,\"248\":1,\"249\":2}}],[\"globalization\",{\"1\":{\"6\":1}}],[\"glossary\",{\"1\":{\"2\":1}}],[\"gcm\",{\"1\":{\"22\":1}}],[\"gcos\",{\"1\":{\"11\":3}}],[\"gcc\",{\"1\":{\"10\":5,\"124\":2}}],[\"gc\",{\"1\":{\"9\":1}}],[\"g\",{\"1\":{\"9\":1,\"10\":1,\"14\":1,\"16\":2,\"17\":1,\"21\":3,\"25\":3,\"26\":1,\"30\":2,\"31\":1,\"32\":2,\"33\":2,\"36\":3,\"44\":1,\"53\":1,\"58\":3,\"72\":1,\"74\":1,\"83\":1,\"85\":1,\"98\":2,\"102\":6,\"103\":3,\"106\":1,\"116\":1,\"124\":1,\"135\":1,\"147\":2,\"175\":1,\"185\":2,\"187\":2,\"188\":1,\"189\":1,\"192\":2,\"194\":1,\"201\":1,\"202\":1,\"207\":1,\"208\":1,\"217\":1,\"234\":1,\"235\":2,\"239\":1,\"242\":1}}],[\"guard\",{\"1\":{\"22\":1}}],[\"guarantees\",{\"1\":{\"17\":1}}],[\"guaranteed\",{\"1\":{\"10\":1,\"21\":1,\"147\":1}}],[\"guests\",{\"1\":{\"24\":1,\"28\":1}}],[\"guest\",{\"1\":{\"11\":1,\"24\":2}}],[\"gunicorn\",{\"1\":{\"7\":1}}],[\"guis\",{\"1\":{\"36\":1}}],[\"guide\",{\"1\":{\"73\":1}}],[\"guidelines\",{\"1\":{\"7\":1,\"36\":2}}],[\"guid\",{\"1\":{\"14\":1,\"31\":1,\"151\":1,\"152\":1}}],[\"gui\",{\"1\":{\"6\":1,\"9\":1,\"11\":4,\"251\":1,\"253\":1}}],[\"gear\",{\"1\":{\"21\":4,\"24\":1,\"25\":1}}],[\"ge\",{\"1\":{\"11\":3,\"17\":2}}],[\"geographic\",{\"1\":{\"17\":2,\"21\":2}}],[\"geos\",{\"1\":{\"11\":2}}],[\"geometry\",{\"1\":{\"9\":1,\"31\":2}}],[\"gem\",{\"1\":{\"11\":2}}],[\"gecos\",{\"1\":{\"11\":2}}],[\"gen\",{\"1\":{\"9\":1,\"22\":1,\"54\":5,\"55\":1,\"69\":5,\"71\":2,\"73\":1,\"74\":1}}],[\"generics\",{\"1\":{\"92\":1,\"177\":1}}],[\"generic\",{\"1\":{\"7\":1,\"11\":1,\"25\":1,\"27\":1,\"177\":3}}],[\"generative\",{\"1\":{\"18\":1}}],[\"generational\",{\"1\":{\"31\":1}}],[\"generation\",{\"0\":{\"55\":1},\"1\":{\"11\":1,\"18\":2,\"22\":1,\"27\":1}}],[\"generating\",{\"0\":{\"54\":1,\"69\":1,\"71\":1,\"226\":1},\"1\":{\"9\":1,\"18\":1,\"22\":1,\"41\":1,\"67\":1,\"69\":1,\"70\":1,\"71\":2,\"141\":1}}],[\"generators\",{\"1\":{\"30\":1,\"53\":1,\"85\":1}}],[\"generator\",{\"1\":{\"8\":1,\"10\":1,\"12\":1,\"24\":1,\"51\":2,\"53\":1,\"54\":1,\"55\":1,\"69\":1,\"85\":1}}],[\"generateparser\",{\"1\":{\"71\":3}}],[\"generate=\",{\"1\":{\"70\":1}}],[\"generatelexer\",{\"1\":{\"55\":5,\"71\":3}}],[\"generates\",{\"1\":{\"52\":1,\"53\":1,\"67\":1,\"69\":2,\"124\":1,\"141\":1,\"147\":1,\"179\":1,\"191\":1,\"227\":1}}],[\"generatedparserutilbase\",{\"1\":{\"106\":1,\"110\":1}}],[\"generatedtypes\",{\"1\":{\"69\":2}}],[\"generated\",{\"1\":{\"7\":2,\"10\":1,\"22\":2,\"52\":1,\"53\":3,\"54\":4,\"55\":1,\"58\":1,\"60\":1,\"68\":3,\"69\":5,\"70\":1,\"71\":2,\"72\":1,\"74\":4,\"75\":2,\"89\":1,\"124\":1,\"147\":4,\"186\":1,\"190\":1,\"225\":1,\"226\":2,\"228\":2}}],[\"generate\",{\"1\":{\"7\":3,\"9\":2,\"10\":2,\"12\":1,\"13\":2,\"18\":1,\"22\":2,\"33\":1,\"41\":1,\"51\":2,\"53\":1,\"54\":2,\"56\":1,\"58\":1,\"59\":1,\"66\":1,\"67\":1,\"69\":8,\"70\":1,\"71\":2,\"73\":1,\"74\":2,\"75\":1,\"88\":1,\"89\":1,\"94\":1,\"124\":1,\"147\":3,\"191\":1,\"192\":2,\"224\":1,\"225\":2,\"226\":2,\"234\":1,\"249\":1}}],[\"generalized\",{\"1\":{\"9\":1,\"12\":1}}],[\"general\",{\"0\":{\"26\":1,\"33\":1},\"1\":{\"6\":1,\"8\":1,\"11\":3,\"23\":1,\"25\":2,\"30\":1,\"33\":1,\"37\":2,\"186\":1,\"192\":2,\"205\":3,\"206\":3}}],[\"getorcreateentry\",{\"1\":{\"177\":6}}],[\"getactivepml4\",{\"1\":{\"177\":3,\"198\":1,\"219\":1,\"220\":1,\"237\":1}}],[\"getmemorymap\",{\"1\":{\"150\":2,\"151\":1,\"159\":6,\"160\":3}}],[\"getusescope\",{\"1\":{\"83\":2}}],[\"getposition\",{\"1\":{\"153\":1}}],[\"getpsi\",{\"1\":{\"112\":1}}],[\"getparentoftype\",{\"1\":{\"77\":2,\"79\":1}}],[\"getparent\",{\"1\":{\"77\":1}}],[\"getprivateprofilestring\",{\"1\":{\"13\":1}}],[\"getinfo\",{\"1\":{\"153\":1,\"154\":4,\"197\":1}}],[\"getinstance\",{\"1\":{\"82\":1}}],[\"getident\",{\"1\":{\"75\":3}}],[\"geticon\",{\"1\":{\"47\":2}}],[\"getreference\",{\"1\":{\"72\":2,\"74\":4}}],[\"getfiletype\",{\"1\":{\"61\":2}}],[\"getfilenodetype\",{\"1\":{\"58\":1,\"64\":1,\"95\":1}}],[\"getstacktrace\",{\"1\":{\"141\":1,\"166\":1,\"192\":2,\"193\":1}}],[\"getstate\",{\"1\":{\"51\":1}}],[\"getstringliteralelements\",{\"1\":{\"58\":1,\"64\":1,\"95\":1}}],[\"getwhitespacetokens\",{\"1\":{\"58\":1,\"64\":1,\"95\":1}}],[\"getbufferend\",{\"1\":{\"51\":1}}],[\"getbuffersequence\",{\"1\":{\"51\":1}}],[\"getbulk\",{\"1\":{\"21\":1}}],[\"getcontext\",{\"1\":{\"77\":5,\"78\":1,\"79\":1,\"83\":1}}],[\"getconnection\",{\"1\":{\"9\":1}}],[\"getcommenttokens\",{\"1\":{\"58\":1,\"64\":1,\"95\":1}}],[\"getcurrentposition\",{\"1\":{\"51\":1}}],[\"gettreebuilt\",{\"1\":{\"58\":1}}],[\"gettokenend\",{\"1\":{\"51\":2,\"89\":1}}],[\"gettokenstart\",{\"1\":{\"51\":2}}],[\"gettokentype\",{\"1\":{\"51\":3}}],[\"getting\",{\"1\":{\"124\":1,\"150\":1,\"154\":1,\"159\":1,\"160\":2,\"163\":2,\"164\":2,\"197\":1}}],[\"gettimeofday\",{\"1\":{\"11\":1}}],[\"gettid\",{\"1\":{\"11\":1}}],[\"getdefaultextension\",{\"1\":{\"47\":1}}],[\"getdescription\",{\"1\":{\"47\":1}}],[\"getnameidentifier\",{\"1\":{\"75\":3}}],[\"getname\",{\"1\":{\"47\":1,\"75\":1}}],[\"getnextmonotoniccount\",{\"1\":{\"151\":1}}],[\"getnext\",{\"1\":{\"21\":1}}],[\"get\",{\"0\":{\"159\":1},\"1\":{\"7\":2,\"9\":1,\"21\":3,\"24\":1,\"49\":1,\"50\":1,\"51\":1,\"55\":1,\"59\":1,\"72\":1,\"79\":2,\"87\":3,\"88\":2,\"89\":4,\"94\":1,\"106\":1,\"110\":1,\"115\":1,\"122\":1,\"124\":4,\"131\":1,\"139\":1,\"144\":1,\"150\":7,\"151\":5,\"152\":3,\"153\":3,\"154\":3,\"159\":5,\"160\":2,\"161\":1,\"163\":1,\"164\":1,\"170\":1,\"176\":1,\"177\":3,\"179\":1,\"180\":2,\"181\":4,\"193\":2,\"195\":1,\"197\":2,\"198\":1,\"204\":1,\"218\":1,\"220\":1,\"229\":1,\"231\":4,\"237\":1,\"239\":1,\"248\":3}}],[\"gaps\",{\"1\":{\"169\":1}}],[\"gap\",{\"1\":{\"169\":4,\"173\":1}}],[\"gather\",{\"1\":{\"48\":1}}],[\"gates\",{\"1\":{\"190\":10}}],[\"gate\",{\"1\":{\"11\":1,\"33\":1,\"190\":6,\"191\":1,\"206\":4}}],[\"gateways\",{\"1\":{\"21\":2}}],[\"gateway\",{\"1\":{\"7\":3,\"21\":6}}],[\"gadgets\",{\"1\":{\"22\":2}}],[\"gadts\",{\"1\":{\"9\":1}}],[\"gadt\",{\"1\":{\"9\":1}}],[\"gaming\",{\"1\":{\"32\":1,\"35\":1}}],[\"gamma\",{\"1\":{\"13\":1}}],[\"gamepads\",{\"1\":{\"33\":1}}],[\"gamecube\",{\"1\":{\"25\":1}}],[\"games\",{\"1\":{\"11\":2,\"20\":1,\"25\":2,\"35\":1}}],[\"game\",{\"1\":{\"4\":2,\"35\":4}}],[\"garbage\",{\"1\":{\"9\":1,\"115\":1}}],[\"ga\",{\"1\":{\"6\":2,\"35\":1}}],[\"gib\",{\"1\":{\"179\":1,\"180\":2,\"196\":1,\"226\":1}}],[\"gicv2\",{\"1\":{\"27\":1}}],[\"gic\",{\"1\":{\"27\":1}}],[\"gigabit\",{\"1\":{\"21\":1}}],[\"gis\",{\"1\":{\"17\":1}}],[\"gif\",{\"1\":{\"13\":1,\"16\":2}}],[\"give\",{\"1\":{\"21\":1,\"104\":1,\"160\":1,\"215\":1}}],[\"gives\",{\"1\":{\"9\":1,\"11\":1,\"50\":1,\"135\":1,\"176\":1,\"183\":1,\"185\":1}}],[\"given\",{\"1\":{\"6\":1,\"21\":1,\"52\":1,\"53\":1,\"57\":1,\"58\":1,\"59\":1,\"64\":1,\"69\":1,\"112\":2,\"127\":1,\"154\":1,\"168\":1,\"190\":1,\"191\":1,\"228\":2,\"237\":1}}],[\"gitignore\",{\"1\":{\"121\":2,\"135\":1}}],[\"git\",{\"1\":{\"6\":3,\"9\":1,\"22\":1,\"35\":2}}],[\"gitlab\",{\"1\":{\"6\":1}}],[\"github\",{\"1\":{\"1\":2,\"6\":1,\"12\":1,\"116\":2,\"171\":3,\"192\":3,\"193\":6,\"205\":9,\"206\":3,\"250\":6}}],[\"gone\",{\"1\":{\"93\":1}}],[\"gonna\",{\"1\":{\"5\":1}}],[\"going\",{\"1\":{\"42\":1,\"77\":1,\"85\":1,\"89\":2,\"95\":1,\"104\":1,\"116\":1,\"123\":1,\"124\":2,\"139\":1,\"162\":1,\"168\":1,\"171\":1,\"175\":1,\"176\":1,\"181\":1,\"185\":1,\"197\":1,\"209\":1,\"210\":1,\"214\":1,\"227\":1,\"236\":1,\"237\":1,\"239\":2,\"244\":1}}],[\"got\",{\"1\":{\"72\":1,\"110\":1,\"158\":1,\"160\":3,\"226\":1,\"228\":1,\"234\":1}}],[\"gotta\",{\"1\":{\"35\":1}}],[\"goto\",{\"1\":{\"8\":2}}],[\"goo\",{\"1\":{\"121\":1}}],[\"google\",{\"1\":{\"21\":3,\"22\":1,\"25\":1,\"35\":1}}],[\"good\",{\"1\":{\"5\":1,\"16\":2,\"22\":1,\"35\":2,\"55\":1,\"66\":1,\"84\":1,\"88\":1,\"89\":1,\"97\":2,\"100\":1,\"105\":1,\"108\":1,\"131\":1,\"147\":2,\"165\":1,\"179\":1,\"182\":1,\"188\":1,\"196\":1,\"201\":1,\"210\":2,\"215\":1,\"223\":1,\"226\":1,\"234\":1}}],[\"goes\",{\"1\":{\"11\":1,\"45\":1,\"154\":1,\"183\":1}}],[\"governmental\",{\"1\":{\"36\":1}}],[\"government\",{\"1\":{\"21\":1}}],[\"governs\",{\"1\":{\"21\":1,\"37\":1}}],[\"governing\",{\"1\":{\"11\":1,\"23\":1}}],[\"governance\",{\"1\":{\"4\":1}}],[\"goals\",{\"1\":{\"6\":1}}],[\"goal\",{\"1\":{\"6\":1,\"49\":1,\"74\":1,\"122\":1,\"147\":1}}],[\"go\",{\"0\":{\"72\":1},\"1\":{\"5\":1,\"35\":1,\"42\":1,\"44\":1,\"72\":1,\"74\":1,\"75\":2,\"77\":1,\"86\":2,\"87\":1,\"105\":1,\"116\":1,\"124\":1,\"164\":1,\"166\":1,\"171\":1,\"176\":1,\"185\":1,\"232\":1,\"237\":1}}],[\"grub\",{\"1\":{\"34\":3}}],[\"gru\",{\"1\":{\"18\":1}}],[\"grid\",{\"1\":{\"18\":1}}],[\"grids\",{\"1\":{\"15\":1}}],[\"grade\",{\"1\":{\"43\":1}}],[\"gradle\",{\"1\":{\"41\":5,\"42\":1,\"43\":8,\"45\":1,\"54\":2,\"55\":2,\"65\":1,\"71\":2}}],[\"graduation\",{\"1\":{\"36\":1}}],[\"gradients\",{\"1\":{\"18\":1}}],[\"grabbing\",{\"1\":{\"35\":1}}],[\"granularity\",{\"1\":{\"185\":2}}],[\"grand\",{\"1\":{\"34\":1}}],[\"granted\",{\"1\":{\"22\":1}}],[\"grant\",{\"1\":{\"22\":2,\"116\":1}}],[\"granting\",{\"1\":{\"22\":1,\"23\":1}}],[\"grained\",{\"1\":{\"25\":1}}],[\"graviton\",{\"1\":{\"25\":1}}],[\"gratuitous\",{\"1\":{\"21\":1}}],[\"gracefully\",{\"1\":{\"63\":1}}],[\"graceful\",{\"1\":{\"24\":1}}],[\"grace\",{\"1\":{\"11\":1}}],[\"grammarkit\",{\"1\":{\"55\":1}}],[\"grammars\",{\"1\":{\"10\":2}}],[\"grammar\",{\"0\":{\"67\":1,\"73\":1,\"100\":1},\"1\":{\"8\":1,\"10\":8,\"41\":2,\"42\":1,\"51\":1,\"54\":1,\"55\":1,\"56\":1,\"58\":3,\"59\":2,\"63\":4,\"66\":4,\"67\":2,\"68\":5,\"69\":8,\"70\":3,\"71\":2,\"73\":1,\"74\":5,\"75\":2,\"80\":1,\"85\":5,\"89\":1,\"90\":2,\"91\":1,\"92\":4,\"97\":2,\"100\":1,\"101\":1,\"104\":5,\"105\":4,\"106\":4,\"107\":1,\"108\":1,\"109\":3,\"110\":2}}],[\"graphs\",{\"1\":{\"9\":2,\"15\":3,\"17\":1}}],[\"graph\",{\"1\":{\"9\":5,\"10\":3,\"15\":1}}],[\"graphic\",{\"1\":{\"11\":1}}],[\"graphics\",{\"1\":{\"9\":2,\"10\":3,\"11\":4,\"13\":4,\"20\":1,\"28\":1,\"29\":2,\"32\":12,\"144\":1,\"251\":1,\"252\":1}}],[\"graphical\",{\"1\":{\"5\":1,\"9\":1,\"11\":2,\"21\":1}}],[\"graphql\",{\"1\":{\"7\":1}}],[\"greeted\",{\"1\":{\"135\":2}}],[\"green\",{\"1\":{\"6\":3,\"21\":1,\"32\":3}}],[\"gre\",{\"1\":{\"21\":1}}],[\"grep\",{\"1\":{\"9\":1}}],[\"greatly\",{\"1\":{\"196\":1}}],[\"greater\",{\"1\":{\"87\":1,\"115\":1,\"162\":1,\"206\":1}}],[\"great\",{\"1\":{\"6\":1,\"45\":1,\"49\":1,\"65\":1,\"75\":1,\"80\":1,\"82\":1,\"88\":1,\"96\":1,\"101\":1,\"115\":1,\"123\":1,\"131\":1,\"133\":1,\"135\":1,\"141\":1,\"147\":2,\"148\":1,\"154\":1,\"160\":1,\"161\":1,\"166\":2,\"183\":1,\"191\":1,\"192\":1,\"205\":2,\"206\":1,\"212\":1,\"213\":1,\"222\":1}}],[\"grpc\",{\"1\":{\"4\":1,\"9\":3}}],[\"groom\",{\"1\":{\"21\":1}}],[\"ground\",{\"1\":{\"11\":1,\"18\":1,\"110\":1}}],[\"groundwork\",{\"1\":{\"11\":1,\"80\":1}}],[\"grouped\",{\"1\":{\"109\":1}}],[\"groups\",{\"1\":{\"13\":1,\"15\":1,\"21\":2,\"33\":1,\"36\":3}}],[\"group\",{\"1\":{\"11\":1,\"21\":1,\"30\":1,\"32\":1,\"36\":3,\"93\":1,\"107\":1,\"108\":1,\"147\":2,\"234\":1,\"235\":2}}],[\"grouping\",{\"1\":{\"10\":1}}],[\"grows\",{\"1\":{\"185\":2,\"199\":1}}],[\"growth\",{\"1\":{\"10\":1}}],[\"growing\",{\"1\":{\"2\":1}}],[\"grok\",{\"1\":{\"3\":1}}],[\"c7\",{\"1\":{\"200\":3}}],[\"c9\",{\"1\":{\"147\":1}}],[\"c90\",{\"1\":{\"36\":1}}],[\"c99+\",{\"1\":{\"10\":1}}],[\"c89\",{\"1\":{\"36\":1}}],[\"cga\",{\"1\":{\"32\":1}}],[\"cgroups\",{\"1\":{\"24\":1}}],[\"cgi\",{\"1\":{\"7\":2}}],[\"cc\",{\"1\":{\"124\":7}}],[\"cctld\",{\"1\":{\"36\":1}}],[\"cctlds\",{\"1\":{\"36\":1}}],[\"ccix\",{\"1\":{\"30\":1}}],[\"ccitt\",{\"1\":{\"16\":1}}],[\"ccpa\",{\"1\":{\"23\":2}}],[\"cves\",{\"1\":{\"22\":1}}],[\"cve\",{\"1\":{\"22\":2}}],[\"cvs\",{\"1\":{\"6\":1}}],[\"cncf\",{\"1\":{\"36\":2}}],[\"cname\",{\"1\":{\"21\":2,\"24\":1}}],[\"cnn\",{\"1\":{\"18\":1}}],[\"cbo\",{\"1\":{\"17\":1}}],[\"cbor\",{\"1\":{\"15\":2}}],[\"czf\",{\"1\":{\"16\":2}}],[\"cjf\",{\"1\":{\"16\":2}}],[\"cjk\",{\"1\":{\"14\":1}}],[\"c3301\",{\"1\":{\"14\":1}}],[\"ctxswitch\",{\"1\":{\"240\":3}}],[\"ctrl+b\",{\"1\":{\"75\":2}}],[\"cte\",{\"1\":{\"17\":1}}],[\"ctss\",{\"1\":{\"11\":1}}],[\"ctypes\",{\"1\":{\"9\":1}}],[\"cem\",{\"1\":{\"36\":1}}],[\"celebration\",{\"1\":{\"35\":1}}],[\"cell\",{\"1\":{\"21\":1}}],[\"ce\",{\"1\":{\"33\":1}}],[\"cet\",{\"1\":{\"22\":1}}],[\"cer\",{\"1\":{\"14\":1}}],[\"cert\",{\"1\":{\"22\":1}}],[\"certificate\",{\"1\":{\"14\":1,\"22\":1}}],[\"certificates\",{\"1\":{\"14\":1,\"22\":2}}],[\"certs\",{\"1\":{\"14\":2,\"22\":4}}],[\"certain\",{\"1\":{\"11\":1,\"58\":1,\"97\":1,\"104\":1,\"185\":1,\"238\":1,\"239\":1}}],[\"center\",{\"1\":{\"36\":2}}],[\"centers\",{\"1\":{\"11\":1,\"21\":1}}],[\"centered\",{\"1\":{\"6\":1}}],[\"centronics\",{\"1\":{\"30\":1}}],[\"central\",{\"1\":{\"21\":2,\"26\":1}}],[\"centralized\",{\"1\":{\"4\":1,\"17\":1,\"21\":1,\"24\":1}}],[\"centric\",{\"1\":{\"11\":1}}],[\"cm2rx5\",{\"1\":{\"121\":1}}],[\"cmos\",{\"1\":{\"33\":4}}],[\"cmn\",{\"1\":{\"30\":1}}],[\"cmac\",{\"1\":{\"22\":1}}],[\"cmks\",{\"1\":{\"22\":1}}],[\"cmd+shit+g\",{\"1\":{\"88\":1}}],[\"cmd+b\",{\"1\":{\"75\":1}}],[\"cmd+q\",{\"1\":{\"45\":1}}],[\"cmd\",{\"1\":{\"11\":6}}],[\"cms\",{\"1\":{\"7\":3,\"11\":4,\"22\":1}}],[\"cfc8\",{\"1\":{\"228\":2}}],[\"cf90\",{\"1\":{\"228\":6}}],[\"cfi\",{\"1\":{\"22\":2}}],[\"cfm\",{\"1\":{\"16\":1}}],[\"cfgs\",{\"1\":{\"10\":1}}],[\"cfg\",{\"1\":{\"10\":4,\"34\":1,\"124\":7,\"133\":2,\"139\":2,\"143\":15,\"146\":2,\"147\":6,\"148\":2,\"179\":2,\"196\":3,\"226\":3,\"227\":1}}],[\"cffi\",{\"1\":{\"9\":1}}],[\"cpl=2\",{\"1\":{\"201\":1}}],[\"cpl=1\",{\"1\":{\"201\":1}}],[\"cpl=3\",{\"1\":{\"200\":2,\"201\":1,\"210\":1,\"212\":1}}],[\"cpl=0\",{\"1\":{\"188\":1,\"201\":2,\"210\":1}}],[\"cpl\",{\"1\":{\"186\":11,\"206\":2}}],[\"cppa\",{\"1\":{\"23\":1}}],[\"cpra\",{\"1\":{\"23\":1}}],[\"cp\",{\"1\":{\"11\":6,\"134\":1,\"135\":1,\"136\":2,\"143\":1,\"148\":2,\"192\":1,\"196\":3}}],[\"cpucontrolprotectionexceptionhandler\",{\"1\":{\"192\":2}}],[\"cpucoprocessorsegmentoverrunhandler\",{\"1\":{\"192\":2}}],[\"cpuvirtualizationexceptionhandler\",{\"1\":{\"192\":2}}],[\"cpumachinecheckhandler\",{\"1\":{\"192\":2}}],[\"cpualignmentcheckhandler\",{\"1\":{\"192\":2}}],[\"cpux87floatingpointerrorhandler\",{\"1\":{\"192\":2}}],[\"cpupagefaulthandler\",{\"1\":{\"192\":2,\"193\":4,\"205\":2}}],[\"cpugeneralprotectionfaulthandler\",{\"1\":{\"192\":2,\"205\":1,\"206\":1}}],[\"cpuinvalidtsshandler\",{\"1\":{\"192\":2}}],[\"cpuinvalidopcodehandler\",{\"1\":{\"192\":2}}],[\"cpuboundrangeexceededhandler\",{\"1\":{\"192\":2}}],[\"cpubreakpointhandler\",{\"1\":{\"192\":2}}],[\"cpuoverflowhandler\",{\"1\":{\"192\":2}}],[\"cpunmiinterrupthandler\",{\"1\":{\"192\":2}}],[\"cpudoublefaulthandler\",{\"1\":{\"192\":2,\"193\":1}}],[\"cpudevicenotavailablehandler\",{\"1\":{\"192\":2}}],[\"cpudebugerrorhandler\",{\"1\":{\"192\":2}}],[\"cpudivideerrorhandler\",{\"1\":{\"192\":5}}],[\"cpusimdfloatingpointexceptionhandler\",{\"1\":{\"192\":2}}],[\"cpustacksegmentfaulthandler\",{\"1\":{\"192\":2}}],[\"cpusegmentnotpresenthandler\",{\"1\":{\"192\":2}}],[\"cpus\",{\"1\":{\"11\":2,\"20\":1,\"25\":3,\"26\":1,\"28\":1,\"30\":2,\"33\":1,\"34\":1,\"185\":1,\"207\":1}}],[\"cpu\",{\"0\":{\"26\":1,\"27\":1,\"28\":1,\"192\":1},\"1\":{\"9\":1,\"11\":1,\"14\":1,\"16\":2,\"20\":3,\"21\":1,\"22\":1,\"24\":2,\"25\":7,\"26\":5,\"27\":1,\"28\":1,\"29\":1,\"30\":8,\"31\":1,\"33\":7,\"34\":3,\"36\":1,\"124\":7,\"130\":4,\"139\":1,\"145\":1,\"146\":1,\"173\":1,\"183\":3,\"184\":1,\"185\":4,\"186\":1,\"187\":3,\"188\":5,\"189\":3,\"190\":3,\"191\":3,\"192\":9,\"193\":6,\"194\":1,\"195\":1,\"196\":1,\"200\":3,\"201\":7,\"203\":1,\"205\":4,\"206\":2,\"207\":1,\"208\":4,\"209\":6,\"210\":3,\"211\":1,\"212\":1,\"213\":1,\"215\":2,\"238\":2,\"239\":1,\"240\":4,\"243\":2,\"246\":1,\"247\":3,\"249\":1}}],[\"cps\",{\"1\":{\"5\":1}}],[\"cs64\",{\"1\":{\"188\":1,\"200\":1,\"210\":2,\"212\":1}}],[\"cstring\",{\"1\":{\"140\":1,\"141\":1}}],[\"csize\",{\"1\":{\"124\":4,\"127\":3,\"131\":4,\"140\":3,\"141\":3}}],[\"csm\",{\"1\":{\"34\":3}}],[\"csma\",{\"1\":{\"21\":1}}],[\"cs\",{\"1\":{\"30\":1,\"186\":1,\"187\":3,\"188\":5,\"191\":1,\"194\":2,\"199\":3,\"200\":3,\"203\":1,\"205\":1,\"209\":4,\"210\":4,\"212\":2,\"220\":1}}],[\"csnet\",{\"1\":{\"21\":1}}],[\"csu\",{\"1\":{\"21\":7}}],[\"csv\",{\"1\":{\"14\":1,\"15\":2}}],[\"cse\",{\"1\":{\"10\":2}}],[\"css\",{\"1\":{\"7\":3,\"13\":2,\"32\":1,\"36\":1}}],[\"csrf\",{\"1\":{\"22\":3}}],[\"csr\",{\"1\":{\"7\":1,\"22\":1}}],[\"csp\",{\"1\":{\"5\":2,\"22\":2}}],[\"cybersecurity\",{\"1\":{\"36\":1}}],[\"cynical\",{\"1\":{\"35\":1}}],[\"cylinder\",{\"1\":{\"31\":3}}],[\"cyclonedx\",{\"1\":{\"22\":1}}],[\"cyclades\",{\"1\":{\"21\":3}}],[\"cyclic\",{\"1\":{\"21\":1}}],[\"cycles\",{\"1\":{\"9\":2,\"33\":1}}],[\"cycle\",{\"1\":{\"6\":1,\"9\":1,\"20\":1,\"121\":1}}],[\"cypress\",{\"1\":{\"6\":1}}],[\"c++17\",{\"1\":{\"10\":1}}],[\"c++\",{\"1\":{\"6\":1,\"7\":1,\"9\":4,\"10\":3,\"25\":2,\"36\":1,\"115\":1}}],[\"c\",{\"0\":{\"126\":1,\"131\":1,\"146\":1},\"1\":{\"6\":1,\"7\":1,\"8\":1,\"9\":8,\"10\":7,\"11\":1,\"16\":1,\"17\":2,\"25\":1,\"32\":1,\"36\":4,\"72\":1,\"86\":1,\"98\":1,\"102\":4,\"106\":1,\"115\":1,\"122\":1,\"123\":5,\"124\":38,\"125\":1,\"127\":1,\"131\":1,\"133\":1,\"136\":1,\"143\":2,\"146\":1,\"147\":13,\"148\":4,\"153\":1,\"164\":2,\"179\":6,\"185\":1,\"187\":1,\"191\":1,\"196\":5,\"209\":2,\"210\":1,\"225\":2,\"227\":1,\"228\":11,\"234\":1}}],[\"circa\",{\"1\":{\"135\":2}}],[\"circuits\",{\"1\":{\"21\":3,\"30\":1,\"33\":1}}],[\"circuit\",{\"1\":{\"21\":5,\"25\":1,\"26\":1,\"30\":1,\"33\":2}}],[\"circumvent\",{\"1\":{\"15\":1}}],[\"cint\",{\"1\":{\"128\":2,\"130\":1,\"131\":3}}],[\"cited\",{\"1\":{\"36\":1}}],[\"civil\",{\"1\":{\"36\":1}}],[\"cisc\",{\"1\":{\"25\":1}}],[\"cisco\",{\"1\":{\"21\":1}}],[\"cipher\",{\"1\":{\"22\":1}}],[\"cigale\",{\"1\":{\"21\":1}}],[\"cidr\",{\"1\":{\"21\":1}}],[\"cics\",{\"1\":{\"11\":2,\"17\":3}}],[\"cil\",{\"1\":{\"10\":2}}],[\"ci\",{\"1\":{\"6\":7,\"22\":1}}],[\"cdata\",{\"1\":{\"44\":1}}],[\"cdn\",{\"1\":{\"24\":1}}],[\"cdc\",{\"1\":{\"17\":1}}],[\"cdf\",{\"1\":{\"15\":1}}],[\"cdecl\",{\"1\":{\"138\":2,\"151\":1,\"153\":1,\"154\":2,\"156\":1,\"157\":1,\"158\":1,\"159\":2,\"160\":1,\"161\":1,\"163\":1,\"190\":1,\"191\":1,\"192\":2,\"193\":1,\"206\":1,\"213\":2,\"214\":1,\"215\":1,\"227\":2,\"241\":1,\"242\":1,\"249\":1}}],[\"cde\",{\"1\":{\"11\":2}}],[\"cd\",{\"1\":{\"6\":2,\"21\":1,\"25\":2,\"121\":1}}],[\"cds\",{\"1\":{\"4\":1}}],[\"ch\",{\"1\":{\"144\":2}}],[\"chs\",{\"1\":{\"31\":3}}],[\"chipset\",{\"1\":{\"33\":1}}],[\"chipsets\",{\"1\":{\"29\":2,\"135\":2}}],[\"chips\",{\"1\":{\"25\":1,\"29\":1,\"33\":1}}],[\"chip\",{\"1\":{\"25\":1,\"30\":5,\"33\":3}}],[\"children\",{\"1\":{\"79\":1,\"93\":1}}],[\"child\",{\"1\":{\"5\":2,\"74\":1,\"75\":3,\"177\":1}}],[\"chrony\",{\"1\":{\"21\":1}}],[\"chunk\",{\"1\":{\"222\":1}}],[\"chunks\",{\"1\":{\"159\":2}}],[\"chunking\",{\"1\":{\"15\":1}}],[\"churn\",{\"1\":{\"6\":1}}],[\"chmod\",{\"1\":{\"134\":1}}],[\"chms\",{\"1\":{\"13\":1}}],[\"chm\",{\"1\":{\"13\":2}}],[\"chose\",{\"1\":{\"115\":1,\"187\":1}}],[\"choice\",{\"1\":{\"10\":2,\"35\":1,\"40\":1,\"191\":1}}],[\"choosenim\",{\"1\":{\"118\":3,\"124\":18,\"147\":1,\"228\":2}}],[\"chooses\",{\"1\":{\"17\":1}}],[\"choose\",{\"1\":{\"6\":1,\"41\":1,\"84\":1}}],[\"cheri\",{\"1\":{\"25\":2}}],[\"checked\",{\"1\":{\"186\":1,\"190\":1}}],[\"checkevent\",{\"1\":{\"151\":1}}],[\"checking\",{\"1\":{\"45\":1,\"186\":2,\"249\":1}}],[\"checkouts\",{\"1\":{\"35\":1}}],[\"check\",{\"1\":{\"21\":2,\"24\":1,\"29\":1,\"34\":1,\"66\":1,\"83\":1,\"104\":1,\"106\":2,\"135\":1,\"168\":2,\"169\":1,\"177\":1,\"188\":1,\"192\":4,\"196\":1,\"200\":1,\"210\":4,\"214\":2}}],[\"checkstatus\",{\"1\":{\"151\":2,\"152\":1,\"153\":1,\"154\":2,\"156\":2,\"157\":1,\"158\":2,\"159\":2,\"160\":2,\"162\":1,\"197\":8}}],[\"checksums\",{\"1\":{\"11\":1,\"22\":1}}],[\"checks\",{\"1\":{\"6\":2,\"9\":1,\"10\":1,\"22\":3,\"24\":1,\"34\":1,\"74\":1,\"106\":1,\"110\":1,\"141\":1,\"185\":1,\"186\":2,\"192\":1,\"230\":1}}],[\"cheek\",{\"1\":{\"5\":1,\"35\":2}}],[\"challenge\",{\"1\":{\"96\":1,\"110\":1}}],[\"challenging\",{\"1\":{\"85\":1,\"116\":1,\"171\":1}}],[\"chair\",{\"1\":{\"35\":1}}],[\"chained\",{\"1\":{\"30\":1}}],[\"chains\",{\"1\":{\"22\":1}}],[\"chainload\",{\"1\":{\"21\":1}}],[\"chaining\",{\"1\":{\"21\":1,\"32\":1}}],[\"chain\",{\"1\":{\"16\":1,\"18\":1,\"22\":1,\"24\":2}}],[\"chassis\",{\"1\":{\"30\":1}}],[\"chapter\",{\"1\":{\"171\":1,\"243\":1}}],[\"chap\",{\"1\":{\"21\":1}}],[\"charge\",{\"1\":{\"141\":1}}],[\"char\",{\"1\":{\"53\":1,\"124\":4,\"227\":1,\"228\":2,\"235\":2}}],[\"charsequence\",{\"1\":{\"51\":2}}],[\"charles\",{\"1\":{\"17\":1}}],[\"characters\",{\"1\":{\"14\":1,\"35\":1,\"53\":3,\"57\":1,\"94\":1,\"98\":1,\"144\":1}}],[\"character\",{\"1\":{\"6\":1,\"8\":1,\"9\":2,\"11\":1,\"13\":1,\"14\":7,\"18\":1,\"21\":1,\"32\":1,\"53\":6,\"62\":1,\"95\":3,\"96\":3,\"97\":1,\"99\":1,\"101\":1,\"103\":1,\"104\":2,\"106\":1,\"107\":1,\"109\":1,\"141\":1}}],[\"chatbot\",{\"1\":{\"18\":1}}],[\"chat\",{\"1\":{\"11\":1,\"18\":1,\"21\":4,\"35\":1}}],[\"channel\",{\"1\":{\"17\":1,\"21\":3,\"24\":1,\"30\":2,\"31\":1,\"32\":2,\"33\":1,\"252\":1}}],[\"channels\",{\"1\":{\"5\":3,\"21\":6}}],[\"changing\",{\"1\":{\"17\":1,\"133\":2,\"174\":1,\"181\":1}}],[\"changed\",{\"1\":{\"35\":1,\"84\":1,\"160\":1}}],[\"change\",{\"1\":{\"5\":1,\"6\":2,\"10\":1,\"17\":1,\"30\":1,\"35\":2,\"55\":1,\"66\":1,\"71\":1,\"76\":1,\"88\":1,\"102\":1,\"108\":1,\"109\":1,\"133\":1,\"135\":1,\"160\":2,\"163\":3,\"164\":1,\"178\":1,\"179\":1,\"181\":1,\"186\":1,\"187\":1,\"195\":1,\"198\":1,\"201\":1,\"223\":2,\"224\":1,\"230\":1,\"239\":2}}],[\"changes\",{\"0\":{\"99\":1,\"100\":1},\"1\":{\"4\":1,\"6\":2,\"17\":1,\"21\":1,\"34\":1,\"35\":1,\"43\":1,\"85\":1,\"88\":1,\"104\":1,\"110\":1,\"159\":1,\"160\":1,\"198\":1,\"239\":2}}],[\"crb9btwm1xdf09bhlg9cbbypa\",{\"1\":{\"228\":1}}],[\"craft\",{\"1\":{\"195\":1}}],[\"crash\",{\"1\":{\"6\":1,\"17\":1,\"63\":1,\"183\":1}}],[\"cr2\",{\"1\":{\"193\":4}}],[\"cr2=0000000000000000\",{\"1\":{\"188\":1}}],[\"cr4=00000668\",{\"1\":{\"188\":1}}],[\"cr0=80010033\",{\"1\":{\"188\":1}}],[\"cr3=000000000625b000\",{\"1\":{\"188\":1}}],[\"cr3\",{\"1\":{\"174\":2,\"177\":5,\"181\":3,\"195\":1}}],[\"crucial\",{\"1\":{\"80\":1}}],[\"crud\",{\"1\":{\"9\":2}}],[\"creds\",{\"1\":{\"35\":1}}],[\"creator\",{\"1\":{\"35\":1}}],[\"createtask\",{\"1\":{\"220\":2,\"222\":2,\"223\":1,\"230\":3,\"231\":4,\"243\":2}}],[\"createtime\",{\"1\":{\"153\":1}}],[\"createhandler\",{\"1\":{\"192\":22,\"193\":1}}],[\"createpagetable\",{\"1\":{\"181\":2}}],[\"createparser\",{\"1\":{\"58\":1,\"64\":1}}],[\"createbootinfo\",{\"1\":{\"180\":2,\"181\":1,\"197\":3}}],[\"createvirtualmemorymap\",{\"1\":{\"180\":2,\"181\":1}}],[\"createeventex\",{\"1\":{\"151\":1}}],[\"createevent\",{\"1\":{\"151\":1}}],[\"createelement\",{\"1\":{\"57\":1,\"59\":1,\"64\":2,\"69\":2}}],[\"createidentref\",{\"1\":{\"82\":5}}],[\"createidentdecl\",{\"1\":{\"82\":5}}],[\"createfilefromtext\",{\"1\":{\"82\":1}}],[\"createfile\",{\"1\":{\"59\":1,\"64\":1,\"82\":4}}],[\"createlexer\",{\"1\":{\"58\":1,\"64\":1}}],[\"createstack\",{\"1\":{\"220\":4}}],[\"creates\",{\"1\":{\"58\":1,\"59\":1,\"69\":1,\"78\":1,\"82\":4,\"169\":1}}],[\"created\",{\"1\":{\"21\":1,\"47\":1,\"58\":1,\"59\":1,\"70\":1,\"87\":1,\"123\":1,\"177\":1,\"200\":1}}],[\"createuser\",{\"1\":{\"9\":1}}],[\"create\",{\"1\":{\"9\":2,\"11\":1,\"16\":4,\"17\":2,\"21\":1,\"41\":1,\"43\":1,\"45\":1,\"47\":1,\"49\":1,\"52\":1,\"55\":1,\"58\":1,\"63\":3,\"64\":4,\"65\":1,\"69\":1,\"70\":2,\"72\":1,\"74\":2,\"75\":1,\"78\":2,\"82\":10,\"83\":1,\"89\":1,\"95\":1,\"121\":3,\"123\":1,\"127\":1,\"128\":1,\"130\":1,\"135\":2,\"136\":1,\"139\":3,\"140\":1,\"143\":3,\"144\":1,\"147\":1,\"162\":1,\"167\":1,\"169\":1,\"174\":1,\"177\":1,\"180\":1,\"181\":2,\"187\":1,\"190\":3,\"191\":1,\"194\":2,\"195\":3,\"196\":1,\"198\":1,\"199\":1,\"201\":1,\"202\":2,\"204\":2,\"209\":2,\"211\":1,\"212\":2,\"213\":1,\"217\":1,\"219\":1,\"220\":3,\"222\":1,\"223\":1,\"230\":1,\"240\":1,\"243\":1,\"245\":2,\"249\":3}}],[\"creating\",{\"0\":{\"121\":1,\"202\":1,\"220\":1},\"1\":{\"5\":1,\"7\":2,\"9\":1,\"17\":1,\"53\":1,\"57\":1,\"58\":2,\"64\":1,\"66\":1,\"72\":1,\"82\":2,\"112\":1,\"121\":1,\"168\":1,\"176\":1,\"181\":1,\"187\":1,\"188\":1,\"196\":1,\"199\":1,\"200\":1,\"204\":1,\"205\":2,\"211\":1,\"217\":1,\"220\":3,\"222\":2,\"223\":4,\"227\":2,\"230\":3,\"231\":2,\"239\":1,\"243\":2,\"248\":1}}],[\"crystals\",{\"1\":{\"32\":1}}],[\"crystal\",{\"1\":{\"32\":1}}],[\"cryptosystem\",{\"1\":{\"22\":1}}],[\"crypto\",{\"1\":{\"22\":1}}],[\"cryptography\",{\"1\":{\"22\":1}}],[\"cryptographically\",{\"1\":{\"22\":1}}],[\"cryptographic\",{\"1\":{\"22\":5,\"24\":1}}],[\"crimms\",{\"1\":{\"29\":2}}],[\"critical\",{\"1\":{\"6\":1,\"17\":1,\"26\":1,\"36\":1}}],[\"crm\",{\"1\":{\"24\":1}}],[\"crc32\",{\"1\":{\"138\":1}}],[\"crc\",{\"1\":{\"21\":2,\"151\":1}}],[\"crown\",{\"1\":{\"47\":1}}],[\"crow\",{\"1\":{\"17\":1}}],[\"cross\",{\"0\":{\"124\":1},\"1\":{\"4\":1,\"9\":2,\"10\":4,\"13\":2,\"22\":4,\"25\":2,\"117\":1,\"119\":1,\"122\":2,\"123\":2,\"124\":2}}],[\"crdt\",{\"1\":{\"17\":1}}],[\"crt\",{\"1\":{\"14\":1,\"32\":2,\"123\":1}}],[\"cr\",{\"1\":{\"14\":2,\"21\":3,\"141\":1}}],[\"crlf\",{\"1\":{\"14\":4,\"141\":1}}],[\"cluttering\",{\"1\":{\"141\":1}}],[\"cluster\",{\"1\":{\"21\":1,\"24\":1,\"35\":1}}],[\"clusters\",{\"1\":{\"11\":1,\"21\":1,\"24\":1}}],[\"clustering\",{\"1\":{\"11\":1}}],[\"cleaner\",{\"1\":{\"93\":1,\"246\":1}}],[\"cleanup\",{\"0\":{\"93\":1},\"1\":{\"242\":1}}],[\"clean\",{\"1\":{\"21\":1,\"90\":1,\"93\":1,\"196\":1}}],[\"cleared\",{\"1\":{\"210\":1}}],[\"clearing\",{\"1\":{\"139\":1}}],[\"clearscreen\",{\"1\":{\"138\":2,\"139\":3,\"140\":1}}],[\"clears\",{\"1\":{\"130\":1}}],[\"clearpath\",{\"1\":{\"11\":1}}],[\"clear\",{\"1\":{\"6\":1,\"13\":1,\"33\":1,\"35\":1,\"48\":1,\"75\":1,\"94\":1,\"138\":1,\"185\":4,\"209\":1}}],[\"clnp\",{\"1\":{\"21\":3}}],[\"cls\",{\"1\":{\"20\":2}}],[\"clobbered\",{\"1\":{\"213\":1}}],[\"clobbers\",{\"1\":{\"188\":1,\"212\":1}}],[\"closing\",{\"1\":{\"45\":1,\"96\":2,\"108\":1,\"158\":3,\"197\":2}}],[\"closeprotocol\",{\"1\":{\"151\":1}}],[\"closeevent\",{\"1\":{\"151\":1}}],[\"closer\",{\"1\":{\"86\":1}}],[\"closest\",{\"1\":{\"77\":2}}],[\"close\",{\"0\":{\"158\":1},\"1\":{\"34\":1,\"45\":2,\"86\":3,\"89\":2,\"96\":1,\"151\":1,\"153\":1,\"158\":7,\"197\":4}}],[\"closed\",{\"1\":{\"5\":2,\"40\":1,\"45\":1,\"96\":2}}],[\"cloud\",{\"1\":{\"22\":3,\"24\":2,\"36\":2}}],[\"clocking\",{\"1\":{\"21\":2}}],[\"clocks\",{\"1\":{\"21\":1,\"33\":1}}],[\"clock\",{\"1\":{\"11\":1,\"20\":3,\"29\":2,\"33\":4}}],[\"clause\",{\"1\":{\"37\":2}}],[\"claims\",{\"1\":{\"22\":1}}],[\"clang\",{\"1\":{\"10\":3,\"22\":1,\"117\":1,\"119\":4,\"123\":7,\"124\":8,\"147\":1,\"196\":1}}],[\"classless\",{\"1\":{\"21\":1}}],[\"classify\",{\"1\":{\"21\":1,\"104\":1}}],[\"classification\",{\"1\":{\"18\":3}}],[\"classical\",{\"1\":{\"10\":1}}],[\"classic\",{\"1\":{\"4\":1,\"5\":2,\"7\":1,\"8\":2,\"9\":1,\"11\":2,\"14\":2,\"15\":1,\"16\":1,\"17\":3,\"21\":1,\"24\":1,\"25\":2,\"33\":1,\"35\":1}}],[\"classpath\",{\"1\":{\"16\":1}}],[\"classes\",{\"1\":{\"5\":1,\"9\":1,\"12\":1,\"15\":2,\"16\":1,\"30\":1,\"32\":1,\"46\":1,\"52\":2,\"58\":3,\"59\":1,\"67\":1,\"68\":1,\"69\":3,\"70\":1,\"71\":3,\"73\":1,\"74\":1,\"75\":1,\"77\":1,\"83\":1}}],[\"class\",{\"1\":{\"5\":3,\"6\":1,\"9\":2,\"10\":1,\"15\":1,\"16\":1,\"18\":1,\"29\":1,\"30\":2,\"32\":2,\"33\":1,\"46\":2,\"47\":3,\"48\":2,\"51\":3,\"52\":12,\"53\":5,\"54\":2,\"58\":3,\"59\":2,\"61\":8,\"63\":3,\"64\":4,\"66\":1,\"68\":1,\"69\":5,\"70\":5,\"72\":3,\"74\":19,\"75\":6,\"77\":5,\"78\":4,\"79\":12,\"82\":8,\"83\":8,\"87\":2,\"89\":1,\"91\":1,\"95\":1,\"96\":1,\"106\":4,\"110\":2,\"147\":2,\"234\":1,\"235\":2}}],[\"clr\",{\"1\":{\"9\":3,\"10\":1}}],[\"clicking\",{\"1\":{\"69\":1}}],[\"click\",{\"1\":{\"54\":2,\"69\":2,\"71\":1,\"75\":1,\"82\":1}}],[\"clip\",{\"1\":{\"18\":1}}],[\"cli\",{\"1\":{\"6\":1,\"9\":3,\"36\":1,\"130\":1,\"131\":1,\"209\":1,\"210\":2,\"215\":1}}],[\"clis\",{\"1\":{\"6\":1,\"9\":1}}],[\"client\",{\"1\":{\"4\":2,\"5\":1,\"6\":1,\"7\":7,\"9\":1,\"17\":1,\"18\":1,\"21\":5,\"22\":2,\"24\":1,\"35\":1}}],[\"clients\",{\"1\":{\"4\":1,\"7\":1,\"18\":1,\"21\":8}}],[\"cameras\",{\"1\":{\"21\":1,\"31\":1}}],[\"campuses\",{\"1\":{\"21\":1}}],[\"campus\",{\"1\":{\"21\":2}}],[\"cambridge\",{\"1\":{\"11\":1}}],[\"caused\",{\"1\":{\"124\":1,\"192\":2,\"193\":3,\"201\":2}}],[\"causes\",{\"1\":{\"34\":1,\"130\":1,\"201\":2,\"240\":1}}],[\"cause\",{\"1\":{\"19\":2,\"35\":1,\"96\":1,\"141\":1,\"146\":1,\"148\":1,\"195\":1,\"205\":3,\"249\":1}}],[\"causing\",{\"1\":{\"6\":1,\"193\":1,\"249\":1}}],[\"ca\",{\"1\":{\"17\":1,\"22\":2}}],[\"careful\",{\"1\":{\"191\":1}}],[\"caret\",{\"1\":{\"109\":3}}],[\"care\",{\"1\":{\"35\":1,\"71\":1,\"79\":1,\"89\":1,\"110\":1,\"183\":1,\"246\":1}}],[\"cartridges\",{\"1\":{\"31\":2}}],[\"cartridge\",{\"1\":{\"31\":1}}],[\"carry\",{\"1\":{\"21\":2,\"25\":1}}],[\"carrying\",{\"1\":{\"21\":3}}],[\"carrier\",{\"1\":{\"21\":4}}],[\"carriers\",{\"1\":{\"21\":3}}],[\"carries\",{\"1\":{\"21\":2}}],[\"carried\",{\"1\":{\"21\":1}}],[\"carriage\",{\"1\":{\"14\":2}}],[\"cargo\",{\"1\":{\"13\":1}}],[\"cardinality\",{\"1\":{\"17\":1}}],[\"cardinalities\",{\"1\":{\"17\":1}}],[\"card\",{\"1\":{\"11\":2,\"30\":2,\"31\":1,\"32\":1,\"135\":1}}],[\"cards\",{\"1\":{\"9\":1,\"21\":1,\"30\":9,\"31\":1,\"32\":1}}],[\"cabling\",{\"1\":{\"33\":1}}],[\"cable\",{\"1\":{\"21\":2}}],[\"cables\",{\"1\":{\"21\":1,\"30\":1,\"31\":2}}],[\"cabinet\",{\"1\":{\"13\":1}}],[\"cab\",{\"1\":{\"13\":2}}],[\"catchableerror\",{\"1\":{\"235\":2,\"237\":1}}],[\"catch\",{\"1\":{\"141\":1,\"191\":1}}],[\"cathode\",{\"1\":{\"32\":1}}],[\"category\",{\"1\":{\"23\":1}}],[\"catalyzing\",{\"1\":{\"21\":1}}],[\"catalogs\",{\"1\":{\"15\":1}}],[\"cataloging\",{\"1\":{\"15\":1}}],[\"catastrophic\",{\"1\":{\"19\":1}}],[\"cat\",{\"1\":{\"11\":1,\"135\":1}}],[\"cast\",{\"1\":{\"124\":3,\"151\":1,\"152\":1,\"156\":2,\"157\":1,\"159\":6,\"160\":1,\"161\":2,\"162\":4,\"163\":1,\"168\":5,\"169\":2,\"177\":11,\"180\":3,\"181\":6,\"182\":3,\"183\":2,\"187\":1,\"190\":1,\"193\":1,\"197\":5,\"198\":1,\"199\":8,\"202\":12,\"205\":2,\"206\":1,\"209\":1,\"213\":1,\"214\":1,\"220\":9,\"227\":2,\"230\":9,\"235\":3,\"237\":9,\"248\":3,\"249\":1}}],[\"cast<base\",{\"1\":{\"10\":1}}],[\"casual\",{\"1\":{\"35\":1}}],[\"cassandra\",{\"1\":{\"17\":2}}],[\"cascaded\",{\"1\":{\"247\":1}}],[\"cascade\",{\"1\":{\"17\":1,\"247\":1}}],[\"cascading\",{\"1\":{\"7\":1}}],[\"cas\",{\"1\":{\"9\":2,\"22\":1}}],[\"cases\",{\"1\":{\"11\":1,\"16\":1,\"33\":1,\"52\":1,\"77\":1,\"79\":1,\"85\":1,\"87\":2,\"99\":1,\"104\":2,\"110\":2,\"171\":1,\"177\":1,\"225\":1,\"237\":1,\"238\":1}}],[\"case\",{\"1\":{\"9\":2,\"35\":1,\"46\":1,\"50\":1,\"52\":1,\"58\":1,\"59\":1,\"64\":1,\"66\":1,\"68\":1,\"70\":1,\"71\":1,\"74\":1,\"75\":1,\"77\":1,\"78\":3,\"83\":1,\"87\":4,\"88\":2,\"89\":1,\"96\":1,\"97\":1,\"102\":2,\"104\":1,\"106\":1,\"107\":1,\"110\":1,\"123\":1,\"124\":3,\"135\":2,\"156\":1,\"160\":2,\"185\":1,\"206\":1,\"214\":1,\"223\":1,\"225\":1,\"230\":1,\"235\":1,\"237\":1,\"240\":1,\"249\":2}}],[\"capacitors\",{\"1\":{\"29\":1}}],[\"capacity\",{\"1\":{\"21\":1,\"31\":3,\"227\":1}}],[\"capability\",{\"1\":{\"25\":1,\"116\":1,\"253\":1}}],[\"capabilities\",{\"1\":{\"9\":1,\"21\":1,\"25\":1,\"32\":1,\"59\":1,\"116\":2,\"231\":1}}],[\"capable\",{\"1\":{\"7\":1,\"21\":1}}],[\"captioning\",{\"1\":{\"18\":1}}],[\"capturing\",{\"1\":{\"17\":1}}],[\"captures\",{\"1\":{\"17\":1}}],[\"capture\",{\"1\":{\"17\":1,\"21\":1,\"30\":1,\"97\":1,\"110\":1}}],[\"cap\",{\"1\":{\"6\":1,\"17\":1,\"227\":1,\"228\":1}}],[\"caching\",{\"1\":{\"5\":1,\"35\":1}}],[\"cachedisable\",{\"1\":{\"175\":4}}],[\"cached\",{\"1\":{\"21\":1}}],[\"caches\",{\"1\":{\"9\":1,\"17\":1,\"26\":1,\"29\":1}}],[\"cache\",{\"1\":{\"5\":1,\"9\":1,\"21\":2,\"24\":2,\"26\":2,\"30\":1,\"35\":1,\"124\":22,\"147\":2}}],[\"calendar\",{\"1\":{\"35\":1}}],[\"calendaring\",{\"1\":{\"4\":1}}],[\"calibration\",{\"1\":{\"29\":1}}],[\"california\",{\"1\":{\"23\":2}}],[\"calculatecrc32\",{\"1\":{\"151\":1}}],[\"calculate\",{\"1\":{\"85\":1,\"168\":1,\"180\":1,\"237\":1}}],[\"calculators\",{\"1\":{\"9\":1}}],[\"calculus\",{\"1\":{\"8\":1}}],[\"callq\",{\"1\":{\"200\":1}}],[\"calldepthlimitreached\",{\"1\":{\"124\":1}}],[\"calloc\",{\"1\":{\"124\":1}}],[\"called\",{\"1\":{\"44\":1,\"51\":1,\"52\":3,\"53\":1,\"63\":1,\"72\":1,\"77\":4,\"78\":5,\"89\":2,\"103\":4,\"106\":2,\"135\":1,\"140\":1,\"141\":1,\"146\":2,\"147\":2,\"162\":1,\"179\":1,\"185\":2,\"187\":1,\"189\":1,\"190\":1,\"191\":3,\"197\":1,\"200\":1,\"201\":2,\"206\":1,\"208\":1,\"212\":1,\"215\":2,\"225\":1,\"228\":1,\"238\":1,\"239\":2,\"241\":1,\"245\":2}}],[\"caller\",{\"1\":{\"10\":4,\"51\":1,\"177\":2,\"237\":2}}],[\"callback\",{\"1\":{\"15\":2,\"177\":1}}],[\"call\",{\"0\":{\"208\":1,\"212\":1,\"213\":1,\"215\":1,\"241\":1},\"1\":{\"9\":4,\"10\":5,\"11\":1,\"22\":1,\"57\":1,\"63\":1,\"78\":1,\"79\":1,\"87\":1,\"89\":1,\"92\":1,\"96\":1,\"102\":1,\"103\":1,\"104\":1,\"106\":1,\"110\":1,\"116\":1,\"124\":1,\"135\":1,\"139\":1,\"140\":1,\"145\":1,\"146\":2,\"150\":2,\"151\":1,\"154\":1,\"159\":2,\"160\":6,\"161\":2,\"176\":1,\"177\":1,\"180\":1,\"187\":1,\"188\":2,\"192\":1,\"193\":2,\"194\":3,\"196\":1,\"201\":1,\"205\":3,\"206\":2,\"208\":5,\"209\":1,\"210\":5,\"211\":3,\"212\":5,\"213\":8,\"214\":3,\"215\":10,\"217\":1,\"222\":2,\"223\":2,\"230\":1,\"238\":2,\"241\":5,\"242\":2,\"244\":1,\"245\":4,\"249\":2,\"252\":1}}],[\"calling\",{\"0\":{\"164\":1},\"1\":{\"9\":1,\"10\":1,\"11\":1,\"22\":1,\"58\":1,\"63\":2,\"82\":1,\"87\":1,\"123\":1,\"124\":1,\"140\":1,\"159\":1,\"160\":1,\"163\":1,\"164\":4,\"208\":1,\"211\":1,\"212\":1,\"220\":1,\"240\":1}}],[\"callable\",{\"1\":{\"7\":1,\"101\":2}}],[\"calls\",{\"0\":{\"207\":1,\"210\":1},\"1\":{\"5\":2,\"9\":1,\"11\":2,\"22\":1,\"34\":3,\"51\":1,\"58\":1,\"77\":1,\"101\":1,\"139\":1,\"146\":1,\"187\":1,\"194\":2,\"195\":2,\"197\":1,\"200\":1,\"206\":1,\"207\":2,\"208\":3,\"209\":3,\"210\":1,\"213\":1,\"214\":1,\"222\":1,\"223\":1,\"241\":1,\"242\":1,\"243\":4,\"244\":2,\"245\":1,\"246\":6,\"252\":1}}],[\"cangoinside\",{\"1\":{\"79\":2}}],[\"candid\",{\"1\":{\"35\":1}}],[\"candidate\",{\"1\":{\"6\":1}}],[\"cannot\",{\"1\":{\"26\":1,\"29\":1,\"57\":1,\"89\":1,\"102\":1,\"104\":1,\"123\":1,\"144\":1,\"160\":1,\"161\":1,\"187\":1,\"196\":1,\"201\":1,\"225\":3,\"226\":1,\"227\":1,\"229\":2}}],[\"canonical\",{\"1\":{\"21\":1,\"173\":2}}],[\"can\",{\"1\":{\"1\":1,\"9\":3,\"10\":1,\"11\":1,\"13\":1,\"20\":2,\"21\":2,\"22\":1,\"23\":1,\"29\":2,\"35\":4,\"43\":2,\"45\":3,\"47\":1,\"48\":1,\"49\":1,\"51\":3,\"53\":2,\"55\":2,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"64\":1,\"65\":1,\"69\":3,\"71\":1,\"72\":7,\"75\":6,\"77\":3,\"78\":1,\"79\":2,\"80\":1,\"82\":2,\"83\":3,\"85\":4,\"87\":4,\"88\":3,\"89\":8,\"90\":1,\"92\":5,\"93\":2,\"94\":3,\"95\":3,\"96\":3,\"97\":4,\"98\":2,\"99\":1,\"100\":2,\"101\":1,\"102\":6,\"103\":1,\"104\":2,\"105\":1,\"106\":3,\"107\":1,\"108\":1,\"110\":5,\"116\":2,\"118\":2,\"120\":1,\"121\":1,\"122\":1,\"123\":3,\"124\":7,\"127\":1,\"129\":1,\"130\":1,\"131\":2,\"132\":1,\"133\":1,\"134\":3,\"135\":7,\"136\":1,\"139\":1,\"140\":1,\"141\":2,\"143\":2,\"144\":2,\"145\":1,\"146\":2,\"147\":10,\"148\":1,\"151\":2,\"152\":1,\"154\":1,\"158\":1,\"159\":1,\"160\":2,\"162\":2,\"164\":1,\"166\":2,\"170\":2,\"171\":1,\"172\":1,\"174\":2,\"177\":2,\"178\":1,\"179\":2,\"181\":1,\"183\":3,\"185\":5,\"186\":2,\"187\":5,\"188\":1,\"190\":1,\"191\":4,\"192\":5,\"193\":4,\"194\":4,\"195\":2,\"199\":1,\"200\":3,\"201\":2,\"202\":1,\"206\":1,\"207\":1,\"209\":1,\"210\":4,\"211\":1,\"212\":1,\"213\":1,\"214\":3,\"215\":1,\"217\":1,\"218\":2,\"221\":1,\"222\":1,\"223\":6,\"225\":3,\"226\":1,\"227\":2,\"228\":3,\"229\":5,\"230\":3,\"231\":2,\"232\":1,\"233\":2,\"234\":1,\"235\":1,\"237\":3,\"238\":2,\"239\":2,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"246\":2,\"248\":6,\"249\":2,\"250\":1}}],[\"cumbersome\",{\"1\":{\"35\":1}}],[\"cumulative\",{\"1\":{\"20\":1}}],[\"cuda\",{\"1\":{\"25\":2,\"32\":1}}],[\"cutover\",{\"1\":{\"21\":2}}],[\"cuts\",{\"1\":{\"21\":1}}],[\"cubes\",{\"1\":{\"17\":1}}],[\"curl\",{\"1\":{\"118\":1}}],[\"curly\",{\"1\":{\"85\":1}}],[\"cursor\",{\"1\":{\"75\":3,\"82\":1,\"84\":1}}],[\"curr\",{\"1\":{\"170\":13,\"171\":23}}],[\"currindent\",{\"1\":{\"87\":6,\"88\":2,\"89\":1}}],[\"curricula\",{\"1\":{\"36\":1}}],[\"currenttask\",{\"1\":{\"223\":4,\"239\":9,\"240\":4,\"242\":1}}],[\"currentoffset\",{\"1\":{\"106\":5}}],[\"currently\",{\"1\":{\"105\":1,\"113\":1,\"162\":1,\"176\":1,\"178\":1,\"181\":1,\"186\":1,\"187\":1,\"216\":1,\"218\":2,\"224\":1,\"238\":1,\"239\":1,\"240\":1,\"252\":1}}],[\"current\",{\"0\":{\"223\":1},\"1\":{\"4\":1,\"10\":1,\"30\":1,\"35\":3,\"51\":1,\"53\":1,\"65\":1,\"76\":1,\"77\":1,\"79\":4,\"87\":1,\"89\":1,\"106\":1,\"110\":2,\"147\":2,\"169\":1,\"177\":1,\"185\":1,\"186\":1,\"210\":1,\"222\":2,\"223\":2,\"225\":1,\"234\":1,\"235\":4,\"239\":8,\"240\":1,\"242\":1,\"248\":1,\"249\":2}}],[\"curb\",{\"1\":{\"21\":1}}],[\"curves\",{\"1\":{\"13\":1}}],[\"cui\",{\"1\":{\"9\":1}}],[\"culling\",{\"1\":{\"9\":1}}],[\"culture\",{\"0\":{\"35\":1},\"1\":{\"3\":1,\"11\":1,\"35\":1}}],[\"customnumlit\",{\"1\":{\"101\":2}}],[\"customize\",{\"1\":{\"68\":1,\"106\":1,\"143\":1,\"193\":1}}],[\"customized\",{\"1\":{\"25\":1}}],[\"customer\",{\"1\":{\"17\":2,\"21\":3,\"22\":1}}],[\"custom\",{\"0\":{\"101\":1},\"1\":{\"5\":1,\"9\":1,\"10\":2,\"11\":1,\"33\":1,\"35\":1,\"69\":1,\"77\":2,\"85\":1,\"98\":1,\"101\":8,\"106\":1,\"141\":2,\"151\":1}}],[\"cqrs\",{\"1\":{\"4\":1}}],[\"c4\",{\"1\":{\"4\":1}}],[\"coated\",{\"1\":{\"32\":1}}],[\"coaxial\",{\"1\":{\"30\":1}}],[\"coalesce\",{\"1\":{\"10\":1}}],[\"coherent\",{\"1\":{\"30\":3}}],[\"cot\",{\"1\":{\"18\":1}}],[\"costs\",{\"1\":{\"35\":1}}],[\"cost\",{\"1\":{\"16\":2,\"17\":3,\"30\":1}}],[\"cose\",{\"1\":{\"15\":1}}],[\"cookie\",{\"1\":{\"22\":1}}],[\"cookies\",{\"1\":{\"22\":1}}],[\"coordinator\",{\"1\":{\"21\":1}}],[\"coordination\",{\"1\":{\"17\":1,\"34\":1,\"36\":1}}],[\"coordinates\",{\"1\":{\"36\":3}}],[\"coordinate\",{\"1\":{\"11\":2}}],[\"coordinated\",{\"1\":{\"9\":1}}],[\"cooperative\",{\"0\":{\"238\":1},\"1\":{\"11\":1,\"231\":1,\"238\":2,\"243\":1}}],[\"couple\",{\"1\":{\"96\":1,\"104\":1,\"105\":1,\"135\":1,\"169\":1,\"177\":2,\"183\":1,\"197\":1,\"206\":1,\"237\":1,\"248\":1}}],[\"course\",{\"1\":{\"71\":1}}],[\"courseware\",{\"1\":{\"11\":1}}],[\"council\",{\"1\":{\"36\":1}}],[\"country\",{\"1\":{\"21\":1}}],[\"counts\",{\"1\":{\"17\":2}}],[\"counters\",{\"1\":{\"33\":1,\"248\":2}}],[\"counter\",{\"1\":{\"17\":1,\"21\":1}}],[\"counted\",{\"1\":{\"10\":1}}],[\"count\",{\"1\":{\"16\":1,\"17\":1,\"21\":1,\"30\":1,\"53\":1,\"127\":4,\"131\":1,\"140\":2,\"141\":2,\"248\":2}}],[\"counting\",{\"1\":{\"4\":1,\"20\":1}}],[\"couldn\",{\"1\":{\"89\":1,\"147\":1}}],[\"could\",{\"1\":{\"11\":2,\"17\":1,\"35\":1,\"40\":1,\"76\":1,\"79\":1,\"87\":2,\"88\":1,\"123\":2,\"175\":2,\"201\":1,\"234\":1}}],[\"co\",{\"1\":{\"11\":1,\"36\":1}}],[\"coffee\",{\"1\":{\"35\":1}}],[\"coff\",{\"1\":{\"11\":1,\"123\":2}}],[\"cow\",{\"1\":{\"11\":4}}],[\"coprocessor\",{\"1\":{\"192\":3}}],[\"copied\",{\"1\":{\"53\":2}}],[\"copies\",{\"1\":{\"10\":3,\"87\":1,\"162\":1,\"231\":1}}],[\"copymem\",{\"1\":{\"124\":1,\"151\":1,\"237\":1}}],[\"copyleft\",{\"1\":{\"37\":3}}],[\"copying\",{\"1\":{\"22\":1,\"32\":1,\"198\":1,\"200\":1,\"237\":1}}],[\"copy\",{\"1\":{\"10\":3,\"11\":5,\"16\":1,\"21\":1,\"23\":1,\"32\":1,\"134\":1,\"135\":1,\"148\":1,\"162\":2,\"180\":2,\"195\":3,\"196\":1,\"198\":2,\"237\":4}}],[\"cobol\",{\"1\":{\"8\":2,\"11\":1,\"17\":1}}],[\"covered\",{\"1\":{\"23\":1,\"110\":1}}],[\"covering\",{\"1\":{\"21\":1}}],[\"cover\",{\"1\":{\"6\":1,\"49\":1,\"185\":1,\"189\":1,\"190\":1,\"200\":1}}],[\"codasyl\",{\"1\":{\"17\":5}}],[\"coding\",{\"1\":{\"6\":1,\"13\":1,\"16\":1}}],[\"code=0\",{\"1\":{\"215\":1,\"222\":1,\"223\":1,\"227\":3,\"230\":2,\"231\":1,\"243\":5,\"246\":3}}],[\"code=\",{\"1\":{\"215\":1,\"242\":1}}],[\"codereordering\",{\"1\":{\"177\":2}}],[\"codecs\",{\"1\":{\"36\":1}}],[\"coded\",{\"1\":{\"14\":2}}],[\"codesegmentdescriptor\",{\"1\":{\"187\":5,\"202\":2}}],[\"codes\",{\"1\":{\"14\":2,\"22\":3,\"34\":1,\"192\":1}}],[\"codegendecl\",{\"1\":{\"191\":2,\"192\":2,\"193\":1,\"206\":1,\"249\":1}}],[\"codegen\",{\"1\":{\"10\":1}}],[\"code\",{\"0\":{\"88\":1,\"224\":1},\"1\":{\"1\":1,\"4\":2,\"5\":4,\"6\":7,\"7\":1,\"8\":2,\"9\":5,\"10\":7,\"11\":4,\"12\":3,\"14\":6,\"15\":1,\"18\":1,\"20\":1,\"21\":2,\"22\":13,\"24\":4,\"26\":1,\"29\":2,\"31\":1,\"34\":2,\"35\":2,\"40\":1,\"41\":2,\"43\":1,\"44\":1,\"45\":1,\"50\":1,\"51\":1,\"53\":3,\"57\":4,\"59\":3,\"69\":2,\"71\":2,\"72\":1,\"76\":1,\"80\":1,\"85\":3,\"87\":4,\"88\":1,\"89\":1,\"92\":1,\"94\":1,\"96\":2,\"100\":1,\"102\":1,\"110\":1,\"116\":1,\"124\":4,\"131\":2,\"133\":1,\"134\":4,\"135\":3,\"136\":1,\"141\":4,\"143\":1,\"147\":3,\"148\":1,\"151\":2,\"160\":1,\"164\":2,\"166\":1,\"177\":2,\"179\":7,\"181\":2,\"183\":1,\"184\":1,\"185\":20,\"186\":2,\"187\":10,\"188\":7,\"190\":3,\"191\":6,\"192\":2,\"194\":3,\"195\":3,\"196\":4,\"197\":5,\"198\":2,\"200\":2,\"202\":3,\"205\":1,\"206\":2,\"209\":1,\"210\":3,\"212\":1,\"215\":2,\"218\":1,\"219\":1,\"220\":2,\"222\":2,\"224\":1,\"225\":3,\"226\":1,\"227\":1,\"228\":1,\"233\":2,\"234\":1,\"236\":3,\"245\":2,\"246\":1,\"250\":1}}],[\"coloncolon\",{\"1\":{\"104\":1}}],[\"colon\",{\"1\":{\"89\":5,\"92\":2,\"97\":1,\"104\":1}}],[\"colored\",{\"1\":{\"151\":1}}],[\"colors\",{\"1\":{\"13\":1,\"50\":1}}],[\"color\",{\"1\":{\"7\":1,\"13\":1,\"32\":8}}],[\"cold\",{\"1\":{\"11\":1}}],[\"colspan=\",{\"1\":{\"9\":1}}],[\"columns\",{\"1\":{\"17\":2}}],[\"column\",{\"1\":{\"6\":1,\"8\":1,\"14\":1}}],[\"columnar\",{\"1\":{\"5\":1,\"15\":2,\"17\":1}}],[\"colloquially\",{\"1\":{\"32\":1}}],[\"colleges\",{\"1\":{\"21\":2}}],[\"collector\",{\"1\":{\"115\":1}}],[\"collectors\",{\"1\":{\"9\":1}}],[\"collectives\",{\"1\":{\"24\":1}}],[\"collections\",{\"1\":{\"9\":1,\"13\":1}}],[\"collection\",{\"1\":{\"5\":1,\"9\":1,\"10\":1,\"17\":1,\"21\":1}}],[\"collect\",{\"1\":{\"18\":1,\"24\":1}}],[\"collects\",{\"1\":{\"3\":1}}],[\"collisions\",{\"1\":{\"21\":1,\"22\":1}}],[\"collision\",{\"1\":{\"9\":1,\"21\":1}}],[\"collaborative\",{\"1\":{\"17\":1}}],[\"collaborating\",{\"1\":{\"4\":1}}],[\"collaborators\",{\"1\":{\"9\":1}}],[\"collaborate\",{\"1\":{\"6\":1}}],[\"collation\",{\"1\":{\"6\":1}}],[\"cortex\",{\"1\":{\"25\":1}}],[\"corporation\",{\"1\":{\"21\":1,\"36\":2}}],[\"corpora\",{\"1\":{\"18\":1}}],[\"cors\",{\"1\":{\"15\":1,\"22\":1}}],[\"corrupts\",{\"1\":{\"146\":1}}],[\"corruption\",{\"1\":{\"11\":1}}],[\"corresponds\",{\"1\":{\"177\":1}}],[\"corresponding\",{\"1\":{\"89\":1,\"104\":1,\"105\":1,\"106\":1,\"110\":1,\"152\":1,\"190\":1,\"209\":1,\"223\":1,\"228\":1,\"237\":2}}],[\"correspondence\",{\"1\":{\"9\":1}}],[\"correctness\",{\"1\":{\"88\":1}}],[\"correctly\",{\"1\":{\"35\":2,\"45\":1,\"88\":2,\"89\":1,\"95\":1,\"96\":1,\"105\":1,\"107\":1,\"109\":1,\"110\":2,\"141\":1,\"186\":1,\"200\":1,\"230\":2,\"231\":1}}],[\"corrected\",{\"1\":{\"29\":1}}],[\"correcting\",{\"1\":{\"29\":1}}],[\"correction\",{\"1\":{\"21\":1,\"23\":1}}],[\"correct\",{\"1\":{\"23\":1,\"29\":1,\"75\":1,\"76\":1,\"80\":3,\"87\":2,\"89\":2,\"90\":1,\"96\":1,\"108\":1,\"110\":1,\"163\":1,\"164\":1,\"168\":1,\"171\":1,\"212\":1,\"215\":1,\"227\":1,\"234\":1,\"237\":1}}],[\"corba\",{\"1\":{\"4\":1,\"9\":1,\"36\":1}}],[\"cores\",{\"1\":{\"21\":1,\"25\":3,\"26\":2,\"27\":1,\"33\":1,\"247\":1,\"248\":1}}],[\"core\",{\"1\":{\"4\":1,\"7\":1,\"9\":2,\"11\":2,\"17\":2,\"21\":3,\"25\":2,\"26\":4,\"28\":1,\"44\":1,\"227\":2,\"235\":2,\"247\":2,\"248\":1}}],[\"corner\",{\"1\":{\"0\":1}}],[\"conout\",{\"1\":{\"138\":2,\"139\":10,\"140\":4}}],[\"conin\",{\"1\":{\"138\":1}}],[\"congested\",{\"1\":{\"21\":1}}],[\"convolutional\",{\"1\":{\"18\":2}}],[\"convenient\",{\"1\":{\"69\":1}}],[\"conventional\",{\"1\":{\"11\":2,\"209\":1}}],[\"convention\",{\"0\":{\"164\":1},\"1\":{\"11\":1,\"21\":1,\"68\":1,\"123\":1,\"133\":1,\"147\":2,\"163\":1,\"164\":3,\"208\":1}}],[\"conventions\",{\"1\":{\"11\":1,\"164\":1}}],[\"convertuefimemorymap\",{\"1\":{\"162\":3,\"180\":2,\"181\":1,\"197\":2}}],[\"converter\",{\"1\":{\"139\":2}}],[\"converted\",{\"1\":{\"10\":1,\"13\":1,\"21\":1,\"58\":1,\"59\":1,\"63\":1,\"75\":1}}],[\"converts\",{\"1\":{\"21\":1,\"33\":1,\"101\":1,\"180\":1}}],[\"converting\",{\"1\":{\"14\":1,\"57\":1}}],[\"convert\",{\"0\":{\"162\":1},\"1\":{\"10\":2,\"13\":1,\"18\":1,\"63\":1,\"162\":2,\"163\":1,\"168\":2,\"187\":1}}],[\"conversation\",{\"1\":{\"35\":1}}],[\"conversational\",{\"1\":{\"11\":1}}],[\"conversations\",{\"1\":{\"3\":1,\"4\":1,\"21\":1}}],[\"conversion\",{\"1\":{\"6\":2,\"21\":1,\"57\":1}}],[\"converge\",{\"1\":{\"6\":1}}],[\"conforming\",{\"1\":{\"185\":1,\"187\":1}}],[\"conformance\",{\"1\":{\"22\":1}}],[\"conformant\",{\"1\":{\"11\":1}}],[\"confusing\",{\"1\":{\"199\":1,\"227\":1}}],[\"confusion\",{\"1\":{\"35\":1,\"72\":1}}],[\"confused\",{\"1\":{\"32\":1}}],[\"confine\",{\"1\":{\"218\":1}}],[\"confirm\",{\"1\":{\"35\":1,\"210\":1}}],[\"configtable\",{\"1\":{\"138\":1}}],[\"configs\",{\"1\":{\"6\":1,\"12\":1,\"13\":1}}],[\"configuring\",{\"1\":{\"144\":1}}],[\"configurable\",{\"1\":{\"11\":1,\"30\":1}}],[\"configurations\",{\"1\":{\"143\":1}}],[\"configuration\",{\"0\":{\"44\":1},\"1\":{\"6\":2,\"11\":2,\"13\":4,\"21\":5,\"29\":1,\"34\":5,\"44\":1,\"248\":1}}],[\"configures\",{\"1\":{\"55\":1,\"124\":1}}],[\"configured\",{\"1\":{\"33\":1,\"43\":1,\"190\":1,\"249\":1}}],[\"configure\",{\"1\":{\"4\":1,\"9\":1,\"11\":1,\"21\":3,\"22\":1,\"30\":1,\"32\":1,\"33\":1,\"43\":1,\"53\":1,\"55\":1,\"196\":1}}],[\"config\",{\"1\":{\"4\":1,\"11\":1,\"13\":1,\"22\":1,\"35\":1,\"248\":1}}],[\"conferencing\",{\"1\":{\"21\":1}}],[\"conferences\",{\"1\":{\"36\":1}}],[\"conference\",{\"1\":{\"17\":1}}],[\"conf\",{\"1\":{\"21\":1}}],[\"conflicting\",{\"1\":{\"124\":2}}],[\"conflicts\",{\"1\":{\"34\":1}}],[\"conflict\",{\"1\":{\"17\":1,\"124\":1}}],[\"conditions\",{\"1\":{\"26\":1}}],[\"conditional\",{\"1\":{\"22\":1}}],[\"conditioning\",{\"1\":{\"21\":1}}],[\"condition\",{\"1\":{\"9\":1,\"79\":1}}],[\"connectcontroller\",{\"1\":{\"151\":1}}],[\"connectors\",{\"1\":{\"30\":4,\"33\":1}}],[\"connector\",{\"1\":{\"25\":1,\"30\":1}}],[\"connect\",{\"1\":{\"9\":1,\"17\":1,\"21\":4,\"22\":1,\"30\":4,\"35\":1}}],[\"connects\",{\"1\":{\"9\":1,\"21\":1,\"30\":2,\"33\":1}}],[\"connectionless\",{\"1\":{\"21\":3}}],[\"connection\",{\"1\":{\"17\":1,\"21\":1}}],[\"connections\",{\"1\":{\"8\":1,\"18\":1,\"21\":2,\"32\":2}}],[\"connecting\",{\"1\":{\"17\":2,\"21\":1,\"30\":5,\"31\":1,\"32\":1}}],[\"connectivity\",{\"1\":{\"9\":2,\"21\":3}}],[\"connected\",{\"1\":{\"9\":1,\"21\":4,\"29\":1,\"30\":1}}],[\"concatenation\",{\"1\":{\"94\":1}}],[\"concurrent\",{\"1\":{\"6\":1,\"9\":2,\"11\":4}}],[\"concurrency\",{\"1\":{\"5\":1,\"9\":1,\"17\":2,\"116\":1}}],[\"concelman\",{\"1\":{\"30\":1}}],[\"conceptually\",{\"1\":{\"88\":1}}],[\"conceptual\",{\"1\":{\"21\":1}}],[\"concepts\",{\"1\":{\"8\":1,\"11\":5,\"15\":1,\"21\":2,\"56\":1,\"173\":1}}],[\"concept\",{\"1\":{\"6\":1,\"15\":1,\"74\":1,\"191\":1}}],[\"concerns\",{\"1\":{\"5\":1}}],[\"concrete\",{\"1\":{\"5\":1,\"35\":1}}],[\"concretions\",{\"1\":{\"5\":1}}],[\"concise\",{\"1\":{\"2\":1,\"3\":1,\"8\":1,\"10\":1,\"15\":1}}],[\"consults\",{\"1\":{\"189\":1}}],[\"consumption\",{\"1\":{\"196\":1}}],[\"consuming\",{\"1\":{\"110\":1}}],[\"consumer\",{\"1\":{\"21\":1,\"23\":1,\"32\":1}}],[\"consumers\",{\"1\":{\"4\":1,\"17\":1}}],[\"consumed\",{\"1\":{\"13\":1,\"15\":1,\"66\":1,\"85\":1,\"110\":1}}],[\"consume\",{\"1\":{\"10\":1,\"17\":1,\"66\":1,\"95\":2,\"96\":1,\"97\":1,\"110\":1}}],[\"consumes\",{\"1\":{\"4\":1,\"110\":3}}],[\"cons\",{\"1\":{\"176\":4}}],[\"consecutive\",{\"1\":{\"94\":1,\"95\":1}}],[\"consent\",{\"1\":{\"11\":2}}],[\"consolidates\",{\"1\":{\"33\":1}}],[\"consoleerror\",{\"1\":{\"140\":1}}],[\"consoleout\",{\"1\":{\"140\":3,\"141\":2,\"151\":3,\"152\":1,\"153\":1,\"154\":3,\"156\":2,\"157\":1,\"158\":2,\"159\":2,\"160\":1,\"162\":3,\"197\":8}}],[\"consoleouthandle\",{\"1\":{\"138\":1}}],[\"consoleclear\",{\"1\":{\"140\":2,\"141\":1}}],[\"consoleinhandle\",{\"1\":{\"138\":1}}],[\"console\",{\"1\":{\"25\":1,\"30\":1,\"34\":1,\"123\":3,\"135\":1,\"138\":2,\"144\":6,\"145\":1,\"160\":7,\"161\":2,\"163\":1,\"165\":1,\"166\":1,\"213\":1}}],[\"consoles\",{\"1\":{\"11\":1,\"30\":1,\"31\":1}}],[\"consolelogger\",{\"1\":{\"5\":1}}],[\"consortium\",{\"1\":{\"17\":1,\"30\":1,\"36\":4}}],[\"consist\",{\"1\":{\"94\":1}}],[\"consistent\",{\"1\":{\"85\":1}}],[\"consistency\",{\"1\":{\"17\":5}}],[\"consists\",{\"1\":{\"53\":1,\"63\":3,\"68\":2,\"70\":1,\"94\":1,\"247\":1}}],[\"consisting\",{\"1\":{\"33\":1}}],[\"considerassign\",{\"1\":{\"104\":8,\"109\":3}}],[\"consider\",{\"1\":{\"16\":1,\"35\":1,\"72\":1,\"76\":1,\"77\":3,\"85\":1,\"104\":2,\"109\":1,\"124\":2,\"162\":1}}],[\"considered\",{\"1\":{\"4\":1,\"21\":1,\"53\":1,\"74\":1,\"88\":2,\"108\":1,\"122\":1,\"197\":1,\"238\":1,\"247\":1}}],[\"constsection\",{\"1\":{\"91\":2,\"92\":4,\"93\":1,\"97\":2}}],[\"const\",{\"0\":{\"91\":1},\"1\":{\"91\":8,\"92\":2,\"97\":1,\"127\":5,\"131\":3,\"133\":1,\"135\":1,\"138\":1,\"140\":1,\"141\":1,\"144\":1,\"151\":1,\"152\":1,\"154\":1,\"156\":1,\"162\":1,\"168\":1,\"175\":1,\"180\":1,\"187\":2,\"198\":1,\"202\":1,\"209\":1,\"214\":1,\"219\":1,\"228\":2,\"230\":1,\"231\":1,\"245\":1}}],[\"constants\",{\"1\":{\"97\":1,\"140\":2,\"209\":1}}],[\"constant\",{\"1\":{\"10\":2,\"18\":1,\"97\":1,\"176\":1,\"187\":1}}],[\"constraints\",{\"1\":{\"17\":1,\"20\":1,\"21\":1,\"177\":1}}],[\"constraint\",{\"1\":{\"17\":1,\"21\":3,\"188\":1}}],[\"constrained\",{\"1\":{\"9\":1,\"21\":1,\"83\":1}}],[\"construct\",{\"1\":{\"58\":1,\"89\":1,\"92\":1}}],[\"constructs\",{\"1\":{\"10\":2,\"57\":1}}],[\"constructing\",{\"1\":{\"10\":2}}],[\"construction\",{\"1\":{\"10\":3}}],[\"constructors\",{\"1\":{\"5\":1,\"9\":1}}],[\"constructor\",{\"1\":{\"5\":1,\"78\":1}}],[\"contacts\",{\"1\":{\"29\":1}}],[\"contains\",{\"1\":{\"34\":3,\"44\":1,\"53\":4,\"69\":2,\"77\":1,\"79\":1,\"82\":1,\"89\":2,\"94\":1,\"134\":1,\"138\":1,\"147\":6,\"150\":2,\"174\":4,\"185\":1,\"187\":1,\"188\":1,\"189\":1,\"201\":1,\"210\":3,\"212\":2,\"226\":1,\"227\":2,\"228\":4,\"229\":2,\"232\":1,\"233\":7,\"235\":3,\"237\":2}}],[\"contain\",{\"1\":{\"13\":1,\"89\":1,\"102\":1,\"168\":1,\"180\":1,\"187\":2,\"188\":2,\"225\":1,\"233\":2,\"235\":1}}],[\"containingfile\",{\"1\":{\"74\":1,\"78\":1,\"83\":1}}],[\"containing\",{\"1\":{\"10\":1,\"11\":1,\"31\":1,\"34\":2,\"78\":1,\"82\":2,\"83\":1,\"98\":1,\"186\":1,\"213\":1,\"228\":1,\"235\":1}}],[\"contained\",{\"1\":{\"5\":1}}],[\"containers\",{\"1\":{\"16\":1,\"21\":2,\"24\":2}}],[\"container\",{\"1\":{\"4\":2,\"5\":1,\"13\":2,\"16\":2,\"24\":3,\"218\":1}}],[\"contributions\",{\"1\":{\"250\":1}}],[\"contributed\",{\"1\":{\"36\":1}}],[\"contractual\",{\"1\":{\"19\":1}}],[\"contract\",{\"1\":{\"11\":1,\"25\":1,\"37\":1}}],[\"contrasting\",{\"1\":{\"35\":1}}],[\"contrast\",{\"1\":{\"7\":1,\"14\":1,\"32\":1,\"208\":1}}],[\"controlled\",{\"1\":{\"116\":2,\"194\":1}}],[\"controllers\",{\"1\":{\"5\":1,\"11\":1,\"21\":2,\"25\":1,\"30\":3,\"31\":2,\"32\":1,\"33\":1,\"34\":1}}],[\"controller\",{\"0\":{\"247\":1},\"1\":{\"5\":1,\"11\":1,\"27\":1,\"28\":1,\"30\":5,\"31\":1,\"33\":4,\"246\":1,\"247\":4}}],[\"controlling\",{\"1\":{\"21\":1,\"22\":1,\"30\":1}}],[\"controls\",{\"1\":{\"4\":2,\"6\":1,\"21\":1,\"22\":2,\"23\":1}}],[\"control\",{\"1\":{\"4\":1,\"5\":2,\"6\":3,\"9\":2,\"10\":3,\"11\":13,\"12\":1,\"13\":1,\"14\":3,\"17\":3,\"21\":16,\"22\":10,\"30\":2,\"33\":3,\"34\":1,\"147\":1,\"159\":1,\"160\":1,\"161\":1,\"166\":1,\"174\":1,\"192\":2,\"194\":1,\"207\":1,\"208\":1,\"215\":1,\"234\":1,\"238\":2,\"241\":3,\"243\":2,\"249\":1}}],[\"contents\",{\"1\":{\"11\":1,\"66\":1}}],[\"contentful\",{\"1\":{\"7\":1,\"20\":1}}],[\"content\",{\"1\":{\"7\":7,\"13\":1,\"14\":2,\"16\":2,\"20\":1,\"21\":2,\"22\":2,\"24\":1,\"32\":4,\"35\":2,\"36\":1,\"65\":1}}],[\"contexts\",{\"1\":{\"35\":1}}],[\"context\",{\"0\":{\"240\":1},\"1\":{\"4\":2,\"10\":2,\"11\":2,\"15\":1,\"18\":1,\"26\":1,\"35\":1,\"53\":1,\"54\":1,\"75\":1,\"77\":1,\"82\":1,\"83\":4,\"215\":1,\"239\":2,\"240\":2}}],[\"continuity\",{\"1\":{\"29\":1,\"192\":1}}],[\"continues\",{\"1\":{\"94\":1,\"97\":2}}],[\"continued\",{\"1\":{\"21\":1,\"36\":1,\"188\":1}}],[\"continue\",{\"1\":{\"9\":1,\"35\":1,\"77\":1,\"78\":1,\"79\":1,\"94\":1,\"124\":1,\"148\":1,\"154\":1,\"155\":1,\"192\":1,\"237\":1,\"239\":1,\"240\":1}}],[\"continually\",{\"1\":{\"6\":1}}],[\"continuation\",{\"1\":{\"5\":2}}],[\"continuous\",{\"1\":{\"6\":3}}],[\"contiguous\",{\"1\":{\"5\":2,\"169\":3,\"170\":2,\"171\":1,\"218\":1,\"229\":3,\"237\":2}}],[\"comes\",{\"1\":{\"42\":1,\"52\":1,\"53\":1,\"55\":1,\"57\":1,\"85\":1,\"89\":2,\"112\":1,\"172\":1,\"201\":1,\"229\":1,\"230\":2,\"232\":1}}],[\"come\",{\"1\":{\"35\":2,\"40\":1,\"73\":1,\"79\":1,\"89\":2,\"96\":1,\"98\":1,\"102\":1,\"133\":1,\"147\":1,\"185\":1,\"188\":2,\"193\":1}}],[\"com3\",{\"1\":{\"30\":1}}],[\"com2\",{\"1\":{\"30\":1}}],[\"com1\",{\"1\":{\"30\":1}}],[\"combinator\",{\"1\":{\"35\":1}}],[\"combinations\",{\"1\":{\"185\":1}}],[\"combination\",{\"1\":{\"11\":1,\"102\":1,\"103\":1,\"121\":1}}],[\"combines\",{\"1\":{\"105\":1}}],[\"combine\",{\"1\":{\"31\":1,\"104\":1}}],[\"combined\",{\"1\":{\"6\":1,\"17\":1,\"33\":1,\"104\":1}}],[\"combining\",{\"1\":{\"8\":1,\"11\":1,\"16\":1}}],[\"com+\",{\"1\":{\"4\":4}}],[\"comms\",{\"1\":{\"22\":2}}],[\"committees\",{\"1\":{\"36\":1}}],[\"committee\",{\"1\":{\"17\":1}}],[\"commits\",{\"1\":{\"6\":2}}],[\"comma\",{\"1\":{\"15\":1}}],[\"commandimpl\",{\"1\":{\"73\":1}}],[\"commands\",{\"1\":{\"4\":1,\"9\":1,\"11\":1,\"21\":1,\"22\":1,\"31\":1,\"116\":1,\"135\":1,\"136\":1}}],[\"command\",{\"1\":{\"4\":1,\"6\":1,\"9\":1,\"11\":5,\"21\":2,\"30\":1,\"31\":2,\"72\":1,\"73\":4,\"77\":1,\"88\":2,\"91\":1,\"92\":2,\"97\":2,\"124\":1,\"135\":3,\"136\":1,\"147\":3,\"188\":1,\"210\":1}}],[\"commodore\",{\"1\":{\"11\":1}}],[\"commonly\",{\"1\":{\"9\":1,\"11\":1,\"13\":1,\"21\":1,\"31\":1,\"33\":1,\"34\":1}}],[\"common\",{\"1\":{\"3\":1,\"4\":1,\"7\":1,\"8\":4,\"9\":2,\"10\":2,\"11\":5,\"15\":1,\"17\":1,\"21\":1,\"22\":1,\"30\":1,\"31\":1,\"35\":1,\"37\":1,\"90\":1,\"92\":1,\"143\":5,\"151\":5,\"152\":2,\"153\":2,\"154\":2,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":2,\"163\":2,\"169\":1,\"175\":3,\"177\":1,\"197\":3,\"217\":1,\"245\":1,\"246\":1}}],[\"commented\",{\"1\":{\"227\":1}}],[\"commenting\",{\"1\":{\"193\":1}}],[\"comment>>\",{\"1\":{\"97\":1}}],[\"comment>\",{\"1\":{\"95\":1,\"96\":1,\"97\":1}}],[\"comment\",{\"1\":{\"53\":1,\"58\":1,\"94\":15,\"95\":12,\"96\":22,\"97\":25,\"147\":4,\"188\":1,\"226\":2,\"228\":1,\"234\":1}}],[\"commentstmt\",{\"1\":{\"97\":3}}],[\"comments\",{\"0\":{\"94\":1,\"95\":1,\"96\":1,\"97\":1},\"1\":{\"6\":1,\"58\":2,\"94\":11,\"95\":14,\"96\":5,\"97\":14,\"248\":1,\"250\":1}}],[\"commerce\",{\"1\":{\"36\":1}}],[\"commercialize\",{\"1\":{\"21\":1}}],[\"commercial\",{\"1\":{\"11\":4,\"17\":2,\"21\":3}}],[\"comm\",{\"1\":{\"11\":1}}],[\"communities\",{\"1\":{\"21\":2,\"36\":1,\"37\":1}}],[\"community\",{\"1\":{\"11\":2,\"21\":1,\"36\":1,\"42\":1,\"43\":1}}],[\"communicate\",{\"1\":{\"21\":1,\"24\":1,\"116\":1}}],[\"communications\",{\"1\":{\"21\":1}}],[\"communication\",{\"1\":{\"4\":3,\"11\":1,\"15\":1,\"21\":5,\"30\":1,\"35\":3,\"36\":1,\"231\":1}}],[\"communicating\",{\"1\":{\"4\":2,\"5\":1,\"21\":1}}],[\"comp\",{\"1\":{\"21\":1}}],[\"competition\",{\"1\":{\"36\":1}}],[\"competitive\",{\"1\":{\"32\":1}}],[\"competitor\",{\"1\":{\"11\":1,\"21\":1,\"35\":1}}],[\"competed\",{\"1\":{\"11\":1}}],[\"compress\",{\"1\":{\"16\":6}}],[\"compressor\",{\"1\":{\"16\":1}}],[\"compressed\",{\"1\":{\"13\":3,\"16\":1,\"147\":2,\"234\":1}}],[\"compression\",{\"0\":{\"16\":1},\"1\":{\"11\":2,\"13\":6,\"15\":3,\"16\":17,\"21\":1}}],[\"comprehensive\",{\"1\":{\"6\":1,\"11\":2}}],[\"complaining\",{\"1\":{\"124\":2}}],[\"complement\",{\"1\":{\"147\":2,\"209\":1,\"234\":1}}],[\"complementary\",{\"1\":{\"33\":1}}],[\"complex\",{\"1\":{\"12\":1,\"13\":1,\"15\":1,\"25\":2,\"40\":1,\"69\":1,\"72\":1,\"77\":1,\"132\":1,\"142\":1,\"176\":1,\"177\":1,\"232\":1,\"237\":1}}],[\"complexity\",{\"1\":{\"11\":1,\"20\":2,\"35\":1,\"40\":1}}],[\"completing\",{\"1\":{\"21\":1}}],[\"completion\",{\"1\":{\"9\":1,\"35\":1,\"44\":1,\"59\":1,\"80\":1}}],[\"completeness\",{\"1\":{\"235\":1}}],[\"completely\",{\"1\":{\"45\":1,\"170\":1}}],[\"completes\",{\"1\":{\"17\":1,\"61\":1,\"64\":1}}],[\"complete\",{\"1\":{\"11\":1,\"24\":1,\"33\":1,\"71\":1,\"112\":1,\"131\":1}}],[\"compliance\",{\"1\":{\"7\":1,\"11\":1,\"22\":1,\"31\":1,\"36\":2}}],[\"compliant\",{\"1\":{\"6\":1,\"11\":1,\"17\":1}}],[\"compiling\",{\"0\":{\"124\":1},\"1\":{\"41\":1,\"122\":1,\"124\":1,\"143\":1,\"145\":1,\"146\":2}}],[\"compilation\",{\"1\":{\"9\":1,\"10\":2,\"124\":1}}],[\"compilekotlin\",{\"1\":{\"55\":2,\"71\":1}}],[\"compilejava\",{\"1\":{\"55\":2,\"71\":1}}],[\"compiler\",{\"0\":{\"118\":1,\"146\":1},\"1\":{\"10\":6,\"28\":1,\"72\":1,\"117\":1,\"118\":2,\"123\":1,\"124\":13,\"130\":1,\"131\":1,\"146\":5,\"147\":5,\"164\":1,\"177\":1,\"179\":2,\"188\":1,\"191\":2,\"196\":1,\"212\":2,\"213\":1,\"225\":2,\"234\":1}}],[\"compilers\",{\"0\":{\"10\":1},\"1\":{\"8\":1,\"9\":3,\"10\":5}}],[\"compile\",{\"1\":{\"10\":3,\"25\":1,\"72\":2,\"117\":1,\"119\":1,\"122\":1,\"123\":2,\"124\":6,\"131\":2,\"133\":1,\"135\":1,\"139\":2,\"140\":1,\"141\":2,\"145\":1,\"147\":6,\"148\":2,\"151\":1,\"152\":1,\"153\":1,\"154\":1,\"160\":1,\"161\":1,\"163\":1,\"164\":1,\"179\":2,\"182\":1,\"183\":1,\"188\":1,\"224\":1,\"226\":1,\"229\":2,\"230\":1,\"231\":1}}],[\"compiled\",{\"1\":{\"7\":1,\"8\":1,\"10\":3,\"11\":2,\"13\":1,\"43\":1,\"55\":1,\"164\":2}}],[\"compiles\",{\"1\":{\"7\":1,\"10\":3}}],[\"companion\",{\"1\":{\"61\":4,\"77\":1,\"82\":1,\"95\":1,\"99\":1,\"101\":1,\"106\":1,\"110\":1}}],[\"company\",{\"1\":{\"6\":1,\"21\":2,\"33\":2}}],[\"comparing\",{\"1\":{\"77\":1,\"210\":1}}],[\"comparisons\",{\"1\":{\"20\":1}}],[\"comparators\",{\"1\":{\"33\":1}}],[\"comparable\",{\"1\":{\"20\":1,\"40\":1}}],[\"compartmentalization\",{\"1\":{\"25\":1}}],[\"compared\",{\"1\":{\"13\":1,\"29\":1}}],[\"compare\",{\"1\":{\"9\":1,\"20\":1,\"78\":1,\"85\":1,\"179\":1}}],[\"compaction\",{\"1\":{\"17\":1}}],[\"compact\",{\"1\":{\"15\":1,\"22\":1,\"25\":1,\"29\":1}}],[\"compatible\",{\"1\":{\"9\":2,\"11\":2,\"25\":1,\"30\":2,\"33\":1,\"119\":1}}],[\"compatibility\",{\"1\":{\"7\":1,\"21\":1,\"34\":1,\"44\":1,\"123\":1,\"147\":1,\"185\":1,\"210\":1}}],[\"computations\",{\"1\":{\"9\":1,\"10\":3,\"116\":1}}],[\"computational\",{\"1\":{\"9\":1,\"18\":1}}],[\"computed\",{\"1\":{\"10\":1}}],[\"compute\",{\"1\":{\"9\":2,\"10\":6,\"18\":1,\"20\":1,\"21\":1,\"22\":1,\"24\":3,\"25\":1,\"32\":1,\"225\":1}}],[\"computers\",{\"1\":{\"11\":3,\"21\":1,\"24\":1,\"29\":1,\"30\":2,\"33\":1}}],[\"computer\",{\"1\":{\"6\":1,\"9\":2,\"11\":2,\"18\":1,\"21\":4,\"25\":3,\"30\":1,\"31\":1,\"33\":6,\"35\":1}}],[\"computing\",{\"0\":{\"3\":1},\"1\":{\"2\":1,\"3\":1,\"4\":1,\"8\":1,\"10\":1,\"11\":7,\"15\":1,\"24\":1,\"25\":2,\"27\":1,\"33\":1,\"36\":5}}],[\"compose\",{\"1\":{\"13\":1}}],[\"composite\",{\"1\":{\"9\":1,\"17\":1}}],[\"composition\",{\"1\":{\"5\":1}}],[\"components\",{\"0\":{\"52\":1},\"1\":{\"4\":8,\"5\":1,\"6\":3,\"8\":1,\"9\":1,\"11\":1,\"13\":1,\"22\":1,\"30\":2,\"33\":2,\"59\":1,\"247\":1,\"248\":2}}],[\"component\",{\"1\":{\"4\":7,\"9\":1,\"30\":1,\"34\":1,\"36\":1,\"239\":1}}],[\"com\",{\"1\":{\"1\":1,\"4\":9,\"7\":3,\"8\":1,\"9\":2,\"11\":2,\"14\":1,\"21\":9,\"22\":1,\"24\":1,\"30\":2,\"35\":1,\"44\":3,\"47\":3,\"48\":1,\"53\":3,\"54\":2,\"64\":2,\"75\":1,\"83\":1,\"116\":1,\"171\":3,\"192\":3,\"193\":6,\"205\":9,\"206\":3,\"250\":2}}],[\"i440fx\",{\"1\":{\"135\":1}}],[\"i64\",{\"1\":{\"98\":1}}],[\"i686\",{\"1\":{\"25\":1}}],[\"i32\",{\"1\":{\"98\":1}}],[\"i386\",{\"1\":{\"25\":2}}],[\"i2c\",{\"1\":{\"30\":1}}],[\"i850e\",{\"1\":{\"29\":1}}],[\"i850\",{\"1\":{\"29\":2}}],[\"i²c\",{\"1\":{\"29\":1,\"30\":1}}],[\"ia64\",{\"1\":{\"235\":1}}],[\"ia32apicbasemsr\",{\"1\":{\"248\":2}}],[\"ia32\",{\"1\":{\"209\":18,\"248\":5,\"249\":1}}],[\"iana\",{\"1\":{\"36\":1}}],[\"ia\",{\"1\":{\"25\":4,\"185\":1,\"186\":2,\"235\":1}}],[\"iac\",{\"1\":{\"24\":1}}],[\"iaas\",{\"1\":{\"24\":1}}],[\"iam\",{\"1\":{\"22\":3}}],[\"ibt\",{\"1\":{\"22\":1}}],[\"ibm\",{\"1\":{\"4\":1,\"8\":4,\"11\":26,\"14\":1,\"17\":6,\"21\":4,\"22\":1,\"24\":1,\"25\":7,\"30\":2,\"32\":3,\"33\":1}}],[\"ignoring\",{\"1\":{\"74\":1}}],[\"ignores\",{\"1\":{\"249\":1}}],[\"ignored3\",{\"1\":{\"175\":3}}],[\"ignored2\",{\"1\":{\"175\":4}}],[\"ignored1\",{\"1\":{\"175\":4}}],[\"ignored\",{\"1\":{\"58\":2,\"85\":1,\"89\":1,\"94\":2,\"95\":1,\"97\":1,\"184\":1,\"185\":1}}],[\"ignore\",{\"1\":{\"9\":1,\"40\":1,\"89\":1,\"249\":2}}],[\"igd\",{\"1\":{\"21\":2}}],[\"igpus\",{\"1\":{\"32\":1}}],[\"igp\",{\"1\":{\"21\":2}}],[\"ikev2\",{\"1\":{\"21\":1}}],[\"ike\",{\"1\":{\"21\":1}}],[\"ipis\",{\"1\":{\"28\":1,\"34\":1,\"248\":1}}],[\"ip4\",{\"1\":{\"22\":1}}],[\"ips\",{\"1\":{\"21\":1,\"22\":2,\"24\":1,\"32\":1}}],[\"ipsec\",{\"1\":{\"21\":5}}],[\"ipx\",{\"1\":{\"21\":7}}],[\"ipxe\",{\"1\":{\"21\":2}}],[\"ip=l3\",{\"1\":{\"21\":1}}],[\"ipv6\",{\"1\":{\"21\":3}}],[\"ipv4\",{\"1\":{\"21\":1}}],[\"ipfs\",{\"1\":{\"21\":1}}],[\"ip\",{\"1\":{\"21\":38,\"36\":4}}],[\"ipc\",{\"1\":{\"4\":1,\"9\":1,\"11\":2,\"16\":1,\"20\":2,\"252\":2}}],[\"illegal\",{\"1\":{\"205\":1}}],[\"illustrating\",{\"1\":{\"187\":1}}],[\"illustrate\",{\"1\":{\"58\":1,\"78\":1}}],[\"illumos\",{\"1\":{\"25\":1}}],[\"illinois\",{\"1\":{\"11\":1}}],[\"ildasm\",{\"1\":{\"10\":1}}],[\"iretq\",{\"1\":{\"191\":1,\"194\":2,\"195\":1,\"200\":2,\"221\":2,\"240\":2}}],[\"iret\",{\"1\":{\"186\":2,\"192\":1}}],[\"irl\",{\"1\":{\"35\":2}}],[\"irc\",{\"1\":{\"21\":1}}],[\"irix\",{\"1\":{\"11\":2,\"25\":1}}],[\"iris\",{\"1\":{\"10\":2,\"15\":1}}],[\"irq0\",{\"1\":{\"33\":1}}],[\"irq\",{\"1\":{\"30\":1,\"33\":1,\"34\":1}}],[\"irqs\",{\"1\":{\"28\":1,\"33\":2}}],[\"irq1\",{\"1\":{\"11\":1}}],[\"irql\",{\"1\":{\"11\":1}}],[\"irssi\",{\"1\":{\"21\":1}}],[\"irs\",{\"1\":{\"10\":1}}],[\"ir\",{\"1\":{\"10\":8}}],[\"if=1\",{\"1\":{\"194\":1}}],[\"if=pflash\",{\"1\":{\"135\":2,\"136\":2,\"143\":2,\"148\":2,\"196\":2}}],[\"ifileelementtype\",{\"1\":{\"58\":3,\"61\":2,\"64\":1,\"95\":1}}],[\"ifs\",{\"1\":{\"11\":3}}],[\"if\",{\"1\":{\"9\":2,\"10\":1,\"11\":1,\"19\":1,\"35\":4,\"45\":1,\"47\":1,\"49\":1,\"57\":2,\"58\":1,\"63\":1,\"64\":1,\"66\":5,\"67\":1,\"71\":1,\"72\":2,\"73\":1,\"74\":5,\"75\":1,\"76\":1,\"77\":7,\"78\":7,\"79\":4,\"80\":1,\"83\":3,\"84\":2,\"85\":4,\"86\":5,\"87\":8,\"88\":1,\"89\":9,\"92\":1,\"94\":1,\"96\":6,\"102\":2,\"104\":2,\"106\":5,\"107\":2,\"109\":1,\"110\":10,\"116\":1,\"124\":3,\"130\":1,\"133\":1,\"134\":1,\"135\":4,\"141\":6,\"146\":1,\"147\":1,\"151\":1,\"152\":1,\"154\":1,\"160\":5,\"161\":1,\"162\":1,\"165\":1,\"166\":1,\"168\":5,\"169\":8,\"170\":11,\"171\":8,\"173\":1,\"177\":10,\"179\":1,\"180\":1,\"181\":2,\"183\":1,\"185\":9,\"186\":3,\"187\":1,\"188\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":2,\"194\":3,\"197\":5,\"198\":1,\"199\":1,\"200\":1,\"201\":1,\"206\":1,\"210\":1,\"212\":1,\"213\":1,\"214\":5,\"218\":1,\"220\":1,\"227\":2,\"228\":4,\"229\":3,\"230\":4,\"231\":2,\"235\":9,\"237\":10,\"238\":4,\"239\":6,\"240\":2}}],[\"iomapbase\",{\"1\":{\"202\":1}}],[\"ioapics\",{\"1\":{\"34\":1}}],[\"ioapic\",{\"1\":{\"28\":1}}],[\"iops\",{\"1\":{\"20\":2,\"31\":1}}],[\"iot\",{\"1\":{\"15\":1,\"21\":3,\"24\":2}}],[\"ios\",{\"1\":{\"11\":1}}],[\"iocp\",{\"1\":{\"9\":1}}],[\"io\",{\"1\":{\"9\":1,\"11\":1,\"28\":1,\"29\":1,\"30\":2,\"122\":1,\"245\":3,\"246\":1,\"250\":1}}],[\"ivt\",{\"1\":{\"11\":2}}],[\"ivy\",{\"1\":{\"11\":1}}],[\"iv\",{\"1\":{\"8\":1,\"11\":1,\"21\":1}}],[\"i\",{\"1\":{\"8\":2,\"9\":7,\"11\":2,\"21\":1,\"25\":3,\"26\":1,\"30\":5,\"31\":1,\"33\":5,\"35\":9,\"36\":1,\"39\":1,\"40\":8,\"42\":1,\"47\":1,\"48\":1,\"57\":1,\"58\":1,\"68\":1,\"73\":1,\"74\":1,\"75\":1,\"78\":1,\"80\":3,\"84\":1,\"85\":4,\"86\":3,\"87\":4,\"88\":3,\"89\":6,\"90\":1,\"94\":1,\"95\":2,\"97\":1,\"98\":1,\"99\":1,\"102\":2,\"105\":2,\"106\":1,\"107\":1,\"115\":2,\"116\":8,\"124\":6,\"133\":1,\"135\":3,\"136\":2,\"139\":1,\"144\":1,\"146\":2,\"147\":5,\"151\":3,\"153\":1,\"158\":2,\"162\":5,\"165\":3,\"167\":1,\"169\":4,\"171\":2,\"175\":3,\"177\":4,\"179\":1,\"180\":10,\"181\":4,\"183\":2,\"185\":4,\"186\":1,\"187\":5,\"188\":4,\"191\":1,\"192\":1,\"194\":1,\"195\":2,\"197\":3,\"198\":3,\"201\":1,\"203\":3,\"208\":1,\"210\":1,\"211\":1,\"215\":1,\"217\":1,\"218\":2,\"220\":3,\"222\":1,\"223\":1,\"227\":2,\"228\":2,\"229\":2,\"230\":10,\"234\":3,\"235\":10,\"237\":5,\"239\":2,\"240\":1,\"245\":3,\"246\":1,\"247\":3,\"248\":1,\"253\":1}}],[\"ielementtype\",{\"1\":{\"51\":1,\"52\":2,\"53\":3,\"58\":4,\"61\":3,\"63\":2,\"66\":2,\"69\":1,\"87\":2,\"88\":1,\"89\":3,\"104\":2}}],[\"ietf\",{\"1\":{\"36\":1}}],[\"iec\",{\"1\":{\"14\":1,\"21\":1,\"36\":4}}],[\"ieee\",{\"1\":{\"9\":1,\"21\":1,\"26\":1,\"30\":3,\"36\":3}}],[\"ie11\",{\"1\":{\"7\":1}}],[\"ie\",{\"1\":{\"7\":1}}],[\"ii=0\",{\"1\":{\"188\":1,\"200\":1,\"210\":2,\"212\":1}}],[\"iiuu\",{\"1\":{\"99\":1}}],[\"iiuc\",{\"1\":{\"35\":2}}],[\"iirc\",{\"1\":{\"35\":2}}],[\"ii\",{\"1\":{\"17\":1,\"30\":1,\"134\":1}}],[\"iii\",{\"1\":{\"13\":1,\"30\":1}}],[\"iife\",{\"1\":{\"9\":1}}],[\"iis\",{\"1\":{\"7\":3}}],[\"iiop\",{\"1\":{\"4\":1,\"9\":2}}],[\"imghandle\",{\"1\":{\"133\":1,\"135\":1,\"139\":3,\"140\":1,\"141\":3,\"151\":2,\"152\":1,\"153\":1,\"154\":2,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":4,\"161\":1,\"162\":2,\"163\":1,\"164\":1,\"180\":1,\"181\":1,\"197\":2}}],[\"imo\",{\"1\":{\"35\":2}}],[\"imho\",{\"1\":{\"35\":3}}],[\"imaging\",{\"1\":{\"32\":1}}],[\"imageptr\",{\"1\":{\"237\":11}}],[\"imagephysaddr\",{\"1\":{\"220\":2,\"222\":1,\"223\":1,\"230\":3,\"231\":2,\"243\":2}}],[\"imagepagecount\",{\"1\":{\"220\":2,\"222\":1,\"223\":1,\"230\":3,\"231\":3,\"243\":2}}],[\"imagepages\",{\"1\":{\"197\":4}}],[\"imagepath\",{\"1\":{\"197\":5}}],[\"imagevirtaddropt\",{\"1\":{\"231\":3}}],[\"imagevirtaddr\",{\"1\":{\"220\":2,\"222\":1,\"223\":1,\"230\":4,\"231\":2}}],[\"imagedatatype\",{\"1\":{\"151\":1}}],[\"imagecodetype\",{\"1\":{\"151\":1}}],[\"imagebase\",{\"1\":{\"151\":1,\"181\":1,\"197\":6}}],[\"imagehandle\",{\"1\":{\"133\":2,\"160\":1}}],[\"image\",{\"0\":{\"142\":1,\"154\":1,\"157\":1},\"1\":{\"13\":5,\"16\":2,\"18\":1,\"24\":2,\"133\":4,\"134\":5,\"135\":1,\"142\":2,\"147\":19,\"148\":16,\"149\":2,\"150\":5,\"151\":9,\"154\":3,\"155\":3,\"156\":3,\"157\":2,\"160\":1,\"181\":5,\"195\":2,\"196\":9,\"197\":22,\"198\":1,\"200\":1,\"220\":2,\"223\":3,\"228\":3,\"229\":4,\"230\":16,\"231\":4,\"235\":11,\"236\":1,\"237\":11,\"243\":2}}],[\"imagesize\",{\"1\":{\"151\":1,\"181\":1}}],[\"images\",{\"1\":{\"6\":1,\"11\":1,\"13\":3,\"15\":1,\"16\":1,\"17\":1,\"18\":2,\"21\":2,\"24\":1,\"32\":3,\"35\":1,\"224\":1}}],[\"imap\",{\"1\":{\"21\":1}}],[\"ims\",{\"1\":{\"11\":2,\"17\":2}}],[\"immediate\",{\"1\":{\"10\":1}}],[\"immediately\",{\"1\":{\"9\":1,\"160\":1}}],[\"immutability\",{\"1\":{\"9\":1}}],[\"impact\",{\"1\":{\"88\":1}}],[\"imps\",{\"1\":{\"21\":1,\"36\":2}}],[\"importc\",{\"1\":{\"124\":1,\"127\":1,\"131\":1,\"161\":1,\"163\":1,\"166\":1,\"196\":1,\"223\":2,\"240\":1,\"246\":1}}],[\"importing\",{\"1\":{\"124\":1,\"127\":1}}],[\"important\",{\"1\":{\"79\":1,\"80\":1,\"123\":1,\"124\":1,\"147\":1,\"160\":1,\"175\":1,\"183\":1,\"185\":1,\"194\":3,\"210\":1,\"214\":1}}],[\"imports\",{\"1\":{\"15\":1,\"53\":2,\"70\":1}}],[\"import\",{\"1\":{\"11\":1,\"47\":3,\"53\":3,\"54\":2,\"62\":1,\"72\":1,\"124\":2,\"131\":2,\"133\":1,\"140\":2,\"141\":1,\"143\":1,\"145\":2,\"151\":1,\"161\":2,\"162\":1,\"163\":3,\"169\":2,\"170\":1,\"177\":2,\"181\":2,\"188\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"209\":3,\"211\":1,\"217\":2,\"218\":1,\"223\":1,\"237\":3,\"239\":2,\"240\":4,\"246\":2,\"248\":2,\"249\":2}}],[\"imposes\",{\"1\":{\"9\":1}}],[\"impl\",{\"1\":{\"69\":1,\"70\":1,\"71\":1,\"73\":1,\"74\":3,\"75\":1,\"77\":1,\"82\":1}}],[\"implicit\",{\"1\":{\"21\":1,\"92\":1}}],[\"implicitly\",{\"1\":{\"10\":1,\"177\":1}}],[\"implements\",{\"1\":{\"44\":1,\"52\":1,\"53\":2,\"54\":1,\"59\":2,\"74\":3,\"75\":4}}],[\"implemented\",{\"1\":{\"9\":1,\"11\":1,\"25\":2,\"29\":2,\"34\":1,\"58\":1,\"63\":1,\"74\":2,\"75\":2,\"76\":1,\"116\":1,\"124\":1,\"131\":1,\"139\":1,\"252\":1}}],[\"implement\",{\"1\":{\"9\":2,\"11\":1,\"25\":1,\"33\":1,\"49\":1,\"51\":2,\"56\":1,\"59\":1,\"60\":1,\"63\":1,\"66\":1,\"72\":3,\"74\":2,\"75\":2,\"77\":2,\"78\":1,\"79\":2,\"82\":3,\"87\":1,\"95\":1,\"116\":1,\"124\":5,\"125\":2,\"135\":1,\"140\":2,\"144\":2,\"161\":1,\"166\":1,\"167\":2,\"171\":1,\"172\":1,\"185\":1,\"188\":2,\"193\":1,\"194\":1,\"212\":1,\"225\":1,\"232\":1,\"235\":1,\"237\":1,\"238\":2}}],[\"implementing\",{\"1\":{\"6\":2,\"17\":1,\"21\":1,\"75\":1,\"105\":1,\"131\":1,\"188\":1,\"194\":1,\"229\":1,\"232\":1,\"239\":1}}],[\"implementationclass=\",{\"1\":{\"48\":1,\"64\":1,\"83\":1}}],[\"implementations\",{\"1\":{\"9\":1}}],[\"implementation\",{\"0\":{\"60\":1},\"1\":{\"6\":3,\"9\":2,\"11\":1,\"22\":1,\"25\":1,\"61\":2,\"63\":2,\"64\":1,\"66\":1,\"69\":2,\"70\":1,\"72\":1,\"74\":2,\"75\":1,\"76\":2,\"77\":2,\"78\":2,\"105\":1,\"107\":1,\"124\":2,\"127\":1,\"128\":1,\"147\":1,\"239\":1}}],[\"improving\",{\"1\":{\"10\":1,\"31\":1,\"36\":1}}],[\"improved\",{\"1\":{\"13\":1,\"29\":1,\"30\":1,\"32\":1}}],[\"improve\",{\"1\":{\"6\":1,\"7\":1,\"18\":1,\"29\":1,\"36\":1,\"63\":1,\"74\":2,\"75\":1}}],[\"imperative\",{\"1\":{\"8\":2,\"214\":1}}],[\"ich9\",{\"1\":{\"135\":1}}],[\"icymi\",{\"1\":{\"35\":2}}],[\"icq\",{\"1\":{\"21\":2}}],[\"icann\",{\"1\":{\"21\":1,\"36\":3}}],[\"icacls\",{\"1\":{\"11\":1}}],[\"icmp\",{\"1\":{\"21\":1}}],[\"ico\",{\"1\":{\"13\":2}}],[\"iconloader\",{\"1\":{\"47\":2}}],[\"icon\",{\"1\":{\"13\":2,\"46\":1,\"47\":3,\"49\":1}}],[\"iconography\",{\"1\":{\"5\":1}}],[\"icons\",{\"1\":{\"5\":1,\"13\":3,\"47\":3}}],[\"icf\",{\"1\":{\"10\":1}}],[\"icu\",{\"1\":{\"6\":3}}],[\"i18n\",{\"1\":{\"6\":1}}],[\"itx\",{\"1\":{\"33\":1}}],[\"itu\",{\"1\":{\"21\":4,\"36\":2}}],[\"itanium\",{\"1\":{\"11\":1,\"25\":4}}],[\"itself\",{\"1\":{\"9\":1,\"41\":3,\"72\":1,\"75\":1,\"77\":1,\"78\":1,\"79\":2,\"82\":1,\"106\":1,\"124\":1,\"159\":1,\"168\":1,\"180\":1,\"181\":1,\"186\":1,\"211\":1,\"219\":1,\"227\":1,\"235\":1}}],[\"its\",{\"1\":{\"5\":2,\"7\":1,\"8\":3,\"9\":4,\"11\":7,\"14\":1,\"21\":3,\"22\":3,\"25\":2,\"32\":1,\"40\":1,\"63\":1,\"72\":4,\"74\":2,\"75\":1,\"78\":2,\"87\":1,\"89\":1,\"93\":1,\"105\":1,\"112\":1,\"115\":1,\"124\":3,\"135\":3,\"143\":1,\"144\":2,\"147\":2,\"150\":1,\"151\":1,\"154\":1,\"155\":1,\"161\":1,\"162\":1,\"168\":1,\"170\":2,\"175\":1,\"176\":2,\"177\":1,\"186\":1,\"187\":2,\"188\":1,\"195\":1,\"201\":2,\"202\":1,\"203\":1,\"211\":1,\"212\":1,\"217\":1,\"218\":1,\"219\":1,\"222\":1,\"227\":1,\"228\":2,\"231\":1,\"237\":1,\"238\":1,\"240\":3,\"242\":1,\"248\":3,\"249\":1}}],[\"it\",{\"0\":{\"222\":1,\"227\":1},\"1\":{\"5\":3,\"6\":2,\"9\":1,\"10\":1,\"11\":4,\"13\":1,\"17\":1,\"19\":1,\"21\":3,\"22\":3,\"32\":1,\"35\":5,\"40\":2,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":2,\"46\":1,\"47\":1,\"48\":4,\"49\":1,\"51\":1,\"52\":1,\"53\":3,\"55\":3,\"57\":5,\"58\":1,\"63\":3,\"64\":1,\"66\":2,\"67\":3,\"69\":5,\"72\":2,\"74\":5,\"75\":5,\"76\":2,\"77\":4,\"78\":5,\"79\":11,\"80\":3,\"82\":5,\"83\":3,\"84\":1,\"85\":2,\"86\":1,\"87\":8,\"88\":6,\"89\":18,\"90\":1,\"92\":6,\"93\":1,\"94\":3,\"95\":2,\"96\":12,\"97\":4,\"99\":1,\"100\":2,\"101\":2,\"102\":1,\"104\":5,\"105\":4,\"106\":4,\"107\":4,\"109\":1,\"110\":9,\"112\":1,\"113\":1,\"115\":3,\"116\":2,\"118\":1,\"121\":1,\"123\":3,\"124\":16,\"127\":2,\"128\":1,\"130\":1,\"133\":1,\"134\":3,\"135\":4,\"136\":1,\"138\":1,\"139\":2,\"141\":3,\"142\":2,\"143\":1,\"144\":1,\"145\":1,\"146\":5,\"147\":8,\"148\":7,\"150\":3,\"151\":4,\"154\":2,\"155\":1,\"158\":1,\"159\":1,\"160\":4,\"161\":4,\"162\":5,\"163\":2,\"164\":2,\"167\":1,\"168\":3,\"169\":6,\"170\":10,\"171\":5,\"172\":4,\"175\":1,\"176\":3,\"177\":9,\"179\":3,\"180\":1,\"181\":2,\"182\":2,\"185\":11,\"186\":2,\"187\":7,\"188\":3,\"189\":1,\"190\":8,\"191\":5,\"192\":3,\"193\":3,\"194\":3,\"195\":6,\"196\":7,\"197\":6,\"198\":1,\"199\":1,\"200\":2,\"202\":3,\"204\":3,\"208\":2,\"209\":1,\"210\":1,\"211\":2,\"212\":3,\"213\":1,\"214\":9,\"215\":1,\"216\":1,\"218\":7,\"219\":2,\"220\":2,\"221\":2,\"222\":3,\"223\":4,\"224\":1,\"225\":2,\"226\":2,\"227\":5,\"228\":6,\"229\":10,\"230\":6,\"231\":1,\"232\":2,\"233\":1,\"235\":4,\"236\":1,\"237\":5,\"238\":4,\"239\":11,\"240\":2,\"241\":2,\"243\":4,\"244\":1,\"245\":4,\"246\":3,\"248\":8,\"249\":4}}],[\"item\",{\"1\":{\"92\":1}}],[\"items\",{\"1\":{\"6\":1,\"9\":1,\"92\":1}}],[\"itemadded\",{\"1\":{\"4\":1}}],[\"iterator\",{\"1\":{\"169\":2,\"235\":5}}],[\"iteration\",{\"1\":{\"77\":4,\"78\":3,\"79\":1,\"135\":1}}],[\"iterative\",{\"1\":{\"6\":2}}],[\"iterates\",{\"1\":{\"77\":2,\"78\":1,\"169\":1,\"170\":1,\"230\":2}}],[\"iterate\",{\"1\":{\"5\":1,\"6\":1,\"77\":1,\"165\":1,\"169\":1,\"235\":3,\"237\":1}}],[\"idx\",{\"1\":{\"147\":2}}],[\"id>\",{\"1\":{\"44\":1,\"48\":1}}],[\"idk\",{\"1\":{\"35\":2}}],[\"idiv\",{\"1\":{\"192\":2}}],[\"idi\",{\"1\":{\"21\":1}}],[\"idispatch\",{\"1\":{\"4\":1}}],[\"idms\",{\"1\":{\"17\":5}}],[\"ids\",{\"1\":{\"17\":4,\"22\":3,\"217\":1}}],[\"id\",{\"1\":{\"11\":2,\"14\":1,\"15\":1,\"17\":3,\"22\":1,\"43\":2,\"44\":1,\"46\":1,\"47\":1,\"55\":3,\"217\":2,\"218\":1,\"220\":1}}],[\"idtinit\",{\"1\":{\"191\":2,\"192\":2,\"193\":1,\"206\":2,\"249\":1}}],[\"idtentries\",{\"1\":{\"190\":3,\"191\":1,\"192\":1,\"206\":1}}],[\"idtdescriptor\",{\"1\":{\"190\":3}}],[\"idtr\",{\"1\":{\"190\":1,\"191\":1}}],[\"idt=\",{\"1\":{\"188\":1,\"200\":1,\"210\":2}}],[\"idt\",{\"1\":{\"11\":3,\"188\":1,\"189\":2,\"190\":14,\"191\":8,\"192\":12,\"193\":7,\"197\":1,\"201\":2,\"205\":3,\"206\":3,\"222\":1,\"223\":1,\"249\":3}}],[\"identscopeprocessor\",{\"1\":{\"78\":10}}],[\"identreferencemixin\",{\"1\":{\"82\":1}}],[\"identreference\",{\"1\":{\"74\":5,\"76\":1,\"78\":4,\"79\":1,\"82\":4}}],[\"identrefmixin\",{\"1\":{\"74\":6,\"77\":2,\"79\":3}}],[\"identrefimpl\",{\"1\":{\"73\":1,\"74\":5}}],[\"identref\",{\"1\":{\"72\":1,\"73\":5,\"74\":8,\"75\":1,\"77\":2,\"78\":3,\"79\":1,\"82\":7,\"88\":3,\"92\":3,\"97\":3,\"105\":1,\"106\":1,\"107\":1,\"108\":1}}],[\"identdef>>\",{\"1\":{\"92\":6,\"97\":3}}],[\"identdef\",{\"1\":{\"90\":6,\"91\":9,\"92\":1,\"97\":2,\"100\":2}}],[\"identdefs\",{\"1\":{\"72\":1}}],[\"identdeclmixin\",{\"1\":{\"75\":3,\"82\":3,\"83\":2}}],[\"identdeclimpl\",{\"1\":{\"73\":1,\"75\":3}}],[\"identdecl\",{\"1\":{\"72\":2,\"73\":4,\"74\":6,\"75\":8,\"76\":1,\"78\":2,\"79\":1,\"82\":7,\"83\":2,\"88\":2,\"90\":1,\"92\":2,\"97\":2,\"100\":1}}],[\"ident\",{\"1\":{\"72\":5,\"73\":3,\"75\":9,\"82\":6,\"88\":2,\"92\":2,\"97\":2,\"101\":1,\"235\":5}}],[\"identitymapregion\",{\"1\":{\"177\":1,\"181\":2}}],[\"identity\",{\"1\":{\"22\":3,\"24\":1,\"36\":1,\"172\":1,\"176\":1,\"177\":1,\"181\":8,\"182\":2,\"188\":2}}],[\"identities\",{\"1\":{\"21\":1}}],[\"identifying\",{\"1\":{\"72\":1,\"237\":1}}],[\"identify\",{\"1\":{\"19\":1,\"23\":1,\"46\":1,\"58\":1,\"147\":1}}],[\"identifiable\",{\"1\":{\"23\":1}}],[\"identified\",{\"1\":{\"21\":1,\"22\":1}}],[\"identifiers\",{\"1\":{\"7\":1,\"101\":2,\"102\":1}}],[\"identifier\",{\"1\":{\"7\":3,\"11\":2,\"14\":2,\"17\":1,\"21\":1,\"22\":1,\"31\":1,\"61\":6,\"62\":2,\"63\":5,\"65\":1,\"66\":3,\"70\":2,\"72\":3,\"74\":1,\"75\":1,\"82\":14,\"83\":1,\"101\":3,\"102\":1,\"105\":1,\"107\":1}}],[\"identification\",{\"1\":{\"8\":1,\"21\":1,\"32\":1}}],[\"identical\",{\"1\":{\"10\":1,\"25\":1,\"87\":3,\"89\":1}}],[\"ides\",{\"1\":{\"40\":1,\"41\":1,\"113\":1}}],[\"ideal\",{\"1\":{\"223\":1}}],[\"ideally\",{\"1\":{\"140\":1,\"162\":1,\"164\":1,\"175\":1,\"188\":1,\"218\":1,\"223\":1}}],[\"idea\",{\"1\":{\"35\":1,\"42\":1,\"43\":4,\"44\":1,\"45\":1,\"48\":1,\"59\":1,\"64\":1,\"83\":1,\"110\":1,\"173\":1,\"228\":1,\"238\":1}}],[\"ideas\",{\"1\":{\"11\":1,\"21\":1,\"36\":1,\"116\":2}}],[\"ide\",{\"1\":{\"8\":1,\"9\":3,\"31\":4,\"40\":1,\"41\":5,\"43\":1,\"45\":4,\"46\":1,\"48\":1,\"49\":3,\"58\":1,\"59\":1,\"60\":1,\"64\":1,\"65\":2,\"72\":1,\"75\":2,\"82\":4,\"83\":2,\"84\":3,\"87\":2,\"94\":1,\"112\":1}}],[\"idle\",{\"1\":{\"34\":1}}],[\"idl\",{\"1\":{\"4\":1,\"9\":2}}],[\"iunknown\",{\"1\":{\"4\":1}}],[\"inaccessible\",{\"1\":{\"76\":2,\"79\":1}}],[\"inappropriate\",{\"1\":{\"35\":1}}],[\"innermsg\",{\"1\":{\"82\":1}}],[\"inner\",{\"1\":{\"69\":1,\"82\":2,\"181\":1,\"186\":1}}],[\"innovation\",{\"1\":{\"36\":1}}],[\"innovations\",{\"1\":{\"11\":1}}],[\"ing\",{\"1\":{\"35\":2}}],[\"ingress\",{\"1\":{\"21\":2}}],[\"inp\",{\"1\":{\"20\":2}}],[\"input\",{\"1\":{\"9\":1,\"18\":1,\"20\":2,\"21\":1,\"22\":1,\"30\":1,\"33\":2,\"34\":1,\"35\":1,\"50\":1,\"51\":2,\"53\":2,\"58\":1,\"63\":1,\"147\":2,\"253\":1}}],[\"inputs\",{\"1\":{\"9\":3,\"30\":1}}],[\"ini\",{\"1\":{\"13\":2}}],[\"initbaseaddress\",{\"1\":{\"248\":1,\"249\":2}}],[\"initdeque\",{\"1\":{\"239\":1}}],[\"initelfimage\",{\"1\":{\"235\":1,\"237\":1}}],[\"initarray\",{\"1\":{\"235\":1}}],[\"initrd\",{\"1\":{\"21\":1}}],[\"initially\",{\"1\":{\"96\":1}}],[\"initial\",{\"1\":{\"53\":2,\"78\":3,\"87\":1,\"248\":1}}],[\"initialstate\",{\"1\":{\"51\":1}}],[\"initializing\",{\"0\":{\"182\":1,\"249\":1},\"1\":{\"148\":2,\"169\":2,\"170\":4,\"171\":1,\"182\":4,\"183\":4,\"188\":3,\"191\":3,\"192\":1,\"193\":2,\"197\":2,\"198\":1,\"200\":1,\"209\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"219\":1,\"222\":4,\"223\":4,\"227\":1}}],[\"initialize\",{\"1\":{\"34\":1,\"100\":1,\"140\":2,\"162\":1,\"169\":2,\"181\":1,\"182\":1,\"209\":2,\"222\":1,\"223\":1,\"235\":1,\"248\":2,\"249\":3}}],[\"initializes\",{\"1\":{\"26\":1,\"34\":1,\"177\":1}}],[\"initialized\",{\"1\":{\"11\":1,\"31\":1,\"87\":1,\"129\":1,\"147\":1,\"169\":1,\"249\":1}}],[\"initialization\",{\"0\":{\"169\":1,\"209\":1},\"1\":{\"9\":1,\"13\":1,\"103\":1,\"124\":1,\"169\":1,\"209\":1}}],[\"initialisms\",{\"1\":{\"2\":1}}],[\"initiated\",{\"1\":{\"33\":1}}],[\"initiative\",{\"1\":{\"24\":1,\"36\":1}}],[\"initiators\",{\"1\":{\"21\":1}}],[\"init\",{\"1\":{\"11\":1,\"26\":3,\"33\":1,\"87\":2,\"118\":1,\"121\":1,\"130\":1,\"235\":1,\"249\":2}}],[\"inode\",{\"1\":{\"11\":1}}],[\"inorder\",{\"1\":{\"9\":1}}],[\"inlining\",{\"1\":{\"10\":1}}],[\"inline\",{\"1\":{\"7\":1,\"9\":1,\"13\":1,\"22\":2,\"29\":4,\"115\":1,\"130\":1,\"139\":1,\"168\":9,\"175\":4,\"182\":2,\"223\":1,\"239\":2,\"243\":1,\"248\":2}}],[\"inheritance\",{\"1\":{\"9\":1,\"177\":1}}],[\"inc\",{\"1\":{\"124\":1,\"159\":1,\"220\":1,\"230\":1}}],[\"inconvenient\",{\"1\":{\"208\":1}}],[\"inconvenience\",{\"1\":{\"55\":1}}],[\"incorrect\",{\"1\":{\"89\":1}}],[\"incorrectoperationexception\",{\"1\":{\"82\":2}}],[\"incomplete\",{\"1\":{\"35\":1}}],[\"incompatible\",{\"1\":{\"11\":1,\"14\":1}}],[\"incoming\",{\"1\":{\"11\":1}}],[\"inch\",{\"1\":{\"31\":2,\"32\":2}}],[\"increasing\",{\"1\":{\"86\":1}}],[\"increase\",{\"1\":{\"21\":1,\"85\":1,\"148\":1,\"159\":1}}],[\"increments\",{\"1\":{\"110\":1}}],[\"increment\",{\"1\":{\"9\":1,\"96\":2}}],[\"incident\",{\"1\":{\"19\":1}}],[\"including\",{\"1\":{\"9\":1,\"11\":2,\"43\":1,\"53\":1,\"56\":1,\"84\":1,\"89\":1,\"110\":2,\"146\":1,\"150\":1,\"180\":1,\"181\":1,\"184\":1,\"185\":1,\"235\":1}}],[\"included\",{\"1\":{\"25\":1,\"105\":1,\"147\":1,\"148\":1,\"228\":1}}],[\"includes\",{\"1\":{\"7\":1,\"21\":1,\"36\":1,\"53\":1,\"79\":1,\"105\":2,\"124\":1,\"195\":1,\"240\":1}}],[\"include\",{\"1\":{\"4\":1,\"18\":1,\"21\":1,\"30\":1,\"54\":1,\"63\":1,\"80\":1,\"83\":1,\"97\":3,\"99\":1,\"105\":1,\"115\":1,\"124\":9,\"147\":2,\"226\":1,\"229\":1,\"234\":1,\"245\":2}}],[\"invariant\",{\"1\":{\"10\":1}}],[\"invalidelfimage\",{\"1\":{\"235\":2}}],[\"invalidarg\",{\"1\":{\"214\":2}}],[\"invalidating\",{\"1\":{\"160\":1}}],[\"invalidation\",{\"1\":{\"35\":1}}],[\"invalidsyscall\",{\"1\":{\"213\":2,\"214\":1}}],[\"invalid\",{\"1\":{\"9\":1,\"87\":3,\"160\":2,\"192\":4,\"214\":2,\"230\":2}}],[\"involve\",{\"1\":{\"168\":2,\"242\":1}}],[\"involves\",{\"1\":{\"167\":1,\"220\":1}}],[\"involved\",{\"1\":{\"46\":1,\"52\":1,\"56\":1,\"87\":1,\"185\":1}}],[\"involvement\",{\"1\":{\"33\":1}}],[\"invocation\",{\"1\":{\"9\":1,\"239\":1}}],[\"invokes\",{\"1\":{\"206\":1,\"238\":1,\"241\":1}}],[\"invoke\",{\"1\":{\"70\":1,\"92\":1,\"190\":1,\"206\":1,\"210\":1,\"213\":1,\"215\":1,\"241\":1,\"242\":1,\"243\":2}}],[\"invoked\",{\"1\":{\"9\":1,\"11\":1,\"106\":1,\"239\":2}}],[\"invoking\",{\"0\":{\"206\":1,\"210\":1},\"1\":{\"7\":1,\"72\":1,\"190\":1,\"191\":2,\"192\":2,\"193\":3,\"238\":1,\"242\":2}}],[\"invented\",{\"1\":{\"35\":1}}],[\"inventory\",{\"1\":{\"22\":1}}],[\"investigating\",{\"1\":{\"35\":1}}],[\"investigation\",{\"1\":{\"22\":1}}],[\"invest\",{\"1\":{\"6\":1}}],[\"inversion\",{\"1\":{\"5\":1}}],[\"infinite\",{\"1\":{\"105\":1,\"192\":1,\"215\":1}}],[\"infiniband\",{\"1\":{\"24\":1}}],[\"infix\",{\"1\":{\"102\":1}}],[\"infra\",{\"1\":{\"24\":1}}],[\"infrastructure\",{\"0\":{\"24\":1},\"1\":{\"4\":1,\"9\":1,\"10\":1,\"22\":1,\"24\":3}}],[\"inf\",{\"1\":{\"13\":2,\"16\":1,\"44\":2,\"48\":1,\"64\":1,\"147\":2,\"226\":1,\"228\":2,\"229\":1,\"234\":1}}],[\"infosize\",{\"1\":{\"154\":1}}],[\"infotype\",{\"1\":{\"154\":1}}],[\"infotainment\",{\"1\":{\"11\":1}}],[\"informs\",{\"1\":{\"21\":1}}],[\"informed\",{\"1\":{\"11\":1,\"21\":1}}],[\"information\",{\"1\":{\"7\":1,\"10\":2,\"11\":3,\"13\":1,\"14\":1,\"15\":1,\"17\":3,\"21\":4,\"23\":2,\"35\":2,\"36\":2,\"48\":1,\"57\":1,\"78\":1,\"97\":1,\"121\":1,\"147\":1,\"150\":1,\"160\":1,\"185\":1,\"188\":1,\"191\":2,\"217\":1,\"222\":1,\"230\":1,\"232\":1,\"233\":2,\"234\":1,\"237\":1}}],[\"info\",{\"1\":{\"11\":1,\"21\":1,\"34\":1,\"35\":3,\"147\":2,\"154\":2,\"162\":6,\"163\":1,\"164\":1,\"180\":2,\"181\":2,\"188\":2,\"197\":1,\"200\":1,\"210\":2,\"212\":1,\"230\":3,\"234\":1,\"235\":1,\"249\":2}}],[\"influence\",{\"1\":{\"124\":1}}],[\"influenced\",{\"1\":{\"8\":2,\"11\":4,\"21\":3,\"25\":1}}],[\"influencing\",{\"1\":{\"17\":1}}],[\"influential\",{\"1\":{\"6\":1,\"8\":3,\"11\":6}}],[\"inference\",{\"1\":{\"8\":1,\"10\":2,\"28\":1}}],[\"ind>>\",{\"1\":{\"107\":3,\"109\":5,\"110\":4}}],[\"ind\",{\"1\":{\"86\":5,\"87\":4,\"89\":5,\"90\":1,\"91\":3,\"92\":5,\"97\":1,\"110\":9}}],[\"industry\",{\"1\":{\"25\":1,\"30\":5,\"32\":1,\"36\":3}}],[\"industries\",{\"1\":{\"11\":1}}],[\"industrial\",{\"1\":{\"11\":3,\"30\":2,\"36\":1}}],[\"individual\",{\"1\":{\"23\":2,\"33\":1,\"93\":1,\"237\":2}}],[\"indirect\",{\"1\":{\"22\":1}}],[\"indicated\",{\"1\":{\"212\":1}}],[\"indicates\",{\"1\":{\"35\":2,\"44\":1,\"186\":1}}],[\"indicate\",{\"1\":{\"20\":1,\"44\":1,\"51\":1,\"58\":1,\"66\":1,\"79\":1,\"89\":1,\"174\":1,\"192\":1}}],[\"indicating\",{\"1\":{\"14\":1,\"35\":2,\"66\":1,\"77\":1}}],[\"indicators\",{\"1\":{\"31\":1}}],[\"indicator\",{\"1\":{\"6\":1,\"19\":1,\"32\":1,\"186\":1}}],[\"indeed\",{\"1\":{\"210\":1,\"212\":1,\"228\":1}}],[\"indefinitely\",{\"1\":{\"192\":1}}],[\"indents\",{\"1\":{\"110\":3}}],[\"indentstack\",{\"1\":{\"87\":13,\"88\":1,\"89\":4}}],[\"indented\",{\"1\":{\"89\":1,\"90\":2,\"92\":4,\"97\":3}}],[\"indent\",{\"1\":{\"87\":2,\"89\":2,\"110\":2}}],[\"indentation\",{\"0\":{\"85\":1,\"86\":1,\"110\":1},\"1\":{\"80\":1,\"85\":20,\"86\":5,\"87\":16,\"88\":4,\"89\":10,\"90\":2,\"94\":1,\"110\":12}}],[\"indexed\",{\"1\":{\"213\":1}}],[\"indexes\",{\"1\":{\"17\":1}}],[\"indexdefect\",{\"1\":{\"141\":1,\"166\":1}}],[\"indexing\",{\"1\":{\"17\":1,\"21\":1,\"175\":2}}],[\"index\",{\"1\":{\"7\":1,\"17\":2,\"20\":1,\"21\":1,\"43\":1,\"147\":2,\"174\":16,\"175\":9,\"177\":6,\"186\":1,\"190\":3,\"220\":7,\"234\":1,\"235\":2}}],[\"independently\",{\"1\":{\"248\":1}}],[\"independent\",{\"0\":{\"224\":1},\"1\":{\"5\":2,\"7\":1,\"9\":1,\"13\":3,\"20\":1,\"22\":1,\"31\":1,\"36\":1,\"162\":1,\"224\":3,\"225\":1,\"234\":1,\"235\":1}}],[\"inject\",{\"1\":{\"5\":1,\"22\":1}}],[\"injection\",{\"1\":{\"5\":1,\"22\":2}}],[\"insufficient\",{\"1\":{\"87\":2}}],[\"insurance\",{\"1\":{\"23\":1}}],[\"inservice\",{\"1\":{\"248\":1}}],[\"inserted\",{\"1\":{\"171\":1}}],[\"inserts\",{\"1\":{\"10\":1}}],[\"inserting\",{\"1\":{\"9\":1}}],[\"insert\",{\"1\":{\"9\":2,\"17\":1,\"96\":1,\"168\":1,\"171\":1,\"177\":1}}],[\"insensitivity\",{\"1\":{\"74\":1}}],[\"insecure\",{\"1\":{\"21\":1}}],[\"insight\",{\"1\":{\"35\":1}}],[\"insights\",{\"1\":{\"17\":1}}],[\"inside\",{\"1\":{\"5\":1,\"13\":1,\"22\":1,\"53\":2,\"80\":1,\"89\":2,\"110\":1,\"245\":1}}],[\"ins\",{\"1\":{\"11\":1,\"21\":1}}],[\"inspecting\",{\"1\":{\"64\":1}}],[\"inspection\",{\"1\":{\"17\":1}}],[\"inspects\",{\"1\":{\"22\":1}}],[\"inspect\",{\"1\":{\"10\":3,\"11\":4,\"30\":1,\"41\":1,\"60\":1,\"71\":1,\"226\":2,\"234\":1}}],[\"inspired\",{\"1\":{\"5\":1,\"11\":2,\"18\":1}}],[\"institute\",{\"1\":{\"36\":3}}],[\"institutions\",{\"1\":{\"21\":1}}],[\"instrumentationtools\",{\"1\":{\"43\":2}}],[\"instrumentation\",{\"1\":{\"30\":1}}],[\"instruments\",{\"1\":{\"30\":1}}],[\"instrument\",{\"1\":{\"30\":1,\"43\":1}}],[\"instructions\",{\"1\":{\"9\":1,\"14\":1,\"20\":2,\"24\":2,\"25\":3,\"26\":1,\"28\":1,\"146\":1,\"192\":3,\"194\":1,\"200\":2,\"208\":1,\"210\":2}}],[\"instruction\",{\"1\":{\"8\":1,\"9\":2,\"18\":1,\"20\":2,\"21\":1,\"22\":1,\"25\":7,\"26\":2,\"27\":2,\"28\":4,\"33\":2,\"181\":1,\"188\":4,\"190\":1,\"191\":3,\"192\":14,\"194\":2,\"195\":1,\"196\":2,\"200\":4,\"205\":1,\"206\":1,\"207\":1,\"210\":1,\"225\":1,\"240\":1}}],[\"installhandler\",{\"1\":{\"192\":23,\"193\":1,\"206\":3,\"249\":1}}],[\"installmultipleprotocolinterfaces\",{\"1\":{\"151\":1}}],[\"installconfigurationtable\",{\"1\":{\"151\":1}}],[\"installprotocolinterface\",{\"1\":{\"151\":1}}],[\"installed\",{\"1\":{\"42\":1,\"43\":1,\"119\":1,\"123\":1,\"134\":2,\"136\":1,\"191\":1}}],[\"installer\",{\"1\":{\"9\":1,\"11\":2,\"13\":2,\"21\":1,\"118\":1}}],[\"installs\",{\"1\":{\"13\":1,\"31\":1}}],[\"installation\",{\"1\":{\"13\":2,\"37\":1,\"41\":1,\"134\":1,\"193\":1}}],[\"installable\",{\"1\":{\"7\":1,\"11\":1}}],[\"installing\",{\"1\":{\"11\":1}}],[\"install\",{\"1\":{\"7\":1,\"11\":4,\"29\":1,\"41\":1,\"42\":2,\"117\":1,\"118\":5,\"119\":1,\"120\":1,\"134\":1,\"181\":1,\"191\":1,\"192\":3,\"249\":2}}],[\"instant\",{\"1\":{\"11\":1,\"21\":5}}],[\"instantiating\",{\"1\":{\"5\":1}}],[\"instances\",{\"1\":{\"24\":1,\"41\":1,\"52\":2,\"58\":5,\"61\":1,\"70\":2,\"187\":1}}],[\"instanceof\",{\"1\":{\"10\":1}}],[\"instance\",{\"1\":{\"5\":1,\"9\":1,\"10\":1,\"24\":1,\"45\":1,\"47\":1,\"48\":1,\"58\":2,\"59\":1,\"61\":3,\"64\":1,\"77\":3,\"78\":4,\"82\":2,\"89\":1,\"162\":4,\"176\":4,\"187\":1,\"190\":1,\"202\":1,\"228\":2}}],[\"instead\",{\"1\":{\"5\":6,\"10\":1,\"12\":1,\"21\":1,\"22\":1,\"31\":1,\"35\":1,\"45\":2,\"51\":1,\"53\":1,\"57\":1,\"61\":1,\"69\":1,\"72\":1,\"73\":1,\"74\":2,\"75\":1,\"79\":1,\"83\":1,\"87\":1,\"88\":1,\"92\":1,\"100\":1,\"104\":2,\"123\":1,\"124\":1,\"133\":1,\"134\":1,\"135\":1,\"140\":1,\"142\":1,\"146\":1,\"147\":1,\"162\":2,\"175\":1,\"177\":1,\"179\":1,\"188\":2,\"193\":1,\"196\":1,\"197\":1,\"207\":1,\"214\":1,\"215\":1,\"218\":1,\"224\":1,\"225\":3,\"228\":1,\"229\":1,\"230\":3,\"234\":1,\"240\":2,\"243\":1,\"246\":1}}],[\"int1\",{\"1\":{\"248\":1}}],[\"int16\",{\"1\":{\"153\":1}}],[\"int0\",{\"1\":{\"248\":1}}],[\"int64\",{\"1\":{\"230\":2}}],[\"int3\",{\"1\":{\"190\":1,\"192\":1}}],[\"intlit\",{\"1\":{\"99\":2,\"101\":2}}],[\"intsuffix\",{\"1\":{\"99\":2}}],[\"intnum\",{\"1\":{\"99\":2}}],[\"int\",{\"1\":{\"10\":2,\"11\":1,\"51\":7,\"87\":2,\"88\":1,\"89\":2,\"96\":1,\"99\":2,\"100\":2,\"101\":3,\"106\":1,\"110\":3,\"123\":1,\"124\":12,\"128\":1,\"130\":1,\"139\":1,\"190\":1,\"191\":2,\"192\":1,\"205\":2,\"206\":2,\"207\":1,\"227\":2,\"237\":2,\"245\":1}}],[\"intr\",{\"1\":{\"192\":1}}],[\"intricate\",{\"1\":{\"87\":1}}],[\"intrinsics\",{\"1\":{\"9\":1,\"27\":1,\"28\":1}}],[\"intrusion\",{\"1\":{\"22\":2}}],[\"introduction\",{\"0\":{\"40\":1,\"115\":1}}],[\"introduce\",{\"1\":{\"83\":1,\"87\":1,\"88\":1,\"89\":1,\"95\":1,\"96\":3}}],[\"introduces\",{\"1\":{\"35\":1,\"187\":1}}],[\"introduced\",{\"1\":{\"8\":1,\"11\":3,\"25\":1,\"30\":1,\"62\":1}}],[\"introducing\",{\"1\":{\"11\":4,\"25\":1,\"88\":1,\"173\":1}}],[\"intranet\",{\"1\":{\"7\":1}}],[\"intended\",{\"1\":{\"33\":1}}],[\"intentionally\",{\"1\":{\"9\":1,\"63\":1}}],[\"intel\",{\"1\":{\"11\":1,\"22\":1,\"25\":12,\"28\":2,\"29\":1,\"30\":3,\"33\":3,\"123\":1,\"185\":1,\"186\":1,\"188\":1,\"189\":1,\"192\":4,\"248\":1}}],[\"intelligence\",{\"0\":{\"18\":1},\"1\":{\"9\":1,\"17\":1,\"18\":2}}],[\"intellijideacommunity\",{\"1\":{\"43\":1}}],[\"intellijplatform\",{\"1\":{\"43\":6}}],[\"intellij\",{\"1\":{\"9\":1,\"40\":1,\"41\":4,\"42\":3,\"43\":7,\"44\":6,\"45\":2,\"47\":3,\"48\":1,\"50\":1,\"51\":1,\"53\":3,\"54\":4,\"55\":1,\"64\":2,\"72\":1,\"75\":1,\"77\":1,\"83\":1,\"87\":1}}],[\"integer\",{\"1\":{\"20\":1,\"26\":1,\"28\":2,\"98\":2,\"99\":4,\"101\":1,\"146\":1,\"245\":1}}],[\"integers\",{\"1\":{\"9\":1}}],[\"integrity\",{\"1\":{\"17\":1,\"21\":1,\"22\":5,\"24\":1,\"34\":1}}],[\"integrators\",{\"1\":{\"33\":1}}],[\"integrating\",{\"1\":{\"11\":1,\"14\":1,\"33\":1}}],[\"integrations\",{\"1\":{\"4\":1}}],[\"integration\",{\"1\":{\"4\":3,\"6\":4,\"17\":1}}],[\"integrate\",{\"1\":{\"21\":1}}],[\"integrated\",{\"1\":{\"9\":4,\"11\":1,\"17\":3,\"21\":2,\"25\":1,\"30\":2,\"31\":1,\"33\":1,\"188\":1,\"247\":1}}],[\"integrates\",{\"1\":{\"4\":1,\"21\":1}}],[\"interp\",{\"1\":{\"235\":2}}],[\"interprocedural\",{\"1\":{\"10\":1}}],[\"interpreting\",{\"1\":{\"228\":1}}],[\"interprets\",{\"1\":{\"34\":1}}],[\"interpreted\",{\"1\":{\"34\":1,\"185\":2}}],[\"interpreter\",{\"1\":{\"11\":1,\"34\":1}}],[\"interpreters\",{\"1\":{\"9\":1}}],[\"interpret\",{\"1\":{\"13\":1}}],[\"interpretation\",{\"1\":{\"9\":1,\"35\":1}}],[\"intervention\",{\"1\":{\"201\":1}}],[\"interval\",{\"1\":{\"33\":1}}],[\"interfering\",{\"1\":{\"194\":1}}],[\"interfaces\",{\"0\":{\"30\":1},\"1\":{\"4\":1,\"5\":2,\"6\":1,\"7\":1,\"9\":3,\"11\":2,\"21\":1,\"29\":1,\"30\":1,\"52\":2,\"59\":1,\"69\":1,\"177\":1}}],[\"interface\",{\"0\":{\"51\":1,\"208\":1},\"1\":{\"4\":3,\"5\":6,\"6\":1,\"7\":5,\"9\":7,\"11\":5,\"17\":1,\"21\":6,\"24\":1,\"30\":10,\"31\":7,\"32\":4,\"33\":2,\"34\":6,\"52\":3,\"53\":1,\"57\":1,\"58\":1,\"59\":3,\"61\":4,\"69\":2,\"72\":1,\"74\":2,\"75\":1,\"77\":2,\"82\":1,\"95\":2,\"99\":1,\"101\":1,\"122\":1,\"138\":1,\"207\":1,\"208\":4,\"215\":1,\"235\":1,\"244\":1,\"252\":1}}],[\"interspersed\",{\"1\":{\"94\":1,\"97\":1}}],[\"interlocked\",{\"1\":{\"25\":1}}],[\"interlinked\",{\"1\":{\"7\":1}}],[\"interior\",{\"1\":{\"21\":2}}],[\"intercept\",{\"1\":{\"22\":1}}],[\"intercepts\",{\"1\":{\"11\":1}}],[\"interconnects\",{\"1\":{\"21\":1,\"30\":2,\"33\":1}}],[\"interconnecting\",{\"1\":{\"21\":1,\"30\":1}}],[\"interconnection\",{\"1\":{\"21\":1}}],[\"interconnect\",{\"1\":{\"21\":1,\"30\":9,\"36\":1}}],[\"interchangeable\",{\"1\":{\"29\":1}}],[\"interchangeably\",{\"1\":{\"6\":1}}],[\"interchange\",{\"0\":{\"15\":1},\"1\":{\"13\":2,\"14\":2}}],[\"interruptframe\",{\"1\":{\"249\":1}}],[\"interruptcommandhi\",{\"1\":{\"248\":1}}],[\"interruptcommandlo\",{\"1\":{\"248\":1}}],[\"interruptrequest\",{\"1\":{\"248\":1}}],[\"interrupthandler\",{\"1\":{\"190\":2,\"192\":1,\"206\":2}}],[\"interruptgate\",{\"1\":{\"190\":5,\"206\":2}}],[\"interrupted\",{\"1\":{\"130\":1,\"187\":1,\"191\":1,\"194\":1,\"199\":1}}],[\"interrupts\",{\"0\":{\"189\":1,\"206\":1},\"1\":{\"11\":1,\"27\":1,\"28\":1,\"30\":2,\"33\":2,\"34\":1,\"122\":1,\"130\":1,\"188\":1,\"189\":1,\"190\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"201\":2,\"206\":1,\"207\":1,\"208\":2,\"209\":1,\"210\":1,\"211\":1,\"246\":2,\"247\":6,\"248\":3,\"249\":6,\"252\":1}}],[\"interrupt\",{\"0\":{\"190\":1,\"191\":1,\"199\":1,\"247\":1},\"1\":{\"11\":8,\"26\":3,\"27\":1,\"28\":2,\"33\":4,\"34\":6,\"116\":1,\"130\":1,\"146\":1,\"186\":1,\"188\":2,\"189\":4,\"190\":28,\"191\":22,\"192\":12,\"193\":7,\"194\":6,\"195\":3,\"199\":3,\"200\":2,\"201\":5,\"204\":1,\"205\":1,\"206\":8,\"208\":1,\"209\":1,\"210\":1,\"220\":3,\"221\":1,\"238\":1,\"246\":2,\"247\":5,\"248\":2,\"249\":20}}],[\"intermediate\",{\"1\":{\"10\":6,\"58\":2,\"68\":1,\"77\":1}}],[\"internals\",{\"1\":{\"140\":1}}],[\"internal\",{\"1\":{\"19\":1,\"41\":2,\"247\":1,\"248\":1}}],[\"internalize\",{\"1\":{\"9\":1}}],[\"internally\",{\"1\":{\"9\":1}}],[\"internationally\",{\"1\":{\"21\":2}}],[\"internationalized\",{\"1\":{\"6\":1}}],[\"internationalization\",{\"1\":{\"6\":2}}],[\"international\",{\"1\":{\"6\":1,\"7\":1,\"30\":1,\"36\":5}}],[\"internetworking\",{\"1\":{\"21\":2}}],[\"internetwork\",{\"1\":{\"21\":1}}],[\"internet\",{\"1\":{\"7\":4,\"14\":2,\"21\":27,\"24\":1,\"36\":5}}],[\"interactive\",{\"1\":{\"6\":1,\"8\":1,\"9\":1,\"11\":9,\"20\":1,\"21\":1,\"25\":1}}],[\"interactions\",{\"1\":{\"9\":2}}],[\"interaction\",{\"1\":{\"6\":1,\"9\":1,\"18\":1,\"20\":1}}],[\"interact\",{\"1\":{\"5\":1,\"9\":1,\"24\":1,\"30\":1}}],[\"interoperable\",{\"1\":{\"15\":1,\"21\":2}}],[\"interoperability\",{\"1\":{\"11\":1,\"21\":1,\"36\":1}}],[\"interop\",{\"1\":{\"4\":1,\"21\":1}}],[\"inter\",{\"1\":{\"4\":1,\"11\":1,\"21\":2,\"30\":1,\"231\":1,\"248\":1}}],[\"interested\",{\"1\":{\"123\":1,\"134\":1,\"138\":1,\"147\":3,\"151\":1,\"230\":1,\"234\":1,\"235\":1,\"248\":1,\"249\":1}}],[\"interesting\",{\"1\":{\"116\":1,\"147\":1}}],[\"interest\",{\"1\":{\"3\":1,\"36\":1}}],[\"into\",{\"1\":{\"4\":4,\"5\":2,\"7\":1,\"9\":2,\"10\":2,\"11\":13,\"13\":1,\"16\":1,\"18\":1,\"21\":9,\"22\":1,\"24\":1,\"33\":1,\"50\":1,\"57\":2,\"58\":2,\"63\":3,\"74\":1,\"75\":1,\"79\":2,\"89\":1,\"90\":1,\"92\":2,\"100\":1,\"104\":4,\"105\":2,\"106\":1,\"107\":1,\"116\":1,\"131\":2,\"135\":1,\"141\":1,\"142\":1,\"143\":2,\"147\":6,\"148\":5,\"149\":1,\"150\":3,\"154\":1,\"155\":1,\"157\":4,\"162\":1,\"166\":1,\"173\":1,\"174\":5,\"175\":1,\"177\":2,\"181\":1,\"186\":2,\"187\":1,\"188\":2,\"190\":4,\"191\":1,\"192\":1,\"195\":2,\"197\":3,\"200\":2,\"201\":1,\"203\":1,\"206\":1,\"215\":1,\"218\":1,\"220\":2,\"225\":1,\"233\":2,\"234\":3,\"235\":3,\"236\":2,\"237\":6,\"239\":1,\"242\":1,\"246\":1,\"247\":1}}],[\"in\",{\"0\":{\"83\":1,\"84\":1,\"114\":1},\"1\":{\"1\":1,\"3\":2,\"4\":6,\"5\":7,\"6\":8,\"7\":3,\"8\":6,\"9\":29,\"10\":28,\"11\":33,\"12\":2,\"13\":5,\"14\":6,\"15\":8,\"16\":4,\"17\":12,\"18\":2,\"20\":1,\"21\":34,\"22\":12,\"24\":2,\"25\":14,\"26\":3,\"28\":4,\"29\":13,\"30\":13,\"31\":10,\"32\":3,\"33\":3,\"34\":7,\"35\":20,\"36\":4,\"37\":1,\"39\":1,\"40\":1,\"41\":6,\"45\":2,\"46\":1,\"47\":1,\"48\":2,\"49\":2,\"50\":3,\"51\":7,\"52\":10,\"53\":11,\"54\":6,\"55\":1,\"56\":3,\"57\":4,\"58\":15,\"59\":2,\"60\":2,\"61\":3,\"62\":1,\"63\":4,\"64\":3,\"65\":1,\"66\":4,\"68\":7,\"69\":2,\"70\":7,\"71\":1,\"72\":7,\"73\":2,\"74\":5,\"75\":11,\"76\":8,\"77\":11,\"78\":6,\"79\":7,\"80\":5,\"82\":5,\"83\":12,\"84\":7,\"85\":8,\"86\":3,\"87\":17,\"88\":7,\"89\":15,\"90\":7,\"91\":1,\"92\":8,\"93\":1,\"94\":5,\"95\":5,\"96\":3,\"97\":10,\"98\":3,\"99\":1,\"100\":2,\"101\":3,\"102\":4,\"103\":3,\"104\":11,\"105\":4,\"106\":8,\"107\":3,\"109\":3,\"110\":5,\"112\":1,\"113\":2,\"115\":1,\"116\":3,\"117\":1,\"122\":2,\"123\":2,\"124\":10,\"125\":1,\"127\":2,\"129\":1,\"131\":3,\"132\":2,\"133\":6,\"134\":1,\"135\":7,\"136\":1,\"137\":2,\"138\":2,\"139\":4,\"140\":4,\"141\":11,\"143\":10,\"144\":3,\"145\":1,\"146\":2,\"147\":33,\"148\":9,\"149\":2,\"150\":2,\"151\":6,\"152\":1,\"153\":3,\"154\":2,\"155\":2,\"156\":1,\"158\":1,\"159\":4,\"160\":5,\"161\":3,\"162\":9,\"163\":2,\"164\":9,\"165\":2,\"166\":7,\"167\":1,\"168\":5,\"169\":2,\"170\":3,\"171\":5,\"172\":2,\"173\":1,\"174\":12,\"175\":4,\"176\":3,\"177\":15,\"178\":2,\"179\":5,\"180\":3,\"181\":4,\"182\":1,\"183\":3,\"184\":2,\"185\":12,\"186\":5,\"187\":9,\"188\":2,\"189\":3,\"190\":11,\"191\":2,\"192\":6,\"193\":3,\"194\":5,\"195\":5,\"196\":8,\"197\":7,\"198\":2,\"199\":2,\"200\":5,\"201\":8,\"202\":1,\"206\":2,\"207\":2,\"208\":3,\"209\":7,\"210\":6,\"211\":3,\"212\":2,\"213\":4,\"214\":2,\"215\":4,\"216\":1,\"217\":1,\"218\":7,\"220\":6,\"222\":2,\"223\":5,\"225\":7,\"226\":4,\"227\":8,\"228\":11,\"229\":8,\"230\":6,\"231\":3,\"232\":3,\"233\":1,\"234\":2,\"235\":15,\"236\":2,\"237\":18,\"238\":3,\"239\":9,\"240\":2,\"241\":1,\"243\":3,\"244\":2,\"245\":1,\"246\":4,\"247\":3,\"248\":1,\"249\":7,\"250\":1,\"251\":1}}],[\"isbsp\",{\"1\":{\"248\":1}}],[\"isbn\",{\"1\":{\"7\":2}}],[\"ist6\",{\"1\":{\"202\":1}}],[\"ist5\",{\"1\":{\"202\":1}}],[\"ist4\",{\"1\":{\"202\":1}}],[\"ist3\",{\"1\":{\"202\":1}}],[\"ist2\",{\"1\":{\"202\":1}}],[\"ist7\",{\"1\":{\"201\":3,\"202\":1}}],[\"ist1\",{\"1\":{\"201\":3,\"202\":1}}],[\"ist\",{\"1\":{\"190\":5,\"201\":1}}],[\"issome\",{\"1\":{\"170\":1,\"197\":1}}],[\"issue\",{\"1\":{\"22\":1,\"35\":1,\"87\":3,\"88\":1,\"89\":5,\"96\":3,\"110\":1,\"141\":1,\"147\":1}}],[\"issues\",{\"1\":{\"6\":1,\"11\":1,\"21\":1,\"22\":2,\"34\":1,\"88\":1,\"89\":1,\"105\":2,\"250\":1}}],[\"iswhitespace\",{\"1\":{\"106\":2}}],[\"isunary\",{\"1\":{\"106\":2}}],[\"ismemberinplacerenameavailable\",{\"1\":{\"83\":1}}],[\"isinplacerenameavailable\",{\"1\":{\"83\":4}}],[\"isnone\",{\"1\":{\"171\":1,\"220\":1,\"231\":1}}],[\"isnot\",{\"1\":{\"103\":1,\"104\":1}}],[\"isnil\",{\"1\":{\"140\":3,\"168\":2,\"169\":3,\"170\":3,\"171\":8,\"239\":2,\"240\":1}}],[\"isn\",{\"1\":{\"24\":1,\"177\":1,\"214\":1}}],[\"isnan\",{\"1\":{\"9\":1}}],[\"iscsi\",{\"1\":{\"21\":2,\"24\":1,\"31\":1}}],[\"isdn\",{\"1\":{\"21\":2}}],[\"isa\",{\"1\":{\"20\":1,\"25\":5,\"30\":3}}],[\"iso\",{\"1\":{\"14\":1,\"21\":2,\"22\":1,\"36\":6}}],[\"isolating\",{\"1\":{\"17\":1,\"21\":1}}],[\"isolation\",{\"1\":{\"11\":1,\"17\":1,\"22\":1,\"24\":1}}],[\"isolated\",{\"1\":{\"9\":1,\"11\":1,\"24\":1}}],[\"isolate\",{\"1\":{\"5\":1,\"24\":1}}],[\"isr100\",{\"1\":{\"191\":4,\"206\":7}}],[\"isrs\",{\"1\":{\"11\":1,\"33\":1}}],[\"isr\",{\"1\":{\"11\":5,\"249\":2}}],[\"iseries\",{\"1\":{\"8\":1}}],[\"isps\",{\"1\":{\"21\":2}}],[\"isp\",{\"1\":{\"5\":2,\"21\":6}}],[\"is\",{\"0\":{\"225\":1},\"1\":{\"1\":1,\"4\":1,\"5\":2,\"8\":1,\"9\":9,\"10\":3,\"13\":2,\"14\":2,\"20\":2,\"21\":10,\"22\":1,\"25\":1,\"26\":4,\"32\":2,\"35\":9,\"40\":2,\"41\":2,\"44\":1,\"45\":3,\"46\":3,\"47\":1,\"49\":2,\"50\":3,\"51\":3,\"52\":7,\"53\":6,\"55\":2,\"57\":9,\"58\":10,\"59\":8,\"61\":5,\"63\":8,\"64\":1,\"65\":1,\"66\":5,\"67\":2,\"68\":1,\"69\":3,\"70\":4,\"72\":6,\"73\":1,\"74\":11,\"75\":10,\"76\":4,\"77\":16,\"78\":10,\"79\":8,\"80\":4,\"82\":5,\"83\":8,\"85\":12,\"86\":1,\"87\":13,\"88\":5,\"89\":10,\"92\":4,\"93\":1,\"94\":2,\"95\":3,\"96\":8,\"97\":7,\"98\":2,\"99\":3,\"101\":1,\"102\":2,\"103\":3,\"104\":4,\"105\":5,\"106\":14,\"107\":7,\"109\":4,\"110\":7,\"112\":3,\"113\":3,\"115\":2,\"116\":3,\"118\":1,\"122\":2,\"123\":11,\"124\":16,\"127\":1,\"130\":2,\"131\":1,\"132\":1,\"133\":3,\"134\":6,\"135\":6,\"136\":1,\"138\":3,\"140\":1,\"141\":7,\"142\":1,\"144\":4,\"145\":2,\"146\":10,\"147\":28,\"148\":8,\"150\":3,\"151\":2,\"153\":3,\"154\":1,\"156\":2,\"157\":1,\"159\":2,\"160\":2,\"161\":3,\"162\":8,\"163\":1,\"164\":8,\"168\":2,\"169\":3,\"170\":7,\"171\":14,\"172\":1,\"173\":7,\"174\":8,\"175\":1,\"176\":5,\"177\":8,\"178\":1,\"179\":4,\"180\":2,\"181\":6,\"182\":2,\"183\":4,\"184\":3,\"185\":26,\"186\":18,\"187\":5,\"188\":6,\"189\":4,\"190\":15,\"191\":3,\"192\":4,\"193\":4,\"194\":9,\"195\":4,\"196\":3,\"197\":7,\"198\":1,\"199\":3,\"200\":8,\"201\":8,\"202\":1,\"204\":1,\"205\":3,\"206\":2,\"208\":3,\"209\":5,\"210\":5,\"212\":2,\"213\":2,\"214\":1,\"215\":1,\"217\":3,\"220\":2,\"222\":1,\"223\":4,\"224\":2,\"225\":10,\"226\":2,\"227\":10,\"228\":12,\"229\":4,\"230\":6,\"231\":3,\"232\":3,\"234\":3,\"235\":4,\"237\":9,\"238\":7,\"239\":5,\"240\":2,\"243\":1,\"245\":2,\"246\":1,\"247\":9,\"248\":12,\"249\":6,\"250\":2,\"251\":2}}],[\"sbi\",{\"1\":{\"34\":4}}],[\"sbc\",{\"1\":{\"33\":1}}],[\"sbcs\",{\"1\":{\"25\":1}}],[\"sboms\",{\"1\":{\"22\":1}}],[\"sbom\",{\"1\":{\"22\":1}}],[\"sfi\",{\"1\":{\"22\":2}}],[\"sftp\",{\"1\":{\"21\":2}}],[\"sft\",{\"1\":{\"18\":1}}],[\"srgb\",{\"1\":{\"32\":1}}],[\"sram\",{\"1\":{\"29\":3}}],[\"srcdirs\",{\"1\":{\"54\":1}}],[\"src\",{\"1\":{\"22\":1,\"44\":2,\"47\":3,\"48\":1,\"53\":1,\"54\":6,\"55\":2,\"61\":4,\"62\":1,\"63\":1,\"64\":2,\"66\":1,\"69\":6,\"71\":6,\"73\":2,\"74\":3,\"77\":1,\"78\":2,\"82\":3,\"83\":1,\"87\":2,\"88\":2,\"89\":4,\"90\":1,\"95\":3,\"99\":2,\"100\":1,\"104\":1,\"106\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":3,\"133\":3,\"135\":1,\"136\":1,\"138\":2,\"139\":4,\"140\":5,\"141\":2,\"143\":8,\"144\":1,\"145\":1,\"146\":1,\"147\":9,\"148\":4,\"151\":5,\"152\":2,\"153\":3,\"154\":4,\"156\":2,\"157\":2,\"158\":2,\"159\":2,\"160\":3,\"161\":2,\"162\":4,\"163\":2,\"164\":1,\"165\":1,\"166\":2,\"168\":4,\"169\":2,\"170\":2,\"171\":8,\"175\":1,\"177\":5,\"179\":2,\"180\":3,\"181\":2,\"182\":2,\"183\":1,\"187\":5,\"188\":3,\"190\":3,\"191\":3,\"192\":12,\"193\":15,\"196\":7,\"197\":8,\"198\":1,\"199\":1,\"200\":1,\"202\":5,\"203\":1,\"204\":1,\"205\":21,\"206\":8,\"209\":6,\"210\":2,\"211\":3,\"212\":2,\"213\":3,\"214\":2,\"215\":3,\"217\":1,\"218\":3,\"219\":2,\"220\":1,\"221\":1,\"222\":1,\"223\":4,\"226\":4,\"227\":2,\"230\":5,\"231\":2,\"234\":1,\"235\":1,\"237\":12,\"239\":3,\"240\":2,\"241\":2,\"242\":2,\"243\":1,\"245\":3,\"246\":1,\"248\":1,\"249\":1}}],[\"sri\",{\"1\":{\"21\":1,\"36\":2}}],[\"srh\",{\"1\":{\"21\":1}}],[\"srv6\",{\"1\":{\"21\":3}}],[\"sr\",{\"1\":{\"21\":2}}],[\"sre\",{\"1\":{\"19\":1}}],[\"srp\",{\"1\":{\"5\":2}}],[\"snim\",{\"1\":{\"124\":18,\"147\":1,\"228\":2}}],[\"snippet\",{\"1\":{\"72\":1,\"76\":1}}],[\"sniffing\",{\"1\":{\"22\":1}}],[\"snort\",{\"1\":{\"22\":2}}],[\"snowflake\",{\"1\":{\"17\":2}}],[\"snake\",{\"1\":{\"68\":1}}],[\"snarky\",{\"1\":{\"35\":1}}],[\"snapdragon\",{\"1\":{\"33\":1}}],[\"snapshot\",{\"1\":{\"17\":2}}],[\"snapshots\",{\"1\":{\"11\":4}}],[\"sna\",{\"1\":{\"21\":4}}],[\"snmp\",{\"1\":{\"21\":1}}],[\"sleeve\",{\"1\":{\"135\":1}}],[\"sleep\",{\"1\":{\"34\":1}}],[\"slurm\",{\"1\":{\"24\":1}}],[\"slow\",{\"1\":{\"105\":1}}],[\"slower\",{\"1\":{\"16\":2}}],[\"slot\",{\"1\":{\"30\":1,\"32\":1,\"202\":1}}],[\"slots\",{\"1\":{\"29\":2,\"33\":1,\"202\":1}}],[\"slo\",{\"1\":{\"19\":1}}],[\"slight\",{\"1\":{\"218\":1}}],[\"slightly\",{\"1\":{\"29\":1,\"35\":1}}],[\"slibc\",{\"1\":{\"228\":1}}],[\"slib\",{\"1\":{\"124\":18,\"147\":1,\"228\":2}}],[\"slice\",{\"1\":{\"103\":1,\"238\":1}}],[\"slip\",{\"1\":{\"21\":1}}],[\"sli\",{\"1\":{\"19\":1}}],[\"sliding\",{\"1\":{\"16\":2,\"21\":1}}],[\"sla\",{\"1\":{\"19\":1}}],[\"slave\",{\"1\":{\"11\":1,\"30\":1}}],[\"sgram\",{\"1\":{\"32\":1}}],[\"sgs\",{\"1\":{\"24\":1}}],[\"sgml\",{\"1\":{\"12\":3}}],[\"sgi\",{\"1\":{\"10\":2,\"11\":3,\"25\":1}}],[\"sve\",{\"1\":{\"27\":1}}],[\"svc\",{\"1\":{\"21\":1}}],[\"svga\",{\"1\":{\"32\":1}}],[\"svg\",{\"1\":{\"13\":2}}],[\"svs\",{\"1\":{\"11\":1}}],[\"svr4\",{\"1\":{\"11\":5}}],[\"svn\",{\"1\":{\"6\":1}}],[\"ss\",{\"1\":{\"186\":14,\"187\":1,\"188\":4,\"191\":1,\"192\":2,\"194\":2,\"199\":3,\"200\":2,\"205\":1,\"209\":2,\"210\":4,\"212\":2,\"220\":1}}],[\"ssystem\",{\"1\":{\"124\":16,\"147\":1,\"228\":2}}],[\"sstd\",{\"1\":{\"124\":2}}],[\"sstables\",{\"1\":{\"17\":1}}],[\"ssf\",{\"1\":{\"118\":1}}],[\"ssns\",{\"1\":{\"23\":1}}],[\"ssl\",{\"1\":{\"22\":1}}],[\"sso\",{\"1\":{\"22\":2}}],[\"sse3\",{\"1\":{\"192\":1}}],[\"sse4\",{\"1\":{\"28\":1}}],[\"sse2\",{\"1\":{\"28\":1,\"192\":1}}],[\"sse\",{\"1\":{\"21\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":2,\"146\":1,\"192\":1}}],[\"ssdts\",{\"1\":{\"34\":1}}],[\"ssdt\",{\"1\":{\"34\":2}}],[\"ssds\",{\"1\":{\"31\":6}}],[\"ssd\",{\"1\":{\"20\":1,\"31\":2}}],[\"ssh\",{\"1\":{\"11\":2,\"21\":4,\"22\":2}}],[\"sshfs\",{\"1\":{\"11\":1}}],[\"ssa\",{\"1\":{\"10\":7}}],[\"ssrf\",{\"1\":{\"22\":1}}],[\"ssr\",{\"1\":{\"7\":2}}],[\"squiggly\",{\"1\":{\"66\":1}}],[\"sqs\",{\"1\":{\"17\":2}}],[\"sqrt\",{\"1\":{\"9\":1}}],[\"sqli\",{\"1\":{\"22\":1}}],[\"sqlite\",{\"1\":{\"17\":1}}],[\"sqlconnection\",{\"1\":{\"17\":1}}],[\"sql\",{\"1\":{\"9\":2,\"17\":8,\"22\":2}}],[\"synced\",{\"1\":{\"22\":1}}],[\"synchronously\",{\"1\":{\"116\":1}}],[\"synchronous\",{\"1\":{\"21\":4,\"29\":2,\"30\":3}}],[\"synchronize\",{\"1\":{\"21\":1}}],[\"synchronized\",{\"1\":{\"14\":1,\"29\":1}}],[\"synchronization\",{\"1\":{\"11\":1,\"252\":1}}],[\"syncing\",{\"1\":{\"21\":2}}],[\"sync\",{\"1\":{\"21\":1,\"32\":1,\"84\":1}}],[\"synth\",{\"1\":{\"30\":1}}],[\"synthesize\",{\"1\":{\"18\":1}}],[\"syntactic\",{\"1\":{\"10\":1}}],[\"syntax\",{\"1\":{\"8\":1,\"9\":2,\"10\":5,\"12\":1,\"44\":1,\"49\":2,\"50\":2,\"57\":2,\"67\":2,\"68\":3,\"70\":3,\"91\":1,\"92\":1,\"94\":1,\"97\":1,\"103\":1}}],[\"syndication\",{\"1\":{\"15\":1}}],[\"sysyield\",{\"1\":{\"245\":1}}],[\"sysprint\",{\"1\":{\"245\":2}}],[\"sysexit\",{\"1\":{\"245\":1}}],[\"syslib\",{\"1\":{\"245\":4,\"246\":1}}],[\"sysretq\",{\"1\":{\"210\":2,\"211\":2,\"212\":2,\"223\":1}}],[\"sysret\",{\"1\":{\"207\":1,\"208\":1,\"209\":1,\"210\":2,\"252\":1}}],[\"sysv\",{\"1\":{\"147\":1,\"164\":1,\"226\":1,\"234\":1}}],[\"systable\",{\"1\":{\"133\":1,\"135\":1,\"139\":13,\"140\":15,\"141\":5,\"151\":2,\"152\":2,\"153\":1,\"154\":2,\"156\":3,\"157\":1,\"158\":1,\"159\":4,\"160\":5,\"161\":1,\"162\":3,\"163\":1,\"164\":1,\"180\":1,\"181\":1,\"197\":4}}],[\"systemzexceptions\",{\"1\":{\"147\":3}}],[\"systemzmemory\",{\"1\":{\"124\":1}}],[\"systemtable\",{\"1\":{\"133\":2,\"151\":1}}],[\"system32\",{\"1\":{\"22\":1}}],[\"systemroot\",{\"1\":{\"22\":1}}],[\"systemd\",{\"1\":{\"11\":1}}],[\"systems\",{\"0\":{\"11\":1},\"1\":{\"4\":3,\"5\":2,\"6\":4,\"8\":3,\"9\":7,\"11\":33,\"13\":1,\"14\":2,\"15\":2,\"17\":6,\"21\":9,\"25\":10,\"26\":1,\"28\":1,\"29\":4,\"30\":7,\"31\":1,\"33\":2,\"34\":5,\"35\":1,\"36\":3,\"115\":1,\"147\":2,\"185\":1,\"201\":2,\"223\":1,\"247\":1}}],[\"system\",{\"0\":{\"138\":1,\"152\":1,\"207\":1,\"208\":1,\"210\":1,\"212\":1,\"213\":1,\"215\":1,\"241\":1,\"244\":1},\"1\":{\"1\":1,\"4\":3,\"6\":3,\"7\":2,\"8\":1,\"9\":3,\"11\":67,\"12\":2,\"13\":1,\"15\":1,\"17\":8,\"21\":10,\"22\":6,\"24\":5,\"25\":1,\"26\":1,\"29\":2,\"30\":3,\"31\":2,\"32\":1,\"33\":4,\"34\":16,\"112\":1,\"118\":1,\"120\":1,\"122\":1,\"124\":14,\"133\":5,\"134\":1,\"135\":1,\"136\":2,\"137\":1,\"138\":3,\"143\":1,\"147\":9,\"148\":1,\"150\":3,\"151\":3,\"153\":1,\"164\":3,\"166\":1,\"172\":1,\"185\":5,\"187\":2,\"188\":1,\"192\":1,\"194\":6,\"195\":2,\"196\":1,\"200\":1,\"201\":1,\"202\":2,\"206\":1,\"207\":2,\"208\":8,\"209\":3,\"210\":5,\"211\":3,\"212\":3,\"213\":9,\"214\":4,\"215\":7,\"217\":1,\"222\":2,\"223\":2,\"227\":1,\"234\":1,\"238\":3,\"239\":1,\"241\":2,\"242\":1,\"243\":4,\"244\":3,\"245\":5,\"246\":9,\"247\":1,\"250\":1,\"252\":2,\"253\":1}}],[\"sysadmin\",{\"1\":{\"35\":1}}],[\"sysin\",{\"1\":{\"11\":1}}],[\"sys\",{\"1\":{\"11\":3,\"164\":1}}],[\"syscalldef\",{\"1\":{\"245\":4}}],[\"syscalltable\",{\"1\":{\"213\":5,\"215\":2,\"223\":1,\"241\":3}}],[\"syscallerror\",{\"1\":{\"213\":1,\"214\":1}}],[\"syscallentry\",{\"1\":{\"209\":3,\"210\":7,\"211\":2,\"212\":3,\"223\":1}}],[\"syscallhandler\",{\"1\":{\"213\":2,\"223\":1}}],[\"syscallargs\",{\"1\":{\"212\":8,\"213\":4,\"214\":1,\"215\":1,\"227\":2,\"241\":1,\"242\":1}}],[\"syscallinit\",{\"1\":{\"209\":4,\"211\":3,\"213\":2,\"215\":1,\"222\":1,\"223\":4,\"241\":1}}],[\"syscalls\",{\"1\":{\"209\":4,\"210\":3,\"211\":5,\"212\":3,\"213\":3,\"214\":2,\"215\":3,\"222\":2,\"223\":4,\"227\":3,\"241\":1,\"242\":1}}],[\"syscall\",{\"1\":{\"9\":1,\"11\":1,\"207\":1,\"208\":3,\"209\":11,\"210\":1,\"211\":1,\"212\":12,\"213\":7,\"214\":5,\"215\":8,\"216\":1,\"222\":4,\"223\":4,\"227\":20,\"230\":12,\"231\":6,\"241\":6,\"242\":2,\"243\":15,\"245\":3,\"246\":6,\"252\":1}}],[\"sym\",{\"1\":{\"230\":1}}],[\"syment\",{\"1\":{\"229\":1}}],[\"symtabshndx\",{\"1\":{\"235\":1}}],[\"symtab\",{\"1\":{\"147\":5,\"226\":2,\"228\":2,\"229\":1,\"234\":2,\"235\":3}}],[\"symmetric\",{\"1\":{\"22\":1,\"25\":1}}],[\"symbols\",{\"1\":{\"10\":1,\"11\":1,\"16\":1,\"83\":1,\"102\":1,\"103\":1,\"104\":2,\"123\":1,\"225\":1,\"228\":2,\"233\":1}}],[\"symbol\",{\"1\":{\"10\":2,\"11\":1,\"81\":2,\"84\":1,\"104\":2,\"107\":1,\"109\":1,\"123\":2,\"124\":12,\"147\":5,\"179\":1,\"196\":1,\"225\":1,\"227\":1,\"228\":3,\"233\":2}}],[\"symbolic\",{\"1\":{\"8\":1}}],[\"symfony\",{\"1\":{\"8\":1}}],[\"s\",{\"1\":{\"7\":5,\"8\":2,\"9\":6,\"10\":9,\"11\":34,\"13\":2,\"14\":1,\"15\":3,\"17\":5,\"18\":1,\"20\":3,\"21\":19,\"22\":3,\"24\":1,\"25\":5,\"27\":2,\"28\":1,\"30\":5,\"31\":1,\"32\":1,\"35\":6,\"36\":6,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"47\":3,\"48\":2,\"49\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":3,\"61\":2,\"62\":1,\"63\":2,\"64\":1,\"65\":1,\"66\":3,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":2,\"73\":1,\"74\":5,\"75\":8,\"76\":1,\"77\":4,\"78\":6,\"79\":1,\"80\":2,\"81\":1,\"82\":4,\"83\":5,\"84\":4,\"86\":3,\"87\":10,\"88\":7,\"89\":17,\"90\":1,\"91\":3,\"92\":5,\"93\":1,\"94\":1,\"95\":4,\"96\":7,\"97\":6,\"99\":1,\"100\":2,\"101\":3,\"102\":2,\"103\":3,\"104\":6,\"105\":3,\"106\":2,\"107\":3,\"108\":2,\"109\":2,\"110\":4,\"112\":1,\"115\":3,\"117\":1,\"118\":2,\"119\":1,\"120\":2,\"121\":2,\"123\":2,\"124\":43,\"125\":1,\"130\":2,\"131\":3,\"133\":4,\"134\":4,\"135\":6,\"136\":2,\"139\":4,\"140\":2,\"141\":2,\"143\":8,\"144\":1,\"145\":1,\"146\":2,\"147\":31,\"148\":9,\"150\":1,\"151\":6,\"152\":1,\"153\":2,\"154\":2,\"156\":1,\"157\":1,\"158\":2,\"159\":1,\"160\":2,\"161\":4,\"162\":5,\"163\":2,\"164\":3,\"165\":1,\"166\":3,\"168\":3,\"169\":3,\"170\":11,\"171\":5,\"172\":1,\"173\":1,\"174\":3,\"175\":2,\"176\":1,\"177\":3,\"179\":4,\"180\":2,\"181\":3,\"182\":2,\"183\":2,\"185\":10,\"186\":3,\"187\":5,\"188\":4,\"190\":4,\"191\":6,\"192\":4,\"193\":3,\"195\":2,\"196\":8,\"197\":11,\"198\":1,\"199\":1,\"200\":4,\"201\":2,\"202\":4,\"204\":1,\"205\":7,\"206\":5,\"208\":3,\"209\":4,\"210\":6,\"211\":2,\"212\":4,\"213\":6,\"214\":9,\"215\":3,\"217\":3,\"218\":2,\"219\":2,\"220\":2,\"221\":3,\"222\":4,\"223\":4,\"226\":8,\"227\":8,\"228\":22,\"229\":6,\"230\":6,\"231\":2,\"232\":3,\"234\":7,\"235\":8,\"236\":1,\"237\":5,\"238\":1,\"239\":4,\"240\":5,\"241\":3,\"242\":3,\"243\":4,\"244\":1,\"245\":4,\"246\":3,\"248\":6,\"249\":5}}],[\"swift\",{\"1\":{\"10\":1}}],[\"switchto\",{\"1\":{\"221\":1,\"222\":2,\"223\":3,\"239\":2,\"240\":3}}],[\"switchstackvirtaddr\",{\"1\":{\"204\":3}}],[\"switchstackphysaddr\",{\"1\":{\"204\":3}}],[\"switched\",{\"1\":{\"21\":8,\"186\":1,\"205\":1}}],[\"switches\",{\"1\":{\"11\":1,\"21\":4,\"35\":1,\"146\":1,\"208\":1,\"221\":1,\"243\":3}}],[\"switching\",{\"0\":{\"200\":1,\"205\":1,\"211\":1,\"221\":1,\"240\":1},\"1\":{\"11\":2,\"21\":5,\"186\":4,\"188\":1,\"190\":2,\"194\":1,\"195\":1,\"200\":2,\"201\":4,\"204\":1,\"205\":3,\"206\":2,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"220\":1,\"221\":1,\"222\":2,\"223\":2,\"227\":3,\"230\":2,\"231\":1,\"239\":1,\"240\":6,\"243\":10,\"246\":6}}],[\"switch\",{\"0\":{\"204\":1},\"1\":{\"5\":1,\"11\":1,\"18\":1,\"21\":2,\"26\":1,\"33\":2,\"87\":7,\"96\":2,\"144\":1,\"146\":2,\"147\":3,\"148\":1,\"164\":3,\"166\":1,\"174\":1,\"176\":1,\"186\":1,\"187\":1,\"192\":1,\"193\":1,\"194\":4,\"195\":2,\"199\":1,\"200\":3,\"201\":4,\"204\":3,\"205\":2,\"208\":1,\"209\":1,\"210\":1,\"211\":7,\"212\":2,\"215\":1,\"216\":1,\"221\":1,\"222\":3,\"223\":4,\"231\":1,\"239\":5,\"240\":1,\"241\":1}}],[\"switchmap\",{\"1\":{\"5\":1}}],[\"swarms\",{\"1\":{\"21\":1}}],[\"swapping\",{\"1\":{\"240\":1}}],[\"swapped\",{\"1\":{\"240\":1}}],[\"swap\",{\"1\":{\"9\":1,\"240\":1}}],[\"swagger\",{\"1\":{\"7\":1}}],[\"swe\",{\"1\":{\"6\":2,\"19\":1}}],[\"sdebugcon\",{\"1\":{\"228\":1}}],[\"sdtv\",{\"1\":{\"32\":1}}],[\"sdlt\",{\"1\":{\"31\":1}}],[\"sdlc\",{\"1\":{\"6\":1,\"21\":3}}],[\"sdxc\",{\"1\":{\"31\":1}}],[\"sda\",{\"1\":{\"30\":1}}],[\"sdram\",{\"1\":{\"29\":11}}],[\"sdsl\",{\"1\":{\"21\":1}}],[\"sd\",{\"1\":{\"21\":1,\"31\":2,\"32\":1,\"187\":2}}],[\"sdhc\",{\"1\":{\"31\":1}}],[\"sdh\",{\"1\":{\"21\":2}}],[\"sdk\",{\"1\":{\"9\":2,\"40\":1,\"124\":2}}],[\"sdigitsutils\",{\"1\":{\"124\":2}}],[\"sdi\",{\"1\":{\"5\":1}}],[\"sce\",{\"1\":{\"209\":1}}],[\"scenarios\",{\"1\":{\"171\":1}}],[\"scenario\",{\"1\":{\"76\":1,\"89\":1}}],[\"sclk\",{\"1\":{\"30\":1}}],[\"scl\",{\"1\":{\"30\":1}}],[\"sci\",{\"1\":{\"21\":1,\"34\":3}}],[\"science\",{\"1\":{\"9\":1,\"15\":1,\"21\":3}}],[\"scientific\",{\"1\":{\"8\":3,\"15\":4,\"24\":1}}],[\"scsi\",{\"1\":{\"21\":2,\"31\":5}}],[\"scommon\",{\"1\":{\"228\":3}}],[\"scoping\",{\"1\":{\"72\":1,\"75\":1,\"76\":1,\"80\":1}}],[\"scopeelementtypes\",{\"1\":{\"79\":2}}],[\"scopeelement\",{\"1\":{\"79\":3}}],[\"scopes\",{\"1\":{\"76\":1,\"77\":3,\"78\":4,\"79\":2}}],[\"scoped\",{\"1\":{\"22\":1}}],[\"scope\",{\"0\":{\"76\":1,\"78\":1,\"80\":1},\"1\":{\"8\":1,\"9\":1,\"20\":1,\"53\":1,\"76\":5,\"77\":19,\"78\":7,\"79\":15,\"80\":7,\"81\":1,\"83\":8,\"84\":2,\"85\":1}}],[\"score\",{\"1\":{\"20\":1}}],[\"schools\",{\"1\":{\"11\":1}}],[\"sched\",{\"1\":{\"239\":4,\"243\":15,\"246\":7}}],[\"schedule\",{\"1\":{\"239\":1,\"241\":1,\"242\":1,\"243\":1}}],[\"scheduler\",{\"1\":{\"11\":1,\"25\":1,\"26\":1,\"33\":2,\"215\":1,\"239\":7,\"241\":1,\"242\":3,\"243\":13,\"246\":2}}],[\"scheduled\",{\"1\":{\"11\":1,\"26\":1}}],[\"scheduling\",{\"0\":{\"239\":1},\"1\":{\"9\":1,\"11\":3,\"33\":1,\"239\":2,\"252\":1}}],[\"schemas\",{\"1\":{\"12\":1,\"17\":4}}],[\"schema\",{\"1\":{\"12\":4,\"15\":4,\"17\":2}}],[\"scheme\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"31\":5,\"32\":1}}],[\"scanner\",{\"1\":{\"36\":1}}],[\"scanners\",{\"1\":{\"31\":1}}],[\"scan\",{\"1\":{\"17\":2,\"22\":1}}],[\"scanlines\",{\"1\":{\"32\":1}}],[\"scanline\",{\"1\":{\"16\":1}}],[\"scans\",{\"1\":{\"15\":1,\"18\":1,\"22\":1,\"34\":1}}],[\"scancode\",{\"1\":{\"11\":1}}],[\"scale\",{\"1\":{\"11\":1,\"18\":1,\"24\":1}}],[\"scalability\",{\"1\":{\"24\":1}}],[\"scalable\",{\"1\":{\"13\":1,\"21\":1,\"25\":1,\"27\":1,\"28\":1}}],[\"scala\",{\"1\":{\"9\":1,\"10\":1}}],[\"scrt1\",{\"1\":{\"225\":1}}],[\"screen\",{\"0\":{\"139\":1},\"1\":{\"21\":2,\"32\":1,\"45\":2,\"135\":2,\"137\":1,\"138\":2,\"139\":4,\"140\":4,\"141\":4,\"144\":1}}],[\"screenshot\",{\"1\":{\"105\":1,\"251\":1}}],[\"screenshots\",{\"0\":{\"251\":1},\"1\":{\"13\":2}}],[\"screens\",{\"1\":{\"6\":1,\"32\":2}}],[\"scripting\",{\"1\":{\"8\":2,\"11\":2,\"22\":1}}],[\"script\",{\"1\":{\"7\":2,\"11\":1,\"15\":1,\"21\":1,\"22\":1,\"35\":1,\"71\":1,\"147\":10,\"148\":1,\"179\":1,\"196\":2,\"226\":3,\"227\":1,\"229\":2,\"232\":1,\"234\":2}}],[\"scripts\",{\"1\":{\"7\":5,\"11\":2,\"13\":1,\"14\":1,\"21\":1,\"147\":2}}],[\"scraping\",{\"1\":{\"7\":1}}],[\"scratch\",{\"1\":{\"1\":1,\"51\":1,\"146\":1,\"250\":1}}],[\"scm\",{\"1\":{\"6\":2}}],[\"smh\",{\"1\":{\"35\":2}}],[\"sme\",{\"1\":{\"35\":2}}],[\"smm=0\",{\"1\":{\"188\":1,\"200\":1,\"210\":2,\"212\":1}}],[\"smm\",{\"1\":{\"34\":2}}],[\"smartphone\",{\"1\":{\"32\":1,\"33\":2}}],[\"smartphones\",{\"1\":{\"29\":1}}],[\"smartctl\",{\"1\":{\"31\":1}}],[\"smart\",{\"1\":{\"31\":2}}],[\"smalloc\",{\"1\":{\"228\":1}}],[\"smalltalk\",{\"1\":{\"36\":1}}],[\"smaller\",{\"1\":{\"29\":1}}],[\"smallest\",{\"1\":{\"6\":1,\"26\":1}}],[\"small\",{\"1\":{\"5\":1,\"11\":1,\"15\":1,\"16\":1,\"17\":1,\"21\":4,\"25\":1,\"26\":1,\"29\":3,\"31\":1,\"33\":1,\"179\":1}}],[\"smp\",{\"1\":{\"25\":1,\"26\":2,\"28\":1,\"34\":1}}],[\"sms\",{\"1\":{\"22\":1}}],[\"smtp\",{\"1\":{\"21\":2}}],[\"smbios\",{\"1\":{\"33\":2}}],[\"smbv1\",{\"1\":{\"21\":1}}],[\"smbv2\",{\"1\":{\"21\":1}}],[\"smb\",{\"1\":{\"21\":5,\"24\":2}}],[\"smoother\",{\"1\":{\"20\":1}}],[\"smooth\",{\"1\":{\"17\":1}}],[\"smoke\",{\"1\":{\"6\":1}}],[\"smi\",{\"1\":{\"34\":2,\"130\":1}}],[\"smil\",{\"1\":{\"13\":1}}],[\"smit\",{\"1\":{\"11\":2}}],[\"sml\",{\"1\":{\"8\":3}}],[\"saving\",{\"1\":{\"186\":1,\"211\":1}}],[\"saved\",{\"1\":{\"186\":1}}],[\"saver\",{\"1\":{\"67\":1}}],[\"save\",{\"1\":{\"13\":1,\"69\":2,\"186\":1,\"211\":3,\"212\":1,\"232\":1,\"240\":3}}],[\"saves\",{\"1\":{\"11\":1,\"146\":2}}],[\"saw\",{\"1\":{\"147\":1,\"228\":3}}],[\"said\",{\"1\":{\"94\":1,\"171\":1}}],[\"sail\",{\"1\":{\"11\":2}}],[\"says\",{\"1\":{\"89\":1,\"123\":1,\"135\":1,\"186\":1}}],[\"saying\",{\"1\":{\"87\":1,\"88\":1,\"89\":1}}],[\"say\",{\"1\":{\"63\":1,\"69\":1,\"124\":1}}],[\"sake\",{\"1\":{\"35\":1,\"235\":1}}],[\"safari\",{\"1\":{\"35\":1}}],[\"safeguards\",{\"1\":{\"23\":1}}],[\"safety\",{\"1\":{\"9\":1,\"25\":1,\"115\":1,\"193\":1}}],[\"safer\",{\"1\":{\"9\":1,\"25\":1}}],[\"safe\",{\"1\":{\"9\":1,\"10\":2,\"35\":1}}],[\"safely\",{\"1\":{\"6\":1,\"22\":1,\"89\":1}}],[\"satisfies\",{\"1\":{\"209\":1}}],[\"satisfy\",{\"1\":{\"170\":1}}],[\"satisfaction\",{\"1\":{\"6\":1,\"20\":1}}],[\"sata\",{\"1\":{\"31\":9,\"33\":1}}],[\"sas\",{\"1\":{\"30\":2,\"31\":3}}],[\"sast\",{\"1\":{\"22\":2}}],[\"saas\",{\"1\":{\"24\":1,\"37\":1}}],[\"sample\",{\"1\":{\"87\":1}}],[\"saml\",{\"1\":{\"22\":1,\"36\":1}}],[\"sam\",{\"1\":{\"22\":3}}],[\"samba\",{\"1\":{\"21\":1}}],[\"same\",{\"1\":{\"5\":1,\"11\":1,\"15\":1,\"22\":1,\"25\":1,\"26\":1,\"29\":1,\"31\":1,\"33\":1,\"71\":1,\"74\":1,\"79\":3,\"85\":2,\"86\":3,\"87\":8,\"88\":2,\"89\":5,\"90\":1,\"91\":1,\"96\":1,\"101\":2,\"104\":1,\"109\":1,\"110\":1,\"124\":1,\"135\":1,\"146\":2,\"151\":1,\"185\":3,\"186\":1,\"187\":2,\"192\":2,\"197\":1,\"198\":1,\"210\":1,\"211\":1,\"224\":1,\"225\":1,\"228\":1,\"231\":3,\"240\":1,\"248\":1}}],[\"sandy\",{\"1\":{\"30\":1}}],[\"sandbox\",{\"1\":{\"43\":1,\"45\":2,\"49\":1,\"75\":1}}],[\"sandboxed\",{\"1\":{\"41\":3}}],[\"sandboxes\",{\"1\":{\"22\":1}}],[\"sandboxing\",{\"1\":{\"25\":1}}],[\"san\",{\"1\":{\"21\":2,\"24\":2,\"30\":1,\"31\":1}}],[\"sans\",{\"1\":{\"21\":1}}],[\"sanitizers\",{\"1\":{\"9\":1}}],[\"sanity\",{\"1\":{\"7\":1}}],[\"sale\",{\"1\":{\"20\":1,\"23\":1}}],[\"saxon\",{\"1\":{\"12\":1}}],[\"sage\",{\"1\":{\"11\":3}}],[\"sabre\",{\"1\":{\"11\":3}}],[\"skernel\",{\"1\":{\"228\":1}}],[\"sketch\",{\"1\":{\"17\":1}}],[\"skeletons\",{\"1\":{\"4\":1,\"9\":1}}],[\"skos\",{\"1\":{\"15\":3}}],[\"skipped\",{\"1\":{\"170\":1}}],[\"skipping\",{\"1\":{\"88\":1}}],[\"skip\",{\"1\":{\"5\":1,\"35\":1,\"77\":1,\"87\":1,\"110\":1}}],[\"shndx\",{\"1\":{\"235\":1}}],[\"shnum\",{\"1\":{\"235\":5}}],[\"shstrndx\",{\"1\":{\"235\":2}}],[\"shstrtab\",{\"1\":{\"147\":13,\"148\":2,\"179\":2,\"196\":2,\"226\":3,\"228\":1,\"229\":5,\"234\":1}}],[\"sh\",{\"1\":{\"118\":2,\"235\":3}}],[\"shr\",{\"1\":{\"103\":1,\"104\":1,\"177\":10,\"190\":2,\"202\":4,\"206\":2,\"209\":1}}],[\"shlib\",{\"1\":{\"235\":4}}],[\"shl\",{\"1\":{\"103\":1,\"104\":1,\"177\":5,\"209\":3,\"248\":1}}],[\"shutdown\",{\"1\":{\"24\":1,\"34\":2}}],[\"shield\",{\"1\":{\"33\":1}}],[\"shifts\",{\"1\":{\"26\":1}}],[\"shift\",{\"1\":{\"14\":1,\"20\":1,\"82\":1,\"84\":1,\"248\":1}}],[\"ships\",{\"1\":{\"13\":1}}],[\"shipped\",{\"1\":{\"11\":1,\"13\":1}}],[\"ship\",{\"1\":{\"6\":3,\"13\":2,\"35\":2}}],[\"shape\",{\"1\":{\"131\":1}}],[\"shaped\",{\"1\":{\"11\":1}}],[\"shaking\",{\"1\":{\"35\":1}}],[\"sha\",{\"1\":{\"22\":5,\"36\":1}}],[\"shamir\",{\"1\":{\"22\":1}}],[\"sha256\",{\"1\":{\"22\":2}}],[\"sharing\",{\"1\":{\"11\":17,\"21\":4,\"22\":1,\"23\":1,\"30\":1,\"35\":1}}],[\"shares\",{\"1\":{\"11\":1,\"24\":1}}],[\"share\",{\"1\":{\"10\":1,\"11\":1,\"21\":3,\"25\":1,\"35\":2,\"116\":1,\"134\":3,\"224\":1,\"231\":1}}],[\"shared\",{\"1\":{\"4\":1,\"5\":1,\"11\":12,\"21\":1,\"24\":1,\"25\":1,\"26\":1,\"30\":2,\"32\":1,\"35\":1,\"44\":1,\"116\":1,\"143\":1,\"187\":3,\"202\":1,\"209\":3,\"225\":3,\"231\":1,\"235\":3}}],[\"shader\",{\"1\":{\"10\":1}}],[\"shaders\",{\"1\":{\"10\":5}}],[\"shading\",{\"1\":{\"10\":2}}],[\"shentsize\",{\"1\":{\"235\":5}}],[\"shells\",{\"1\":{\"11\":3}}],[\"shell\",{\"1\":{\"9\":1,\"11\":3,\"21\":1,\"22\":1,\"135\":6,\"139\":1,\"253\":1}}],[\"sheet\",{\"1\":{\"9\":1}}],[\"sheets\",{\"1\":{\"7\":1}}],[\"shoff\",{\"1\":{\"235\":5}}],[\"should\",{\"1\":{\"35\":2,\"45\":1,\"53\":2,\"63\":1,\"64\":1,\"71\":4,\"76\":1,\"77\":1,\"78\":1,\"79\":2,\"82\":2,\"84\":3,\"86\":1,\"88\":3,\"89\":3,\"92\":1,\"99\":1,\"104\":2,\"106\":1,\"122\":1,\"124\":2,\"135\":1,\"140\":1,\"147\":2,\"151\":1,\"152\":1,\"153\":1,\"154\":2,\"160\":1,\"161\":3,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"169\":1,\"171\":1,\"177\":1,\"179\":1,\"181\":1,\"182\":1,\"183\":1,\"191\":1,\"192\":1,\"193\":3,\"194\":3,\"196\":1,\"197\":2,\"198\":1,\"200\":2,\"205\":3,\"209\":1,\"210\":1,\"212\":2,\"214\":1,\"218\":1,\"221\":1,\"222\":1,\"223\":1,\"229\":2,\"230\":1,\"231\":1,\"232\":1,\"234\":1,\"235\":2,\"242\":1,\"248\":1,\"249\":2}}],[\"shouldn\",{\"1\":{\"5\":1,\"89\":1,\"104\":1,\"162\":1,\"187\":1,\"242\":1}}],[\"shorthand\",{\"1\":{\"32\":1,\"35\":3}}],[\"shorter\",{\"1\":{\"21\":1,\"29\":1,\"169\":1}}],[\"shortest\",{\"1\":{\"9\":1,\"21\":2}}],[\"short\",{\"1\":{\"21\":1,\"22\":2,\"24\":1,\"35\":1,\"141\":1,\"228\":1}}],[\"showing\",{\"1\":{\"147\":1}}],[\"show\",{\"1\":{\"21\":1,\"45\":1,\"84\":1,\"88\":1,\"96\":2,\"97\":1,\"124\":2,\"151\":1,\"171\":1}}],[\"shown\",{\"1\":{\"10\":1,\"58\":1,\"228\":1}}],[\"shows\",{\"1\":{\"5\":1,\"11\":1,\"31\":1,\"41\":1,\"46\":1,\"52\":1,\"57\":1,\"59\":1,\"82\":1,\"87\":1,\"90\":1,\"187\":1,\"210\":1,\"226\":1,\"234\":1}}],[\"spurious\",{\"1\":{\"248\":1,\"249\":16}}],[\"spuriousinterrupthandler\",{\"1\":{\"249\":2}}],[\"spuriousinterruptvectorregister\",{\"1\":{\"249\":2}}],[\"spuriousinterrupt\",{\"1\":{\"248\":1,\"249\":1}}],[\"splash\",{\"1\":{\"135\":1}}],[\"splitting\",{\"1\":{\"168\":1}}],[\"splitlines\",{\"1\":{\"141\":1}}],[\"splits\",{\"1\":{\"17\":1,\"170\":1}}],[\"split\",{\"1\":{\"5\":1,\"11\":1,\"21\":2,\"104\":1,\"107\":1,\"141\":1,\"170\":1,\"173\":1,\"174\":1}}],[\"sprivate\",{\"1\":{\"124\":2}}],[\"spreaders\",{\"1\":{\"29\":1}}],[\"spreadsheet\",{\"1\":{\"4\":1}}],[\"spp\",{\"1\":{\"30\":1}}],[\"spdx\",{\"1\":{\"22\":1}}],[\"spf\",{\"1\":{\"22\":2}}],[\"spx\",{\"1\":{\"21\":6}}],[\"sp\",{\"1\":{\"21\":1,\"36\":1}}],[\"speicfy\",{\"1\":{\"53\":1}}],[\"speech\",{\"1\":{\"18\":2,\"36\":1}}],[\"speeds\",{\"1\":{\"16\":1,\"21\":3,\"29\":1,\"35\":1}}],[\"speed\",{\"1\":{\"16\":3,\"20\":1,\"21\":3,\"24\":1,\"26\":1,\"30\":9,\"135\":1}}],[\"specpower\",{\"1\":{\"36\":1}}],[\"specjbb\",{\"1\":{\"36\":1}}],[\"specialization\",{\"1\":{\"52\":1}}],[\"specialize\",{\"1\":{\"18\":1}}],[\"specialized\",{\"1\":{\"11\":1,\"18\":1,\"32\":1}}],[\"special\",{\"1\":{\"8\":1,\"9\":1,\"34\":1,\"36\":1,\"89\":1,\"96\":1,\"103\":1,\"104\":2,\"107\":1,\"110\":1,\"124\":1,\"185\":1,\"187\":1,\"191\":1,\"201\":1,\"207\":1}}],[\"specifies\",{\"1\":{\"21\":1,\"24\":1,\"248\":1}}],[\"specified\",{\"1\":{\"17\":1,\"68\":1,\"70\":1,\"77\":1,\"82\":1,\"98\":1,\"230\":1}}],[\"specifically\",{\"1\":{\"147\":1,\"148\":1}}],[\"specifications\",{\"1\":{\"10\":1,\"30\":1,\"36\":4}}],[\"specification\",{\"0\":{\"53\":1},\"1\":{\"7\":2,\"9\":3,\"11\":4,\"36\":1,\"51\":2,\"52\":2,\"53\":3,\"54\":1,\"55\":1,\"67\":1,\"68\":1,\"69\":1,\"133\":1}}],[\"specifics\",{\"1\":{\"11\":1}}],[\"specific\",{\"1\":{\"5\":1,\"7\":1,\"8\":1,\"9\":2,\"10\":2,\"21\":1,\"22\":1,\"25\":1,\"33\":1,\"34\":2,\"98\":2,\"124\":3,\"135\":1,\"143\":1,\"147\":8,\"156\":1,\"162\":1,\"197\":3,\"209\":1,\"234\":2}}],[\"specifying\",{\"1\":{\"7\":1,\"22\":1,\"35\":1}}],[\"specify\",{\"1\":{\"6\":1,\"47\":1,\"53\":6,\"98\":1,\"147\":1,\"156\":2,\"179\":1,\"201\":1,\"232\":1}}],[\"spec\",{\"1\":{\"6\":1,\"36\":2,\"62\":1,\"99\":1,\"133\":1,\"135\":1,\"150\":1,\"151\":1,\"153\":1}}],[\"specs\",{\"1\":{\"6\":1,\"10\":1,\"17\":1,\"24\":1,\"36\":2,\"133\":1}}],[\"sphinx\",{\"1\":{\"12\":2}}],[\"spin\",{\"1\":{\"196\":1}}],[\"spinning\",{\"1\":{\"31\":1}}],[\"spi\",{\"1\":{\"29\":1,\"30\":1}}],[\"spirv\",{\"1\":{\"10\":1}}],[\"spir\",{\"1\":{\"10\":6}}],[\"spike\",{\"1\":{\"6\":1}}],[\"spof\",{\"1\":{\"19\":1}}],[\"spoofing\",{\"1\":{\"24\":1}}],[\"spoof\",{\"1\":{\"7\":1}}],[\"spoken\",{\"1\":{\"18\":1}}],[\"spoke\",{\"1\":{\"4\":1}}],[\"span\",{\"1\":{\"94\":1}}],[\"spans\",{\"1\":{\"20\":1,\"94\":1,\"97\":1,\"237\":1}}],[\"spanning\",{\"1\":{\"9\":1,\"21\":2,\"25\":1}}],[\"sparingly\",{\"1\":{\"35\":1}}],[\"sparc64\",{\"1\":{\"235\":2}}],[\"sparc\",{\"1\":{\"25\":3,\"235\":2}}],[\"sparse\",{\"1\":{\"18\":1}}],[\"sparql\",{\"1\":{\"15\":2}}],[\"spark\",{\"1\":{\"15\":1,\"17\":2,\"36\":1}}],[\"spaced\",{\"1\":{\"21\":1}}],[\"spaces\",{\"1\":{\"11\":3,\"85\":2,\"174\":1}}],[\"space\",{\"0\":{\"173\":1,\"218\":1,\"219\":1},\"1\":{\"9\":3,\"11\":7,\"17\":1,\"32\":1,\"33\":1,\"53\":2,\"62\":1,\"64\":1,\"87\":3,\"88\":1,\"89\":1,\"95\":1,\"116\":4,\"146\":2,\"148\":1,\"166\":4,\"173\":7,\"174\":2,\"176\":1,\"177\":1,\"178\":2,\"179\":3,\"180\":1,\"181\":1,\"183\":1,\"184\":1,\"185\":2,\"195\":8,\"196\":3,\"197\":1,\"198\":3,\"200\":1,\"201\":1,\"205\":1,\"210\":1,\"214\":4,\"217\":1,\"218\":23,\"219\":1,\"220\":9,\"221\":1,\"223\":2,\"224\":2,\"225\":1,\"230\":2,\"231\":1,\"237\":5,\"240\":1,\"248\":1,\"252\":1}}],[\"spa\",{\"1\":{\"7\":2}}],[\"spatial\",{\"1\":{\"5\":1,\"17\":2}}],[\"sivr\",{\"1\":{\"249\":2}}],[\"six\",{\"1\":{\"164\":1}}],[\"situations\",{\"1\":{\"249\":1}}],[\"situation\",{\"1\":{\"89\":2,\"227\":1}}],[\"site\",{\"1\":{\"19\":1,\"21\":4,\"22\":4,\"24\":2,\"35\":2}}],[\"sites\",{\"1\":{\"7\":2,\"21\":3}}],[\"sibling\",{\"1\":{\"88\":1}}],[\"sigil\",{\"0\":{\"107\":1},\"1\":{\"103\":1,\"107\":10,\"109\":1}}],[\"sig\",{\"1\":{\"36\":1}}],[\"sigplan\",{\"1\":{\"36\":1}}],[\"siggraph\",{\"1\":{\"36\":1}}],[\"sigs\",{\"1\":{\"36\":1}}],[\"signs\",{\"1\":{\"40\":1}}],[\"signing\",{\"1\":{\"15\":1,\"16\":1,\"21\":1,\"22\":4}}],[\"significant\",{\"1\":{\"9\":2,\"85\":1,\"173\":1,\"179\":1}}],[\"signalevent\",{\"1\":{\"151\":1}}],[\"signaled\",{\"1\":{\"21\":1}}],[\"signalhandler\",{\"1\":{\"124\":1}}],[\"signal\",{\"1\":{\"21\":2,\"27\":1,\"30\":1,\"33\":2,\"34\":1,\"124\":3,\"150\":1}}],[\"signaling\",{\"1\":{\"21\":5,\"36\":1}}],[\"signals\",{\"1\":{\"11\":2,\"18\":1,\"21\":1,\"30\":2,\"124\":1}}],[\"signature\",{\"1\":{\"14\":1,\"22\":1,\"34\":1,\"74\":1,\"138\":1,\"153\":1,\"161\":1,\"163\":3,\"191\":1}}],[\"signatures\",{\"1\":{\"13\":1,\"22\":4,\"24\":1}}],[\"signed\",{\"1\":{\"9\":2,\"22\":1,\"24\":1,\"98\":1}}],[\"sign\",{\"1\":{\"6\":1,\"9\":1,\"11\":1,\"22\":2,\"23\":1,\"24\":1,\"35\":3,\"104\":1,\"174\":2}}],[\"sipi\",{\"1\":{\"26\":2}}],[\"sifive\",{\"1\":{\"25\":1}}],[\"silicon\",{\"1\":{\"25\":1}}],[\"silent\",{\"1\":{\"11\":1}}],[\"siem\",{\"1\":{\"22\":1}}],[\"sid\",{\"1\":{\"21\":1}}],[\"side\",{\"1\":{\"4\":1,\"7\":3,\"10\":1,\"22\":1,\"30\":1,\"35\":1,\"75\":2,\"186\":1}}],[\"since\",{\"1\":{\"40\":1,\"42\":1,\"48\":1,\"49\":1,\"53\":1,\"57\":1,\"59\":1,\"61\":1,\"63\":1,\"66\":1,\"75\":1,\"77\":1,\"79\":2,\"80\":1,\"87\":1,\"88\":2,\"89\":3,\"95\":1,\"96\":1,\"99\":2,\"103\":1,\"104\":4,\"105\":1,\"106\":1,\"110\":2,\"122\":1,\"123\":1,\"124\":5,\"127\":1,\"130\":2,\"131\":1,\"135\":2,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":3,\"148\":2,\"151\":1,\"160\":3,\"161\":2,\"162\":2,\"168\":2,\"169\":1,\"175\":1,\"176\":1,\"178\":1,\"181\":1,\"182\":1,\"185\":1,\"186\":2,\"187\":1,\"190\":1,\"192\":1,\"194\":2,\"195\":3,\"201\":2,\"202\":1,\"209\":2,\"212\":1,\"223\":2,\"225\":2,\"226\":1,\"228\":1,\"237\":1,\"239\":1,\"243\":1,\"245\":1,\"248\":2}}],[\"sink\",{\"1\":{\"10\":1}}],[\"singleton\",{\"1\":{\"47\":1,\"58\":1,\"79\":1}}],[\"single\",{\"1\":{\"5\":3,\"7\":2,\"10\":1,\"11\":4,\"16\":1,\"19\":2,\"21\":4,\"22\":2,\"26\":1,\"27\":1,\"29\":3,\"33\":5,\"52\":1,\"63\":2,\"69\":1,\"70\":1,\"73\":2,\"90\":3,\"92\":1,\"94\":3,\"95\":1,\"97\":1,\"105\":1,\"116\":3,\"162\":1,\"177\":1,\"186\":2,\"187\":1,\"190\":1,\"192\":1,\"223\":1,\"224\":1,\"229\":1,\"237\":2,\"238\":1,\"247\":1,\"252\":1}}],[\"sicp\",{\"1\":{\"9\":2}}],[\"sized\",{\"1\":{\"159\":2}}],[\"sizes\",{\"1\":{\"13\":1,\"20\":1,\"33\":1}}],[\"sizeof\",{\"1\":{\"10\":3,\"154\":1,\"162\":1,\"180\":3,\"187\":1,\"190\":1,\"197\":1,\"202\":2,\"235\":5,\"237\":1}}],[\"size\",{\"1\":{\"9\":1,\"10\":3,\"11\":2,\"15\":1,\"20\":1,\"21\":1,\"87\":4,\"89\":2,\"124\":9,\"127\":6,\"131\":1,\"140\":1,\"141\":1,\"147\":13,\"148\":3,\"150\":1,\"153\":2,\"154\":5,\"155\":1,\"159\":6,\"164\":2,\"165\":1,\"168\":3,\"169\":2,\"170\":8,\"171\":4,\"173\":1,\"174\":3,\"179\":1,\"183\":4,\"185\":4,\"188\":3,\"195\":1,\"196\":1,\"197\":2,\"217\":2,\"220\":3,\"226\":1,\"227\":2,\"228\":4,\"229\":3,\"230\":1,\"234\":5,\"235\":10,\"237\":4}}],[\"simt\",{\"1\":{\"33\":1}}],[\"simm\",{\"1\":{\"29\":2}}],[\"simms\",{\"1\":{\"29\":2}}],[\"simulates\",{\"1\":{\"199\":1}}],[\"simulator\",{\"1\":{\"24\":1}}],[\"simulations\",{\"1\":{\"11\":1}}],[\"simulation\",{\"1\":{\"4\":1}}],[\"similarly\",{\"1\":{\"235\":1}}],[\"similar\",{\"1\":{\"13\":1,\"29\":1,\"82\":1,\"89\":2,\"91\":1,\"92\":2,\"94\":1,\"97\":2,\"110\":1,\"145\":1,\"166\":1,\"196\":2,\"226\":1}}],[\"simh\",{\"1\":{\"11\":4,\"24\":1}}],[\"simply\",{\"1\":{\"47\":1,\"105\":1,\"110\":1,\"208\":1,\"234\":1,\"239\":4,\"240\":1,\"241\":1}}],[\"simplifying\",{\"1\":{\"234\":1}}],[\"simplify\",{\"1\":{\"35\":1}}],[\"simplified\",{\"1\":{\"21\":1,\"73\":3,\"248\":1}}],[\"simplifies\",{\"1\":{\"10\":1,\"35\":1}}],[\"simplicity\",{\"1\":{\"6\":1,\"63\":1,\"115\":1}}],[\"simplefilesystem\",{\"1\":{\"152\":1}}],[\"simpletextoutputprotocol\",{\"1\":{\"138\":6}}],[\"simpleexpr\",{\"1\":{\"105\":28,\"107\":6,\"108\":1,\"109\":11,\"110\":7}}],[\"simplest\",{\"1\":{\"89\":1,\"187\":1,\"239\":1}}],[\"simpler\",{\"1\":{\"59\":1,\"89\":1,\"106\":1,\"223\":1,\"237\":1}}],[\"simple\",{\"0\":{\"70\":1},\"1\":{\"4\":1,\"5\":3,\"8\":1,\"11\":1,\"12\":1,\"13\":2,\"15\":2,\"16\":1,\"20\":1,\"21\":6,\"25\":1,\"30\":1,\"35\":1,\"37\":1,\"56\":1,\"59\":1,\"60\":1,\"61\":1,\"63\":2,\"65\":1,\"68\":2,\"70\":1,\"72\":1,\"74\":1,\"87\":1,\"89\":1,\"99\":1,\"123\":1,\"124\":2,\"132\":1,\"136\":1,\"137\":2,\"139\":1,\"142\":1,\"148\":2,\"161\":1,\"164\":1,\"167\":1,\"176\":5,\"177\":1,\"187\":2,\"214\":1,\"229\":1,\"235\":1,\"238\":1,\"243\":1,\"247\":1}}],[\"simd\",{\"1\":{\"5\":1,\"9\":1,\"26\":3,\"27\":2,\"28\":4,\"192\":2}}],[\"suefi\",{\"1\":{\"228\":1}}],[\"sudo\",{\"1\":{\"119\":1,\"120\":1,\"134\":1}}],[\"suffix\",{\"1\":{\"98\":1,\"99\":4,\"210\":1}}],[\"suffice\",{\"1\":{\"97\":1}}],[\"sufficient\",{\"1\":{\"7\":1}}],[\"suggestion\",{\"1\":{\"35\":1}}],[\"surrounding\",{\"1\":{\"106\":1}}],[\"surrogate\",{\"1\":{\"53\":1}}],[\"sure\",{\"1\":{\"55\":1,\"57\":1,\"97\":1,\"104\":1,\"116\":1,\"135\":1,\"165\":1,\"166\":1,\"171\":1,\"177\":1,\"208\":1,\"209\":1,\"210\":1,\"214\":1,\"229\":1,\"237\":1}}],[\"surprises\",{\"1\":{\"246\":1}}],[\"surprise\",{\"1\":{\"35\":1}}],[\"suricata\",{\"1\":{\"22\":1}}],[\"surface\",{\"1\":{\"6\":1,\"9\":1}}],[\"such\",{\"1\":{\"21\":2,\"35\":1,\"44\":1,\"46\":1,\"57\":1,\"68\":1,\"80\":1,\"96\":1,\"110\":1,\"123\":2,\"135\":1,\"138\":1,\"185\":1,\"192\":1,\"205\":1,\"233\":1,\"234\":1,\"237\":1,\"239\":1,\"247\":1,\"248\":2}}],[\"succeeded\",{\"1\":{\"160\":1}}],[\"succeed\",{\"1\":{\"160\":1}}],[\"succeeding\",{\"1\":{\"11\":1,\"17\":1}}],[\"successive\",{\"1\":{\"86\":1}}],[\"successfully\",{\"1\":{\"58\":2,\"63\":1,\"66\":2,\"127\":1,\"153\":1,\"154\":1,\"179\":1,\"229\":1,\"246\":1}}],[\"success\",{\"1\":{\"19\":1,\"128\":1,\"135\":2,\"151\":1,\"160\":1,\"164\":1,\"169\":2,\"170\":4,\"171\":1,\"182\":4,\"183\":4,\"188\":3,\"191\":3,\"192\":1,\"193\":2,\"197\":2,\"209\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"219\":1,\"222\":4,\"223\":4,\"227\":1}}],[\"successors\",{\"1\":{\"9\":1,\"11\":1,\"25\":1}}],[\"successor\",{\"1\":{\"7\":1,\"8\":1,\"11\":5,\"12\":1,\"13\":1,\"21\":2,\"25\":1,\"30\":4,\"31\":1}}],[\"summary\",{\"1\":{\"35\":1,\"97\":1}}],[\"summarization\",{\"1\":{\"18\":1,\"21\":1}}],[\"sums\",{\"1\":{\"9\":1}}],[\"sunday\",{\"1\":{\"35\":1}}],[\"sun\",{\"1\":{\"11\":1,\"25\":1}}],[\"susfsm69cxbqemajufxud8w\",{\"1\":{\"228\":1}}],[\"suspect\",{\"1\":{\"48\":1}}],[\"sustaining\",{\"1\":{\"20\":1}}],[\"sustained\",{\"1\":{\"20\":1}}],[\"sus\",{\"1\":{\"11\":2}}],[\"suite\",{\"1\":{\"10\":1,\"11\":1,\"21\":6,\"22\":1,\"24\":1}}],[\"suited\",{\"1\":{\"8\":1}}],[\"sut\",{\"1\":{\"9\":2}}],[\"supposed\",{\"1\":{\"237\":1}}],[\"supports\",{\"1\":{\"13\":3,\"15\":2,\"16\":2,\"21\":1,\"30\":1,\"31\":1,\"36\":1,\"51\":1,\"82\":1,\"83\":1,\"90\":1,\"94\":2,\"98\":2,\"102\":1,\"106\":2,\"109\":1,\"110\":1,\"115\":1,\"123\":1,\"124\":1,\"139\":1,\"164\":1}}],[\"supporting\",{\"0\":{\"82\":1},\"1\":{\"9\":1,\"13\":1,\"16\":3,\"21\":1,\"24\":1,\"235\":1}}],[\"support\",{\"1\":{\"6\":2,\"11\":3,\"12\":1,\"13\":1,\"21\":1,\"30\":1,\"31\":2,\"32\":1,\"34\":2,\"35\":1,\"41\":1,\"44\":1,\"62\":1,\"73\":1,\"81\":2,\"82\":1,\"84\":1,\"90\":3,\"91\":1,\"95\":1,\"97\":2,\"99\":1,\"100\":2,\"102\":2,\"105\":1,\"113\":1,\"122\":1,\"124\":1,\"131\":1,\"135\":2,\"147\":1,\"151\":1,\"166\":1,\"175\":1,\"188\":1,\"201\":1,\"207\":1,\"217\":1,\"229\":2,\"230\":1,\"246\":1,\"247\":1}}],[\"supported\",{\"1\":{\"6\":2,\"13\":2,\"16\":1,\"30\":1,\"153\":1,\"162\":1,\"188\":2,\"230\":1,\"235\":5}}],[\"suppression\",{\"1\":{\"249\":1}}],[\"suppress\",{\"1\":{\"106\":3,\"110\":3}}],[\"supplement\",{\"1\":{\"34\":1}}],[\"supply\",{\"1\":{\"24\":1,\"33\":2}}],[\"supplanted\",{\"1\":{\"9\":1,\"30\":1}}],[\"super\",{\"1\":{\"30\":1,\"32\":1,\"75\":1}}],[\"supercomputers\",{\"1\":{\"24\":1}}],[\"supervised\",{\"1\":{\"18\":1}}],[\"supervisor\",{\"1\":{\"9\":1,\"11\":1,\"34\":2,\"195\":1}}],[\"supersede\",{\"1\":{\"33\":1}}],[\"supersedes\",{\"1\":{\"13\":1}}],[\"superseded\",{\"1\":{\"4\":3,\"6\":1,\"7\":3,\"11\":2,\"13\":2,\"17\":1,\"21\":12,\"22\":1,\"25\":1,\"29\":1,\"30\":2,\"31\":2,\"34\":2}}],[\"superset\",{\"1\":{\"7\":1}}],[\"subq\",{\"1\":{\"200\":1}}],[\"subfields\",{\"1\":{\"185\":1}}],[\"subpixels\",{\"1\":{\"32\":1}}],[\"subnets\",{\"1\":{\"24\":1}}],[\"subnetting\",{\"1\":{\"21\":1}}],[\"sublayer\",{\"1\":{\"21\":1}}],[\"subject\",{\"1\":{\"15\":1,\"23\":3,\"35\":2,\"184\":1,\"186\":1}}],[\"submit\",{\"1\":{\"11\":2}}],[\"subexpression\",{\"1\":{\"10\":1}}],[\"subtracting\",{\"1\":{\"146\":1}}],[\"subtract\",{\"1\":{\"26\":1,\"146\":1,\"182\":1}}],[\"subtrees\",{\"1\":{\"79\":1}}],[\"subtree\",{\"1\":{\"9\":1,\"79\":1}}],[\"subtypes\",{\"1\":{\"5\":1}}],[\"subdivide\",{\"1\":{\"9\":1}}],[\"subversion\",{\"1\":{\"6\":1}}],[\"subclassof\",{\"1\":{\"15\":1}}],[\"subclass\",{\"1\":{\"5\":1}}],[\"subsystem\",{\"1\":{\"123\":2,\"124\":5,\"143\":1}}],[\"subsystems\",{\"1\":{\"11\":1}}],[\"subscription\",{\"1\":{\"24\":1}}],[\"subscriber\",{\"1\":{\"21\":3}}],[\"subscribe\",{\"1\":{\"15\":1,\"21\":1}}],[\"subschemas\",{\"1\":{\"17\":1}}],[\"subsequent\",{\"1\":{\"95\":1,\"96\":1,\"186\":1}}],[\"subset\",{\"1\":{\"9\":1,\"10\":1,\"14\":1,\"122\":1}}],[\"subsections\",{\"1\":{\"3\":1}}],[\"substitutable\",{\"1\":{\"5\":1}}],[\"substitution\",{\"1\":{\"5\":1}}],[\"st=0\",{\"1\":{\"188\":1}}],[\"stdio\",{\"1\":{\"144\":2,\"188\":2,\"196\":1}}],[\"stdout\",{\"1\":{\"129\":3,\"131\":1,\"140\":2}}],[\"stderr\",{\"1\":{\"124\":4,\"129\":3,\"131\":1,\"138\":1,\"140\":3,\"141\":1}}],[\"std\",{\"1\":{\"72\":1,\"124\":1,\"139\":1,\"141\":1,\"162\":1,\"170\":1,\"218\":1,\"237\":1,\"239\":1}}],[\"stick\",{\"1\":{\"124\":1}}],[\"stickiness\",{\"1\":{\"24\":1}}],[\"stix\",{\"1\":{\"36\":1}}],[\"still\",{\"1\":{\"3\":1,\"9\":1,\"11\":2,\"13\":1,\"22\":1,\"45\":1,\"107\":1,\"110\":1,\"116\":1,\"124\":1,\"130\":1,\"140\":1,\"161\":1,\"184\":1,\"185\":1,\"193\":1,\"201\":1,\"212\":1,\"222\":1,\"230\":2,\"231\":2,\"237\":1,\"251\":1}}],[\"stp\",{\"1\":{\"21\":2}}],[\"sts\",{\"1\":{\"21\":1}}],[\"stmtlist>>\",{\"1\":{\"92\":2,\"97\":1}}],[\"stmtlistimpl\",{\"1\":{\"73\":1}}],[\"stmtlist\",{\"1\":{\"72\":1,\"73\":3,\"77\":1,\"88\":3,\"89\":7,\"92\":7,\"93\":2,\"97\":2}}],[\"stmt\",{\"1\":{\"58\":1,\"61\":4,\"63\":7,\"64\":2,\"66\":3,\"73\":4,\"77\":1,\"88\":4,\"89\":1,\"91\":1,\"92\":6,\"93\":3,\"97\":2}}],[\"stm\",{\"1\":{\"21\":4}}],[\"stewardship\",{\"1\":{\"36\":2}}],[\"steward\",{\"1\":{\"36\":1}}],[\"steers\",{\"1\":{\"32\":1}}],[\"steer\",{\"1\":{\"21\":5}}],[\"steps\",{\"1\":{\"35\":1,\"220\":2,\"242\":1}}],[\"stepping\",{\"1\":{\"21\":1}}],[\"step\",{\"1\":{\"18\":4,\"35\":1,\"57\":1,\"71\":1,\"78\":1,\"141\":1,\"150\":1,\"157\":1,\"159\":1,\"192\":1,\"237\":2}}],[\"stoolchains\",{\"1\":{\"124\":18,\"147\":1,\"228\":2}}],[\"stopping\",{\"1\":{\"79\":1}}],[\"stops\",{\"1\":{\"77\":1,\"78\":2,\"210\":1}}],[\"stop\",{\"1\":{\"30\":1,\"77\":1,\"78\":1,\"79\":1,\"210\":1}}],[\"stone\",{\"1\":{\"21\":1}}],[\"stochastic\",{\"1\":{\"17\":1}}],[\"story\",{\"1\":{\"40\":1}}],[\"storms\",{\"1\":{\"21\":1}}],[\"storage\",{\"0\":{\"31\":1},\"1\":{\"9\":2,\"10\":3,\"11\":2,\"15\":2,\"17\":5,\"20\":1,\"21\":2,\"22\":1,\"24\":6,\"29\":1,\"30\":3,\"31\":14,\"33\":1}}],[\"storing\",{\"1\":{\"6\":1,\"11\":1,\"13\":1,\"15\":1,\"17\":1,\"29\":2,\"33\":1,\"151\":1}}],[\"stored\",{\"1\":{\"44\":1,\"75\":2,\"135\":2,\"168\":1,\"174\":2,\"177\":1,\"187\":1,\"201\":1,\"211\":1,\"217\":1,\"227\":1,\"237\":1,\"239\":1}}],[\"stores\",{\"1\":{\"5\":1,\"9\":3,\"11\":1,\"15\":1,\"17\":2,\"22\":1,\"29\":1,\"186\":1,\"193\":1,\"208\":1}}],[\"store\",{\"1\":{\"4\":1,\"9\":1,\"11\":1,\"15\":2,\"17\":2,\"18\":1,\"21\":3,\"22\":2,\"26\":1,\"32\":1,\"78\":1,\"146\":1,\"168\":5,\"177\":1,\"186\":2,\"187\":3,\"197\":1,\"213\":1,\"230\":1,\"239\":1}}],[\"styling\",{\"1\":{\"13\":1}}],[\"stylesheet\",{\"1\":{\"12\":1}}],[\"styles\",{\"1\":{\"7\":1}}],[\"style\",{\"1\":{\"5\":1,\"7\":2,\"9\":1,\"11\":2,\"14\":1,\"74\":1}}],[\"st\",{\"1\":{\"11\":1}}],[\"stuffing\",{\"1\":{\"21\":1}}],[\"students\",{\"1\":{\"11\":2}}],[\"studio\",{\"1\":{\"9\":2}}],[\"studies\",{\"1\":{\"6\":1}}],[\"stubbing\",{\"1\":{\"9\":1}}],[\"stubs\",{\"1\":{\"4\":1,\"9\":4,\"11\":1}}],[\"stupid\",{\"1\":{\"5\":1}}],[\"strsz\",{\"1\":{\"229\":1}}],[\"strs\",{\"1\":{\"227\":1}}],[\"str1\",{\"1\":{\"147\":3}}],[\"strtab\",{\"1\":{\"147\":8,\"226\":4,\"228\":4,\"229\":2,\"234\":4,\"235\":2}}],[\"strutils\",{\"1\":{\"141\":1}}],[\"structurally\",{\"1\":{\"177\":1}}],[\"structures\",{\"1\":{\"9\":1,\"11\":1,\"14\":1,\"17\":1,\"175\":1,\"176\":1,\"181\":1,\"198\":2}}],[\"structure\",{\"0\":{\"58\":1,\"59\":1,\"143\":1,\"174\":1},\"1\":{\"7\":1,\"8\":1,\"9\":1,\"11\":5,\"12\":2,\"17\":1,\"32\":1,\"34\":1,\"56\":1,\"57\":2,\"60\":1,\"65\":1,\"85\":2,\"135\":1,\"138\":1,\"143\":1,\"162\":3,\"173\":1,\"179\":1,\"180\":1,\"181\":2,\"201\":2,\"202\":1}}],[\"structured\",{\"1\":{\"6\":1,\"10\":2,\"12\":2,\"17\":3,\"33\":1,\"71\":1,\"110\":1,\"174\":1}}],[\"struct\",{\"1\":{\"5\":2,\"10\":3,\"127\":1,\"129\":1,\"133\":1,\"228\":4}}],[\"structs\",{\"1\":{\"5\":1}}],[\"strlen\",{\"1\":{\"124\":2}}],[\"strlit\",{\"1\":{\"72\":1,\"228\":1}}],[\"str\",{\"1\":{\"95\":1,\"138\":1,\"139\":2,\"140\":4}}],[\"straightforward\",{\"1\":{\"78\":1,\"82\":1,\"85\":1,\"99\":1,\"161\":1,\"198\":1,\"228\":1,\"234\":1,\"235\":1}}],[\"stratum\",{\"1\":{\"21\":1}}],[\"strategies\",{\"1\":{\"6\":1,\"239\":1}}],[\"strategy\",{\"1\":{\"5\":1,\"186\":1,\"239\":2}}],[\"stripped\",{\"1\":{\"123\":1,\"147\":1,\"226\":1,\"234\":1}}],[\"stripe+mirror\",{\"1\":{\"31\":1}}],[\"strictly\",{\"1\":{\"158\":1}}],[\"strict\",{\"1\":{\"22\":2,\"85\":1}}],[\"string\",{\"1\":{\"7\":1,\"9\":1,\"25\":1,\"53\":1,\"58\":3,\"61\":9,\"62\":3,\"63\":5,\"64\":1,\"65\":1,\"66\":5,\"68\":2,\"70\":2,\"73\":1,\"75\":2,\"78\":1,\"82\":5,\"84\":3,\"88\":1,\"90\":1,\"92\":1,\"97\":1,\"100\":3,\"101\":4,\"124\":2,\"139\":7,\"140\":3,\"141\":1,\"144\":3,\"147\":3,\"192\":1,\"213\":6,\"214\":2,\"227\":9,\"228\":2,\"233\":1,\"234\":1,\"245\":2}}],[\"strings\",{\"1\":{\"6\":1,\"9\":1,\"58\":1,\"96\":1,\"139\":1,\"147\":2,\"233\":1,\"234\":1}}],[\"stronger\",{\"1\":{\"106\":1,\"107\":1}}],[\"strong\",{\"1\":{\"9\":1,\"11\":1,\"16\":2,\"22\":1,\"37\":1}}],[\"strengthen\",{\"1\":{\"5\":1}}],[\"stream\",{\"1\":{\"14\":1,\"16\":1,\"17\":1,\"21\":3,\"50\":2,\"51\":2,\"57\":3,\"58\":1,\"66\":2,\"85\":1,\"88\":1,\"127\":4,\"128\":4,\"131\":2,\"140\":2,\"141\":1}}],[\"streams\",{\"1\":{\"5\":1,\"11\":2,\"16\":1,\"129\":1}}],[\"streaming\",{\"1\":{\"4\":1,\"15\":1,\"17\":1,\"21\":1,\"28\":1,\"32\":2}}],[\"stall\",{\"1\":{\"151\":1}}],[\"stale\",{\"1\":{\"17\":1}}],[\"stability\",{\"1\":{\"20\":1}}],[\"stable\",{\"1\":{\"11\":1,\"118\":2}}],[\"standup\",{\"1\":{\"35\":1}}],[\"standalone\",{\"1\":{\"21\":1}}],[\"standarderrorhandle\",{\"1\":{\"138\":1}}],[\"standardization\",{\"1\":{\"36\":3}}],[\"standardized\",{\"1\":{\"10\":2,\"14\":1,\"15\":1,\"18\":1,\"24\":1,\"25\":1,\"29\":1,\"30\":1}}],[\"standards\",{\"1\":{\"17\":1,\"21\":2,\"22\":2,\"23\":1,\"32\":4,\"36\":21}}],[\"standard\",{\"1\":{\"4\":3,\"7\":4,\"8\":2,\"9\":6,\"10\":2,\"11\":5,\"12\":2,\"13\":2,\"14\":2,\"15\":3,\"21\":8,\"22\":1,\"25\":1,\"27\":1,\"30\":9,\"31\":2,\"32\":3,\"33\":1,\"34\":3,\"36\":3,\"122\":2,\"123\":2,\"124\":2,\"129\":1,\"147\":1,\"218\":1,\"227\":1}}],[\"standby\",{\"1\":{\"21\":1}}],[\"stanford\",{\"1\":{\"11\":1}}],[\"staying\",{\"1\":{\"85\":1,\"86\":1}}],[\"stay\",{\"1\":{\"11\":1,\"87\":1,\"96\":1}}],[\"stays\",{\"1\":{\"6\":1,\"89\":1}}],[\"stakeholders\",{\"1\":{\"6\":1}}],[\"stackptr\",{\"1\":{\"220\":3}}],[\"stack<>\",{\"1\":{\"87\":1,\"88\":1}}],[\"stack<integer>\",{\"1\":{\"87\":1,\"88\":1}}],[\"stacked\",{\"1\":{\"29\":1}}],[\"stacks\",{\"0\":{\"211\":1},\"1\":{\"11\":1,\"12\":1,\"21\":3,\"164\":1,\"185\":1,\"186\":1,\"201\":3,\"208\":1,\"209\":1,\"211\":2,\"217\":1,\"220\":2}}],[\"stack\",{\"0\":{\"199\":1,\"204\":1},\"1\":{\"6\":1,\"9\":5,\"10\":2,\"11\":4,\"21\":3,\"22\":3,\"30\":1,\"35\":1,\"87\":9,\"89\":3,\"105\":1,\"130\":1,\"141\":5,\"146\":5,\"147\":3,\"150\":1,\"151\":1,\"156\":3,\"162\":2,\"164\":3,\"166\":2,\"167\":1,\"171\":1,\"180\":1,\"181\":4,\"186\":11,\"188\":2,\"190\":3,\"191\":8,\"192\":7,\"194\":11,\"195\":8,\"198\":6,\"199\":12,\"200\":3,\"201\":11,\"202\":1,\"204\":5,\"205\":2,\"208\":1,\"210\":2,\"211\":10,\"212\":5,\"216\":2,\"217\":4,\"218\":3,\"219\":1,\"220\":11,\"221\":2,\"222\":4,\"223\":4,\"234\":1,\"240\":7}}],[\"stage\",{\"1\":{\"144\":1}}],[\"stages\",{\"1\":{\"6\":1,\"13\":1,\"25\":1}}],[\"stagnated\",{\"1\":{\"40\":1}}],[\"staging\",{\"1\":{\"6\":1,\"35\":2}}],[\"statutory\",{\"1\":{\"23\":1}}],[\"status\",{\"1\":{\"6\":1,\"32\":1,\"33\":1,\"35\":1,\"130\":3,\"131\":1,\"133\":2,\"151\":5,\"159\":1,\"160\":7}}],[\"stats\",{\"1\":{\"17\":1}}],[\"statistics\",{\"1\":{\"15\":1,\"17\":1}}],[\"statically\",{\"1\":{\"10\":1,\"115\":1,\"123\":1,\"147\":1,\"220\":1}}],[\"static\",{\"0\":{\"226\":1},\"1\":{\"7\":1,\"8\":1,\"10\":2,\"11\":3,\"13\":1,\"22\":1,\"24\":1,\"29\":2,\"61\":1,\"70\":1,\"77\":1,\"225\":3,\"226\":3,\"227\":1,\"228\":2,\"234\":1}}],[\"statement\",{\"1\":{\"17\":1,\"59\":1,\"60\":2,\"61\":2,\"63\":4,\"68\":1,\"70\":2,\"76\":2,\"80\":1,\"86\":1,\"88\":1,\"89\":6,\"90\":2,\"93\":2,\"97\":4}}],[\"statements\",{\"1\":{\"10\":1,\"11\":1,\"68\":1,\"73\":1,\"76\":1,\"85\":1,\"86\":1,\"88\":1,\"89\":1}}],[\"states\",{\"1\":{\"9\":1,\"10\":1,\"29\":1,\"34\":1,\"53\":2,\"87\":5,\"89\":2}}],[\"state\",{\"0\":{\"87\":1,\"201\":1},\"1\":{\"4\":3,\"5\":2,\"6\":2,\"7\":1,\"9\":1,\"10\":3,\"11\":2,\"17\":1,\"25\":1,\"31\":1,\"34\":2,\"51\":1,\"53\":2,\"75\":1,\"77\":2,\"78\":3,\"79\":4,\"87\":18,\"89\":2,\"95\":6,\"96\":7,\"97\":4,\"116\":4,\"146\":1,\"185\":1,\"188\":1,\"200\":1,\"201\":1,\"202\":2,\"239\":5,\"240\":9,\"242\":2,\"253\":1}}],[\"startpage\",{\"1\":{\"237\":2}}],[\"start=0xa0000\",{\"1\":{\"171\":2}}],[\"start=\",{\"1\":{\"171\":4}}],[\"startimage\",{\"1\":{\"151\":1}}],[\"starting\",{\"1\":{\"62\":1,\"63\":1,\"77\":1,\"78\":2,\"79\":1,\"105\":1,\"109\":2,\"147\":4,\"150\":2,\"156\":2,\"168\":1,\"171\":2,\"216\":1,\"225\":1,\"226\":1,\"228\":1,\"229\":1,\"243\":3,\"246\":1}}],[\"start>>\",{\"1\":{\"110\":2}}],[\"startoffset\",{\"1\":{\"51\":1,\"79\":2,\"237\":3}}],[\"startup\",{\"1\":{\"34\":1,\"123\":2,\"124\":2,\"135\":1,\"144\":1,\"225\":2}}],[\"starts\",{\"1\":{\"26\":1,\"65\":1,\"89\":1,\"94\":1,\"95\":1,\"97\":2,\"99\":1,\"109\":1,\"124\":1,\"196\":1,\"237\":1}}],[\"started\",{\"1\":{\"11\":1,\"115\":1,\"136\":1}}],[\"start\",{\"1\":{\"7\":1,\"14\":2,\"26\":2,\"30\":1,\"45\":1,\"47\":1,\"51\":2,\"53\":1,\"58\":1,\"61\":2,\"63\":1,\"65\":1,\"73\":1,\"84\":3,\"87\":2,\"88\":1,\"89\":1,\"94\":4,\"95\":4,\"97\":1,\"99\":1,\"102\":2,\"103\":3,\"105\":1,\"106\":1,\"107\":1,\"110\":4,\"121\":1,\"131\":1,\"132\":2,\"138\":1,\"139\":2,\"141\":1,\"142\":1,\"143\":1,\"147\":4,\"162\":3,\"165\":7,\"168\":9,\"169\":16,\"170\":16,\"171\":11,\"173\":1,\"174\":1,\"175\":1,\"176\":1,\"179\":1,\"180\":5,\"181\":1,\"183\":10,\"188\":3,\"192\":1,\"196\":1,\"206\":1,\"208\":1,\"216\":1,\"217\":1,\"218\":10,\"222\":1,\"230\":1,\"231\":1,\"234\":4,\"235\":1,\"237\":18,\"239\":3,\"248\":3}}],[\"star\",{\"1\":{\"5\":1,\"17\":1,\"209\":10}}],[\"seq\",{\"1\":{\"162\":1,\"168\":1,\"180\":3,\"182\":1,\"197\":3,\"218\":1,\"237\":1}}],[\"sequenced\",{\"1\":{\"17\":1,\"21\":1}}],[\"sequences\",{\"1\":{\"6\":1,\"22\":1,\"62\":1}}],[\"sequence\",{\"1\":{\"5\":1,\"14\":1,\"18\":2,\"21\":1,\"34\":2,\"57\":2,\"62\":1,\"68\":1,\"92\":3,\"96\":2,\"98\":1}}],[\"sequential\",{\"1\":{\"4\":1,\"5\":1,\"16\":1}}],[\"sexceptions\",{\"1\":{\"147\":1,\"228\":1}}],[\"severe\",{\"1\":{\"192\":1}}],[\"several\",{\"1\":{\"53\":1,\"168\":1,\"200\":1,\"234\":1}}],[\"seven\",{\"1\":{\"21\":1,\"201\":1}}],[\"sensitive\",{\"1\":{\"23\":2,\"46\":1}}],[\"sense\",{\"1\":{\"21\":1,\"57\":1,\"123\":1,\"124\":1,\"187\":1}}],[\"sensors\",{\"1\":{\"21\":1,\"24\":1,\"30\":2,\"248\":2}}],[\"sent\",{\"1\":{\"21\":2}}],[\"sending\",{\"1\":{\"24\":1,\"116\":1,\"144\":1}}],[\"sender\",{\"1\":{\"22\":2}}],[\"sends\",{\"1\":{\"7\":1,\"17\":1,\"26\":2}}],[\"send\",{\"1\":{\"4\":1,\"11\":1,\"21\":1,\"28\":1,\"35\":1,\"144\":3,\"249\":1}}],[\"serial\",{\"1\":{\"21\":10,\"30\":11,\"31\":3,\"144\":2}}],[\"serialized\",{\"1\":{\"15\":1}}],[\"serialization\",{\"1\":{\"13\":1,\"15\":2}}],[\"series\",{\"1\":{\"15\":1,\"18\":1,\"29\":3,\"33\":1}}],[\"serves\",{\"1\":{\"20\":1}}],[\"serve\",{\"1\":{\"13\":1,\"93\":1,\"94\":1}}],[\"serverless\",{\"1\":{\"24\":1}}],[\"server→client\",{\"1\":{\"21\":1}}],[\"server\",{\"1\":{\"4\":4,\"6\":2,\"7\":11,\"8\":1,\"9\":4,\"11\":4,\"17\":5,\"18\":1,\"21\":15,\"22\":4,\"25\":1,\"30\":3,\"31\":1,\"36\":1}}],[\"servers\",{\"1\":{\"4\":1,\"7\":2,\"9\":3,\"11\":4,\"18\":1,\"21\":11,\"22\":1,\"24\":2,\"25\":7,\"27\":1,\"29\":2,\"30\":2,\"31\":1}}],[\"servlets\",{\"1\":{\"7\":1}}],[\"services\",{\"0\":{\"150\":1,\"160\":1},\"1\":{\"4\":8,\"7\":3,\"11\":6,\"13\":1,\"17\":1,\"19\":1,\"20\":1,\"21\":12,\"22\":3,\"34\":4,\"36\":3,\"116\":1,\"138\":1,\"144\":2,\"148\":1,\"149\":1,\"150\":7,\"151\":12,\"155\":1,\"156\":1,\"160\":7,\"161\":2,\"162\":1,\"180\":1,\"207\":1,\"215\":1}}],[\"service\",{\"1\":{\"4\":4,\"5\":1,\"7\":3,\"9\":3,\"11\":4,\"19\":4,\"20\":1,\"21\":18,\"22\":6,\"24\":6,\"33\":1,\"35\":1,\"160\":2,\"191\":1,\"213\":1}}],[\"segmentdescriptor\",{\"1\":{\"187\":3}}],[\"segmentdescriptorvalue\",{\"1\":{\"187\":4}}],[\"segmentation\",{\"1\":{\"11\":1,\"18\":1,\"21\":1,\"184\":1,\"185\":1,\"186\":1}}],[\"segments\",{\"0\":{\"184\":1},\"1\":{\"11\":4,\"22\":1,\"185\":20,\"186\":1,\"187\":2,\"188\":3,\"192\":1,\"210\":2,\"233\":1,\"234\":5,\"235\":8,\"237\":17}}],[\"segment\",{\"0\":{\"185\":1,\"186\":1,\"201\":1},\"1\":{\"11\":2,\"21\":7,\"147\":4,\"184\":2,\"185\":41,\"186\":24,\"187\":35,\"188\":12,\"190\":8,\"192\":7,\"194\":2,\"200\":2,\"201\":2,\"202\":6,\"209\":6,\"229\":2,\"233\":1,\"234\":7,\"235\":10,\"237\":8}}],[\"segregation\",{\"1\":{\"4\":1,\"5\":1}}],[\"semicolon\",{\"1\":{\"80\":1,\"86\":1}}],[\"semicolons\",{\"1\":{\"68\":1}}],[\"semiconductor\",{\"1\":{\"32\":1,\"33\":2}}],[\"semi\",{\"1\":{\"11\":2,\"68\":2}}],[\"seminal\",{\"1\":{\"9\":1}}],[\"semantic\",{\"1\":{\"15\":1,\"57\":1,\"80\":1,\"97\":1}}],[\"semantics\",{\"1\":{\"11\":1,\"13\":1,\"15\":1,\"67\":1,\"91\":1,\"115\":1}}],[\"semantically\",{\"1\":{\"10\":1,\"97\":1}}],[\"seeing\",{\"1\":{\"135\":1}}],[\"seen\",{\"1\":{\"72\":1,\"92\":1,\"96\":1}}],[\"seems\",{\"1\":{\"91\":1,\"95\":1,\"101\":1,\"103\":1,\"110\":1,\"124\":1,\"188\":2,\"197\":1,\"200\":1,\"220\":1}}],[\"seem\",{\"1\":{\"40\":1,\"147\":1,\"162\":1}}],[\"seeded\",{\"1\":{\"36\":1}}],[\"seek\",{\"1\":{\"21\":1}}],[\"see\",{\"1\":{\"9\":1,\"45\":2,\"49\":2,\"63\":1,\"65\":1,\"72\":1,\"74\":1,\"75\":1,\"86\":1,\"87\":1,\"88\":2,\"92\":1,\"93\":2,\"96\":2,\"97\":1,\"105\":1,\"109\":1,\"121\":1,\"133\":1,\"135\":2,\"139\":2,\"140\":1,\"141\":3,\"145\":1,\"147\":7,\"148\":1,\"151\":1,\"152\":1,\"154\":1,\"160\":1,\"161\":1,\"165\":1,\"166\":1,\"169\":2,\"170\":5,\"171\":1,\"175\":1,\"182\":1,\"183\":2,\"191\":1,\"192\":2,\"193\":3,\"197\":1,\"200\":3,\"205\":3,\"210\":3,\"212\":3,\"213\":1,\"214\":1,\"215\":1,\"227\":3,\"228\":4,\"229\":1,\"230\":2,\"231\":1,\"234\":1,\"238\":1,\"243\":2}}],[\"sell\",{\"1\":{\"23\":1}}],[\"sel4\",{\"1\":{\"11\":1}}],[\"self\",{\"1\":{\"9\":1,\"11\":1,\"15\":1,\"22\":1,\"31\":1,\"34\":1,\"35\":1,\"64\":1,\"106\":1,\"232\":1}}],[\"selector\",{\"1\":{\"186\":13,\"187\":6,\"188\":5,\"190\":7,\"194\":2,\"200\":1,\"201\":3,\"202\":2,\"203\":1}}],[\"selectors\",{\"0\":{\"186\":1},\"1\":{\"185\":1,\"188\":1,\"209\":5}}],[\"selected\",{\"1\":{\"75\":1}}],[\"selecting\",{\"1\":{\"34\":1,\"69\":1}}],[\"selection\",{\"1\":{\"12\":1}}],[\"selects\",{\"1\":{\"18\":1}}],[\"select\",{\"1\":{\"5\":1,\"15\":1,\"17\":4,\"21\":1,\"54\":2,\"69\":3,\"71\":1,\"82\":1,\"121\":1}}],[\"searchscope\",{\"1\":{\"83\":1}}],[\"searchable\",{\"1\":{\"43\":1}}],[\"searching\",{\"1\":{\"9\":1}}],[\"search\",{\"1\":{\"7\":1,\"9\":6,\"21\":3,\"35\":1,\"58\":2,\"59\":1,\"83\":1,\"143\":1}}],[\"seo\",{\"1\":{\"7\":1}}],[\"setactivepml4\",{\"1\":{\"177\":2,\"200\":1,\"221\":1,\"240\":1}}],[\"setattribute\",{\"1\":{\"138\":1}}],[\"setinfo\",{\"1\":{\"153\":1}}],[\"setposition\",{\"1\":{\"153\":1}}],[\"setmem\",{\"1\":{\"151\":1}}],[\"setmode\",{\"1\":{\"138\":1}}],[\"setwatchdogtimer\",{\"1\":{\"151\":1}}],[\"settimer\",{\"1\":{\"151\":1}}],[\"settings\",{\"1\":{\"29\":2,\"33\":2,\"35\":2,\"45\":1}}],[\"setting\",{\"1\":{\"23\":1,\"35\":1,\"121\":1,\"135\":2,\"179\":1,\"187\":1,\"198\":1,\"206\":1,\"209\":1,\"220\":1,\"242\":1}}],[\"setcursorpos\",{\"1\":{\"138\":1}}],[\"setjmp\",{\"1\":{\"124\":1}}],[\"setof\",{\"1\":{\"110\":1}}],[\"setname\",{\"1\":{\"75\":1,\"82\":4}}],[\"setssbsy\",{\"1\":{\"192\":1}}],[\"sets\",{\"1\":{\"9\":1,\"17\":1,\"22\":1,\"52\":1,\"162\":2,\"177\":2,\"201\":1,\"209\":3,\"227\":1}}],[\"set\",{\"1\":{\"6\":2,\"8\":1,\"9\":2,\"11\":4,\"14\":2,\"17\":2,\"21\":1,\"25\":6,\"27\":1,\"28\":4,\"29\":1,\"31\":1,\"33\":1,\"41\":1,\"45\":1,\"51\":1,\"52\":3,\"53\":1,\"58\":1,\"63\":1,\"69\":1,\"71\":1,\"75\":1,\"78\":1,\"95\":1,\"96\":1,\"98\":1,\"103\":2,\"104\":3,\"116\":1,\"117\":1,\"121\":2,\"124\":1,\"135\":1,\"141\":1,\"146\":1,\"156\":2,\"164\":2,\"172\":1,\"173\":1,\"174\":2,\"177\":2,\"178\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":10,\"186\":2,\"187\":2,\"188\":2,\"190\":3,\"194\":1,\"198\":1,\"199\":2,\"200\":2,\"201\":2,\"202\":1,\"204\":2,\"209\":8,\"210\":3,\"211\":1,\"221\":2,\"223\":1,\"234\":1,\"235\":1,\"237\":3,\"241\":1,\"249\":2}}],[\"setups\",{\"1\":{\"21\":1}}],[\"setupapi\",{\"1\":{\"13\":1}}],[\"setup\",{\"0\":{\"42\":1,\"117\":1,\"181\":1},\"1\":{\"6\":1,\"9\":1,\"11\":1,\"13\":2,\"34\":1}}],[\"separator\",{\"1\":{\"86\":1}}],[\"separation\",{\"1\":{\"5\":1}}],[\"separately\",{\"1\":{\"104\":1,\"109\":1,\"143\":1,\"195\":1,\"248\":1}}],[\"separated\",{\"1\":{\"15\":2,\"53\":1,\"68\":1,\"90\":1,\"92\":3}}],[\"separate\",{\"1\":{\"4\":1,\"5\":5,\"21\":1,\"24\":1,\"30\":1,\"41\":1,\"61\":1,\"72\":1,\"75\":1,\"79\":1,\"86\":1,\"90\":1,\"95\":1,\"109\":1,\"143\":1,\"223\":1,\"235\":1}}],[\"sessions\",{\"1\":{\"6\":1,\"11\":2,\"21\":1}}],[\"session\",{\"1\":{\"4\":1,\"11\":1,\"21\":2}}],[\"sectors\",{\"1\":{\"31\":1}}],[\"sector\",{\"1\":{\"31\":2,\"36\":1,\"122\":1}}],[\"sections\",{\"0\":{\"90\":1,\"91\":1},\"1\":{\"11\":2,\"12\":1,\"13\":1,\"53\":1,\"68\":1,\"70\":1,\"92\":1,\"93\":1,\"97\":1,\"123\":1,\"131\":1,\"133\":1,\"147\":33,\"148\":3,\"179\":1,\"196\":3,\"226\":6,\"228\":2,\"229\":8,\"232\":2,\"233\":4,\"234\":3,\"235\":3,\"246\":1}}],[\"section\",{\"1\":{\"3\":1,\"39\":1,\"41\":1,\"45\":1,\"49\":1,\"50\":1,\"53\":3,\"55\":1,\"56\":2,\"58\":1,\"59\":1,\"60\":1,\"66\":1,\"68\":6,\"70\":2,\"73\":1,\"75\":2,\"84\":1,\"90\":3,\"92\":7,\"94\":1,\"97\":2,\"110\":1,\"116\":1,\"117\":1,\"122\":1,\"123\":1,\"124\":2,\"125\":1,\"132\":1,\"133\":1,\"135\":1,\"137\":2,\"141\":1,\"147\":40,\"148\":9,\"149\":1,\"154\":1,\"155\":2,\"160\":1,\"164\":1,\"166\":2,\"172\":1,\"174\":1,\"177\":1,\"179\":1,\"183\":1,\"185\":1,\"189\":2,\"190\":1,\"193\":1,\"194\":2,\"197\":1,\"200\":2,\"215\":2,\"226\":5,\"228\":8,\"229\":18,\"230\":7,\"231\":2,\"233\":1,\"234\":7,\"235\":7,\"237\":1,\"246\":1,\"247\":1,\"249\":1}}],[\"secret\",{\"1\":{\"22\":1}}],[\"secondary\",{\"1\":{\"34\":1}}],[\"second\",{\"1\":{\"11\":1,\"20\":6,\"53\":1,\"72\":1,\"87\":1,\"88\":2,\"92\":1,\"96\":1,\"99\":1,\"104\":1,\"105\":1,\"109\":1,\"110\":1,\"134\":1,\"153\":1,\"164\":1,\"170\":1,\"171\":2,\"208\":1,\"237\":1}}],[\"secure\",{\"1\":{\"4\":2,\"6\":1,\"11\":2,\"17\":1,\"21\":2,\"22\":6,\"24\":1,\"27\":1,\"31\":1,\"33\":1,\"34\":1}}],[\"security\",{\"0\":{\"22\":1},\"1\":{\"4\":2,\"6\":1,\"11\":6,\"13\":1,\"21\":3,\"22\":15,\"23\":2,\"24\":1,\"33\":1,\"35\":1,\"36\":5,\"116\":2,\"253\":1}}],[\"sooner\",{\"1\":{\"172\":1,\"183\":1}}],[\"soon\",{\"1\":{\"35\":1}}],[\"southbridge\",{\"1\":{\"30\":1}}],[\"sound\",{\"1\":{\"21\":1,\"30\":1}}],[\"sounds\",{\"1\":{\"21\":1,\"186\":1}}],[\"sourcing\",{\"1\":{\"4\":1}}],[\"sourcefile\",{\"1\":{\"55\":1,\"71\":1}}],[\"sourcesets\",{\"1\":{\"54\":2}}],[\"sources\",{\"1\":{\"17\":1,\"21\":1,\"32\":1,\"54\":1,\"247\":1,\"248\":2}}],[\"source\",{\"0\":{\"37\":1},\"1\":{\"1\":1,\"6\":2,\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"12\":1,\"20\":1,\"21\":4,\"22\":2,\"24\":2,\"32\":2,\"35\":1,\"36\":3,\"37\":4,\"40\":1,\"54\":2,\"57\":4,\"59\":2,\"97\":1,\"116\":1,\"134\":2,\"151\":1,\"192\":2,\"250\":2}}],[\"sony\",{\"1\":{\"25\":1}}],[\"sonet\",{\"1\":{\"21\":4}}],[\"sonames\",{\"1\":{\"11\":1}}],[\"soft\",{\"1\":{\"11\":1,\"17\":1,\"33\":1}}],[\"software\",{\"0\":{\"4\":1,\"5\":1,\"6\":1},\"1\":{\"0\":1,\"3\":1,\"4\":2,\"6\":4,\"7\":2,\"9\":2,\"10\":1,\"11\":6,\"13\":2,\"17\":1,\"22\":3,\"24\":4,\"25\":1,\"35\":2,\"36\":3,\"37\":7,\"185\":2,\"188\":1,\"189\":1,\"201\":2,\"207\":1,\"249\":3}}],[\"sorting\",{\"1\":{\"16\":1}}],[\"sort\",{\"1\":{\"9\":3,\"218\":3}}],[\"sortedbyit\",{\"1\":{\"218\":1,\"237\":1}}],[\"sorted\",{\"1\":{\"9\":1,\"17\":1,\"218\":1}}],[\"so\",{\"1\":{\"6\":1,\"9\":1,\"10\":1,\"11\":5,\"21\":5,\"29\":2,\"35\":2,\"40\":1,\"43\":1,\"45\":1,\"51\":1,\"52\":1,\"53\":1,\"55\":1,\"61\":1,\"64\":1,\"69\":3,\"70\":1,\"71\":1,\"72\":2,\"74\":2,\"75\":2,\"77\":1,\"79\":1,\"80\":1,\"83\":1,\"85\":1,\"86\":1,\"87\":6,\"89\":5,\"92\":1,\"95\":2,\"96\":1,\"99\":1,\"100\":2,\"101\":1,\"104\":1,\"106\":1,\"116\":2,\"117\":1,\"118\":1,\"120\":1,\"123\":1,\"124\":8,\"127\":2,\"130\":2,\"135\":3,\"139\":1,\"140\":1,\"141\":2,\"143\":2,\"146\":1,\"147\":8,\"149\":1,\"150\":2,\"151\":6,\"153\":1,\"154\":2,\"158\":1,\"160\":3,\"162\":1,\"164\":4,\"166\":2,\"169\":1,\"170\":1,\"171\":3,\"172\":1,\"174\":1,\"175\":2,\"177\":3,\"179\":1,\"181\":1,\"183\":1,\"185\":3,\"186\":4,\"188\":1,\"190\":3,\"191\":2,\"192\":1,\"194\":1,\"195\":3,\"197\":1,\"198\":2,\"199\":1,\"200\":1,\"201\":4,\"202\":1,\"206\":1,\"208\":2,\"209\":1,\"210\":3,\"211\":1,\"212\":2,\"213\":1,\"214\":1,\"215\":1,\"218\":1,\"221\":1,\"223\":4,\"225\":1,\"227\":3,\"228\":3,\"229\":5,\"230\":1,\"231\":3,\"232\":2,\"233\":1,\"236\":1,\"237\":6,\"239\":1,\"242\":1,\"244\":2,\"245\":1,\"246\":1,\"248\":4,\"249\":3}}],[\"society\",{\"1\":{\"36\":1}}],[\"social\",{\"1\":{\"11\":1,\"35\":1}}],[\"socs\",{\"1\":{\"25\":1,\"29\":1,\"30\":2,\"33\":2}}],[\"sock\",{\"1\":{\"11\":1}}],[\"socket\",{\"1\":{\"11\":2,\"21\":2,\"25\":2,\"30\":3}}],[\"sockets\",{\"1\":{\"11\":1,\"21\":1,\"22\":1,\"30\":1}}],[\"soc\",{\"1\":{\"5\":1,\"30\":5,\"33\":1}}],[\"solves\",{\"1\":{\"89\":1}}],[\"solve\",{\"1\":{\"89\":3,\"96\":1,\"148\":1,\"223\":1}}],[\"solution\",{\"1\":{\"35\":1,\"164\":1,\"187\":1}}],[\"solutions\",{\"1\":{\"5\":1,\"35\":1,\"176\":1}}],[\"solaris\",{\"1\":{\"11\":2,\"25\":1}}],[\"solid\",{\"1\":{\"5\":1,\"16\":3,\"31\":1,\"132\":1}}],[\"solely\",{\"1\":{\"5\":1}}],[\"soap\",{\"1\":{\"4\":2,\"7\":2,\"12\":1}}],[\"soa\",{\"1\":{\"4\":2,\"5\":1}}],[\"somewhere\",{\"1\":{\"211\":1}}],[\"something\",{\"1\":{\"35\":3,\"89\":1,\"127\":1,\"164\":1,\"169\":1,\"171\":1,\"179\":1,\"193\":1,\"200\":1,\"201\":1,\"211\":1,\"229\":1,\"230\":1,\"241\":1}}],[\"sometimes\",{\"1\":{\"7\":1,\"32\":1,\"176\":1}}],[\"some\",{\"1\":{\"0\":1,\"9\":1,\"10\":3,\"16\":1,\"21\":1,\"22\":1,\"29\":1,\"40\":1,\"52\":1,\"98\":1,\"101\":1,\"104\":1,\"107\":1,\"110\":1,\"116\":3,\"124\":4,\"134\":1,\"146\":1,\"147\":1,\"151\":1,\"162\":1,\"164\":2,\"170\":1,\"171\":1,\"173\":1,\"176\":2,\"177\":2,\"181\":1,\"190\":1,\"191\":2,\"193\":2,\"197\":2,\"209\":1,\"218\":1,\"225\":2,\"227\":1,\"228\":1,\"229\":1,\"234\":1,\"235\":1,\"237\":1,\"239\":3}}],[\"mnemonic\",{\"1\":{\"192\":1}}],[\"mno\",{\"1\":{\"146\":2}}],[\"m16\",{\"1\":{\"188\":1}}],[\"mgeneral\",{\"1\":{\"146\":2}}],[\"mgmt\",{\"1\":{\"24\":1}}],[\"mkdir\",{\"1\":{\"121\":2,\"134\":1,\"135\":1,\"136\":2,\"143\":1,\"148\":2,\"196\":2}}],[\"mhz\",{\"1\":{\"33\":1}}],[\"mmain\",{\"1\":{\"124\":4,\"147\":9,\"179\":6}}],[\"mmap\",{\"1\":{\"124\":1}}],[\"mmorpgs\",{\"1\":{\"35\":1}}],[\"mmx\",{\"1\":{\"28\":2}}],[\"mmio\",{\"1\":{\"28\":2,\"33\":3}}],[\"mmu\",{\"1\":{\"26\":2}}],[\"mmc\",{\"1\":{\"4\":1}}],[\"mc\",{\"1\":{\"192\":1}}],[\"mcmodel=large\",{\"1\":{\"179\":1,\"196\":1}}],[\"mcmodel\",{\"1\":{\"179\":1}}],[\"mca\",{\"1\":{\"30\":2}}],[\"mcu\",{\"1\":{\"29\":1}}],[\"mci\",{\"1\":{\"21\":1}}],[\"mcp\",{\"1\":{\"11\":2,\"18\":2}}],[\"mxcsr=00001f80\",{\"1\":{\"188\":1}}],[\"mx\",{\"1\":{\"21\":3}}],[\"mtls\",{\"1\":{\"22\":1}}],[\"mta\",{\"1\":{\"21\":1}}],[\"mtu\",{\"1\":{\"21\":4}}],[\"mttr\",{\"1\":{\"19\":2}}],[\"mbind\",{\"1\":{\"234\":1}}],[\"mbit\",{\"1\":{\"21\":1}}],[\"mbr\",{\"1\":{\"31\":4,\"34\":1}}],[\"mbcs\",{\"1\":{\"14\":1}}],[\"mfm\",{\"1\":{\"31\":3}}],[\"mfa\",{\"1\":{\"22\":1}}],[\"mf\",{\"1\":{\"16\":2,\"192\":1}}],[\"mft\",{\"1\":{\"11\":3}}],[\"mpich\",{\"1\":{\"24\":1}}],[\"mpirun\",{\"1\":{\"24\":1}}],[\"mpi\",{\"1\":{\"24\":4}}],[\"mprotect\",{\"1\":{\"22\":1}}],[\"mppe\",{\"1\":{\"21\":1}}],[\"mpls\",{\"1\":{\"21\":16}}],[\"mpeg\",{\"1\":{\"13\":1}}],[\"mp3\",{\"1\":{\"13\":3}}],[\"mp\",{\"1\":{\"11\":1}}],[\"m\",{\"1\":{\"11\":5,\"25\":2,\"31\":1,\"33\":1,\"35\":1,\"57\":1,\"68\":1,\"74\":1,\"85\":1,\"89\":1,\"95\":1,\"97\":1,\"116\":1,\"124\":18,\"133\":1,\"135\":2,\"136\":1,\"147\":4,\"151\":1,\"153\":1,\"158\":1,\"171\":1,\"185\":1,\"187\":1,\"188\":1,\"191\":1,\"192\":1,\"197\":1,\"203\":1,\"211\":1,\"212\":1,\"223\":1,\"228\":6,\"234\":2,\"235\":1,\"239\":2,\"240\":2,\"245\":1}}],[\"msyscalls\",{\"1\":{\"210\":1}}],[\"msr\",{\"1\":{\"209\":4,\"248\":5,\"249\":1}}],[\"msrs\",{\"1\":{\"209\":2}}],[\"msgs\",{\"1\":{\"144\":4}}],[\"msg\",{\"1\":{\"72\":11,\"76\":3,\"80\":2,\"82\":1,\"84\":3,\"90\":1,\"94\":1,\"97\":3,\"139\":2,\"141\":1,\"144\":2,\"166\":1,\"192\":2,\"213\":2,\"214\":1,\"227\":5,\"246\":2}}],[\"msx\",{\"1\":{\"25\":2}}],[\"msn\",{\"1\":{\"21\":2}}],[\"ms\",{\"1\":{\"11\":4,\"20\":3,\"21\":1,\"123\":2,\"131\":1,\"133\":1,\"147\":1,\"226\":1,\"228\":1,\"234\":1}}],[\"msiexec\",{\"1\":{\"13\":1}}],[\"msi\",{\"1\":{\"11\":2,\"13\":2}}],[\"msil\",{\"1\":{\"10\":1}}],[\"mstsc\",{\"1\":{\"21\":1}}],[\"mst\",{\"1\":{\"9\":2,\"32\":2}}],[\"msb\",{\"1\":{\"9\":3}}],[\"msmq\",{\"1\":{\"4\":3}}],[\"mlps\",{\"1\":{\"18\":1}}],[\"mlir\",{\"1\":{\"10\":3}}],[\"mlton\",{\"1\":{\"8\":1}}],[\"ml\",{\"1\":{\"8\":4,\"10\":2,\"15\":1,\"18\":1,\"29\":1,\"96\":9,\"97\":1}}],[\"mda\",{\"1\":{\"32\":1}}],[\"md5sum\",{\"1\":{\"22\":1}}],[\"md5\",{\"1\":{\"22\":1}}],[\"mdm\",{\"1\":{\"22\":2}}],[\"md\",{\"1\":{\"12\":2}}],[\"mdi\",{\"1\":{\"5\":1}}],[\"mdbs\",{\"1\":{\"4\":1}}],[\"mvt\",{\"1\":{\"11\":3}}],[\"mvs\",{\"1\":{\"11\":6}}],[\"mvp\",{\"1\":{\"6\":1}}],[\"mvvm\",{\"1\":{\"5\":1}}],[\"mvcc\",{\"1\":{\"17\":1}}],[\"mvc\",{\"1\":{\"5\":1}}],[\"mutask\",{\"1\":{\"196\":4,\"227\":1,\"228\":3}}],[\"mutual\",{\"1\":{\"22\":1}}],[\"muck\",{\"1\":{\"35\":1}}],[\"much\",{\"1\":{\"10\":1,\"86\":1,\"89\":1,\"92\":1,\"93\":1,\"136\":1,\"141\":1,\"147\":1,\"159\":1,\"164\":1,\"169\":1,\"211\":1,\"223\":2,\"246\":1}}],[\"mud\",{\"1\":{\"35\":1}}],[\"mux\",{\"1\":{\"21\":1}}],[\"mush\",{\"1\":{\"35\":1}}],[\"musical\",{\"1\":{\"30\":2}}],[\"music\",{\"1\":{\"11\":2,\"13\":2}}],[\"museum\",{\"1\":{\"11\":1}}],[\"must\",{\"1\":{\"5\":1,\"37\":2,\"98\":1,\"105\":1,\"115\":1,\"170\":1,\"171\":1,\"173\":1,\"181\":1,\"185\":1,\"186\":2,\"187\":1,\"191\":1,\"206\":1,\"207\":1,\"237\":2}}],[\"multimedia\",{\"1\":{\"25\":1,\"27\":1,\"28\":1,\"32\":1,\"33\":1}}],[\"multilinecommentlevel++\",{\"1\":{\"96\":2}}],[\"multilinecommentlevel\",{\"1\":{\"96\":9}}],[\"multiline\",{\"0\":{\"96\":1},\"1\":{\"95\":5,\"96\":6}}],[\"multilink\",{\"1\":{\"21\":1}}],[\"multilib\",{\"1\":{\"25\":1}}],[\"multitasking\",{\"0\":{\"238\":1},\"1\":{\"11\":2,\"185\":1,\"188\":1,\"231\":2,\"238\":4,\"243\":1,\"246\":1,\"252\":1}}],[\"multipath\",{\"1\":{\"31\":1}}],[\"multipart\",{\"1\":{\"14\":1}}],[\"multiprocessor\",{\"1\":{\"247\":1}}],[\"multiprocessing\",{\"1\":{\"25\":1}}],[\"multiprotocol\",{\"1\":{\"21\":1}}],[\"multiprogramming\",{\"1\":{\"11\":3}}],[\"multipurpose\",{\"1\":{\"14\":1}}],[\"multiplayer\",{\"1\":{\"11\":1,\"35\":1}}],[\"multiplexes\",{\"1\":{\"21\":1}}],[\"multiplexed\",{\"1\":{\"11\":2,\"21\":2,\"30\":1}}],[\"multiplexing\",{\"1\":{\"21\":2}}],[\"multiple\",{\"0\":{\"243\":1},\"1\":{\"4\":1,\"5\":2,\"6\":1,\"10\":1,\"11\":2,\"16\":1,\"17\":1,\"21\":1,\"24\":1,\"25\":1,\"26\":3,\"27\":1,\"30\":1,\"31\":2,\"33\":3,\"34\":1,\"35\":1,\"73\":1,\"76\":1,\"86\":1,\"87\":4,\"88\":1,\"89\":2,\"90\":4,\"92\":1,\"94\":3,\"97\":1,\"116\":1,\"123\":1,\"124\":1,\"201\":1,\"217\":1,\"222\":1,\"223\":1}}],[\"multics\",{\"1\":{\"11\":3}}],[\"multi\",{\"1\":{\"10\":1,\"11\":5,\"14\":1,\"16\":1,\"17\":1,\"19\":1,\"21\":2,\"22\":1,\"25\":1,\"26\":1,\"29\":1,\"30\":4,\"35\":2,\"94\":4}}],[\"mqtt\",{\"1\":{\"21\":2,\"24\":1}}],[\"mq\",{\"1\":{\"4\":1,\"6\":1,\"17\":1}}],[\"mismatch\",{\"1\":{\"230\":1}}],[\"missed\",{\"1\":{\"35\":2}}],[\"missing\",{\"1\":{\"35\":2,\"66\":1,\"79\":1,\"124\":2,\"131\":1,\"192\":1,\"214\":1,\"230\":1}}],[\"misconfigured\",{\"1\":{\"35\":1}}],[\"misc\",{\"0\":{\"35\":1},\"1\":{\"151\":2}}],[\"miso\",{\"1\":{\"30\":1}}],[\"mirroring\",{\"1\":{\"31\":1}}],[\"mice\",{\"1\":{\"30\":1,\"33\":1}}],[\"microvax\",{\"1\":{\"30\":2}}],[\"micro\",{\"1\":{\"30\":1,\"147\":2,\"234\":1}}],[\"microprocessor\",{\"1\":{\"25\":1}}],[\"microprocessors\",{\"1\":{\"11\":1}}],[\"microarchitecture\",{\"1\":{\"25\":1}}],[\"microcode\",{\"1\":{\"25\":1,\"29\":1}}],[\"microcontroller\",{\"1\":{\"25\":1,\"29\":1,\"30\":2}}],[\"microcontrollers\",{\"1\":{\"11\":1,\"25\":1,\"30\":3}}],[\"microcomputer\",{\"1\":{\"11\":1}}],[\"microcomputers\",{\"1\":{\"8\":1,\"11\":1}}],[\"microkernel\",{\"1\":{\"11\":3}}],[\"microsecond\",{\"1\":{\"33\":1}}],[\"microservices\",{\"1\":{\"4\":1}}],[\"microsd\",{\"1\":{\"31\":1}}],[\"microsystems\",{\"1\":{\"25\":1}}],[\"microsoft\",{\"1\":{\"4\":4,\"7\":4,\"8\":2,\"9\":5,\"10\":1,\"11\":7,\"13\":3,\"14\":1,\"17\":6,\"21\":4,\"22\":1,\"24\":1,\"164\":2}}],[\"mix\",{\"1\":{\"74\":1}}],[\"mixins\",{\"1\":{\"74\":2}}],[\"mixin\",{\"0\":{\"74\":1,\"75\":1},\"1\":{\"74\":8,\"75\":4}}],[\"mixed\",{\"1\":{\"21\":1,\"33\":1,\"187\":1}}],[\"mixture\",{\"1\":{\"18\":1}}],[\"mib\",{\"1\":{\"21\":1,\"124\":1,\"147\":2,\"148\":2,\"150\":1,\"154\":1,\"156\":1,\"165\":2,\"169\":2,\"170\":7,\"171\":4,\"179\":1,\"181\":1,\"183\":2,\"188\":1}}],[\"migration\",{\"1\":{\"35\":2}}],[\"migrating\",{\"1\":{\"21\":2}}],[\"migrated\",{\"1\":{\"11\":1}}],[\"migrate\",{\"1\":{\"6\":1}}],[\"might\",{\"1\":{\"21\":1,\"85\":1,\"89\":1,\"99\":1,\"110\":1,\"147\":1,\"168\":1,\"212\":1}}],[\"milestone\",{\"1\":{\"80\":1,\"161\":1,\"183\":1,\"200\":1,\"215\":1,\"231\":1}}],[\"mileage\",{\"1\":{\"35\":1}}],[\"military\",{\"1\":{\"21\":2}}],[\"milnet\",{\"1\":{\"21\":2}}],[\"milner\",{\"1\":{\"10\":1}}],[\"million\",{\"1\":{\"20\":1}}],[\"minaddress\",{\"1\":{\"218\":3,\"219\":1,\"220\":1}}],[\"mingw\",{\"1\":{\"124\":2}}],[\"minus\",{\"1\":{\"98\":2,\"99\":2,\"188\":1}}],[\"minute\",{\"1\":{\"19\":2,\"153\":1}}],[\"mind\",{\"1\":{\"78\":1,\"141\":1,\"147\":1,\"162\":1,\"164\":1,\"175\":1,\"215\":1,\"231\":1}}],[\"minor\",{\"1\":{\"35\":1}}],[\"mins\",{\"1\":{\"35\":1}}],[\"mini\",{\"1\":{\"30\":1}}],[\"minicomputer\",{\"1\":{\"25\":2}}],[\"minicomputers\",{\"1\":{\"11\":2,\"24\":1,\"30\":2}}],[\"mining\",{\"1\":{\"25\":1}}],[\"miniport\",{\"1\":{\"11\":1}}],[\"minimizing\",{\"1\":{\"34\":1}}],[\"minimization\",{\"1\":{\"23\":1}}],[\"minimize\",{\"1\":{\"19\":1}}],[\"minimal\",{\"1\":{\"13\":2,\"53\":1,\"122\":1,\"133\":1,\"145\":1,\"194\":1,\"200\":1}}],[\"minimality\",{\"1\":{\"11\":1}}],[\"minimum\",{\"1\":{\"6\":1,\"9\":2,\"22\":1,\"53\":1,\"218\":1}}],[\"mime\",{\"1\":{\"14\":1,\"46\":1}}],[\"mips64\",{\"1\":{\"25\":1}}],[\"mips32\",{\"1\":{\"25\":1}}],[\"mipspro\",{\"1\":{\"11\":1}}],[\"mips\",{\"1\":{\"11\":1,\"20\":1,\"25\":2,\"235\":2}}],[\"mitems\",{\"1\":{\"237\":1}}],[\"mitm\",{\"1\":{\"22\":1}}],[\"mitigate\",{\"1\":{\"21\":1,\"22\":2}}],[\"mit\",{\"1\":{\"9\":1,\"11\":6,\"37\":3}}],[\"midi\",{\"1\":{\"30\":2}}],[\"mid\",{\"1\":{\"29\":1}}],[\"middle\",{\"1\":{\"22\":1,\"229\":1}}],[\"middleware\",{\"1\":{\"4\":2}}],[\"midl\",{\"1\":{\"9\":1}}],[\"magic\",{\"1\":{\"147\":2,\"234\":1,\"235\":3}}],[\"magnetic\",{\"1\":{\"31\":6}}],[\"mavencentral\",{\"1\":{\"43\":1}}],[\"mame\",{\"1\":{\"35\":2}}],[\"madt\",{\"1\":{\"34\":2}}],[\"made\",{\"1\":{\"11\":1,\"103\":1,\"201\":1}}],[\"malicious\",{\"1\":{\"22\":2}}],[\"malloc\",{\"1\":{\"10\":1,\"124\":6,\"143\":1,\"145\":2,\"148\":1,\"161\":1,\"163\":1,\"246\":1}}],[\"major\",{\"1\":{\"21\":2}}],[\"maxaddress\",{\"1\":{\"218\":2,\"219\":1,\"220\":1}}],[\"maxallocatetype\",{\"1\":{\"156\":1}}],[\"max=\",{\"1\":{\"171\":1}}],[\"maxphysaddr\",{\"1\":{\"168\":2,\"169\":1,\"171\":2,\"180\":4,\"181\":3,\"182\":1}}],[\"maxscope\",{\"1\":{\"77\":3}}],[\"maximum\",{\"1\":{\"21\":1,\"78\":1,\"162\":1,\"168\":1,\"169\":1,\"218\":1}}],[\"max\",{\"1\":{\"19\":1,\"21\":1,\"78\":1,\"168\":1,\"180\":1,\"181\":1,\"186\":3,\"248\":1}}],[\"maybe\",{\"1\":{\"107\":1}}],[\"may\",{\"1\":{\"11\":1,\"17\":1,\"35\":3,\"48\":1,\"52\":1,\"89\":1,\"116\":1,\"160\":2,\"162\":1,\"186\":1,\"192\":2,\"237\":3,\"242\":1,\"249\":1}}],[\"mask\",{\"1\":{\"209\":6,\"249\":1}}],[\"maskable\",{\"1\":{\"26\":1}}],[\"masking\",{\"1\":{\"21\":1,\"23\":1,\"26\":1}}],[\"massively\",{\"1\":{\"21\":1}}],[\"massive\",{\"1\":{\"11\":1}}],[\"mastering\",{\"1\":{\"30\":2}}],[\"master\",{\"1\":{\"11\":2,\"30\":1,\"31\":1}}],[\"masm\",{\"1\":{\"9\":1}}],[\"marcros\",{\"1\":{\"124\":1}}],[\"marc\",{\"1\":{\"15\":2}}],[\"margin\",{\"1\":{\"7\":1}}],[\"marking\",{\"1\":{\"58\":1,\"63\":1}}],[\"marketplace\",{\"1\":{\"113\":1}}],[\"marketed\",{\"1\":{\"25\":1,\"33\":1}}],[\"marked\",{\"1\":{\"58\":1,\"63\":1,\"66\":1,\"165\":1,\"195\":1,\"232\":1}}],[\"marker\",{\"1\":{\"58\":3,\"63\":7,\"66\":9,\"89\":1}}],[\"markers\",{\"1\":{\"7\":1,\"58\":1}}],[\"marks\",{\"1\":{\"22\":1,\"66\":1}}],[\"markov\",{\"1\":{\"16\":1}}],[\"markdown\",{\"1\":{\"12\":2}}],[\"markup\",{\"0\":{\"12\":1},\"1\":{\"7\":2,\"9\":2,\"12\":6,\"13\":1,\"15\":1}}],[\"mark\",{\"1\":{\"6\":1,\"14\":1,\"54\":2,\"63\":3,\"66\":5,\"140\":1,\"197\":2,\"235\":1}}],[\"making\",{\"1\":{\"7\":2,\"17\":1,\"78\":1,\"87\":1,\"93\":1,\"140\":1,\"188\":1,\"227\":1,\"234\":1,\"237\":1,\"239\":1,\"246\":1}}],[\"makes\",{\"1\":{\"55\":1,\"85\":1,\"95\":1,\"104\":1,\"123\":1,\"124\":2,\"142\":1,\"172\":1,\"173\":1,\"176\":1,\"179\":1,\"187\":2,\"198\":1,\"201\":1}}],[\"make\",{\"1\":{\"6\":1,\"7\":1,\"10\":1,\"11\":1,\"21\":1,\"22\":3,\"40\":1,\"55\":1,\"57\":1,\"59\":1,\"66\":2,\"72\":3,\"89\":1,\"92\":3,\"93\":2,\"99\":1,\"104\":2,\"105\":1,\"106\":1,\"135\":1,\"136\":2,\"139\":1,\"148\":1,\"166\":1,\"171\":1,\"177\":2,\"179\":1,\"187\":1,\"188\":1,\"208\":1,\"209\":1,\"210\":1,\"214\":1,\"215\":1,\"218\":3,\"223\":2,\"227\":1,\"228\":2,\"229\":1,\"239\":4}}],[\"matters\",{\"1\":{\"164\":1}}],[\"matter\",{\"1\":{\"35\":1,\"186\":1,\"187\":1,\"196\":1}}],[\"matx\",{\"1\":{\"33\":1}}],[\"materials\",{\"1\":{\"22\":1}}],[\"mathematics\",{\"1\":{\"12\":1}}],[\"math\",{\"1\":{\"12\":2,\"18\":1,\"28\":1,\"192\":2}}],[\"match\",{\"1\":{\"53\":1,\"62\":1,\"63\":1,\"70\":1,\"77\":2,\"78\":1,\"87\":1,\"89\":2,\"95\":1,\"96\":1,\"101\":1,\"104\":2,\"163\":1,\"170\":2,\"186\":1}}],[\"matched\",{\"1\":{\"53\":3,\"58\":1,\"95\":1}}],[\"matches\",{\"1\":{\"9\":1,\"53\":3,\"62\":2,\"70\":1,\"74\":1,\"76\":1,\"78\":2,\"89\":2,\"101\":1,\"104\":2,\"105\":3,\"106\":2,\"161\":1}}],[\"matching\",{\"1\":{\"4\":1,\"9\":2,\"10\":2,\"51\":1,\"52\":1,\"53\":1,\"76\":1,\"79\":1,\"95\":2,\"104\":1}}],[\"matrix\",{\"1\":{\"8\":1,\"28\":2}}],[\"mature\",{\"1\":{\"6\":1,\"35\":1}}],[\"maincrtstartup\",{\"1\":{\"123\":2}}],[\"mains\",{\"1\":{\"33\":1}}],[\"mainstream\",{\"1\":{\"11\":2,\"21\":1,\"29\":2}}],[\"mainly\",{\"1\":{\"21\":1,\"134\":1,\"187\":1,\"234\":1}}],[\"mainline\",{\"1\":{\"21\":1}}],[\"mainframe\",{\"1\":{\"11\":8,\"14\":1,\"17\":2}}],[\"mainframes\",{\"1\":{\"8\":2,\"11\":8,\"14\":1,\"17\":4,\"21\":3,\"22\":1,\"24\":1}}],[\"maintenance\",{\"1\":{\"6\":1,\"35\":1}}],[\"maintain\",{\"1\":{\"21\":2,\"237\":1}}],[\"maintains\",{\"1\":{\"6\":1,\"9\":1,\"32\":1,\"36\":1}}],[\"maintaining\",{\"1\":{\"6\":1,\"36\":1}}],[\"maintained\",{\"1\":{\"6\":1,\"11\":1}}],[\"main\",{\"1\":{\"6\":4,\"20\":1,\"26\":2,\"29\":1,\"30\":2,\"34\":1,\"35\":1,\"44\":2,\"47\":3,\"48\":1,\"53\":1,\"54\":7,\"55\":2,\"61\":4,\"62\":1,\"63\":1,\"64\":2,\"66\":1,\"69\":6,\"71\":6,\"73\":2,\"74\":3,\"77\":1,\"78\":2,\"82\":3,\"83\":1,\"87\":2,\"88\":2,\"89\":4,\"90\":1,\"95\":3,\"99\":2,\"100\":1,\"104\":1,\"106\":1,\"123\":22,\"124\":56,\"131\":7,\"133\":1,\"141\":2,\"143\":2,\"145\":1,\"147\":4,\"148\":3,\"161\":1,\"163\":1,\"165\":1,\"166\":2,\"169\":1,\"170\":1,\"171\":3,\"173\":1,\"179\":6,\"182\":1,\"183\":1,\"188\":2,\"191\":1,\"192\":3,\"193\":5,\"194\":1,\"197\":1,\"198\":1,\"199\":1,\"200\":1,\"204\":1,\"205\":6,\"206\":2,\"209\":2,\"211\":2,\"219\":1,\"222\":1,\"223\":1,\"230\":4,\"231\":1,\"239\":1,\"243\":1,\"247\":1,\"249\":2}}],[\"mailing\",{\"1\":{\"21\":1}}],[\"mailbox\",{\"1\":{\"21\":1}}],[\"mailboxes\",{\"1\":{\"21\":1}}],[\"mail2\",{\"1\":{\"21\":1}}],[\"mail1\",{\"1\":{\"21\":1}}],[\"mailto\",{\"1\":{\"7\":1}}],[\"mail\",{\"1\":{\"4\":1,\"14\":2,\"21\":4,\"22\":2}}],[\"macs\",{\"1\":{\"25\":1}}],[\"mac\",{\"1\":{\"11\":4,\"14\":2,\"21\":5,\"22\":2}}],[\"macos\",{\"1\":{\"11\":6,\"14\":1,\"29\":1,\"42\":1,\"45\":1,\"75\":1,\"124\":3,\"134\":2}}],[\"mach\",{\"1\":{\"10\":1,\"11\":3}}],[\"machinery\",{\"1\":{\"36\":1}}],[\"machines\",{\"1\":{\"11\":3,\"18\":1,\"25\":2,\"116\":4,\"253\":1}}],[\"machine\",{\"0\":{\"87\":1},\"1\":{\"4\":2,\"9\":5,\"10\":5,\"11\":3,\"15\":2,\"18\":1,\"21\":2,\"22\":1,\"24\":4,\"25\":1,\"28\":1,\"29\":1,\"34\":2,\"35\":1,\"42\":1,\"87\":1,\"134\":1,\"135\":2,\"136\":1,\"143\":1,\"147\":2,\"148\":1,\"192\":2,\"196\":1,\"234\":1,\"235\":2}}],[\"macro\",{\"1\":{\"9\":1,\"72\":1}}],[\"macros\",{\"1\":{\"8\":2,\"11\":1,\"12\":1,\"72\":3,\"87\":1}}],[\"macintosh\",{\"1\":{\"5\":1,\"11\":1}}],[\"manner\",{\"1\":{\"185\":1,\"237\":1}}],[\"mangled\",{\"1\":{\"147\":1,\"228\":1}}],[\"mangle\",{\"1\":{\"124\":1}}],[\"mangling\",{\"1\":{\"124\":1}}],[\"mandatory\",{\"1\":{\"99\":1}}],[\"mandated\",{\"1\":{\"10\":1}}],[\"manufacturer\",{\"1\":{\"33\":1}}],[\"manufacturing\",{\"1\":{\"29\":1}}],[\"manually\",{\"1\":{\"55\":1,\"71\":1,\"135\":1,\"162\":1,\"194\":1,\"218\":1,\"232\":1}}],[\"manuals\",{\"1\":{\"13\":1}}],[\"manual\",{\"1\":{\"6\":1,\"34\":1,\"35\":1,\"94\":1,\"95\":1,\"98\":1,\"103\":1,\"104\":1,\"106\":1,\"107\":2,\"109\":1,\"185\":2,\"186\":2,\"192\":1,\"248\":1}}],[\"man\",{\"1\":{\"22\":1}}],[\"manipulate\",{\"1\":{\"199\":1}}],[\"manipulates\",{\"1\":{\"7\":1}}],[\"manipulating\",{\"1\":{\"11\":1}}],[\"manipulation\",{\"1\":{\"8\":1,\"9\":1,\"17\":1}}],[\"manifest\",{\"1\":{\"7\":1,\"16\":2}}],[\"manifests\",{\"1\":{\"6\":1}}],[\"managing\",{\"1\":{\"7\":2,\"17\":1,\"21\":3,\"27\":1,\"167\":1,\"185\":1,\"247\":3,\"248\":1}}],[\"manage\",{\"1\":{\"11\":3,\"15\":1,\"17\":1,\"24\":2,\"28\":1,\"36\":1,\"41\":1,\"51\":1,\"124\":1,\"172\":1,\"239\":1}}],[\"manages\",{\"1\":{\"11\":1,\"17\":1}}],[\"managers\",{\"1\":{\"34\":1}}],[\"manager\",{\"1\":{\"7\":2,\"11\":5,\"17\":1,\"22\":2,\"24\":1,\"118\":1,\"124\":2,\"135\":1,\"141\":1,\"161\":1,\"166\":2,\"167\":1,\"169\":2,\"170\":5,\"171\":1,\"172\":2,\"177\":1,\"181\":1,\"182\":4,\"183\":4,\"188\":1,\"217\":1,\"219\":1,\"252\":2}}],[\"management\",{\"0\":{\"38\":1},\"1\":{\"6\":2,\"7\":1,\"9\":1,\"11\":1,\"17\":6,\"21\":2,\"22\":5,\"24\":1,\"26\":1,\"33\":1,\"34\":10,\"36\":3,\"115\":1,\"138\":1,\"185\":1,\"252\":2}}],[\"managed\",{\"1\":{\"4\":1,\"11\":2,\"17\":1,\"21\":2,\"22\":2,\"24\":1}}],[\"many\",{\"1\":{\"5\":1,\"8\":2,\"10\":3,\"11\":5,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":2,\"21\":1,\"22\":2,\"24\":1,\"31\":2,\"37\":1,\"40\":1,\"41\":1,\"83\":1,\"110\":1,\"151\":1,\"167\":1,\"183\":1,\"195\":1,\"229\":2,\"234\":1,\"239\":1,\"248\":1}}],[\"mapregion\",{\"1\":{\"177\":2,\"181\":3,\"198\":2,\"204\":1,\"218\":1,\"220\":1,\"230\":1,\"237\":1,\"248\":1}}],[\"mapkey\",{\"1\":{\"159\":1,\"160\":4}}],[\"map=build\",{\"1\":{\"147\":1,\"196\":1}}],[\"maps\",{\"0\":{\"183\":1},\"1\":{\"9\":2,\"11\":2,\"15\":1,\"28\":1,\"174\":1,\"183\":1,\"218\":1,\"229\":1}}],[\"mappage\",{\"1\":{\"177\":2}}],[\"mappings\",{\"1\":{\"21\":1,\"176\":2,\"179\":1,\"231\":1}}],[\"mapping\",{\"0\":{\"177\":1},\"1\":{\"9\":2,\"17\":1,\"21\":1,\"31\":1,\"147\":3,\"172\":1,\"176\":7,\"177\":2,\"181\":6,\"188\":5,\"195\":4,\"198\":2,\"200\":2,\"220\":4,\"234\":1,\"237\":3,\"248\":1}}],[\"mapped\",{\"1\":{\"9\":1,\"11\":2,\"33\":2,\"116\":2,\"147\":1,\"172\":1,\"180\":1,\"181\":4,\"182\":2,\"194\":1,\"195\":1,\"196\":1,\"205\":2,\"214\":2,\"234\":1,\"237\":1,\"248\":1}}],[\"map\",{\"0\":{\"159\":1,\"162\":1,\"165\":1},\"1\":{\"5\":2,\"9\":5,\"11\":1,\"14\":1,\"15\":1,\"17\":2,\"21\":3,\"79\":1,\"135\":1,\"147\":11,\"150\":4,\"159\":13,\"160\":8,\"161\":2,\"162\":13,\"163\":5,\"164\":3,\"165\":4,\"166\":1,\"169\":5,\"174\":3,\"175\":2,\"176\":2,\"177\":6,\"178\":1,\"179\":4,\"180\":7,\"181\":9,\"193\":1,\"195\":1,\"196\":3,\"197\":3,\"198\":4,\"199\":1,\"201\":1,\"204\":2,\"210\":1,\"218\":1,\"220\":2,\"227\":2,\"228\":4,\"230\":3,\"231\":1,\"237\":4,\"248\":3}}],[\"mapi\",{\"1\":{\"4\":3}}],[\"mention\",{\"1\":{\"105\":1}}],[\"mentions\",{\"1\":{\"75\":1,\"186\":1}}],[\"mentioned\",{\"1\":{\"58\":1,\"59\":1,\"97\":1,\"104\":2,\"105\":1,\"187\":1,\"192\":1,\"194\":1,\"210\":1,\"211\":1}}],[\"menu\",{\"1\":{\"5\":1,\"34\":1,\"41\":1,\"54\":1,\"65\":1,\"82\":1,\"135\":2}}],[\"menus\",{\"1\":{\"5\":1,\"9\":1}}],[\"me\",{\"1\":{\"35\":5,\"48\":1,\"75\":1,\"94\":1,\"160\":1,\"163\":1,\"227\":1}}],[\"medium\",{\"1\":{\"21\":1}}],[\"media\",{\"1\":{\"14\":1,\"21\":2,\"30\":1,\"31\":3,\"34\":1,\"36\":1}}],[\"mediation\",{\"1\":{\"4\":1}}],[\"medical\",{\"1\":{\"11\":1}}],[\"memsz\",{\"1\":{\"235\":2,\"237\":4}}],[\"memsize\",{\"1\":{\"237\":2}}],[\"memsiz\",{\"1\":{\"147\":2,\"234\":1}}],[\"memset\",{\"1\":{\"124\":2}}],[\"memcpy\",{\"1\":{\"124\":2}}],[\"memes\",{\"1\":{\"13\":1}}],[\"memoization\",{\"1\":{\"10\":1}}],[\"memorymapentry\",{\"1\":{\"162\":5,\"180\":10,\"197\":3}}],[\"memorymapdescriptorversion\",{\"1\":{\"159\":2,\"160\":1}}],[\"memorymapdescriptorsize\",{\"1\":{\"159\":4,\"160\":1,\"162\":1,\"180\":1,\"181\":1}}],[\"memorymapkey\",{\"1\":{\"159\":2,\"160\":3}}],[\"memorymap\",{\"1\":{\"159\":4,\"160\":1,\"162\":3,\"169\":5,\"180\":1,\"181\":1,\"182\":2,\"183\":4,\"197\":2}}],[\"memorymapsize\",{\"1\":{\"159\":7,\"160\":1,\"162\":1,\"180\":1,\"181\":1}}],[\"memorytype\",{\"1\":{\"156\":1,\"162\":4,\"165\":1,\"169\":2,\"197\":8}}],[\"memory\",{\"0\":{\"29\":1,\"38\":1,\"156\":1,\"159\":1,\"162\":1,\"165\":1,\"167\":1,\"172\":1,\"183\":1,\"184\":1,\"231\":1},\"1\":{\"4\":1,\"5\":1,\"9\":7,\"11\":25,\"16\":1,\"17\":3,\"22\":2,\"24\":1,\"25\":9,\"26\":3,\"29\":27,\"30\":4,\"31\":4,\"32\":2,\"33\":6,\"34\":3,\"35\":1,\"115\":1,\"116\":5,\"122\":1,\"124\":10,\"138\":1,\"142\":1,\"147\":3,\"148\":3,\"149\":1,\"150\":8,\"151\":6,\"154\":2,\"155\":2,\"156\":6,\"157\":4,\"159\":20,\"160\":9,\"161\":3,\"162\":25,\"163\":5,\"164\":3,\"165\":7,\"166\":7,\"167\":2,\"168\":4,\"169\":9,\"170\":15,\"171\":10,\"172\":11,\"174\":2,\"176\":5,\"177\":5,\"179\":2,\"180\":9,\"181\":10,\"182\":10,\"183\":9,\"184\":2,\"185\":7,\"186\":1,\"187\":1,\"188\":4,\"192\":3,\"194\":1,\"195\":3,\"197\":7,\"205\":3,\"207\":1,\"217\":2,\"218\":4,\"219\":1,\"220\":1,\"224\":1,\"225\":2,\"231\":5,\"233\":2,\"234\":2,\"235\":6,\"236\":1,\"237\":17,\"242\":1,\"248\":5,\"252\":3}}],[\"memberinplacerenamehandler\",{\"1\":{\"83\":1}}],[\"member\",{\"1\":{\"10\":1,\"103\":1,\"153\":1}}],[\"met\",{\"1\":{\"87\":1}}],[\"metro\",{\"1\":{\"21\":2}}],[\"metrics\",{\"0\":{\"20\":1},\"1\":{\"20\":1,\"36\":1}}],[\"metric\",{\"1\":{\"6\":1,\"19\":1,\"20\":1,\"21\":1}}],[\"methods\",{\"1\":{\"9\":1,\"10\":2,\"34\":2,\"51\":2,\"53\":1,\"58\":2,\"61\":2,\"63\":1,\"64\":2,\"82\":1,\"97\":1,\"106\":1,\"110\":1}}],[\"method\",{\"1\":{\"9\":4,\"10\":1,\"17\":2,\"21\":1,\"57\":1,\"58\":2,\"59\":2,\"63\":4,\"64\":1,\"66\":3,\"69\":2,\"72\":3,\"74\":5,\"75\":4,\"76\":2,\"77\":19,\"78\":13,\"79\":6,\"82\":12,\"83\":6,\"87\":1,\"89\":1,\"103\":1,\"106\":3,\"112\":1,\"162\":1}}],[\"meta\",{\"0\":{\"92\":1},\"1\":{\"12\":1,\"16\":1,\"35\":1,\"44\":2,\"48\":1,\"64\":1,\"92\":22,\"97\":6}}],[\"metal\",{\"1\":{\"33\":1}}],[\"metalinguistic\",{\"1\":{\"9\":1}}],[\"metalanguage\",{\"1\":{\"8\":1}}],[\"metadata\",{\"1\":{\"7\":1,\"11\":2,\"13\":1,\"15\":1,\"16\":3,\"22\":1,\"44\":1,\"85\":1,\"147\":1,\"148\":1,\"229\":1,\"233\":2,\"237\":1}}],[\"merely\",{\"1\":{\"160\":1}}],[\"merging\",{\"1\":{\"6\":1,\"17\":1,\"94\":1,\"168\":1}}],[\"mergers\",{\"1\":{\"21\":1}}],[\"merged\",{\"1\":{\"11\":1,\"95\":1,\"169\":1,\"171\":1}}],[\"merges\",{\"1\":{\"6\":2,\"94\":1,\"95\":1,\"169\":1}}],[\"merge\",{\"1\":{\"5\":1,\"6\":4,\"10\":1,\"11\":1,\"17\":2,\"147\":2,\"169\":1,\"171\":1,\"234\":1}}],[\"mercurial\",{\"1\":{\"6\":1}}],[\"measurements\",{\"1\":{\"20\":1,\"36\":1}}],[\"measurement\",{\"1\":{\"20\":1}}],[\"measure\",{\"1\":{\"20\":3,\"32\":2}}],[\"measured\",{\"1\":{\"19\":1}}],[\"measurable\",{\"1\":{\"6\":1}}],[\"means\",{\"1\":{\"66\":1,\"85\":1,\"89\":1,\"95\":1,\"98\":1,\"102\":1,\"116\":1,\"122\":1,\"123\":1,\"124\":1,\"144\":1,\"147\":1,\"148\":1,\"160\":1,\"164\":1,\"173\":1,\"176\":1,\"179\":1,\"185\":1,\"186\":1,\"200\":1,\"201\":1,\"223\":1,\"224\":1,\"230\":1,\"231\":1,\"238\":1,\"239\":1}}],[\"mean\",{\"1\":{\"19\":1,\"99\":1}}],[\"meaningful\",{\"1\":{\"97\":8}}],[\"meaning\",{\"1\":{\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"124\":1,\"185\":1}}],[\"meets\",{\"1\":{\"19\":1}}],[\"meet\",{\"1\":{\"5\":1,\"21\":2,\"35\":1,\"235\":1}}],[\"mechanisms\",{\"1\":{\"21\":1}}],[\"mechanism\",{\"1\":{\"4\":1,\"9\":1,\"11\":4,\"17\":1,\"22\":1,\"77\":2,\"208\":1}}],[\"mess\",{\"1\":{\"193\":1}}],[\"messenger\",{\"1\":{\"21\":3}}],[\"messaging\",{\"1\":{\"4\":4,\"17\":1,\"21\":6}}],[\"messages\",{\"1\":{\"4\":1,\"17\":4,\"21\":3,\"22\":1,\"24\":1,\"116\":1,\"135\":1,\"144\":6,\"160\":1}}],[\"message\",{\"1\":{\"4\":4,\"5\":1,\"9\":2,\"15\":1,\"17\":1,\"21\":5,\"22\":7,\"24\":1,\"35\":3,\"66\":4,\"96\":1,\"116\":1,\"137\":1,\"139\":2,\"140\":1,\"141\":3,\"145\":1,\"160\":1,\"183\":1,\"191\":2,\"192\":3,\"193\":3,\"214\":1,\"215\":2,\"227\":1,\"230\":1,\"231\":1,\"243\":2,\"252\":1}}],[\"meshes\",{\"1\":{\"22\":1}}],[\"mesh\",{\"1\":{\"4\":1,\"30\":2}}],[\"moo\",{\"1\":{\"35\":1}}],[\"mosi\",{\"1\":{\"30\":1}}],[\"most\",{\"1\":{\"9\":2,\"15\":1,\"34\":1,\"64\":1,\"86\":1,\"105\":1,\"122\":1,\"147\":1,\"167\":1,\"173\":1,\"185\":2,\"192\":1,\"193\":2,\"194\":1,\"205\":3,\"206\":1,\"220\":1}}],[\"mostly\",{\"1\":{\"3\":1,\"235\":1}}],[\"mouse\",{\"1\":{\"30\":1,\"33\":2,\"253\":1}}],[\"mounted\",{\"1\":{\"135\":1}}],[\"mounting\",{\"1\":{\"33\":1}}],[\"mount\",{\"1\":{\"11\":2,\"21\":2,\"135\":2}}],[\"motd\",{\"1\":{\"35\":2}}],[\"motherboards\",{\"1\":{\"30\":3}}],[\"motherboard\",{\"1\":{\"25\":1,\"30\":1,\"33\":1}}],[\"motorola\",{\"1\":{\"25\":1}}],[\"motif\",{\"1\":{\"11\":1}}],[\"motion\",{\"1\":{\"10\":2}}],[\"movw\",{\"1\":{\"200\":1}}],[\"movabsq\",{\"1\":{\"200\":3}}],[\"movq\",{\"1\":{\"200\":5}}],[\"mov\",{\"1\":{\"164\":2,\"177\":2,\"181\":3,\"188\":6,\"193\":1,\"200\":2,\"203\":1,\"210\":2,\"211\":3,\"212\":4,\"213\":2,\"215\":4,\"221\":2,\"223\":3,\"240\":3,\"241\":1,\"245\":5}}],[\"movs\",{\"1\":{\"25\":1}}],[\"moving\",{\"1\":{\"21\":1,\"22\":1,\"31\":2,\"56\":1}}],[\"moved\",{\"1\":{\"100\":1}}],[\"movement\",{\"1\":{\"31\":1}}],[\"moves\",{\"1\":{\"10\":2,\"77\":1}}],[\"move\",{\"1\":{\"10\":1,\"14\":1,\"75\":1,\"80\":1,\"89\":1,\"115\":1,\"121\":1,\"124\":1,\"140\":1,\"141\":1,\"143\":2,\"148\":2,\"166\":2,\"188\":1,\"221\":1,\"223\":1,\"236\":1,\"240\":1}}],[\"moe\",{\"1\":{\"18\":1}}],[\"month\",{\"1\":{\"153\":1}}],[\"monthly\",{\"1\":{\"19\":1}}],[\"monday\",{\"1\":{\"35\":1}}],[\"monopolize\",{\"1\":{\"238\":2}}],[\"monochrome\",{\"1\":{\"32\":1}}],[\"monolith\",{\"1\":{\"4\":1}}],[\"mongodb\",{\"1\":{\"15\":1,\"17\":1}}],[\"monitoring\",{\"1\":{\"20\":2,\"21\":1,\"31\":2,\"248\":2}}],[\"monitors\",{\"1\":{\"11\":1,\"22\":1,\"32\":6}}],[\"monitor\",{\"1\":{\"11\":3,\"17\":1,\"27\":1,\"32\":4,\"33\":1,\"188\":4,\"200\":1,\"210\":1}}],[\"mocks\",{\"1\":{\"9\":1}}],[\"moreover\",{\"1\":{\"45\":1}}],[\"more\",{\"1\":{\"7\":1,\"9\":2,\"10\":2,\"13\":1,\"14\":1,\"25\":3,\"32\":1,\"35\":1,\"36\":1,\"41\":1,\"47\":1,\"49\":1,\"53\":2,\"57\":1,\"61\":1,\"66\":1,\"72\":1,\"75\":1,\"77\":1,\"85\":2,\"87\":5,\"88\":1,\"89\":2,\"92\":3,\"95\":1,\"96\":3,\"102\":1,\"121\":1,\"124\":2,\"135\":1,\"147\":1,\"148\":1,\"151\":1,\"159\":1,\"160\":1,\"162\":1,\"170\":2,\"171\":1,\"172\":1,\"173\":1,\"177\":2,\"180\":1,\"183\":1,\"185\":1,\"188\":1,\"205\":1,\"207\":1,\"208\":1,\"213\":1,\"215\":1,\"216\":1,\"218\":1,\"228\":1,\"229\":1,\"232\":3,\"233\":1,\"237\":1,\"239\":1,\"243\":2,\"246\":2,\"248\":1}}],[\"mobile\",{\"1\":{\"6\":1,\"21\":2,\"22\":2,\"25\":1,\"29\":1}}],[\"mod\",{\"1\":{\"85\":1,\"86\":1,\"103\":1,\"104\":1,\"171\":1,\"237\":1}}],[\"modify\",{\"1\":{\"34\":1,\"59\":1,\"78\":1,\"83\":1,\"87\":1,\"88\":2,\"90\":1,\"110\":1,\"148\":1,\"176\":2,\"210\":2,\"211\":1,\"212\":1,\"215\":1,\"226\":1,\"230\":1,\"231\":1,\"234\":1,\"240\":1,\"242\":1,\"246\":1}}],[\"modifying\",{\"1\":{\"17\":1,\"89\":1,\"141\":1,\"177\":1}}],[\"modified\",{\"1\":{\"31\":1,\"80\":1,\"103\":1,\"213\":1,\"214\":1,\"240\":1}}],[\"modificationtime\",{\"1\":{\"153\":1}}],[\"modifications\",{\"1\":{\"11\":1,\"37\":1,\"206\":1}}],[\"modification\",{\"1\":{\"5\":1,\"89\":1,\"218\":1}}],[\"modulated\",{\"1\":{\"32\":1}}],[\"modulation\",{\"1\":{\"31\":1}}],[\"modular\",{\"1\":{\"10\":1,\"11\":1,\"25\":1,\"30\":1,\"33\":1}}],[\"module\",{\"1\":{\"11\":2,\"20\":1,\"22\":2,\"29\":8,\"30\":1,\"33\":1,\"34\":1,\"44\":1,\"72\":1,\"73\":1,\"88\":1,\"92\":1,\"97\":1,\"124\":3,\"131\":5,\"140\":3,\"143\":1,\"144\":1,\"147\":1,\"148\":1,\"162\":1,\"168\":1,\"175\":1,\"190\":1,\"196\":1,\"206\":1,\"209\":2,\"211\":1,\"217\":1,\"220\":1,\"221\":1,\"223\":1,\"230\":1,\"235\":2,\"236\":4,\"237\":1,\"239\":4,\"240\":3,\"241\":1,\"242\":1,\"245\":1,\"248\":2}}],[\"modules\",{\"1\":{\"5\":1,\"11\":1,\"21\":1,\"24\":1,\"29\":5,\"30\":1,\"44\":5,\"140\":1,\"143\":6,\"245\":1}}],[\"modem\",{\"1\":{\"21\":2,\"30\":1}}],[\"modems\",{\"1\":{\"21\":1,\"30\":1}}],[\"moderate\",{\"1\":{\"16\":1}}],[\"modern\",{\"1\":{\"1\":1,\"4\":2,\"5\":1,\"7\":1,\"8\":1,\"9\":2,\"11\":6,\"12\":1,\"13\":1,\"16\":1,\"17\":2,\"21\":9,\"28\":2,\"29\":3,\"30\":1,\"31\":2,\"33\":2,\"34\":4,\"36\":2,\"122\":1,\"135\":1,\"185\":2,\"201\":2,\"207\":1,\"247\":1}}],[\"modest\",{\"1\":{\"16\":1,\"35\":1}}],[\"modes\",{\"1\":{\"11\":1,\"21\":1,\"25\":1,\"28\":1,\"30\":1,\"31\":3,\"32\":1}}],[\"mode\",{\"0\":{\"194\":1,\"195\":1,\"200\":1,\"205\":1,\"206\":1},\"1\":{\"7\":1,\"10\":1,\"11\":5,\"21\":3,\"22\":1,\"24\":1,\"25\":3,\"28\":1,\"29\":2,\"30\":1,\"31\":1,\"32\":4,\"34\":4,\"41\":1,\"51\":1,\"138\":1,\"141\":1,\"146\":1,\"174\":1,\"177\":5,\"184\":3,\"185\":9,\"186\":15,\"187\":2,\"188\":3,\"190\":3,\"193\":2,\"194\":9,\"195\":4,\"196\":1,\"199\":1,\"200\":8,\"201\":6,\"204\":2,\"205\":5,\"206\":6,\"208\":1,\"209\":4,\"210\":5,\"211\":1,\"212\":3,\"213\":3,\"214\":2,\"215\":4,\"217\":3,\"220\":3,\"221\":1,\"222\":3,\"223\":3,\"227\":3,\"228\":1,\"230\":5,\"231\":2,\"240\":1,\"243\":5,\"246\":4,\"252\":2}}],[\"modeled\",{\"1\":{\"9\":1}}],[\"modeling\",{\"1\":{\"5\":1,\"8\":1,\"9\":1,\"17\":1,\"18\":1,\"36\":1}}],[\"models\",{\"1\":{\"4\":1,\"5\":1,\"10\":1,\"18\":5,\"25\":1}}],[\"model\",{\"1\":{\"4\":5,\"5\":9,\"7\":1,\"9\":3,\"10\":1,\"11\":4,\"15\":1,\"17\":5,\"18\":11,\"21\":4,\"25\":2,\"32\":1,\"33\":2,\"34\":1,\"116\":1,\"179\":4,\"185\":2,\"192\":1,\"209\":1}}],[\"moment\",{\"1\":{\"35\":1,\"45\":1,\"74\":1,\"123\":1,\"215\":1}}],[\"mom\",{\"1\":{\"4\":1}}],[\"myvar\",{\"1\":{\"74\":1}}],[\"myelement\",{\"1\":{\"74\":2,\"82\":4}}],[\"mylexer\",{\"1\":{\"69\":4}}],[\"myparser\",{\"1\":{\"68\":1,\"69\":1}}],[\"mystmtimpl\",{\"1\":{\"69\":1}}],[\"mystmt\",{\"1\":{\"68\":2,\"69\":1}}],[\"myself\",{\"1\":{\"40\":1,\"229\":1}}],[\"mysql\",{\"1\":{\"9\":1,\"17\":3}}],[\"my\",{\"1\":{\"0\":2,\"1\":1,\"35\":3,\"40\":4,\"42\":1,\"57\":1,\"74\":1,\"88\":1,\"115\":1,\"124\":3}}],[\"b8\",{\"1\":{\"200\":3}}],[\"b822\",{\"1\":{\"147\":1}}],[\"b82b\",{\"1\":{\"147\":1}}],[\"b254\",{\"1\":{\"147\":1}}],[\"bp\",{\"1\":{\"192\":1}}],[\"bpmn\",{\"1\":{\"36\":1}}],[\"bpf\",{\"1\":{\"21\":1}}],[\"bnc\",{\"1\":{\"30\":3}}],[\"bnf\",{\"0\":{\"68\":1,\"70\":1},\"1\":{\"8\":1,\"10\":4,\"41\":1,\"59\":1,\"66\":1,\"67\":1,\"68\":2,\"70\":1,\"71\":4,\"73\":1,\"74\":1,\"75\":1,\"80\":1,\"88\":1,\"89\":2,\"90\":1,\"100\":1}}],[\"bb\",{\"1\":{\"99\":1}}],[\"bbs\",{\"1\":{\"21\":1}}],[\"bbn\",{\"1\":{\"11\":1,\"36\":3}}],[\"b\",{\"1\":{\"21\":1,\"35\":1,\"98\":1,\"102\":4,\"106\":2,\"168\":2,\"185\":2,\"187\":1}}],[\"btw\",{\"1\":{\"35\":2}}],[\"btmon\",{\"1\":{\"30\":1}}],[\"bt\",{\"1\":{\"21\":1}}],[\"btrfs\",{\"1\":{\"11\":1}}],[\"bgp\",{\"1\":{\"21\":3}}],[\"bz2\",{\"1\":{\"16\":2}}],[\"bzip2\",{\"1\":{\"16\":2}}],[\"bcast\",{\"1\":{\"24\":1}}],[\"bcd\",{\"1\":{\"14\":2}}],[\"bcl\",{\"1\":{\"9\":1}}],[\"bézier\",{\"1\":{\"13\":1}}],[\"bmp\",{\"1\":{\"13\":3,\"16\":1}}],[\"b5000\",{\"1\":{\"11\":1}}],[\"blindly\",{\"1\":{\"214\":1}}],[\"blind\",{\"1\":{\"141\":1}}],[\"blip\",{\"1\":{\"18\":1}}],[\"blank\",{\"1\":{\"139\":1}}],[\"blacks\",{\"1\":{\"32\":1}}],[\"blackberry\",{\"1\":{\"11\":1}}],[\"blue\",{\"1\":{\"32\":2}}],[\"bluetooth\",{\"1\":{\"30\":2}}],[\"blobs\",{\"1\":{\"17\":1}}],[\"blob\",{\"1\":{\"17\":1}}],[\"blog\",{\"1\":{\"15\":1}}],[\"blogs\",{\"1\":{\"12\":1}}],[\"bloated\",{\"1\":{\"5\":1}}],[\"blocked\",{\"1\":{\"35\":1}}],[\"blocking\",{\"1\":{\"9\":2}}],[\"blockstmt\",{\"1\":{\"79\":1,\"89\":6,\"91\":1,\"92\":4,\"97\":2}}],[\"blocks\",{\"0\":{\"89\":1},\"1\":{\"8\":1,\"10\":2,\"13\":1,\"14\":1,\"22\":1,\"30\":1,\"33\":1,\"34\":1,\"85\":1,\"88\":1,\"89\":6,\"110\":1,\"238\":1,\"239\":1}}],[\"block\",{\"1\":{\"5\":1,\"8\":1,\"10\":1,\"11\":4,\"16\":1,\"21\":2,\"22\":3,\"24\":1,\"29\":1,\"31\":2,\"43\":3,\"76\":2,\"77\":1,\"79\":1,\"80\":7,\"84\":1,\"85\":3,\"86\":8,\"87\":1,\"89\":13,\"92\":3,\"96\":1,\"97\":2,\"102\":7,\"103\":1,\"105\":1,\"110\":2,\"141\":2,\"188\":1}}],[\"bson\",{\"1\":{\"15\":2}}],[\"bss\",{\"1\":{\"11\":2,\"147\":15,\"148\":6,\"179\":1,\"196\":1,\"226\":3,\"227\":1,\"228\":1,\"229\":2,\"234\":3,\"235\":1,\"237\":1}}],[\"bsd\",{\"1\":{\"11\":3,\"21\":2,\"37\":3}}],[\"bst\",{\"1\":{\"9\":1}}],[\"bsp\",{\"1\":{\"9\":2,\"26\":4,\"248\":2}}],[\"bfs\",{\"1\":{\"9\":2}}],[\"bochs\",{\"1\":{\"252\":1}}],[\"boxes\",{\"1\":{\"58\":1}}],[\"box\",{\"1\":{\"51\":1}}],[\"bolt\",{\"1\":{\"36\":1}}],[\"bodies\",{\"1\":{\"36\":1}}],[\"body\",{\"1\":{\"10\":1,\"36\":4}}],[\"bofh\",{\"1\":{\"35\":1}}],[\"bottom\",{\"1\":{\"194\":2,\"195\":1,\"199\":3,\"217\":2,\"220\":2,\"221\":1,\"222\":1,\"223\":1,\"240\":1}}],[\"botnet\",{\"1\":{\"22\":1}}],[\"both\",{\"1\":{\"1\":1,\"21\":1,\"22\":1,\"29\":1,\"40\":1,\"72\":1,\"82\":1,\"84\":1,\"86\":1,\"92\":2,\"98\":1,\"116\":1,\"140\":1,\"162\":2,\"168\":1,\"175\":1,\"177\":1,\"182\":1,\"185\":1,\"186\":2,\"197\":1,\"209\":3,\"228\":1,\"229\":1,\"250\":1}}],[\"boards\",{\"1\":{\"29\":2}}],[\"board\",{\"1\":{\"21\":1,\"33\":3}}],[\"border\",{\"1\":{\"21\":1}}],[\"bom\",{\"1\":{\"14\":2}}],[\"bool\",{\"1\":{\"168\":5}}],[\"boolean\",{\"1\":{\"66\":2,\"77\":1,\"78\":1,\"79\":2,\"83\":1,\"88\":1,\"102\":4,\"106\":1,\"110\":3}}],[\"books\",{\"1\":{\"12\":1,\"13\":1}}],[\"booked\",{\"1\":{\"11\":1}}],[\"bootalloc\",{\"1\":{\"181\":4}}],[\"booted\",{\"1\":{\"172\":1}}],[\"bootinfopages\",{\"1\":{\"181\":4}}],[\"bootinfovirtualbase\",{\"1\":{\"180\":2}}],[\"bootinfobase\",{\"1\":{\"162\":4,\"180\":5,\"181\":5,\"197\":2}}],[\"bootinfo\",{\"0\":{\"163\":1,\"180\":1},\"1\":{\"162\":14,\"163\":10,\"164\":1,\"165\":5,\"166\":9,\"169\":4,\"170\":2,\"171\":2,\"179\":1,\"180\":16,\"181\":4,\"182\":5,\"183\":6,\"188\":4,\"191\":2,\"192\":2,\"197\":13,\"198\":5,\"199\":2,\"200\":2,\"204\":2,\"209\":2,\"211\":2,\"219\":7,\"222\":4,\"223\":4,\"230\":4,\"231\":4,\"243\":6,\"249\":2}}],[\"booting\",{\"1\":{\"21\":1,\"122\":2,\"251\":1}}],[\"bootorder\",{\"1\":{\"135\":1}}],[\"bootx64\",{\"1\":{\"133\":7,\"135\":4,\"136\":4,\"138\":2,\"139\":3,\"140\":3,\"141\":1,\"143\":5,\"148\":4,\"151\":1,\"153\":1,\"154\":2,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":2,\"161\":1,\"162\":3,\"163\":1,\"164\":1,\"180\":3,\"181\":2,\"197\":4}}],[\"bootservices\",{\"1\":{\"138\":1,\"151\":2,\"152\":1,\"156\":2,\"159\":3,\"160\":3,\"162\":1,\"197\":2}}],[\"boots\",{\"1\":{\"31\":1,\"34\":1}}],[\"bootstrap\",{\"1\":{\"21\":1,\"26\":2,\"248\":1}}],[\"bootp\",{\"1\":{\"21\":3}}],[\"bootloaderpages\",{\"1\":{\"181\":5}}],[\"bootloaderbase\",{\"1\":{\"181\":3}}],[\"bootloader\",{\"0\":{\"132\":1,\"135\":1,\"137\":1,\"181\":1},\"1\":{\"21\":1,\"34\":2,\"123\":1,\"131\":1,\"132\":3,\"133\":1,\"135\":10,\"136\":3,\"137\":1,\"138\":1,\"141\":2,\"142\":1,\"143\":5,\"144\":1,\"145\":2,\"147\":4,\"148\":7,\"149\":1,\"150\":1,\"151\":6,\"161\":3,\"162\":4,\"163\":2,\"164\":3,\"166\":1,\"169\":1,\"175\":1,\"177\":3,\"178\":1,\"181\":8,\"182\":1,\"188\":1,\"195\":2,\"196\":1,\"197\":3,\"237\":1,\"251\":1,\"252\":1}}],[\"bootloaders\",{\"1\":{\"9\":1,\"11\":1}}],[\"boot\",{\"0\":{\"150\":1,\"151\":1,\"160\":1},\"1\":{\"11\":1,\"21\":11,\"24\":2,\"26\":1,\"29\":2,\"31\":3,\"33\":3,\"34\":11,\"122\":1,\"135\":13,\"136\":2,\"141\":1,\"143\":11,\"144\":1,\"148\":3,\"149\":1,\"150\":6,\"151\":3,\"152\":1,\"153\":2,\"154\":5,\"155\":1,\"156\":4,\"157\":2,\"158\":3,\"159\":3,\"160\":15,\"161\":3,\"162\":15,\"163\":1,\"164\":2,\"172\":1,\"177\":5,\"180\":7,\"181\":12,\"188\":8,\"196\":6,\"197\":12}}],[\"bound\",{\"1\":{\"192\":3}}],[\"bounded\",{\"1\":{\"11\":1}}],[\"bounds\",{\"1\":{\"9\":1,\"25\":1}}],[\"boundary\",{\"1\":{\"9\":1,\"175\":1,\"234\":3,\"248\":4}}],[\"boundaries\",{\"1\":{\"9\":1,\"11\":1,\"14\":1,\"184\":1}}],[\"bogdan\",{\"1\":{\"9\":1}}],[\"bias\",{\"1\":{\"35\":1}}],[\"bill\",{\"1\":{\"22\":1}}],[\"biological\",{\"1\":{\"18\":1}}],[\"bios\",{\"1\":{\"11\":1,\"30\":1,\"31\":3,\"33\":2,\"34\":5,\"122\":3,\"133\":1,\"134\":3,\"147\":2}}],[\"bi\",{\"1\":{\"17\":3}}],[\"bibliographic\",{\"1\":{\"15\":1}}],[\"bibliographies\",{\"1\":{\"12\":1}}],[\"bison\",{\"1\":{\"10\":1}}],[\"bitwise\",{\"1\":{\"26\":1}}],[\"bitcoin\",{\"1\":{\"25\":1}}],[\"bitcode\",{\"1\":{\"10\":1}}],[\"bitnet\",{\"1\":{\"21\":2}}],[\"bittorrent\",{\"1\":{\"21\":2}}],[\"bits64\",{\"1\":{\"235\":2}}],[\"bits32\",{\"1\":{\"235\":1}}],[\"bitsize\",{\"1\":{\"175\":49,\"187\":24,\"190\":6,\"202\":11,\"248\":6,\"249\":6}}],[\"bitstream\",{\"1\":{\"33\":1}}],[\"bits\",{\"1\":{\"14\":1,\"29\":1,\"30\":1,\"173\":4,\"174\":19,\"175\":12,\"177\":1,\"186\":2,\"202\":4,\"209\":1,\"248\":6,\"249\":2}}],[\"bitrates\",{\"1\":{\"13\":1}}],[\"bitmap\",{\"1\":{\"11\":1,\"13\":2,\"16\":1,\"167\":1}}],[\"bit\",{\"1\":{\"9\":5,\"11\":3,\"14\":3,\"15\":1,\"21\":4,\"22\":6,\"25\":21,\"28\":1,\"29\":2,\"30\":3,\"34\":4,\"77\":1,\"87\":1,\"88\":1,\"93\":1,\"96\":2,\"98\":4,\"99\":1,\"101\":1,\"104\":1,\"116\":1,\"123\":1,\"147\":2,\"151\":1,\"164\":1,\"173\":2,\"174\":4,\"175\":37,\"177\":1,\"184\":2,\"185\":15,\"186\":4,\"187\":2,\"188\":1,\"190\":3,\"193\":1,\"201\":1,\"202\":2,\"208\":1,\"209\":1,\"210\":2,\"226\":1,\"234\":1,\"235\":3,\"248\":1,\"249\":4}}],[\"bidi\",{\"1\":{\"7\":2}}],[\"bigquery\",{\"1\":{\"17\":2}}],[\"big\",{\"1\":{\"6\":1,\"9\":1,\"15\":1,\"35\":1,\"136\":1,\"161\":1,\"183\":1,\"200\":1,\"215\":1,\"222\":1,\"235\":2}}],[\"bin\",{\"1\":{\"143\":1,\"147\":3,\"148\":9,\"154\":1,\"196\":1,\"197\":2,\"226\":3,\"228\":3,\"229\":2,\"234\":3}}],[\"binnum\",{\"1\":{\"99\":3}}],[\"binaries\",{\"1\":{\"11\":2,\"22\":1}}],[\"binary\",{\"0\":{\"148\":1,\"229\":1,\"234\":1},\"1\":{\"4\":1,\"7\":1,\"9\":5,\"10\":3,\"11\":5,\"14\":5,\"15\":5,\"17\":2,\"24\":1,\"34\":1,\"98\":2,\"99\":1,\"102\":3,\"105\":1,\"106\":3,\"108\":1,\"109\":2,\"110\":1,\"121\":4,\"142\":1,\"147\":4,\"148\":3,\"149\":1,\"208\":1,\"224\":1,\"225\":5,\"226\":5,\"227\":1,\"228\":4,\"229\":4,\"230\":1,\"232\":3,\"234\":7,\"237\":4}}],[\"binds\",{\"1\":{\"106\":1,\"107\":1}}],[\"bindigit\",{\"1\":{\"99\":3}}],[\"bindings\",{\"1\":{\"9\":3,\"21\":2}}],[\"binding\",{\"1\":{\"5\":1,\"9\":1}}],[\"bind\",{\"1\":{\"5\":1,\"21\":2}}],[\"bdf0\",{\"1\":{\"228\":2}}],[\"bdfl\",{\"1\":{\"35\":2}}],[\"bde0\",{\"1\":{\"228\":2}}],[\"bdc0\",{\"1\":{\"228\":2}}],[\"bdb0\",{\"1\":{\"228\":2}}],[\"bda0\",{\"1\":{\"228\":2}}],[\"bd90\",{\"1\":{\"228\":2}}],[\"bd80\",{\"1\":{\"228\":2}}],[\"bd70\",{\"1\":{\"228\":2}}],[\"bd60\",{\"1\":{\"228\":2}}],[\"bd50\",{\"1\":{\"228\":2}}],[\"bd40\",{\"1\":{\"228\":6}}],[\"bduf\",{\"1\":{\"6\":1}}],[\"bdd0\",{\"1\":{\"228\":2}}],[\"bdd\",{\"1\":{\"6\":1}}],[\"bad\",{\"1\":{\"53\":3,\"62\":1,\"89\":1,\"96\":1,\"220\":1}}],[\"bayonet\",{\"1\":{\"30\":2}}],[\"baas\",{\"1\":{\"23\":1}}],[\"banner\",{\"1\":{\"35\":1}}],[\"bang\",{\"1\":{\"21\":1}}],[\"bandwidth\",{\"1\":{\"21\":4,\"25\":1,\"29\":5,\"30\":3,\"32\":2}}],[\"banking\",{\"1\":{\"17\":1}}],[\"bank\",{\"1\":{\"11\":1,\"17\":1,\"21\":1}}],[\"bachman\",{\"1\":{\"17\":1}}],[\"backing\",{\"1\":{\"220\":1}}],[\"backoff\",{\"1\":{\"35\":1}}],[\"backlit\",{\"1\":{\"32\":2}}],[\"backlight\",{\"1\":{\"32\":2}}],[\"backplane\",{\"1\":{\"30\":3}}],[\"backplanes\",{\"1\":{\"30\":2,\"31\":1}}],[\"backbone\",{\"1\":{\"21\":7}}],[\"backbones\",{\"1\":{\"21\":7}}],[\"background\",{\"1\":{\"17\":1,\"84\":1}}],[\"backup\",{\"1\":{\"16\":1,\"19\":1,\"21\":2,\"31\":2}}],[\"backups\",{\"1\":{\"16\":1,\"19\":1,\"31\":5}}],[\"backus\",{\"1\":{\"10\":2}}],[\"backend\",{\"1\":{\"124\":1}}],[\"backends\",{\"1\":{\"10\":1,\"24\":1}}],[\"backed\",{\"1\":{\"13\":1,\"21\":1,\"24\":1,\"29\":1,\"33\":2,\"82\":1,\"124\":1}}],[\"back\",{\"1\":{\"11\":2,\"16\":1,\"35\":1,\"45\":1,\"73\":1,\"86\":3,\"87\":5,\"89\":1,\"96\":2,\"102\":1,\"110\":1,\"124\":1,\"133\":1,\"147\":1,\"166\":1,\"185\":1,\"188\":2,\"193\":1,\"194\":1,\"200\":1,\"208\":1,\"210\":2,\"212\":1,\"238\":1,\"239\":2,\"242\":1,\"243\":2}}],[\"backward\",{\"1\":{\"10\":1,\"21\":1}}],[\"backtracking\",{\"1\":{\"9\":1}}],[\"battery\",{\"1\":{\"24\":1,\"29\":1,\"33\":3}}],[\"batch\",{\"1\":{\"11\":10,\"17\":2}}],[\"bat\",{\"1\":{\"11\":3}}],[\"bare\",{\"1\":{\"53\":1}}],[\"bar$\",{\"1\":{\"9\":1}}],[\"bar\",{\"1\":{\"9\":2,\"90\":2,\"94\":2}}],[\"bars\",{\"1\":{\"5\":1,\"9\":1}}],[\"balancer\",{\"1\":{\"24\":1}}],[\"balanced\",{\"1\":{\"9\":1}}],[\"balance\",{\"1\":{\"9\":1,\"16\":1}}],[\"balancing\",{\"1\":{\"9\":1}}],[\"bastard\",{\"1\":{\"35\":1}}],[\"basis\",{\"1\":{\"10\":1,\"23\":1,\"29\":1}}],[\"basics\",{\"1\":{\"72\":1,\"102\":1}}],[\"basically\",{\"1\":{\"17\":1,\"92\":1,\"116\":1,\"160\":1,\"164\":1,\"185\":1,\"228\":1}}],[\"basic\",{\"1\":{\"4\":1,\"8\":6,\"9\":2,\"10\":1,\"11\":3,\"15\":1,\"17\":1,\"21\":1,\"34\":1,\"40\":1,\"110\":1}}],[\"baseaddress\",{\"1\":{\"248\":2}}],[\"base32\",{\"1\":{\"202\":2}}],[\"base24\",{\"1\":{\"187\":2,\"202\":2}}],[\"base16\",{\"1\":{\"187\":2,\"202\":2}}],[\"base00\",{\"1\":{\"187\":2,\"202\":2}}],[\"base=0xffff800200000000\",{\"1\":{\"188\":1}}],[\"base=0xffff800100000000\",{\"1\":{\"188\":1}}],[\"base=0xffff800000100000\",{\"1\":{\"188\":1}}],[\"base=0x0636d000\",{\"1\":{\"188\":1}}],[\"base=0x06237000\",{\"1\":{\"188\":1}}],[\"base=\",{\"1\":{\"181\":5}}],[\"base64\",{\"1\":{\"14\":1}}],[\"base\",{\"1\":{\"5\":1,\"9\":3,\"17\":1,\"18\":1,\"34\":1,\"52\":1,\"58\":1,\"61\":2,\"74\":1,\"98\":1,\"132\":1,\"177\":1,\"179\":1,\"182\":3,\"185\":9,\"187\":5,\"190\":2,\"197\":1,\"201\":1,\"228\":4,\"230\":1,\"235\":1,\"237\":3,\"248\":16,\"249\":2}}],[\"based\",{\"1\":{\"4\":7,\"7\":1,\"8\":1,\"9\":5,\"10\":2,\"11\":11,\"12\":1,\"13\":1,\"15\":3,\"16\":3,\"17\":4,\"18\":1,\"20\":1,\"21\":11,\"22\":7,\"24\":2,\"25\":1,\"33\":1,\"35\":2,\"49\":1,\"77\":2,\"80\":1,\"81\":1,\"85\":3,\"89\":1,\"104\":1,\"106\":1,\"116\":1,\"123\":1,\"124\":1,\"133\":1,\"237\":1,\"239\":1,\"252\":2,\"253\":2}}],[\"br\",{\"1\":{\"192\":1}}],[\"braces\",{\"1\":{\"85\":1}}],[\"brand\",{\"1\":{\"246\":1}}],[\"branding\",{\"1\":{\"25\":1}}],[\"branch\",{\"1\":{\"9\":1,\"33\":1,\"35\":1,\"251\":1}}],[\"branches\",{\"1\":{\"6\":1,\"10\":1,\"22\":1}}],[\"branching\",{\"1\":{\"6\":2}}],[\"brew\",{\"1\":{\"42\":1,\"134\":2}}],[\"breadth\",{\"1\":{\"9\":1}}],[\"breakpoint\",{\"1\":{\"192\":3}}],[\"breakpoints\",{\"1\":{\"192\":1}}],[\"breakdown\",{\"1\":{\"43\":1}}],[\"breakthroughs\",{\"1\":{\"36\":1}}],[\"breaks\",{\"1\":{\"21\":1}}],[\"breaking\",{\"1\":{\"6\":1}}],[\"break\",{\"1\":{\"4\":1,\"47\":1,\"77\":1,\"141\":1,\"174\":1,\"218\":1}}],[\"brb\",{\"1\":{\"35\":3}}],[\"brief\",{\"1\":{\"35\":2}}],[\"briefly\",{\"1\":{\"29\":2,\"185\":1}}],[\"brings\",{\"1\":{\"26\":1}}],[\"bring\",{\"1\":{\"22\":2,\"110\":1}}],[\"bri\",{\"1\":{\"21\":1}}],[\"bridged\",{\"1\":{\"21\":1}}],[\"bridge\",{\"1\":{\"4\":1,\"30\":1,\"52\":1,\"59\":1,\"112\":1}}],[\"brought\",{\"1\":{\"26\":1}}],[\"broke\",{\"1\":{\"35\":1}}],[\"broken\",{\"1\":{\"22\":1}}],[\"brokers\",{\"1\":{\"21\":1}}],[\"broker\",{\"1\":{\"4\":2,\"21\":1}}],[\"browse\",{\"1\":{\"7\":1}}],[\"browser\",{\"1\":{\"7\":6,\"20\":1,\"21\":1,\"22\":2}}],[\"browsers\",{\"1\":{\"5\":1,\"13\":1,\"21\":2,\"36\":1}}],[\"broadcast\",{\"1\":{\"21\":3,\"32\":1,\"249\":1}}],[\"broadcasting\",{\"1\":{\"13\":1}}],[\"broadband\",{\"1\":{\"21\":3}}],[\"broader\",{\"1\":{\"15\":1,\"21\":1}}],[\"broad\",{\"1\":{\"6\":1}}],[\"beb0\",{\"1\":{\"228\":4}}],[\"be90\",{\"1\":{\"228\":2}}],[\"be80\",{\"1\":{\"228\":4}}],[\"be70\",{\"1\":{\"228\":4}}],[\"be60\",{\"1\":{\"228\":4}}],[\"be50\",{\"1\":{\"228\":2}}],[\"be40\",{\"1\":{\"228\":2}}],[\"be30\",{\"1\":{\"228\":2}}],[\"be20\",{\"1\":{\"228\":2}}],[\"be10\",{\"1\":{\"228\":2}}],[\"be00\",{\"1\":{\"228\":2}}],[\"been\",{\"1\":{\"40\":1,\"77\":1,\"82\":1,\"89\":1,\"96\":1,\"110\":1,\"122\":3,\"147\":1,\"172\":1,\"194\":1,\"199\":1,\"201\":1,\"207\":1,\"223\":1,\"228\":1,\"231\":1}}],[\"beep\",{\"1\":{\"34\":1}}],[\"beranek\",{\"1\":{\"36\":1}}],[\"berkeley\",{\"1\":{\"11\":2,\"21\":2,\"37\":1}}],[\"benefits\",{\"1\":{\"90\":1}}],[\"benevolent\",{\"1\":{\"35\":1}}],[\"benchmarks\",{\"1\":{\"36\":2}}],[\"benchmark\",{\"1\":{\"20\":1}}],[\"becoming\",{\"1\":{\"232\":1}}],[\"become\",{\"1\":{\"84\":1,\"238\":1,\"249\":1}}],[\"becomes\",{\"1\":{\"20\":1,\"85\":1}}],[\"because\",{\"1\":{\"21\":1,\"43\":1,\"75\":1,\"79\":1,\"87\":1,\"89\":2,\"123\":1,\"124\":4,\"147\":1,\"162\":1,\"170\":2,\"171\":1,\"181\":1,\"187\":3,\"188\":1,\"192\":1,\"193\":1,\"194\":1,\"208\":1,\"225\":1,\"237\":1,\"240\":1,\"241\":1}}],[\"became\",{\"1\":{\"11\":1,\"29\":1}}],[\"beginning\",{\"1\":{\"63\":2,\"70\":1,\"87\":1,\"88\":3,\"110\":1,\"147\":7,\"168\":1,\"171\":2,\"229\":2,\"230\":1}}],[\"beginner\",{\"1\":{\"8\":1}}],[\"begin\",{\"1\":{\"14\":1,\"68\":2,\"87\":18}}],[\"best\",{\"1\":{\"13\":1,\"36\":1,\"237\":1}}],[\"belt\",{\"1\":{\"110\":1}}],[\"below\",{\"1\":{\"97\":2,\"105\":1,\"146\":1,\"147\":1,\"185\":1}}],[\"belong\",{\"1\":{\"94\":1,\"110\":1,\"240\":1}}],[\"believe\",{\"1\":{\"89\":1}}],[\"believed\",{\"1\":{\"6\":1}}],[\"bell\",{\"1\":{\"11\":2}}],[\"behold\",{\"1\":{\"228\":1}}],[\"behalf\",{\"1\":{\"186\":1}}],[\"behaviour\",{\"1\":{\"9\":1,\"89\":1,\"95\":1,\"146\":1}}],[\"behaviours\",{\"1\":{\"9\":1}}],[\"behavior\",{\"1\":{\"5\":1,\"6\":3,\"9\":1,\"11\":1,\"18\":1,\"53\":1,\"80\":1,\"92\":1,\"94\":1,\"95\":1}}],[\"behind\",{\"1\":{\"11\":1,\"17\":1}}],[\"beyond\",{\"1\":{\"10\":1,\"11\":1,\"32\":1,\"217\":1}}],[\"being\",{\"1\":{\"9\":1,\"29\":1,\"63\":1,\"79\":1,\"96\":1,\"105\":1,\"141\":1,\"167\":2,\"171\":1,\"227\":1,\"231\":1,\"237\":1,\"249\":1}}],[\"beware\",{\"1\":{\"9\":1}}],[\"bea0\",{\"1\":{\"228\":4}}],[\"beautiful\",{\"1\":{\"193\":1}}],[\"beaglebone\",{\"1\":{\"33\":1}}],[\"bearer\",{\"1\":{\"21\":1,\"22\":1}}],[\"beacons\",{\"1\":{\"20\":1}}],[\"beams\",{\"1\":{\"32\":1}}],[\"beam\",{\"1\":{\"9\":2}}],[\"beans\",{\"1\":{\"4\":2}}],[\"better\",{\"1\":{\"13\":2,\"77\":1,\"89\":2,\"96\":1,\"135\":1,\"136\":1,\"141\":1,\"147\":1,\"223\":1}}],[\"beta\",{\"1\":{\"6\":1,\"35\":1}}],[\"between\",{\"1\":{\"4\":2,\"7\":1,\"9\":3,\"10\":1,\"11\":4,\"17\":1,\"21\":9,\"30\":9,\"33\":1,\"34\":1,\"35\":1,\"37\":1,\"46\":1,\"52\":1,\"57\":1,\"59\":1,\"72\":1,\"86\":1,\"87\":2,\"89\":2,\"94\":1,\"112\":1,\"140\":1,\"147\":1,\"151\":1,\"159\":1,\"160\":1,\"163\":1,\"169\":2,\"171\":5,\"174\":1,\"184\":2,\"185\":1,\"186\":1,\"190\":1,\"192\":1,\"201\":1,\"207\":1,\"208\":1,\"223\":1,\"231\":2,\"240\":2,\"244\":1}}],[\"be\",{\"1\":{\"5\":1,\"6\":1,\"10\":2,\"11\":2,\"17\":1,\"20\":1,\"21\":1,\"26\":1,\"29\":3,\"35\":5,\"40\":2,\"43\":1,\"45\":2,\"52\":1,\"53\":5,\"55\":1,\"58\":4,\"59\":1,\"60\":1,\"61\":5,\"63\":2,\"64\":1,\"68\":1,\"70\":1,\"71\":1,\"72\":3,\"74\":2,\"75\":2,\"76\":1,\"77\":2,\"78\":3,\"79\":1,\"82\":1,\"83\":1,\"85\":2,\"86\":1,\"87\":2,\"88\":4,\"89\":6,\"90\":1,\"91\":1,\"92\":3,\"94\":2,\"95\":4,\"96\":4,\"97\":1,\"98\":1,\"99\":1,\"101\":1,\"102\":4,\"103\":2,\"104\":3,\"105\":2,\"106\":2,\"107\":1,\"108\":1,\"110\":3,\"116\":10,\"117\":1,\"124\":6,\"129\":1,\"130\":1,\"131\":1,\"133\":1,\"134\":2,\"140\":2,\"144\":1,\"146\":2,\"147\":5,\"148\":1,\"160\":1,\"161\":1,\"162\":2,\"165\":1,\"166\":1,\"168\":2,\"169\":2,\"170\":1,\"171\":3,\"173\":1,\"175\":1,\"176\":1,\"178\":2,\"181\":3,\"185\":7,\"186\":7,\"187\":5,\"188\":1,\"191\":3,\"192\":2,\"194\":4,\"196\":2,\"197\":1,\"198\":2,\"199\":1,\"200\":1,\"202\":1,\"206\":2,\"209\":2,\"210\":1,\"212\":2,\"213\":1,\"214\":2,\"216\":1,\"217\":1,\"221\":1,\"222\":4,\"223\":2,\"224\":1,\"225\":5,\"226\":3,\"227\":1,\"228\":5,\"229\":3,\"231\":1,\"232\":1,\"233\":2,\"234\":2,\"235\":4,\"237\":6,\"238\":1,\"239\":3,\"240\":1,\"242\":1,\"243\":1,\"244\":2,\"245\":1,\"248\":2,\"249\":1}}],[\"before\",{\"1\":{\"4\":1,\"6\":6,\"8\":1,\"9\":2,\"10\":1,\"11\":1,\"17\":2,\"18\":1,\"21\":8,\"22\":1,\"25\":1,\"29\":2,\"30\":2,\"35\":1,\"56\":1,\"61\":1,\"71\":1,\"76\":1,\"79\":3,\"89\":3,\"92\":1,\"106\":1,\"107\":1,\"124\":3,\"133\":1,\"135\":1,\"139\":1,\"143\":1,\"144\":1,\"147\":2,\"150\":1,\"164\":1,\"166\":1,\"171\":1,\"176\":1,\"177\":2,\"178\":1,\"179\":1,\"181\":1,\"183\":2,\"193\":1,\"200\":1,\"208\":1,\"210\":1,\"211\":1,\"214\":1,\"215\":1,\"217\":1,\"223\":2,\"225\":1,\"226\":1,\"227\":1,\"230\":1,\"231\":1,\"237\":1,\"239\":1,\"242\":2,\"246\":2}}],[\"bypassing\",{\"1\":{\"22\":1}}],[\"byok\",{\"1\":{\"22\":1}}],[\"byod\",{\"1\":{\"22\":1}}],[\"bytes\",{\"1\":{\"14\":1,\"21\":1,\"31\":1,\"127\":1,\"139\":1,\"146\":1,\"147\":10,\"154\":1,\"179\":1,\"185\":1,\"188\":2,\"197\":1,\"227\":4,\"228\":1,\"229\":4,\"234\":5}}],[\"byte\",{\"1\":{\"9\":2,\"14\":2,\"20\":2,\"21\":1,\"29\":1,\"31\":1,\"124\":1,\"159\":1,\"190\":1,\"230\":3,\"237\":1,\"248\":1}}],[\"bytecode\",{\"1\":{\"9\":2,\"10\":1,\"11\":1,\"34\":1}}],[\"by\",{\"1\":{\"4\":10,\"5\":1,\"6\":2,\"7\":5,\"8\":1,\"9\":8,\"10\":13,\"11\":18,\"12\":1,\"13\":5,\"14\":3,\"15\":3,\"17\":8,\"18\":5,\"20\":1,\"21\":27,\"22\":3,\"23\":1,\"25\":9,\"26\":4,\"29\":3,\"30\":8,\"31\":6,\"32\":3,\"33\":8,\"34\":11,\"35\":6,\"40\":1,\"43\":1,\"45\":3,\"47\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":4,\"54\":1,\"56\":1,\"57\":1,\"58\":11,\"59\":4,\"60\":2,\"63\":7,\"64\":1,\"66\":3,\"68\":3,\"69\":3,\"70\":1,\"71\":1,\"72\":2,\"73\":1,\"74\":2,\"75\":1,\"77\":2,\"78\":1,\"82\":3,\"84\":1,\"85\":3,\"87\":2,\"88\":2,\"89\":6,\"90\":1,\"92\":3,\"94\":3,\"95\":2,\"97\":2,\"98\":1,\"99\":2,\"101\":1,\"104\":1,\"105\":2,\"106\":4,\"110\":1,\"116\":4,\"121\":1,\"122\":1,\"123\":6,\"124\":27,\"127\":3,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"135\":1,\"138\":2,\"139\":2,\"140\":1,\"141\":2,\"144\":2,\"145\":1,\"146\":2,\"147\":4,\"162\":3,\"164\":1,\"166\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"175\":2,\"179\":2,\"185\":5,\"186\":2,\"187\":1,\"188\":3,\"189\":1,\"191\":1,\"192\":4,\"193\":2,\"194\":3,\"196\":1,\"197\":4,\"201\":4,\"205\":2,\"206\":1,\"210\":1,\"212\":2,\"213\":2,\"214\":2,\"218\":2,\"223\":1,\"225\":3,\"228\":4,\"229\":7,\"230\":2,\"233\":1,\"235\":1,\"237\":3,\"238\":1,\"239\":3,\"242\":1,\"243\":1,\"248\":5,\"249\":3}}],[\"bunch\",{\"1\":{\"179\":1}}],[\"bundled\",{\"1\":{\"42\":1}}],[\"bundles\",{\"1\":{\"16\":1}}],[\"bundle\",{\"1\":{\"11\":1,\"13\":1,\"16\":1}}],[\"bundlers\",{\"1\":{\"7\":1}}],[\"bump\",{\"1\":{\"124\":1}}],[\"bug\",{\"1\":{\"35\":1}}],[\"bugs\",{\"1\":{\"6\":1}}],[\"burp\",{\"1\":{\"22\":1}}],[\"burrows\",{\"1\":{\"16\":1}}],[\"burroughs\",{\"1\":{\"11\":2}}],[\"buddy\",{\"1\":{\"21\":1}}],[\"budgets\",{\"1\":{\"19\":1}}],[\"bulk\",{\"1\":{\"21\":1,\"31\":1}}],[\"bulletin\",{\"1\":{\"21\":1}}],[\"bull\",{\"1\":{\"11\":2}}],[\"buffer\",{\"1\":{\"22\":1,\"26\":1,\"51\":2,\"124\":1,\"139\":1,\"157\":1,\"159\":3}}],[\"buffered\",{\"1\":{\"21\":1}}],[\"buffersize\",{\"1\":{\"157\":1}}],[\"buffers\",{\"1\":{\"11\":1,\"17\":2,\"33\":1}}],[\"buf\",{\"1\":{\"11\":1,\"131\":1,\"140\":2,\"141\":2}}],[\"builder\",{\"1\":{\"63\":13,\"66\":20,\"88\":1,\"106\":10,\"110\":12}}],[\"buildsearchableoptions\",{\"1\":{\"43\":1}}],[\"builds\",{\"1\":{\"6\":1,\"11\":1,\"33\":1,\"141\":1}}],[\"build\",{\"0\":{\"136\":1},\"1\":{\"4\":1,\"5\":1,\"6\":3,\"7\":2,\"8\":1,\"9\":4,\"10\":4,\"11\":2,\"12\":1,\"16\":1,\"17\":1,\"21\":1,\"25\":4,\"31\":1,\"35\":3,\"41\":2,\"43\":3,\"50\":1,\"54\":2,\"55\":2,\"71\":3,\"89\":1,\"121\":5,\"122\":1,\"123\":15,\"124\":11,\"131\":3,\"132\":1,\"133\":3,\"134\":1,\"135\":2,\"136\":5,\"142\":1,\"143\":8,\"147\":17,\"148\":10,\"178\":1,\"179\":6,\"194\":1,\"195\":2,\"196\":12,\"197\":1,\"200\":1,\"210\":1,\"226\":3,\"227\":1,\"228\":12,\"229\":2,\"234\":4,\"237\":1}}],[\"building\",{\"0\":{\"123\":1,\"148\":1,\"234\":1},\"1\":{\"1\":1,\"4\":3,\"6\":1,\"7\":1,\"9\":3,\"10\":1,\"21\":1,\"41\":1,\"43\":1,\"147\":1,\"148\":1,\"208\":1,\"250\":1}}],[\"built\",{\"1\":{\"4\":1,\"5\":1,\"8\":1,\"9\":1,\"11\":2,\"12\":1,\"21\":2,\"36\":1,\"41\":1,\"52\":1,\"53\":2,\"57\":1,\"59\":1,\"60\":1,\"64\":1,\"66\":1,\"70\":1,\"105\":1,\"140\":1,\"149\":1}}],[\"busy\",{\"1\":{\"188\":1,\"200\":1}}],[\"buses\",{\"0\":{\"30\":1},\"1\":{\"29\":1}}],[\"business\",{\"1\":{\"5\":1,\"6\":1,\"8\":5,\"11\":3,\"17\":2,\"20\":1,\"21\":1}}],[\"bus\",{\"1\":{\"4\":2,\"21\":1,\"25\":2,\"29\":1,\"30\":31,\"31\":1,\"190\":1}}],[\"buttons\",{\"1\":{\"9\":1}}],[\"button\",{\"1\":{\"7\":2,\"34\":2}}],[\"but\",{\"1\":{\"3\":1,\"11\":4,\"13\":1,\"16\":1,\"20\":1,\"22\":1,\"25\":1,\"29\":1,\"30\":1,\"35\":1,\"49\":1,\"51\":1,\"58\":1,\"63\":1,\"67\":1,\"68\":1,\"69\":1,\"71\":1,\"72\":1,\"74\":3,\"75\":1,\"76\":1,\"77\":1,\"82\":1,\"83\":1,\"85\":1,\"86\":1,\"87\":3,\"88\":3,\"89\":5,\"91\":1,\"92\":2,\"95\":2,\"96\":2,\"97\":1,\"98\":1,\"99\":1,\"102\":1,\"105\":1,\"106\":2,\"107\":1,\"110\":2,\"115\":1,\"116\":1,\"122\":1,\"123\":2,\"124\":3,\"133\":1,\"134\":2,\"135\":2,\"136\":1,\"140\":1,\"141\":5,\"144\":2,\"146\":1,\"147\":5,\"148\":4,\"150\":1,\"158\":1,\"159\":1,\"160\":2,\"161\":1,\"162\":1,\"164\":3,\"171\":2,\"172\":3,\"176\":2,\"177\":1,\"178\":1,\"181\":1,\"183\":2,\"185\":1,\"187\":1,\"188\":2,\"192\":1,\"193\":1,\"194\":1,\"200\":2,\"201\":1,\"208\":1,\"210\":1,\"214\":2,\"218\":1,\"220\":1,\"223\":1,\"225\":2,\"226\":2,\"227\":4,\"228\":3,\"229\":4,\"231\":2,\"232\":1,\"237\":1,\"239\":1,\"240\":1,\"242\":1,\"248\":1}}],[\"f4\",{\"1\":{\"210\":1}}],[\"fmask\",{\"1\":{\"209\":3}}],[\"f9\",{\"1\":{\"200\":1,\"210\":1}}],[\"f3\",{\"1\":{\"200\":1,\"210\":1}}],[\"f32\",{\"1\":{\"98\":2}}],[\"f0\",{\"1\":{\"200\":1}}],[\"fd\",{\"1\":{\"134\":6,\"135\":2,\"136\":2,\"143\":2,\"148\":2}}],[\"fdd\",{\"1\":{\"31\":1}}],[\"fddi\",{\"1\":{\"21\":2}}],[\"fwait\",{\"1\":{\"192\":2}}],[\"fwrite\",{\"1\":{\"124\":4,\"127\":3,\"131\":1,\"140\":3,\"141\":2}}],[\"fwiw\",{\"1\":{\"35\":2}}],[\"fgnuc\",{\"1\":{\"124\":1}}],[\"f64\",{\"1\":{\"98\":1}}],[\"f6\",{\"1\":{\"82\":1,\"84\":1}}],[\"fyi\",{\"1\":{\"35\":2}}],[\"ftw=00\",{\"1\":{\"188\":1}}],[\"ftw\",{\"1\":{\"35\":2}}],[\"ftps\",{\"1\":{\"21\":2}}],[\"ftp\",{\"1\":{\"21\":4}}],[\"fqdn\",{\"1\":{\"24\":1}}],[\"fcw=037f\",{\"1\":{\"188\":1}}],[\"fcoe\",{\"1\":{\"21\":1}}],[\"fcp\",{\"1\":{\"21\":1}}],[\"fc\",{\"1\":{\"21\":2,\"30\":1}}],[\"fcs\",{\"1\":{\"21\":1}}],[\"fk\",{\"1\":{\"17\":1}}],[\"ffffffff\",{\"1\":{\"210\":4,\"212\":2}}],[\"ffff8000003263f0\",{\"1\":{\"210\":1}}],[\"ffff800000326500\",{\"1\":{\"210\":1}}],[\"ffff8000003264c0\",{\"1\":{\"210\":1}}],[\"ffff800000326490\",{\"1\":{\"210\":1}}],[\"ffff8000003264d0\",{\"1\":{\"210\":1}}],[\"ffff800000326430\",{\"1\":{\"210\":1}}],[\"ffff800000120490\",{\"1\":{\"210\":4}}],[\"ffff8000001028b0\",{\"1\":{\"179\":2}}],[\"ffff800000102810\",{\"1\":{\"179\":4}}],[\"ffff8000001001f0\",{\"1\":{\"179\":4}}],[\"ffff800000100000\",{\"1\":{\"179\":7}}],[\"ffff8000002262b0\",{\"1\":{\"200\":1}}],[\"ffff800000226290\",{\"1\":{\"200\":1}}],[\"ffff80000021ec00\",{\"1\":{\"188\":1}}],[\"ffff80000021ebe0\",{\"1\":{\"188\":1}}],[\"ffunction\",{\"1\":{\"147\":2,\"196\":1}}],[\"fflush\",{\"1\":{\"124\":4,\"128\":3,\"131\":1}}],[\"ffreestanding\",{\"1\":{\"123\":2,\"124\":5,\"143\":1,\"147\":1,\"196\":1}}],[\"ffs\",{\"1\":{\"35\":2}}],[\"ff\",{\"1\":{\"14\":1,\"99\":1,\"200\":4,\"210\":3}}],[\"ffi\",{\"1\":{\"9\":1,\"11\":1}}],[\"fsw=0000\",{\"1\":{\"188\":1}}],[\"fs0\",{\"1\":{\"135\":2}}],[\"fsf\",{\"1\":{\"36\":2}}],[\"fsbl\",{\"1\":{\"34\":1}}],[\"fsb\",{\"1\":{\"30\":4}}],[\"fsq\",{\"1\":{\"11\":1}}],[\"fs\",{\"1\":{\"11\":2,\"186\":1,\"187\":1,\"188\":2,\"200\":1,\"210\":2}}],[\"fsms\",{\"1\":{\"9\":1}}],[\"fsm\",{\"1\":{\"9\":1}}],[\"fxc\",{\"1\":{\"10\":1}}],[\"fpic\",{\"1\":{\"225\":1,\"226\":1}}],[\"fpr7=0000000000000000\",{\"1\":{\"188\":1}}],[\"fpr6=0000000000000000\",{\"1\":{\"188\":1}}],[\"fpr5=0000000000000000\",{\"1\":{\"188\":1}}],[\"fpr4=0000000000000000\",{\"1\":{\"188\":1}}],[\"fpr3=0000000000000000\",{\"1\":{\"188\":1}}],[\"fpr2=0000000000000000\",{\"1\":{\"188\":1}}],[\"fpr1=0000000000000000\",{\"1\":{\"188\":1}}],[\"fpr0=0000000000000000\",{\"1\":{\"188\":1}}],[\"fpga\",{\"1\":{\"33\":1}}],[\"fpgas\",{\"1\":{\"30\":1,\"33\":1}}],[\"fpm\",{\"1\":{\"29\":4}}],[\"fpu\",{\"1\":{\"26\":1,\"192\":2}}],[\"fps\",{\"1\":{\"9\":1,\"20\":3}}],[\"fp\",{\"1\":{\"8\":1,\"9\":2}}],[\"flg\",{\"1\":{\"147\":4,\"226\":1,\"228\":2,\"229\":1,\"234\":2}}],[\"flexibility\",{\"1\":{\"95\":1,\"247\":1}}],[\"flexible\",{\"1\":{\"10\":1,\"34\":1,\"69\":1,\"94\":1,\"110\":1,\"153\":1,\"185\":1,\"232\":1}}],[\"flexadapter\",{\"1\":{\"52\":1}}],[\"flexlexer\",{\"1\":{\"52\":2,\"53\":3,\"54\":2}}],[\"flex\",{\"1\":{\"52\":1,\"53\":2,\"54\":2,\"55\":1,\"62\":1,\"69\":2,\"71\":1,\"87\":2,\"88\":1,\"89\":2,\"95\":1,\"99\":1,\"104\":1}}],[\"flesh\",{\"1\":{\"49\":1}}],[\"flip\",{\"1\":{\"29\":1}}],[\"flights\",{\"1\":{\"11\":1}}],[\"flushex\",{\"1\":{\"153\":1}}],[\"flushes\",{\"1\":{\"17\":1,\"128\":1}}],[\"flush\",{\"1\":{\"26\":1,\"153\":1}}],[\"flying\",{\"1\":{\"141\":1}}],[\"fly\",{\"1\":{\"24\":1}}],[\"flto\",{\"1\":{\"10\":1}}],[\"flavor\",{\"1\":{\"123\":1}}],[\"flavored\",{\"1\":{\"12\":1}}],[\"flash\",{\"1\":{\"29\":2,\"30\":2,\"31\":2}}],[\"flask\",{\"1\":{\"7\":1}}],[\"flagged\",{\"1\":{\"35\":1}}],[\"flags\",{\"1\":{\"35\":1,\"124\":6,\"147\":4,\"194\":1,\"209\":5,\"229\":1,\"234\":3,\"235\":4,\"237\":8}}],[\"flagship\",{\"1\":{\"25\":1}}],[\"flag\",{\"1\":{\"21\":2,\"88\":1,\"123\":4,\"124\":11,\"130\":1,\"135\":1,\"139\":4,\"147\":2,\"179\":1,\"188\":2,\"190\":1,\"194\":1,\"209\":2,\"210\":1,\"225\":2,\"228\":1,\"249\":3}}],[\"flat\",{\"1\":{\"9\":1,\"11\":1,\"32\":1,\"142\":1,\"147\":1,\"185\":2,\"232\":2,\"234\":1}}],[\"floss\",{\"1\":{\"37\":2}}],[\"flood\",{\"1\":{\"22\":1}}],[\"floods\",{\"1\":{\"22\":1}}],[\"flourished\",{\"1\":{\"21\":1}}],[\"floppies\",{\"1\":{\"31\":2}}],[\"floppy\",{\"1\":{\"11\":1,\"31\":1}}],[\"flops\",{\"1\":{\"20\":1,\"29\":1}}],[\"flows\",{\"1\":{\"6\":2,\"21\":2}}],[\"flow\",{\"1\":{\"5\":2,\"6\":1,\"10\":5,\"21\":2,\"22\":2,\"34\":1}}],[\"floatlit\",{\"1\":{\"99\":3,\"101\":2}}],[\"floatsuffix\",{\"1\":{\"99\":3}}],[\"floatnum\",{\"1\":{\"99\":3}}],[\"floating\",{\"1\":{\"9\":1,\"20\":1,\"26\":2,\"36\":1,\"98\":1,\"99\":4,\"192\":8}}],[\"float\",{\"1\":{\"5\":1,\"98\":5,\"99\":3,\"100\":2,\"101\":3,\"109\":2}}],[\"fan\",{\"1\":{\"136\":1}}],[\"fantasy\",{\"1\":{\"35\":1}}],[\"fairly\",{\"1\":{\"99\":1,\"161\":1}}],[\"fails\",{\"1\":{\"19\":1,\"66\":2,\"170\":1}}],[\"failover\",{\"1\":{\"19\":1,\"21\":1}}],[\"failure\",{\"1\":{\"19\":3,\"31\":1,\"34\":1,\"177\":1,\"218\":1}}],[\"failed\",{\"1\":{\"17\":1,\"35\":1,\"82\":2,\"151\":1,\"160\":2,\"170\":2,\"171\":1,\"220\":1,\"231\":1}}],[\"fail\",{\"1\":{\"9\":1,\"160\":1}}],[\"failing\",{\"1\":{\"6\":1}}],[\"fa\",{\"1\":{\"99\":1,\"210\":1}}],[\"fall\",{\"1\":{\"151\":1}}],[\"fallback\",{\"1\":{\"13\":1,\"22\":1,\"33\":1,\"53\":2,\"62\":1}}],[\"false\",{\"1\":{\"43\":1,\"66\":3,\"77\":3,\"78\":4,\"79\":1,\"88\":1}}],[\"fadt\",{\"1\":{\"34\":1}}],[\"fabric\",{\"1\":{\"30\":2}}],[\"fabrics\",{\"1\":{\"21\":1}}],[\"faas\",{\"1\":{\"24\":1}}],[\"favourite\",{\"1\":{\"40\":1}}],[\"favor\",{\"1\":{\"17\":1,\"21\":1,\"29\":1}}],[\"favicon\",{\"1\":{\"13\":1}}],[\"favicons\",{\"1\":{\"13\":1}}],[\"fax\",{\"1\":{\"16\":1,\"33\":1}}],[\"fatal\",{\"1\":{\"124\":2}}],[\"fat\",{\"1\":{\"11\":2,\"16\":1,\"135\":4}}],[\"fat32\",{\"1\":{\"11\":1,\"31\":1}}],[\"faced\",{\"1\":{\"125\":1,\"160\":1,\"206\":1}}],[\"faculty\",{\"1\":{\"11\":1}}],[\"facility\",{\"1\":{\"10\":1,\"11\":2,\"22\":1}}],[\"fact\",{\"1\":{\"35\":1,\"88\":1,\"141\":1,\"147\":1}}],[\"facto\",{\"1\":{\"32\":1}}],[\"factored\",{\"1\":{\"90\":1,\"92\":1}}],[\"factory\",{\"1\":{\"69\":1}}],[\"factors\",{\"1\":{\"22\":1,\"30\":1}}],[\"factor\",{\"1\":{\"22\":2,\"25\":1,\"29\":5,\"33\":1,\"92\":3}}],[\"factorial\",{\"1\":{\"8\":1}}],[\"facts\",{\"1\":{\"10\":1}}],[\"famed\",{\"1\":{\"36\":1}}],[\"famous\",{\"1\":{\"15\":1}}],[\"fam\",{\"1\":{\"10\":1}}],[\"family\",{\"1\":{\"8\":3,\"10\":2,\"11\":6,\"15\":1,\"17\":1,\"21\":1,\"22\":1,\"25\":1,\"30\":1,\"36\":1,\"37\":1,\"53\":1}}],[\"fashion\",{\"1\":{\"243\":1}}],[\"fasm\",{\"1\":{\"9\":1}}],[\"fastest\",{\"1\":{\"26\":1}}],[\"faster\",{\"1\":{\"11\":2,\"13\":1,\"16\":1,\"20\":1,\"21\":2,\"24\":1,\"208\":1}}],[\"fastapi\",{\"1\":{\"7\":1}}],[\"fast\",{\"1\":{\"3\":1,\"6\":1,\"7\":1,\"11\":1,\"15\":1,\"16\":2,\"21\":4,\"29\":2,\"31\":1}}],[\"far\",{\"1\":{\"9\":1,\"35\":2,\"77\":1,\"92\":1,\"100\":1,\"116\":1,\"147\":1,\"188\":7,\"195\":1,\"203\":1,\"210\":1,\"223\":1,\"231\":1,\"232\":1,\"236\":1,\"244\":1,\"246\":1}}],[\"faulting\",{\"1\":{\"193\":3,\"205\":2}}],[\"faults\",{\"1\":{\"21\":1,\"193\":1}}],[\"fault\",{\"0\":{\"193\":1},\"1\":{\"9\":1,\"17\":1,\"22\":1,\"26\":1,\"181\":1,\"189\":1,\"190\":3,\"192\":30,\"193\":16,\"194\":1,\"201\":1,\"205\":8,\"206\":3,\"214\":1}}],[\"few\",{\"1\":{\"46\":1,\"58\":1,\"64\":1,\"88\":1,\"89\":1,\"105\":1,\"110\":1,\"115\":1,\"151\":1,\"161\":1,\"168\":1,\"170\":1,\"177\":1,\"179\":1,\"180\":1,\"185\":1,\"198\":1,\"204\":1,\"209\":1,\"217\":1,\"222\":1,\"243\":1,\"246\":1}}],[\"fewer\",{\"1\":{\"30\":1}}],[\"fe\",{\"1\":{\"14\":1}}],[\"fences\",{\"1\":{\"12\":1}}],[\"federal\",{\"1\":{\"36\":1}}],[\"federated\",{\"1\":{\"21\":2}}],[\"fed\",{\"1\":{\"11\":1}}],[\"feedforward\",{\"1\":{\"18\":1}}],[\"feeds\",{\"1\":{\"11\":1,\"21\":1}}],[\"feed\",{\"1\":{\"10\":1,\"14\":2,\"15\":4,\"21\":1}}],[\"feedback\",{\"1\":{\"6\":4,\"18\":1}}],[\"fetch\",{\"1\":{\"7\":2,\"21\":3}}],[\"feasible\",{\"1\":{\"176\":1}}],[\"feasibility\",{\"1\":{\"6\":1}}],[\"fear\",{\"1\":{\"35\":2}}],[\"featuring\",{\"1\":{\"8\":1,\"11\":6,\"25\":1}}],[\"featured\",{\"1\":{\"247\":1}}],[\"feature\",{\"1\":{\"6\":3,\"9\":2,\"10\":2,\"21\":1,\"22\":1,\"31\":1,\"35\":4,\"72\":1,\"75\":2,\"80\":1,\"83\":1,\"106\":1,\"144\":1,\"201\":2,\"209\":2}}],[\"features\",{\"0\":{\"252\":1},\"1\":{\"5\":1,\"6\":2,\"7\":1,\"8\":1,\"9\":2,\"11\":5,\"13\":1,\"18\":1,\"21\":1,\"31\":1,\"33\":1,\"40\":1,\"41\":1,\"49\":1,\"59\":1,\"75\":1,\"80\":1,\"83\":1,\"89\":1,\"116\":1,\"122\":1,\"185\":1,\"194\":1,\"252\":1}}],[\"f\",{\"1\":{\"5\":1,\"8\":1,\"10\":4,\"25\":1,\"35\":4,\"98\":1,\"99\":1,\"102\":2,\"235\":1}}],[\"further\",{\"1\":{\"124\":1}}],[\"future\",{\"1\":{\"89\":1,\"92\":1,\"103\":1,\"164\":1,\"218\":1}}],[\"fud\",{\"1\":{\"35\":2}}],[\"fuse\",{\"1\":{\"11\":3,\"29\":1,\"123\":4,\"124\":5,\"143\":1}}],[\"fusion\",{\"0\":{\"116\":1,\"250\":1},\"1\":{\"1\":1,\"116\":2,\"121\":2,\"147\":6,\"148\":2,\"151\":1,\"154\":1,\"163\":1,\"165\":2,\"166\":1,\"169\":2,\"170\":4,\"171\":3,\"179\":5,\"182\":2,\"183\":2,\"188\":2,\"191\":2,\"192\":4,\"193\":8,\"195\":1,\"196\":9,\"197\":3,\"198\":1,\"200\":1,\"205\":10,\"206\":3,\"209\":1,\"210\":1,\"211\":1,\"224\":1,\"250\":2}}],[\"fun\",{\"1\":{\"47\":4,\"61\":2,\"63\":3,\"64\":8,\"66\":4,\"74\":2,\"75\":3,\"77\":1,\"78\":2,\"79\":4,\"82\":5,\"83\":3,\"95\":4,\"106\":1,\"110\":3,\"243\":1}}],[\"funded\",{\"1\":{\"21\":2,\"36\":1}}],[\"fundamentals\",{\"1\":{\"9\":1}}],[\"functions\",{\"0\":{\"126\":1},\"1\":{\"9\":4,\"10\":4,\"12\":1,\"21\":1,\"22\":2,\"24\":1,\"33\":1,\"34\":1,\"83\":1,\"85\":1,\"124\":7,\"125\":1,\"131\":2,\"146\":1,\"151\":1,\"225\":1}}],[\"functionality\",{\"1\":{\"7\":1,\"44\":1,\"61\":1,\"71\":1,\"75\":1,\"121\":1}}],[\"functional\",{\"1\":{\"5\":2,\"8\":1,\"9\":1,\"30\":1}}],[\"function\",{\"1\":{\"5\":3,\"9\":3,\"10\":2,\"11\":2,\"18\":1,\"22\":2,\"24\":1,\"30\":1,\"53\":3,\"57\":2,\"79\":5,\"83\":1,\"104\":1,\"105\":1,\"123\":2,\"124\":6,\"127\":1,\"128\":1,\"130\":1,\"138\":2,\"139\":3,\"140\":1,\"145\":2,\"146\":5,\"147\":3,\"150\":6,\"151\":4,\"153\":1,\"154\":3,\"156\":2,\"157\":3,\"158\":1,\"159\":2,\"160\":2,\"164\":2,\"177\":1,\"179\":1,\"189\":1,\"190\":2,\"191\":2,\"192\":1,\"196\":3,\"200\":3,\"225\":1}}],[\"fully\",{\"1\":{\"10\":1,\"16\":1,\"17\":1,\"21\":1,\"24\":1,\"68\":1,\"70\":2}}],[\"full\",{\"1\":{\"6\":3,\"7\":1,\"9\":1,\"11\":1,\"14\":1,\"17\":1,\"21\":2,\"24\":1,\"30\":1,\"36\":1,\"53\":1,\"59\":1,\"92\":1,\"97\":1,\"166\":1,\"184\":1}}],[\"fourth\",{\"1\":{\"208\":1}}],[\"four\",{\"1\":{\"85\":1,\"164\":1,\"185\":2}}],[\"found\",{\"1\":{\"72\":1,\"77\":4,\"78\":6,\"79\":1,\"124\":2,\"170\":1,\"237\":2,\"254\":1}}],[\"foundational\",{\"1\":{\"11\":1,\"21\":1,\"36\":2}}],[\"foundation\",{\"1\":{\"4\":2,\"9\":2,\"10\":1,\"11\":2,\"12\":2,\"16\":2,\"21\":2,\"36\":6}}],[\"foss\",{\"1\":{\"37\":2}}],[\"fomo\",{\"1\":{\"35\":2}}],[\"folder\",{\"1\":{\"21\":1,\"47\":1,\"162\":1}}],[\"follows\",{\"1\":{\"71\":2,\"77\":1,\"98\":1,\"110\":1,\"187\":1}}],[\"followed\",{\"1\":{\"53\":1,\"63\":2,\"68\":2,\"70\":1,\"89\":2,\"99\":1,\"104\":1,\"106\":1,\"110\":1,\"229\":4}}],[\"follow\",{\"1\":{\"21\":1,\"35\":1,\"94\":1,\"123\":1,\"147\":1}}],[\"following\",{\"1\":{\"6\":1,\"41\":2,\"43\":1,\"46\":1,\"52\":1,\"53\":1,\"54\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"65\":1,\"68\":1,\"69\":1,\"71\":1,\"73\":1,\"76\":1,\"77\":1,\"85\":1,\"87\":1,\"96\":1,\"97\":1,\"103\":2,\"110\":1,\"143\":1,\"151\":1,\"152\":1,\"160\":1,\"161\":1,\"165\":1,\"166\":1,\"168\":2,\"174\":1,\"182\":1,\"183\":1,\"185\":1,\"186\":1,\"197\":1,\"200\":1,\"208\":1,\"220\":1,\"229\":1,\"235\":2,\"248\":1,\"252\":1}}],[\"foaf\",{\"1\":{\"15\":4}}],[\"fonts\",{\"1\":{\"13\":3}}],[\"font\",{\"1\":{\"13\":5}}],[\"focusprocessorchecking\",{\"1\":{\"249\":1}}],[\"focus\",{\"1\":{\"11\":1,\"63\":1,\"66\":1,\"67\":1,\"83\":1,\"89\":1,\"122\":1,\"166\":1,\"189\":1,\"190\":1,\"194\":1,\"226\":1,\"228\":1,\"247\":1,\"249\":1}}],[\"focused\",{\"1\":{\"6\":2,\"11\":1,\"36\":1,\"40\":1}}],[\"foot\",{\"1\":{\"17\":1}}],[\"footer\",{\"1\":{\"14\":1}}],[\"foo\",{\"1\":{\"10\":2,\"11\":3,\"85\":1,\"86\":1,\"90\":2,\"94\":2,\"97\":3}}],[\"forcing\",{\"1\":{\"166\":1}}],[\"forced\",{\"1\":{\"186\":1}}],[\"force\",{\"1\":{\"22\":1,\"36\":1,\"141\":1,\"166\":1,\"186\":1}}],[\"forget\",{\"1\":{\"79\":1,\"91\":1,\"123\":1}}],[\"forgery\",{\"1\":{\"22\":2}}],[\"forty\",{\"1\":{\"102\":2}}],[\"fortunately\",{\"1\":{\"51\":1,\"77\":1,\"105\":1,\"106\":1,\"109\":1,\"191\":1}}],[\"fortran\",{\"1\":{\"8\":2,\"10\":1}}],[\"forums\",{\"1\":{\"11\":1,\"21\":1}}],[\"forkpty\",{\"1\":{\"11\":1}}],[\"fork\",{\"1\":{\"11\":2}}],[\"forks\",{\"1\":{\"11\":1}}],[\"foreign\",{\"1\":{\"9\":1,\"17\":1}}],[\"former\",{\"1\":{\"58\":1,\"82\":1,\"197\":1}}],[\"formerly\",{\"1\":{\"36\":1}}],[\"formed\",{\"1\":{\"9\":1}}],[\"forming\",{\"1\":{\"11\":1,\"21\":1}}],[\"form\",{\"1\":{\"9\":1,\"10\":4,\"14\":2,\"15\":2,\"25\":1,\"29\":5,\"30\":1,\"32\":1,\"33\":1,\"89\":1,\"108\":1,\"147\":1,\"248\":1}}],[\"formula\",{\"1\":{\"8\":1}}],[\"forms\",{\"1\":{\"8\":1}}],[\"format=binary\",{\"1\":{\"148\":1}}],[\"format=raw\",{\"1\":{\"135\":3,\"136\":3,\"143\":3,\"148\":3,\"196\":3}}],[\"formatted\",{\"1\":{\"13\":1,\"31\":1}}],[\"formatting\",{\"1\":{\"6\":2,\"12\":1}}],[\"formats\",{\"0\":{\"13\":1,\"15\":1,\"16\":1},\"1\":{\"12\":1,\"15\":1,\"16\":1,\"22\":1}}],[\"format\",{\"0\":{\"233\":1},\"1\":{\"7\":1,\"8\":1,\"10\":2,\"11\":12,\"13\":23,\"14\":2,\"15\":10,\"16\":8,\"21\":1,\"22\":1,\"24\":1,\"31\":5,\"66\":1,\"110\":1,\"123\":3,\"124\":1,\"142\":2,\"147\":4,\"173\":1,\"180\":1,\"185\":1,\"186\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"232\":3,\"233\":1}}],[\"formalism\",{\"1\":{\"10\":1}}],[\"formal\",{\"1\":{\"5\":1,\"8\":2,\"10\":1,\"35\":3}}],[\"forwarding\",{\"1\":{\"11\":1,\"21\":2}}],[\"forward\",{\"1\":{\"4\":1,\"10\":1,\"21\":3,\"124\":1,\"166\":1,\"175\":1,\"177\":1}}],[\"for\",{\"0\":{\"195\":1},\"1\":{\"1\":1,\"4\":18,\"5\":8,\"6\":16,\"7\":20,\"8\":15,\"9\":31,\"10\":32,\"11\":77,\"12\":8,\"13\":17,\"14\":6,\"15\":21,\"16\":12,\"17\":26,\"18\":11,\"19\":1,\"20\":8,\"21\":76,\"22\":21,\"23\":2,\"24\":13,\"25\":15,\"26\":3,\"27\":5,\"28\":11,\"29\":11,\"30\":21,\"31\":21,\"32\":10,\"33\":11,\"34\":14,\"35\":19,\"36\":12,\"37\":2,\"40\":4,\"41\":3,\"43\":3,\"44\":2,\"45\":1,\"46\":2,\"47\":5,\"48\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":2,\"53\":2,\"54\":1,\"57\":5,\"58\":3,\"59\":6,\"61\":4,\"62\":1,\"63\":3,\"64\":4,\"66\":1,\"67\":1,\"69\":7,\"70\":2,\"72\":3,\"73\":1,\"74\":7,\"75\":1,\"76\":2,\"77\":9,\"78\":3,\"79\":3,\"80\":1,\"81\":2,\"82\":1,\"83\":5,\"84\":2,\"85\":6,\"86\":6,\"87\":1,\"88\":4,\"89\":6,\"90\":2,\"91\":2,\"92\":4,\"95\":3,\"96\":6,\"97\":5,\"99\":5,\"100\":1,\"101\":3,\"102\":3,\"103\":3,\"104\":1,\"105\":8,\"106\":1,\"107\":3,\"110\":4,\"112\":3,\"113\":2,\"115\":2,\"116\":2,\"117\":2,\"121\":5,\"122\":1,\"123\":5,\"124\":16,\"128\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":2,\"134\":4,\"135\":1,\"137\":1,\"140\":2,\"141\":2,\"143\":5,\"144\":2,\"145\":2,\"146\":6,\"147\":16,\"148\":4,\"150\":1,\"151\":4,\"154\":1,\"155\":1,\"156\":5,\"159\":6,\"161\":1,\"162\":5,\"164\":4,\"165\":1,\"168\":4,\"169\":5,\"171\":1,\"172\":1,\"173\":3,\"175\":2,\"176\":3,\"177\":6,\"180\":3,\"181\":4,\"182\":1,\"183\":2,\"185\":23,\"186\":7,\"187\":9,\"188\":5,\"189\":2,\"190\":9,\"191\":3,\"192\":5,\"193\":2,\"194\":3,\"195\":5,\"196\":3,\"197\":8,\"198\":5,\"201\":1,\"202\":2,\"204\":2,\"206\":1,\"207\":1,\"208\":6,\"209\":8,\"210\":2,\"211\":3,\"212\":2,\"213\":1,\"214\":1,\"217\":4,\"218\":5,\"220\":2,\"221\":1,\"222\":1,\"223\":2,\"225\":4,\"226\":1,\"227\":8,\"228\":3,\"230\":3,\"231\":4,\"232\":1,\"233\":1,\"234\":1,\"235\":5,\"237\":10,\"239\":2,\"243\":1,\"245\":4,\"246\":2,\"247\":5,\"248\":4,\"249\":5,\"250\":2}}],[\"fifth\",{\"1\":{\"208\":1}}],[\"fifo\",{\"1\":{\"9\":1}}],[\"fit\",{\"1\":{\"178\":1,\"237\":1}}],[\"figure\",{\"1\":{\"160\":1,\"163\":1,\"186\":1}}],[\"figures\",{\"1\":{\"12\":1}}],[\"fictional\",{\"1\":{\"35\":1}}],[\"fiscal\",{\"1\":{\"35\":1}}],[\"fired\",{\"1\":{\"87\":1}}],[\"firewalls\",{\"1\":{\"22\":1}}],[\"firm\",{\"1\":{\"36\":1}}],[\"firmwarerevision\",{\"1\":{\"138\":1}}],[\"firmwarevendor\",{\"1\":{\"138\":1}}],[\"firmware\",{\"0\":{\"34\":1,\"134\":1},\"1\":{\"21\":2,\"25\":1,\"26\":2,\"28\":1,\"29\":3,\"30\":1,\"31\":1,\"33\":2,\"34\":14,\"122\":1,\"123\":1,\"133\":1,\"134\":3,\"135\":5,\"138\":1,\"141\":1,\"150\":1,\"172\":1}}],[\"firstcharacter\",{\"1\":{\"103\":1}}],[\"firstnonemptyline\",{\"1\":{\"88\":4}}],[\"first\",{\"1\":{\"7\":1,\"8\":1,\"9\":8,\"10\":1,\"11\":2,\"20\":2,\"21\":3,\"26\":1,\"31\":1,\"35\":3,\"40\":1,\"49\":1,\"52\":1,\"53\":1,\"55\":1,\"61\":1,\"72\":2,\"74\":3,\"76\":1,\"80\":1,\"85\":2,\"86\":1,\"87\":1,\"88\":5,\"89\":1,\"92\":1,\"95\":1,\"96\":2,\"99\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":2,\"118\":2,\"123\":1,\"124\":1,\"134\":1,\"145\":1,\"146\":1,\"147\":3,\"153\":1,\"159\":1,\"161\":1,\"164\":3,\"170\":5,\"171\":2,\"172\":1,\"176\":1,\"187\":2,\"189\":1,\"192\":1,\"196\":1,\"202\":1,\"208\":1,\"213\":1,\"228\":2,\"230\":1,\"234\":1,\"237\":6,\"239\":3,\"243\":1,\"245\":1,\"248\":1,\"249\":2}}],[\"fi\",{\"1\":{\"21\":1,\"22\":1,\"36\":1}}],[\"fibre\",{\"1\":{\"21\":1,\"24\":1,\"30\":1,\"31\":1}}],[\"fiber\",{\"1\":{\"21\":9}}],[\"fiasco\",{\"1\":{\"11\":1}}],[\"fill\",{\"1\":{\"174\":1,\"237\":1}}],[\"filterisinstance<identdecl>\",{\"1\":{\"79\":1}}],[\"filtering\",{\"1\":{\"21\":1,\"79\":1}}],[\"filters\",{\"1\":{\"16\":1,\"18\":1}}],[\"filter\",{\"1\":{\"9\":1,\"17\":1,\"21\":1,\"79\":1}}],[\"fileinfosize\",{\"1\":{\"197\":2}}],[\"fileinfo\",{\"1\":{\"197\":5}}],[\"filepath\",{\"1\":{\"151\":1}}],[\"file=\",{\"1\":{\"196\":2}}],[\"file=fat\",{\"1\":{\"135\":1,\"136\":1,\"143\":1,\"148\":1,\"196\":1}}],[\"file=ovmf\",{\"1\":{\"135\":2,\"136\":2,\"143\":2,\"148\":2}}],[\"fileviewprovider\",{\"0\":{\"112\":1},\"1\":{\"61\":1,\"64\":1,\"79\":1,\"112\":1}}],[\"filetype\",{\"1\":{\"48\":1,\"61\":1}}],[\"filetypes\",{\"1\":{\"47\":1}}],[\"filenames\",{\"1\":{\"11\":1}}],[\"filename\",{\"1\":{\"11\":1,\"153\":2,\"154\":1}}],[\"file\",{\"0\":{\"13\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"68\":1,\"152\":1,\"154\":1},\"1\":{\"5\":1,\"7\":1,\"8\":2,\"9\":4,\"10\":2,\"11\":17,\"13\":5,\"15\":1,\"16\":4,\"21\":14,\"22\":4,\"24\":1,\"31\":1,\"43\":2,\"44\":2,\"45\":1,\"46\":5,\"47\":7,\"48\":5,\"49\":5,\"52\":1,\"53\":3,\"54\":3,\"55\":4,\"58\":6,\"59\":1,\"61\":4,\"63\":7,\"64\":2,\"65\":2,\"66\":4,\"67\":1,\"68\":3,\"69\":4,\"70\":5,\"71\":4,\"74\":3,\"75\":1,\"76\":5,\"80\":1,\"82\":8,\"83\":3,\"84\":1,\"85\":1,\"88\":2,\"89\":16,\"95\":2,\"96\":3,\"97\":1,\"99\":1,\"112\":3,\"123\":7,\"124\":10,\"127\":4,\"128\":2,\"129\":6,\"131\":5,\"133\":1,\"138\":1,\"140\":2,\"141\":1,\"143\":7,\"147\":30,\"148\":3,\"150\":8,\"151\":1,\"153\":1,\"154\":11,\"158\":3,\"179\":1,\"187\":1,\"196\":2,\"197\":14,\"226\":2,\"227\":4,\"228\":5,\"233\":3,\"234\":4,\"235\":8,\"236\":1,\"237\":1,\"253\":1}}],[\"filesz\",{\"1\":{\"235\":3,\"237\":5}}],[\"filesize\",{\"1\":{\"153\":1,\"154\":1,\"156\":1,\"157\":1,\"197\":3}}],[\"filesiz\",{\"1\":{\"147\":2,\"234\":1}}],[\"filesystems\",{\"1\":{\"11\":3,\"135\":1,\"195\":1}}],[\"filesystem\",{\"1\":{\"11\":6,\"18\":1,\"22\":1,\"116\":2,\"135\":5,\"152\":3,\"153\":2,\"197\":2,\"237\":2}}],[\"files\",{\"0\":{\"158\":1},\"1\":{\"4\":1,\"6\":1,\"7\":1,\"9\":1,\"10\":1,\"11\":5,\"13\":9,\"14\":6,\"16\":5,\"17\":1,\"21\":4,\"45\":1,\"46\":1,\"47\":1,\"49\":1,\"69\":1,\"73\":1,\"83\":1,\"116\":2,\"134\":1,\"143\":3,\"147\":6,\"224\":1,\"225\":2,\"233\":1,\"235\":4}}],[\"fixtures\",{\"1\":{\"9\":1}}],[\"fixed\",{\"1\":{\"8\":1,\"11\":3,\"17\":1,\"22\":1,\"34\":2,\"35\":1,\"89\":1,\"124\":1,\"153\":1,\"223\":2,\"226\":1,\"230\":1,\"232\":1,\"248\":1}}],[\"fixes\",{\"1\":{\"6\":2}}],[\"fix\",{\"1\":{\"6\":1,\"35\":1,\"88\":2,\"141\":1,\"142\":1,\"147\":1,\"164\":1,\"206\":1,\"229\":1}}],[\"fine\",{\"1\":{\"18\":5,\"25\":1,\"35\":1}}],[\"fini\",{\"1\":{\"235\":1}}],[\"finiarray\",{\"1\":{\"235\":1}}],[\"finishes\",{\"1\":{\"35\":1}}],[\"finished\",{\"1\":{\"9\":1}}],[\"finite\",{\"1\":{\"9\":2,\"10\":3}}],[\"finance\",{\"1\":{\"8\":1,\"11\":1}}],[\"financial\",{\"1\":{\"8\":2,\"14\":1}}],[\"finally\",{\"1\":{\"48\":1,\"61\":1,\"64\":1,\"78\":1,\"79\":1,\"83\":1,\"97\":1,\"101\":1,\"110\":1,\"117\":1,\"164\":1,\"170\":1,\"171\":1,\"180\":1,\"188\":1,\"196\":1,\"197\":1,\"200\":1,\"202\":1,\"206\":1,\"209\":1,\"230\":2,\"237\":1,\"249\":2}}],[\"finalized\",{\"1\":{\"35\":1}}],[\"final\",{\"1\":{\"6\":1,\"35\":1,\"58\":2,\"71\":1,\"109\":1}}],[\"findchildoftype\",{\"1\":{\"82\":2}}],[\"findchildoftype<identdecl>\",{\"1\":{\"74\":1}}],[\"finding\",{\"1\":{\"77\":1,\"79\":1,\"168\":2}}],[\"findnotnullchildbytype\",{\"1\":{\"75\":1}}],[\"finds\",{\"1\":{\"9\":1,\"75\":1,\"170\":1,\"218\":1,\"230\":1}}],[\"find\",{\"1\":{\"0\":1,\"1\":1,\"34\":2,\"40\":1,\"72\":1,\"74\":2,\"77\":2,\"78\":2,\"79\":1,\"80\":1,\"84\":2,\"95\":1,\"116\":1,\"123\":1,\"124\":2,\"135\":1,\"147\":1,\"148\":1,\"170\":1,\"171\":1,\"177\":1,\"189\":1,\"190\":3,\"193\":1,\"197\":2,\"201\":2,\"218\":2,\"227\":1,\"228\":1,\"237\":1,\"250\":1}}],[\"five\",{\"1\":{\"5\":1,\"35\":1,\"104\":2,\"199\":2}}],[\"fieldname=\",{\"1\":{\"48\":1}}],[\"field\",{\"1\":{\"5\":1,\"10\":1,\"11\":1,\"17\":1,\"33\":1,\"78\":3,\"96\":1,\"97\":1,\"138\":1,\"151\":2,\"153\":1,\"162\":1,\"175\":2,\"185\":2,\"186\":3,\"187\":2,\"190\":4,\"201\":1,\"204\":1,\"206\":1,\"217\":1,\"220\":1,\"221\":1,\"227\":5,\"228\":2,\"234\":2,\"237\":1,\"239\":2,\"248\":1}}],[\"fields\",{\"1\":{\"5\":1,\"6\":1,\"7\":1,\"9\":1,\"15\":2,\"21\":1,\"61\":2,\"151\":1,\"177\":2,\"185\":1,\"187\":1,\"190\":1,\"197\":2,\"218\":1,\"227\":1,\"235\":2,\"239\":1,\"249\":1}}],[\"friday\",{\"1\":{\"35\":2}}],[\"friend\",{\"1\":{\"15\":2}}],[\"friendliness\",{\"1\":{\"11\":1}}],[\"friendly\",{\"1\":{\"5\":1,\"10\":1,\"13\":1,\"15\":1,\"35\":1,\"96\":1}}],[\"frustration\",{\"1\":{\"35\":2}}],[\"framing\",{\"1\":{\"21\":1,\"30\":1}}],[\"framebuffer\",{\"1\":{\"144\":1}}],[\"framebuffers\",{\"1\":{\"32\":1}}],[\"frame\",{\"0\":{\"199\":1},\"1\":{\"10\":1,\"11\":1,\"21\":6,\"130\":1,\"146\":4,\"168\":1,\"171\":1,\"174\":4,\"177\":1,\"190\":2,\"191\":6,\"192\":2,\"193\":1,\"194\":3,\"195\":3,\"199\":3,\"200\":2,\"204\":1,\"205\":1,\"206\":1,\"220\":3,\"221\":1,\"249\":1}}],[\"framesize\",{\"1\":{\"168\":4,\"169\":1,\"170\":1,\"171\":4}}],[\"frames\",{\"0\":{\"170\":1,\"171\":1},\"1\":{\"10\":1,\"16\":1,\"20\":1,\"21\":5,\"166\":1,\"167\":1,\"168\":1,\"170\":3,\"171\":13,\"177\":3}}],[\"framework\",{\"1\":{\"4\":3,\"7\":1,\"9\":2,\"15\":2,\"17\":4,\"21\":1,\"22\":1}}],[\"frameworks\",{\"1\":{\"4\":1,\"5\":1,\"9\":1,\"22\":1}}],[\"fragmentation\",{\"1\":{\"21\":2}}],[\"fragment\",{\"1\":{\"10\":1,\"82\":4}}],[\"french\",{\"1\":{\"21\":2}}],[\"frequency\",{\"1\":{\"20\":1,\"31\":1}}],[\"frequent\",{\"1\":{\"19\":1}}],[\"frequently\",{\"1\":{\"6\":1,\"26\":1}}],[\"freed\",{\"1\":{\"171\":2}}],[\"frees\",{\"1\":{\"168\":1}}],[\"freestanding\",{\"1\":{\"117\":1,\"122\":2,\"123\":1,\"132\":1,\"145\":1}}],[\"freememorytypes\",{\"1\":{\"162\":2,\"197\":1}}],[\"freepool\",{\"1\":{\"151\":1}}],[\"freepages\",{\"1\":{\"151\":1}}],[\"freeing\",{\"0\":{\"171\":1},\"1\":{\"124\":1,\"168\":1,\"171\":8,\"242\":1}}],[\"freertos\",{\"1\":{\"11\":1}}],[\"freebsd\",{\"1\":{\"11\":1}}],[\"free\",{\"0\":{\"168\":1},\"1\":{\"6\":1,\"9\":4,\"10\":3,\"11\":7,\"16\":1,\"17\":1,\"21\":1,\"25\":1,\"35\":3,\"36\":2,\"37\":2,\"77\":1,\"124\":3,\"162\":2,\"165\":24,\"166\":1,\"167\":5,\"168\":9,\"169\":9,\"170\":19,\"171\":25,\"180\":2,\"181\":2,\"183\":4,\"188\":2,\"197\":3,\"218\":3}}],[\"frontier\",{\"1\":{\"36\":1}}],[\"frontend\",{\"1\":{\"7\":1}}],[\"front\",{\"1\":{\"5\":1,\"6\":1,\"30\":1}}],[\"from\",{\"0\":{\"206\":1},\"1\":{\"1\":1,\"5\":1,\"6\":1,\"7\":6,\"8\":1,\"9\":5,\"10\":5,\"11\":9,\"12\":1,\"13\":3,\"17\":6,\"18\":6,\"20\":1,\"21\":10,\"22\":5,\"24\":2,\"25\":6,\"27\":1,\"29\":2,\"31\":3,\"34\":4,\"35\":5,\"37\":1,\"40\":1,\"43\":1,\"45\":1,\"51\":2,\"53\":1,\"54\":2,\"57\":1,\"59\":1,\"65\":1,\"66\":1,\"67\":1,\"70\":2,\"72\":2,\"74\":1,\"75\":2,\"77\":1,\"79\":3,\"82\":6,\"83\":1,\"86\":1,\"87\":1,\"89\":4,\"94\":1,\"95\":1,\"97\":2,\"103\":2,\"104\":4,\"105\":2,\"107\":1,\"109\":1,\"118\":1,\"122\":2,\"124\":2,\"127\":1,\"130\":1,\"133\":1,\"134\":2,\"135\":2,\"141\":2,\"143\":2,\"144\":1,\"146\":2,\"147\":7,\"151\":4,\"152\":2,\"160\":3,\"161\":1,\"162\":1,\"164\":1,\"166\":1,\"168\":2,\"169\":2,\"170\":2,\"173\":2,\"174\":2,\"176\":1,\"177\":2,\"180\":1,\"181\":1,\"182\":2,\"185\":4,\"186\":3,\"188\":3,\"190\":1,\"191\":4,\"192\":4,\"193\":2,\"194\":4,\"195\":1,\"199\":1,\"200\":1,\"201\":2,\"205\":1,\"206\":6,\"207\":1,\"208\":1,\"209\":1,\"210\":2,\"211\":1,\"212\":2,\"213\":3,\"214\":1,\"215\":2,\"222\":1,\"223\":2,\"225\":1,\"226\":1,\"227\":2,\"228\":1,\"230\":4,\"231\":2,\"235\":1,\"237\":2,\"239\":3,\"240\":1,\"243\":5,\"244\":1,\"246\":5,\"247\":4,\"248\":9,\"249\":1,\"250\":1,\"251\":1}}],[\"frp\",{\"1\":{\"5\":1}}],[\"a5\",{\"1\":{\"200\":1}}],[\"a6\",{\"1\":{\"200\":1}}],[\"ax\",{\"1\":{\"147\":2,\"203\":2,\"226\":1,\"228\":1,\"229\":1,\"234\":1}}],[\"axi\",{\"1\":{\"30\":2}}],[\"a$b\",{\"1\":{\"106\":1}}],[\"a$\",{\"1\":{\"106\":1}}],[\"aes\",{\"1\":{\"22\":3}}],[\"aka\",{\"1\":{\"15\":1,\"25\":2}}],[\"audited\",{\"1\":{\"36\":1}}],[\"auditing\",{\"1\":{\"22\":1}}],[\"audio\",{\"1\":{\"13\":5,\"18\":1,\"31\":1,\"32\":2}}],[\"augmented\",{\"1\":{\"18\":1}}],[\"authenticity\",{\"1\":{\"22\":2}}],[\"authenticator\",{\"1\":{\"22\":1}}],[\"authenticate\",{\"1\":{\"21\":1,\"22\":1}}],[\"authentication\",{\"1\":{\"21\":4,\"22\":11,\"24\":1}}],[\"authenticating\",{\"1\":{\"21\":1}}],[\"auth\",{\"1\":{\"21\":2,\"22\":2,\"24\":1}}],[\"authorize\",{\"1\":{\"22\":1}}],[\"authorization\",{\"1\":{\"22\":2,\"24\":1}}],[\"authority\",{\"1\":{\"22\":1,\"35\":1,\"36\":1}}],[\"authoritative\",{\"1\":{\"21\":2}}],[\"authoring\",{\"1\":{\"15\":1,\"41\":1}}],[\"author\",{\"1\":{\"10\":1}}],[\"autovectorization\",{\"1\":{\"28\":1}}],[\"autonomous\",{\"1\":{\"21\":2}}],[\"automerge\",{\"1\":{\"17\":1}}],[\"automotive\",{\"1\":{\"11\":1}}],[\"automanage\",{\"1\":{\"6\":1}}],[\"automaton\",{\"1\":{\"10\":3}}],[\"automating\",{\"0\":{\"55\":1}}],[\"automatically\",{\"1\":{\"10\":1,\"22\":1,\"75\":1,\"81\":1,\"124\":1,\"143\":1,\"198\":1,\"248\":1}}],[\"automatic\",{\"1\":{\"9\":1,\"11\":2,\"21\":3,\"34\":1}}],[\"automation\",{\"1\":{\"4\":3,\"6\":1,\"8\":1,\"9\":1,\"11\":4,\"15\":1,\"33\":1}}],[\"automate\",{\"1\":{\"8\":1,\"55\":1,\"71\":1}}],[\"automated\",{\"1\":{\"6\":2,\"11\":1}}],[\"auto\",{\"1\":{\"6\":1,\"21\":2,\"34\":1}}],[\"a20=1\",{\"1\":{\"188\":1,\"200\":1,\"210\":2,\"212\":1}}],[\"a20\",{\"1\":{\"11\":2}}],[\"amazing\",{\"1\":{\"193\":1}}],[\"ams\",{\"1\":{\"147\":2,\"226\":1,\"228\":1,\"229\":1,\"234\":1}}],[\"amstrad\",{\"1\":{\"11\":1}}],[\"aml\",{\"1\":{\"34\":4}}],[\"amoled\",{\"1\":{\"32\":1}}],[\"amber\",{\"1\":{\"32\":1}}],[\"amba\",{\"1\":{\"30\":5}}],[\"ambiguity\",{\"1\":{\"35\":1}}],[\"ambiguous\",{\"1\":{\"10\":1}}],[\"ambitious\",{\"1\":{\"11\":2}}],[\"amx\",{\"1\":{\"28\":2}}],[\"amd\",{\"1\":{\"25\":3,\"188\":1}}],[\"amd64\",{\"1\":{\"25\":5,\"118\":1,\"123\":1,\"124\":7,\"147\":1,\"196\":1}}],[\"amends\",{\"1\":{\"23\":1}}],[\"american\",{\"1\":{\"11\":1,\"14\":1,\"36\":1}}],[\"amplifiers\",{\"1\":{\"21\":1}}],[\"amplification\",{\"1\":{\"17\":1}}],[\"amqp\",{\"1\":{\"21\":2}}],[\"a+b\",{\"1\":{\"10\":1}}],[\"ahci\",{\"1\":{\"31\":4,\"135\":1}}],[\"ahb\",{\"1\":{\"30\":2}}],[\"ah\",{\"1\":{\"21\":1}}],[\"ahead\",{\"1\":{\"10\":1,\"17\":1,\"42\":1,\"74\":1,\"77\":1,\"87\":1,\"164\":1,\"171\":1,\"232\":1}}],[\"aho\",{\"1\":{\"8\":1}}],[\"aol\",{\"1\":{\"21\":2}}],[\"aoe\",{\"1\":{\"21\":1}}],[\"aot\",{\"1\":{\"10\":2}}],[\"aos\",{\"1\":{\"5\":1}}],[\"afrinic\",{\"1\":{\"36\":1}}],[\"afk\",{\"1\":{\"35\":2}}],[\"afaik\",{\"1\":{\"35\":2}}],[\"afaict\",{\"1\":{\"35\":2}}],[\"affero\",{\"1\":{\"37\":1}}],[\"affect\",{\"1\":{\"103\":1}}],[\"affects\",{\"1\":{\"35\":1}}],[\"affected\",{\"1\":{\"9\":1,\"106\":1}}],[\"affinity\",{\"1\":{\"21\":1}}],[\"afi\",{\"1\":{\"21\":1}}],[\"after\",{\"1\":{\"6\":1,\"9\":1,\"10\":1,\"17\":1,\"19\":2,\"26\":1,\"29\":1,\"35\":3,\"63\":1,\"76\":1,\"80\":1,\"82\":1,\"87\":1,\"89\":4,\"97\":1,\"106\":1,\"110\":8,\"141\":1,\"150\":1,\"160\":2,\"162\":1,\"168\":1,\"171\":1,\"174\":1,\"180\":1,\"188\":1,\"210\":2,\"215\":1,\"218\":1,\"228\":1,\"229\":2,\"230\":2}}],[\"ain\",{\"1\":{\"35\":1}}],[\"aircraft\",{\"1\":{\"11\":1}}],[\"air\",{\"1\":{\"11\":1}}],[\"airline\",{\"1\":{\"11\":3,\"17\":1}}],[\"airlines\",{\"1\":{\"11\":2}}],[\"ai\",{\"1\":{\"11\":2,\"18\":2,\"29\":1}}],[\"aix\",{\"1\":{\"11\":4,\"25\":1}}],[\"aio\",{\"1\":{\"9\":1}}],[\"aims\",{\"1\":{\"20\":1}}],[\"aim\",{\"1\":{\"7\":1,\"20\":1,\"21\":2,\"25\":1}}],[\"awesome\",{\"1\":{\"214\":1}}],[\"award\",{\"1\":{\"36\":1}}],[\"aware\",{\"1\":{\"6\":1,\"17\":1}}],[\"away\",{\"1\":{\"21\":1,\"35\":3}}],[\"aws\",{\"1\":{\"9\":1,\"24\":3,\"25\":1}}],[\"awk\",{\"1\":{\"8\":2}}],[\"aarch64\",{\"1\":{\"25\":2,\"27\":1,\"235\":2}}],[\"aarch32\",{\"1\":{\"25\":2}}],[\"aac\",{\"1\":{\"13\":2}}],[\"aaaa\",{\"1\":{\"24\":1}}],[\"aaa\",{\"1\":{\"9\":1}}],[\"aa\",{\"1\":{\"7\":1}}],[\"a456\",{\"1\":{\"7\":1}}],[\"ajax\",{\"1\":{\"7\":1}}],[\"al\",{\"1\":{\"147\":2,\"226\":1,\"228\":2,\"229\":1,\"234\":1}}],[\"almost\",{\"1\":{\"94\":1,\"97\":2,\"187\":1,\"192\":1,\"237\":1}}],[\"always\",{\"1\":{\"85\":1,\"87\":1,\"147\":2,\"185\":1,\"186\":1,\"229\":1,\"234\":1}}],[\"already\",{\"1\":{\"48\":1,\"79\":2,\"89\":1,\"90\":1,\"96\":1,\"124\":2,\"127\":1,\"135\":1,\"136\":1,\"166\":1,\"169\":1,\"172\":1,\"180\":1,\"182\":1,\"197\":1,\"214\":1,\"229\":1,\"239\":1,\"248\":1}}],[\"alu\",{\"1\":{\"26\":2}}],[\"alb\",{\"1\":{\"24\":1}}],[\"alert\",{\"1\":{\"22\":1}}],[\"alerts\",{\"1\":{\"22\":1}}],[\"alias\",{\"1\":{\"21\":1}}],[\"aliases\",{\"1\":{\"21\":1}}],[\"aligns\",{\"1\":{\"248\":1}}],[\"alignedpage\",{\"1\":{\"181\":4}}],[\"aligned\",{\"1\":{\"171\":1,\"175\":1,\"181\":1,\"234\":1,\"237\":2,\"248\":3}}],[\"alignment\",{\"1\":{\"9\":1,\"18\":1,\"22\":1,\"175\":1,\"192\":2,\"235\":1,\"237\":1}}],[\"align\",{\"1\":{\"6\":1,\"18\":1,\"147\":5,\"175\":6,\"179\":1,\"181\":1,\"196\":1,\"227\":1,\"228\":2,\"234\":3,\"235\":2,\"237\":2}}],[\"alone\",{\"1\":{\"20\":1,\"89\":2}}],[\"alongside\",{\"1\":{\"11\":2,\"13\":1,\"21\":1,\"69\":1,\"195\":1}}],[\"along\",{\"1\":{\"9\":1,\"21\":2,\"100\":1,\"235\":1}}],[\"alpha\",{\"1\":{\"11\":2,\"13\":1,\"32\":3}}],[\"although\",{\"1\":{\"45\":2,\"85\":1,\"88\":1,\"97\":1,\"232\":1,\"248\":1}}],[\"alto\",{\"1\":{\"36\":2}}],[\"alt\",{\"1\":{\"21\":1,\"32\":1}}],[\"alter\",{\"1\":{\"17\":1,\"22\":1}}],[\"alternatives\",{\"1\":{\"90\":1,\"99\":1}}],[\"alternative\",{\"1\":{\"11\":1,\"30\":1,\"35\":1,\"90\":1}}],[\"alternate\",{\"1\":{\"11\":1,\"22\":1}}],[\"alt+f11\",{\"1\":{\"9\":1}}],[\"also\",{\"1\":{\"10\":1,\"21\":1,\"22\":1,\"30\":2,\"33\":2,\"41\":1,\"43\":1,\"54\":1,\"58\":3,\"59\":1,\"67\":1,\"69\":3,\"71\":1,\"73\":1,\"75\":4,\"76\":1,\"78\":1,\"79\":1,\"80\":1,\"82\":1,\"83\":1,\"85\":1,\"87\":2,\"88\":1,\"90\":1,\"91\":1,\"92\":1,\"94\":2,\"95\":1,\"96\":3,\"99\":1,\"101\":1,\"103\":1,\"104\":2,\"106\":3,\"110\":1,\"115\":2,\"116\":1,\"117\":1,\"121\":1,\"123\":2,\"124\":3,\"133\":1,\"134\":2,\"135\":1,\"140\":1,\"143\":5,\"147\":1,\"150\":3,\"153\":3,\"154\":2,\"156\":2,\"159\":2,\"162\":1,\"164\":2,\"165\":1,\"168\":2,\"169\":1,\"174\":1,\"176\":1,\"177\":6,\"180\":1,\"185\":1,\"186\":1,\"187\":3,\"188\":3,\"190\":3,\"191\":2,\"192\":1,\"193\":1,\"195\":1,\"197\":2,\"200\":1,\"205\":1,\"208\":2,\"210\":3,\"211\":2,\"217\":1,\"218\":3,\"219\":1,\"220\":1,\"223\":1,\"225\":1,\"226\":1,\"228\":1,\"229\":2,\"230\":1,\"232\":1,\"234\":2,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"242\":1,\"243\":1,\"248\":2}}],[\"algorithms\",{\"1\":{\"9\":1,\"22\":1}}],[\"algorithm\",{\"1\":{\"9\":1,\"10\":1,\"16\":4,\"17\":1,\"22\":2,\"218\":1,\"237\":1}}],[\"algorithmic\",{\"1\":{\"8\":1}}],[\"algol\",{\"1\":{\"8\":2}}],[\"algebraic\",{\"1\":{\"8\":1,\"9\":2}}],[\"alliance\",{\"1\":{\"25\":1}}],[\"alloc\",{\"1\":{\"147\":2,\"234\":1}}],[\"allocating\",{\"0\":{\"170\":1},\"1\":{\"146\":1,\"150\":1,\"156\":2,\"159\":1,\"162\":2,\"168\":1,\"170\":6,\"171\":4,\"177\":2,\"181\":1,\"197\":1,\"220\":3,\"237\":1}}],[\"allocation\",{\"0\":{\"231\":1},\"1\":{\"10\":2,\"11\":1,\"36\":2,\"122\":1,\"124\":3,\"156\":1,\"170\":3,\"171\":1,\"177\":1,\"218\":1}}],[\"allocations\",{\"1\":{\"9\":1,\"21\":1,\"168\":1}}],[\"allocator\",{\"1\":{\"124\":1,\"237\":1}}],[\"allocated\",{\"1\":{\"157\":1,\"159\":1,\"162\":2,\"168\":1,\"170\":5,\"197\":1,\"218\":3,\"231\":1}}],[\"allocateaddress\",{\"1\":{\"156\":3,\"197\":1}}],[\"allocateanypages\",{\"1\":{\"156\":3,\"162\":1,\"197\":1}}],[\"allocatemaxaddress\",{\"1\":{\"156\":1}}],[\"allocatetype\",{\"1\":{\"156\":1}}],[\"allocatepool\",{\"1\":{\"151\":1,\"159\":7,\"162\":1}}],[\"allocatepages\",{\"1\":{\"150\":2,\"151\":1,\"156\":5,\"159\":2,\"162\":1,\"197\":2}}],[\"allocates\",{\"1\":{\"146\":1,\"159\":2,\"218\":1,\"220\":1,\"237\":1}}],[\"allocate\",{\"0\":{\"156\":1},\"1\":{\"10\":2,\"25\":1,\"124\":1,\"146\":1,\"148\":1,\"150\":2,\"151\":1,\"154\":1,\"155\":1,\"156\":5,\"159\":6,\"160\":2,\"162\":1,\"166\":1,\"167\":1,\"168\":1,\"170\":7,\"171\":1,\"176\":2,\"177\":4,\"181\":2,\"185\":1,\"192\":1,\"193\":1,\"195\":1,\"198\":2,\"204\":2,\"207\":1,\"217\":1,\"218\":4,\"220\":4,\"231\":4,\"237\":4}}],[\"allow\",{\"1\":{\"22\":2,\"24\":1,\"66\":1,\"73\":2,\"81\":1,\"84\":1,\"88\":1,\"89\":1,\"95\":1,\"97\":1,\"110\":1,\"115\":1,\"168\":1,\"177\":1,\"181\":1,\"200\":1,\"206\":1,\"241\":1}}],[\"allowed\",{\"1\":{\"22\":1,\"97\":1,\"107\":2,\"147\":1,\"185\":2,\"186\":3}}],[\"allowing\",{\"1\":{\"9\":1,\"10\":1,\"11\":2,\"22\":1,\"31\":1,\"34\":1,\"89\":1,\"94\":1,\"193\":1,\"196\":1,\"206\":1}}],[\"allows\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"29\":1,\"67\":1,\"68\":1,\"77\":1,\"87\":1,\"90\":1,\"97\":2,\"101\":1,\"105\":1,\"143\":1,\"164\":1,\"172\":1,\"194\":1,\"197\":1,\"201\":1}}],[\"all\",{\"1\":{\"5\":1,\"8\":1,\"9\":2,\"10\":1,\"11\":1,\"16\":1,\"17\":1,\"21\":1,\"22\":1,\"24\":1,\"34\":3,\"40\":1,\"43\":1,\"44\":1,\"48\":1,\"52\":3,\"61\":1,\"66\":1,\"79\":7,\"81\":1,\"82\":1,\"84\":4,\"88\":1,\"89\":4,\"91\":2,\"95\":2,\"96\":4,\"97\":3,\"101\":1,\"105\":3,\"109\":1,\"116\":1,\"140\":2,\"142\":1,\"147\":3,\"154\":1,\"160\":1,\"171\":3,\"173\":2,\"176\":1,\"181\":3,\"184\":2,\"185\":3,\"186\":2,\"187\":2,\"189\":1,\"190\":1,\"192\":1,\"209\":1,\"216\":2,\"217\":1,\"220\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"228\":1,\"231\":1,\"232\":1,\"236\":1,\"237\":1,\"239\":1,\"243\":1,\"246\":1,\"248\":1}}],[\"avx2\",{\"1\":{\"28\":1}}],[\"avx\",{\"1\":{\"26\":1,\"27\":1,\"28\":4}}],[\"averaging\",{\"1\":{\"17\":1}}],[\"average\",{\"1\":{\"9\":1}}],[\"aviion\",{\"1\":{\"11\":2}}],[\"aviation\",{\"1\":{\"11\":1}}],[\"available\",{\"1\":{\"9\":2,\"17\":1,\"24\":1,\"53\":1,\"83\":2,\"113\":1,\"122\":1,\"124\":2,\"134\":1,\"135\":2,\"141\":1,\"162\":1,\"170\":2,\"185\":2,\"192\":2,\"224\":1,\"229\":1,\"231\":3}}],[\"availability\",{\"1\":{\"6\":1,\"11\":1,\"17\":1,\"19\":2}}],[\"avl\",{\"1\":{\"9\":2,\"185\":2,\"187\":2,\"202\":1,\"210\":2}}],[\"avoiding\",{\"1\":{\"177\":1}}],[\"avoids\",{\"1\":{\"21\":1,\"105\":1}}],[\"avoid\",{\"1\":{\"5\":1,\"9\":1,\"10\":1,\"11\":1,\"14\":1,\"20\":1,\"21\":3,\"22\":2,\"35\":4,\"45\":1,\"72\":1,\"87\":2,\"89\":1,\"90\":1,\"124\":1,\"134\":1,\"139\":1,\"141\":1,\"146\":2,\"160\":1,\"177\":1,\"192\":1,\"240\":1}}],[\"azure\",{\"1\":{\"6\":1}}],[\"agree\",{\"1\":{\"147\":1}}],[\"agreement\",{\"1\":{\"19\":1,\"37\":1}}],[\"again\",{\"1\":{\"35\":1,\"45\":1,\"66\":1,\"124\":2,\"128\":1,\"135\":2,\"147\":4,\"148\":2,\"159\":1,\"186\":1,\"206\":1,\"228\":1}}],[\"against\",{\"1\":{\"12\":1,\"22\":1,\"77\":1,\"78\":1,\"186\":1}}],[\"agpl\",{\"1\":{\"37\":1}}],[\"agp\",{\"1\":{\"32\":2}}],[\"agency\",{\"1\":{\"21\":1,\"36\":1}}],[\"agent\",{\"1\":{\"7\":2,\"11\":1}}],[\"agnostic\",{\"1\":{\"13\":1,\"27\":1}}],[\"aggregation\",{\"1\":{\"21\":1}}],[\"aggregate\",{\"1\":{\"4\":1}}],[\"aggressive\",{\"1\":{\"9\":1}}],[\"agile\",{\"1\":{\"6\":2}}],[\"arg5\",{\"1\":{\"212\":1,\"213\":1}}],[\"arg4\",{\"1\":{\"212\":1,\"213\":1}}],[\"arg3\",{\"1\":{\"212\":1,\"213\":1}}],[\"arg2\",{\"1\":{\"212\":1,\"213\":1}}],[\"arg1=0x415678\",{\"1\":{\"231\":1}}],[\"arg1=0x4020a298\",{\"1\":{\"230\":1}}],[\"arg1=0x40209ee8\",{\"1\":{\"227\":2}}],[\"arg1=0x8020a298\",{\"1\":{\"230\":1}}],[\"arg1=\",{\"1\":{\"227\":2}}],[\"arg1\",{\"1\":{\"212\":1,\"213\":2,\"214\":2,\"215\":1,\"227\":10,\"230\":6,\"231\":2,\"242\":1}}],[\"argc\",{\"1\":{\"124\":2}}],[\"args\",{\"1\":{\"29\":1,\"124\":2,\"196\":2,\"212\":2,\"213\":9,\"214\":3,\"215\":2,\"227\":6,\"241\":1,\"242\":2}}],[\"arguments\",{\"1\":{\"57\":1,\"92\":1,\"102\":2,\"124\":1,\"133\":1,\"135\":1,\"146\":2,\"147\":3,\"148\":1,\"161\":1,\"208\":3,\"210\":1,\"211\":1,\"212\":2,\"214\":2,\"241\":1,\"245\":1}}],[\"argument\",{\"0\":{\"214\":1},\"1\":{\"10\":1,\"101\":1,\"102\":1,\"140\":1,\"163\":1,\"190\":1,\"208\":5,\"213\":1,\"214\":1,\"215\":1,\"223\":1,\"227\":1,\"230\":2,\"231\":1,\"245\":1}}],[\"article\",{\"1\":{\"35\":2}}],[\"articles\",{\"1\":{\"21\":1}}],[\"artificial\",{\"0\":{\"18\":1},\"1\":{\"18\":2}}],[\"artifacts\",{\"1\":{\"16\":2,\"22\":1,\"121\":1}}],[\"artifact\",{\"1\":{\"6\":1}}],[\"arq\",{\"1\":{\"21\":1}}],[\"arp\",{\"1\":{\"21\":3}}],[\"arpanet\",{\"1\":{\"11\":3,\"21\":6,\"36\":4}}],[\"arcade\",{\"1\":{\"29\":1,\"35\":3}}],[\"arch\",{\"1\":{\"134\":1}}],[\"archaeology\",{\"1\":{\"24\":1}}],[\"architectural\",{\"1\":{\"20\":1,\"25\":1}}],[\"architectures\",{\"1\":{\"11\":1,\"20\":1,\"24\":1,\"25\":2,\"30\":1}}],[\"architecture\",{\"0\":{\"4\":1,\"25\":1},\"1\":{\"4\":4,\"5\":1,\"6\":1,\"9\":2,\"11\":5,\"18\":2,\"21\":2,\"25\":20,\"27\":2,\"30\":4,\"33\":1,\"124\":2,\"184\":1,\"233\":1,\"235\":1,\"247\":3}}],[\"archival\",{\"0\":{\"16\":1},\"1\":{\"31\":1}}],[\"archives\",{\"1\":{\"16\":3,\"31\":1}}],[\"archive\",{\"1\":{\"13\":3,\"16\":13,\"31\":1}}],[\"archived\",{\"1\":{\"11\":1}}],[\"archimedes\",{\"1\":{\"11\":2}}],[\"arcgis\",{\"1\":{\"17\":1}}],[\"arm64\",{\"1\":{\"25\":2}}],[\"armhf\",{\"1\":{\"25\":1}}],[\"armv8\",{\"1\":{\"25\":2,\"27\":1}}],[\"armv7\",{\"1\":{\"25\":1}}],[\"armv1\",{\"1\":{\"25\":1}}],[\"arm\",{\"0\":{\"27\":1},\"1\":{\"11\":1,\"22\":1,\"24\":2,\"25\":6,\"26\":1,\"27\":5,\"30\":5,\"33\":1,\"34\":1,\"235\":2}}],[\"arrow\",{\"1\":{\"103\":2}}],[\"arrival\",{\"1\":{\"35\":2}}],[\"arr\",{\"1\":{\"10\":1}}],[\"arranging\",{\"1\":{\"231\":1}}],[\"arrange\",{\"1\":{\"9\":3,\"232\":1}}],[\"arrayof\",{\"1\":{\"77\":1}}],[\"arrays\",{\"1\":{\"5\":2,\"15\":2,\"21\":1,\"30\":1,\"220\":1}}],[\"array\",{\"1\":{\"5\":2,\"8\":1,\"9\":1,\"10\":2,\"15\":1,\"31\":2,\"32\":1,\"33\":1,\"77\":2,\"79\":1,\"124\":1,\"151\":1,\"153\":3,\"162\":1,\"175\":6,\"181\":1,\"187\":3,\"190\":3,\"199\":2,\"213\":1,\"223\":1,\"228\":1,\"235\":5}}],[\"arbitrary\",{\"1\":{\"10\":1,\"22\":2,\"162\":1,\"191\":1,\"197\":1,\"223\":1,\"224\":1}}],[\"arithmetic\",{\"1\":{\"9\":1,\"14\":1,\"26\":3,\"102\":1,\"168\":1,\"177\":1}}],[\"arising\",{\"1\":{\"9\":1}}],[\"aria\",{\"1\":{\"7\":2}}],[\"arabic\",{\"1\":{\"7\":1}}],[\"around\",{\"1\":{\"5\":2,\"21\":3,\"32\":2,\"40\":1,\"59\":1,\"87\":1,\"154\":1}}],[\"areas\",{\"1\":{\"16\":1,\"21\":1}}],[\"area\",{\"1\":{\"11\":2,\"21\":6,\"24\":1,\"194\":1}}],[\"aren\",{\"1\":{\"5\":1,\"185\":1}}],[\"are\",{\"1\":{\"5\":2,\"8\":3,\"9\":1,\"11\":1,\"21\":2,\"22\":1,\"33\":1,\"35\":1,\"41\":2,\"45\":1,\"46\":1,\"51\":1,\"52\":1,\"53\":4,\"56\":1,\"57\":1,\"58\":8,\"61\":1,\"66\":1,\"68\":5,\"70\":1,\"72\":1,\"74\":1,\"75\":2,\"76\":1,\"79\":2,\"83\":1,\"85\":4,\"87\":2,\"88\":1,\"89\":2,\"90\":2,\"92\":1,\"93\":1,\"94\":5,\"95\":1,\"96\":2,\"97\":7,\"98\":3,\"99\":2,\"102\":2,\"103\":5,\"104\":2,\"106\":2,\"107\":3,\"108\":2,\"109\":3,\"110\":2,\"116\":3,\"123\":1,\"124\":6,\"129\":1,\"134\":2,\"135\":1,\"141\":2,\"147\":15,\"160\":2,\"165\":1,\"167\":3,\"169\":1,\"170\":2,\"174\":4,\"176\":1,\"177\":2,\"179\":2,\"183\":1,\"184\":1,\"185\":4,\"186\":5,\"189\":2,\"190\":4,\"191\":1,\"192\":3,\"200\":1,\"201\":1,\"204\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":3,\"210\":4,\"213\":1,\"216\":1,\"218\":2,\"225\":2,\"226\":1,\"228\":7,\"229\":7,\"230\":2,\"233\":3,\"234\":5,\"235\":6,\"237\":3,\"239\":2,\"243\":2,\"245\":1,\"248\":4,\"249\":3,\"250\":1,\"252\":1}}],[\"adhering\",{\"1\":{\"208\":1}}],[\"adjacent\",{\"1\":{\"168\":5,\"169\":1,\"171\":13}}],[\"adjust\",{\"1\":{\"14\":1,\"147\":1,\"229\":1,\"237\":2}}],[\"adleman\",{\"1\":{\"22\":1}}],[\"ad\",{\"1\":{\"21\":1,\"24\":1,\"147\":2}}],[\"adsl\",{\"1\":{\"21\":3}}],[\"advantage\",{\"1\":{\"172\":1,\"238\":1}}],[\"advancing\",{\"1\":{\"63\":1,\"110\":1}}],[\"advancelexer\",{\"1\":{\"63\":2,\"66\":4,\"110\":4}}],[\"advances\",{\"1\":{\"53\":1,\"110\":2}}],[\"advance\",{\"1\":{\"35\":1,\"51\":2,\"53\":3,\"66\":1,\"87\":1,\"106\":1}}],[\"advanced\",{\"1\":{\"9\":1,\"11\":4,\"13\":2,\"16\":1,\"21\":2,\"22\":1,\"25\":2,\"27\":1,\"28\":3,\"30\":4,\"31\":1,\"33\":1,\"34\":2,\"36\":1,\"75\":1,\"96\":1,\"147\":2,\"234\":1,\"247\":1}}],[\"advocates\",{\"1\":{\"36\":1}}],[\"advisories\",{\"1\":{\"22\":1}}],[\"advertises\",{\"1\":{\"21\":1}}],[\"advertisement\",{\"1\":{\"21\":1}}],[\"advertisements\",{\"1\":{\"21\":1}}],[\"administer\",{\"1\":{\"22\":1}}],[\"administrators\",{\"1\":{\"21\":1}}],[\"administrative\",{\"1\":{\"8\":1,\"21\":1}}],[\"admin\",{\"1\":{\"11\":2,\"22\":1}}],[\"adb\",{\"1\":{\"11\":1}}],[\"adelson\",{\"1\":{\"9\":1}}],[\"adts\",{\"1\":{\"9\":1}}],[\"adt\",{\"1\":{\"9\":3}}],[\"adopting\",{\"1\":{\"68\":1}}],[\"adoption\",{\"1\":{\"6\":1,\"14\":1,\"21\":1,\"30\":1,\"37\":1}}],[\"adopted\",{\"1\":{\"17\":1,\"21\":1,\"25\":1,\"36\":1}}],[\"adodb\",{\"1\":{\"17\":1}}],[\"ado\",{\"1\":{\"8\":1,\"17\":6}}],[\"adapting\",{\"1\":{\"52\":1}}],[\"adaptive\",{\"1\":{\"32\":1}}],[\"adapter\",{\"1\":{\"30\":2,\"32\":4,\"52\":2,\"252\":1}}],[\"adapters\",{\"1\":{\"4\":1,\"31\":1,\"33\":1}}],[\"adapt\",{\"1\":{\"6\":1}}],[\"addlast\",{\"1\":{\"239\":2}}],[\"addtask\",{\"1\":{\"239\":1,\"243\":2}}],[\"addend\",{\"1\":{\"228\":4,\"230\":3}}],[\"added\",{\"1\":{\"43\":3,\"62\":1,\"66\":1,\"90\":1,\"106\":1,\"124\":1,\"181\":1,\"197\":1}}],[\"addralign\",{\"1\":{\"235\":1}}],[\"addrsig\",{\"1\":{\"147\":1}}],[\"addr\",{\"1\":{\"124\":2,\"151\":1,\"152\":1,\"153\":1,\"154\":4,\"156\":2,\"157\":1,\"159\":7,\"160\":4,\"162\":1,\"187\":1,\"190\":1,\"197\":8,\"202\":5,\"213\":1,\"220\":1,\"246\":1,\"248\":1}}],[\"addressed\",{\"1\":{\"21\":1,\"30\":1,\"31\":1}}],[\"addresses\",{\"1\":{\"7\":1,\"11\":1,\"21\":4,\"33\":1,\"34\":1,\"172\":2,\"173\":3,\"174\":2,\"176\":2,\"177\":3,\"179\":2,\"218\":1,\"223\":1,\"224\":1,\"237\":1}}],[\"addressing\",{\"1\":{\"21\":6,\"25\":1,\"31\":4,\"36\":1,\"225\":3}}],[\"address\",{\"0\":{\"173\":1,\"218\":1,\"219\":1},\"1\":{\"7\":1,\"9\":3,\"11\":6,\"21\":7,\"25\":1,\"26\":2,\"30\":1,\"33\":1,\"36\":1,\"88\":1,\"104\":1,\"116\":4,\"147\":17,\"148\":1,\"150\":2,\"156\":2,\"159\":1,\"161\":1,\"162\":1,\"164\":1,\"165\":1,\"166\":1,\"168\":9,\"169\":2,\"170\":1,\"171\":1,\"173\":7,\"174\":12,\"176\":10,\"177\":8,\"178\":3,\"179\":6,\"180\":4,\"181\":4,\"182\":6,\"183\":1,\"184\":1,\"185\":10,\"187\":3,\"188\":2,\"189\":2,\"193\":8,\"194\":1,\"195\":2,\"196\":1,\"197\":11,\"198\":2,\"199\":4,\"200\":1,\"201\":1,\"205\":5,\"209\":1,\"210\":2,\"211\":2,\"212\":1,\"213\":1,\"214\":4,\"217\":3,\"218\":14,\"219\":1,\"220\":2,\"223\":6,\"224\":3,\"225\":5,\"226\":3,\"227\":4,\"228\":8,\"229\":1,\"230\":8,\"231\":5,\"234\":2,\"235\":5,\"237\":5,\"248\":18,\"249\":1,\"252\":1}}],[\"addition\",{\"1\":{\"65\":1,\"69\":1,\"90\":2,\"102\":1,\"116\":1,\"150\":1,\"177\":1,\"226\":1,\"237\":1}}],[\"additional\",{\"1\":{\"10\":1,\"32\":1,\"33\":1,\"34\":1,\"41\":1,\"78\":1,\"80\":1,\"176\":1}}],[\"additive\",{\"1\":{\"32\":1}}],[\"adding\",{\"1\":{\"11\":1,\"61\":1,\"89\":2,\"102\":1,\"105\":1,\"106\":2,\"131\":1,\"139\":1,\"170\":1,\"218\":1,\"228\":4,\"237\":1,\"243\":3,\"246\":1}}],[\"adds\",{\"1\":{\"4\":1,\"7\":1,\"9\":1,\"13\":1,\"24\":1,\"25\":1,\"35\":2,\"99\":1,\"169\":1,\"177\":1}}],[\"add\",{\"1\":{\"4\":1,\"5\":1,\"7\":3,\"15\":1,\"23\":1,\"25\":1,\"26\":1,\"28\":1,\"35\":1,\"43\":1,\"47\":1,\"53\":1,\"54\":1,\"55\":1,\"66\":1,\"72\":1,\"77\":1,\"79\":1,\"81\":1,\"82\":1,\"84\":1,\"87\":1,\"89\":4,\"91\":2,\"95\":1,\"96\":1,\"97\":2,\"99\":1,\"100\":1,\"101\":3,\"106\":1,\"107\":1,\"108\":2,\"110\":1,\"121\":1,\"135\":1,\"139\":1,\"143\":2,\"146\":1,\"147\":5,\"148\":1,\"151\":1,\"162\":3,\"168\":1,\"169\":3,\"177\":4,\"179\":2,\"180\":6,\"182\":1,\"183\":2,\"188\":1,\"191\":1,\"196\":1,\"197\":2,\"202\":2,\"209\":2,\"215\":1,\"217\":1,\"218\":6,\"219\":1,\"220\":2,\"223\":2,\"229\":1,\"230\":1,\"235\":4,\"237\":2,\"239\":5,\"241\":3,\"242\":1,\"243\":3,\"245\":2,\"246\":1,\"248\":1,\"249\":1}}],[\"apostrophe\",{\"1\":{\"99\":1}}],[\"apb\",{\"1\":{\"30\":2}}],[\"aps\",{\"1\":{\"26\":4}}],[\"apex\",{\"1\":{\"21\":1}}],[\"apm\",{\"1\":{\"20\":1,\"34\":2}}],[\"apdex\",{\"1\":{\"20\":2}}],[\"ap\",{\"1\":{\"17\":1,\"22\":1,\"26\":1}}],[\"apng\",{\"1\":{\"13\":1}}],[\"apfs\",{\"1\":{\"11\":1}}],[\"apk\",{\"1\":{\"11\":2,\"16\":1}}],[\"apl\",{\"1\":{\"8\":2}}],[\"apache\",{\"1\":{\"7\":1,\"17\":1,\"36\":3}}],[\"apicenabled\",{\"1\":{\"249\":2}}],[\"apicvmregion\",{\"1\":{\"248\":3}}],[\"apicphysaddr\",{\"1\":{\"248\":3}}],[\"apicbasemsr\",{\"1\":{\"248\":2}}],[\"apicbaseaddress\",{\"1\":{\"248\":4}}],[\"apics\",{\"1\":{\"28\":1,\"34\":1}}],[\"apic\",{\"0\":{\"248\":1,\"249\":1},\"1\":{\"11\":1,\"27\":1,\"28\":3,\"34\":1,\"247\":10,\"248\":23,\"249\":16}}],[\"apis\",{\"1\":{\"7\":5,\"9\":1,\"10\":1,\"11\":4,\"14\":1,\"15\":1,\"17\":1,\"18\":1,\"21\":1}}],[\"api\",{\"1\":{\"4\":2,\"5\":1,\"6\":2,\"7\":2,\"9\":4,\"10\":2,\"11\":5,\"15\":1,\"17\":3,\"20\":1,\"21\":1,\"22\":3,\"24\":1,\"35\":1,\"57\":1,\"59\":1,\"137\":1}}],[\"apparently\",{\"1\":{\"229\":1}}],[\"appear\",{\"1\":{\"94\":1,\"97\":6,\"107\":1,\"110\":2}}],[\"appears\",{\"1\":{\"80\":1}}],[\"appended\",{\"1\":{\"144\":1}}],[\"append\",{\"1\":{\"4\":1,\"15\":1}}],[\"appreciation\",{\"1\":{\"35\":1}}],[\"appropriate\",{\"1\":{\"57\":1,\"58\":1,\"59\":1,\"64\":1,\"69\":1,\"174\":1,\"177\":2,\"191\":2,\"212\":1}}],[\"approved\",{\"1\":{\"36\":1}}],[\"approval\",{\"1\":{\"35\":1}}],[\"approximation\",{\"1\":{\"18\":1}}],[\"approximate\",{\"1\":{\"17\":1}}],[\"approach\",{\"1\":{\"6\":2,\"25\":1,\"35\":1,\"63\":1,\"102\":1,\"105\":1,\"106\":1,\"110\":2}}],[\"applyrelocations\",{\"1\":{\"230\":6,\"237\":2}}],[\"apply\",{\"1\":{\"23\":2,\"104\":1,\"230\":3,\"232\":1,\"235\":1,\"237\":2}}],[\"applying\",{\"0\":{\"230\":1},\"1\":{\"6\":1,\"230\":3,\"231\":1,\"234\":1,\"235\":1,\"237\":1,\"243\":2}}],[\"appletalk\",{\"1\":{\"21\":1}}],[\"apple\",{\"1\":{\"5\":1,\"11\":2,\"13\":1,\"25\":2,\"33\":2}}],[\"applied\",{\"1\":{\"228\":1,\"230\":1,\"233\":1}}],[\"applies\",{\"1\":{\"4\":1,\"225\":1,\"230\":1,\"236\":1}}],[\"appliances\",{\"1\":{\"24\":1}}],[\"appliance\",{\"1\":{\"22\":1}}],[\"application\",{\"1\":{\"4\":2,\"5\":2,\"6\":1,\"7\":4,\"8\":1,\"9\":2,\"11\":3,\"13\":1,\"14\":1,\"15\":1,\"20\":2,\"21\":2,\"25\":1,\"26\":2,\"36\":3,\"123\":6,\"124\":5,\"131\":1,\"133\":3,\"141\":1,\"143\":1,\"146\":1,\"186\":1,\"208\":1}}],[\"applications\",{\"1\":{\"4\":8,\"7\":5,\"8\":6,\"9\":3,\"10\":1,\"11\":2,\"13\":3,\"17\":3,\"21\":3,\"22\":1,\"133\":1,\"146\":1}}],[\"apps\",{\"1\":{\"4\":5,\"5\":1,\"6\":1,\"7\":1,\"9\":6,\"11\":5,\"13\":1,\"16\":1,\"17\":2,\"20\":1,\"21\":1,\"22\":3,\"24\":1,\"25\":3,\"27\":1,\"37\":1}}],[\"app\",{\"1\":{\"4\":1,\"7\":5,\"9\":4,\"11\":2,\"16\":1,\"22\":6,\"24\":1}}],[\"acquiring\",{\"1\":{\"151\":1,\"152\":1}}],[\"acquisition\",{\"1\":{\"9\":1}}],[\"achieved\",{\"1\":{\"116\":1,\"225\":1}}],[\"acm\",{\"1\":{\"36\":3}}],[\"acknowledgment\",{\"1\":{\"35\":1}}],[\"acknowledges\",{\"1\":{\"35\":1}}],[\"acknowledge\",{\"1\":{\"11\":1}}],[\"ac\",{\"1\":{\"33\":1,\"192\":1}}],[\"acl\",{\"1\":{\"22\":1}}],[\"acls\",{\"1\":{\"11\":2,\"22\":1}}],[\"academic\",{\"1\":{\"21\":4}}],[\"acid\",{\"1\":{\"17\":2}}],[\"acorn\",{\"1\":{\"11\":2,\"25\":1}}],[\"accumulate\",{\"1\":{\"216\":1}}],[\"accuracy\",{\"1\":{\"33\":1}}],[\"accordingly\",{\"1\":{\"88\":1,\"170\":1}}],[\"according\",{\"1\":{\"52\":1,\"80\":1,\"89\":1,\"174\":1}}],[\"accountability\",{\"1\":{\"23\":1}}],[\"accounts\",{\"1\":{\"11\":1,\"22\":1}}],[\"account\",{\"1\":{\"11\":1,\"75\":1,\"85\":1,\"88\":1,\"159\":1,\"197\":1}}],[\"accredits\",{\"1\":{\"36\":1}}],[\"accidental\",{\"1\":{\"21\":1}}],[\"accelerate\",{\"1\":{\"33\":1}}],[\"accelerated\",{\"1\":{\"24\":1,\"28\":1,\"32\":1}}],[\"accelerating\",{\"1\":{\"27\":1}}],[\"acceleration\",{\"1\":{\"9\":1,\"24\":2}}],[\"accelerators\",{\"1\":{\"10\":1,\"20\":1,\"25\":1,\"29\":1,\"30\":2}}],[\"accesses\",{\"1\":{\"29\":1,\"177\":1,\"184\":1}}],[\"accessed\",{\"1\":{\"7\":1,\"9\":1,\"26\":1,\"83\":1,\"116\":1,\"175\":4,\"185\":3,\"187\":2,\"194\":1}}],[\"access\",{\"1\":{\"9\":2,\"11\":7,\"16\":1,\"17\":7,\"21\":18,\"22\":12,\"23\":7,\"24\":1,\"25\":2,\"28\":1,\"29\":6,\"31\":2,\"33\":1,\"52\":1,\"55\":1,\"75\":1,\"82\":1,\"85\":2,\"103\":1,\"116\":3,\"139\":1,\"151\":1,\"175\":1,\"176\":1,\"177\":5,\"182\":2,\"184\":3,\"185\":3,\"186\":8,\"188\":1,\"192\":1,\"195\":3,\"205\":5,\"207\":1,\"223\":1,\"237\":2,\"239\":2,\"248\":1,\"249\":1}}],[\"accessing\",{\"0\":{\"176\":1},\"1\":{\"9\":1,\"17\":2,\"21\":2,\"22\":1,\"150\":1,\"176\":1,\"186\":1,\"192\":1}}],[\"accessible\",{\"1\":{\"7\":3,\"11\":1,\"21\":1,\"24\":1,\"75\":1,\"147\":1,\"177\":1,\"181\":1,\"185\":2}}],[\"accessibility\",{\"1\":{\"6\":1,\"7\":2,\"8\":1}}],[\"accepted\",{\"1\":{\"35\":1}}],[\"accepting\",{\"1\":{\"21\":1}}],[\"acceptable\",{\"1\":{\"19\":1,\"35\":1}}],[\"acceptance\",{\"1\":{\"6\":2}}],[\"accept\",{\"1\":{\"5\":1,\"31\":1,\"37\":1}}],[\"acpi\",{\"1\":{\"33\":1,\"34\":18,\"135\":1}}],[\"acp\",{\"1\":{\"11\":2}}],[\"acyclic\",{\"1\":{\"9\":1}}],[\"actual\",{\"1\":{\"52\":1,\"58\":1,\"72\":1,\"75\":1,\"89\":1,\"107\":1,\"122\":1,\"159\":1,\"209\":1,\"212\":1,\"227\":2,\"228\":1,\"233\":1,\"239\":1,\"248\":1}}],[\"actually\",{\"1\":{\"48\":1,\"58\":1,\"79\":1,\"89\":1,\"124\":1,\"163\":1,\"172\":1}}],[\"act\",{\"1\":{\"9\":3,\"21\":2,\"23\":3,\"88\":1}}],[\"action\",{\"1\":{\"30\":1,\"35\":1,\"53\":2,\"54\":1,\"69\":3,\"71\":2}}],[\"actions\",{\"1\":{\"5\":1,\"22\":2,\"41\":1}}],[\"activate\",{\"1\":{\"200\":1}}],[\"activation\",{\"1\":{\"4\":2}}],[\"activity\",{\"1\":{\"22\":1}}],[\"activemq\",{\"1\":{\"21\":1}}],[\"active\",{\"1\":{\"7\":2,\"21\":1,\"24\":1,\"176\":1,\"177\":3,\"187\":1,\"221\":1}}],[\"activex\",{\"1\":{\"4\":1,\"7\":1,\"17\":2}}],[\"across\",{\"1\":{\"6\":1,\"9\":2,\"10\":5,\"11\":3,\"13\":2,\"17\":3,\"20\":2,\"21\":10,\"24\":2,\"25\":1,\"26\":2,\"32\":2,\"33\":1,\"35\":1,\"36\":1,\"134\":1,\"208\":1}}],[\"acronym\",{\"1\":{\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":3,\"36\":1,\"37\":1}}],[\"acronyms\",{\"0\":{\"3\":1},\"1\":{\"2\":1,\"3\":1}}],[\"ancestor\",{\"1\":{\"77\":4,\"78\":4}}],[\"ancestors\",{\"1\":{\"77\":5}}],[\"answer\",{\"1\":{\"35\":3,\"74\":1,\"121\":1}}],[\"ansi\",{\"1\":{\"14\":1,\"21\":2,\"36\":2,\"124\":2,\"125\":1}}],[\"anxiety\",{\"1\":{\"35\":1}}],[\"antifuse\",{\"1\":{\"29\":1}}],[\"antlr\",{\"1\":{\"10\":2}}],[\"aname\",{\"1\":{\"21\":1}}],[\"analogous\",{\"1\":{\"11\":1,\"21\":1}}],[\"analytical\",{\"1\":{\"17\":1}}],[\"analytics\",{\"1\":{\"15\":1,\"17\":3,\"36\":1}}],[\"analyzing\",{\"1\":{\"17\":1}}],[\"analyze\",{\"1\":{\"17\":3,\"22\":1}}],[\"analyzers\",{\"1\":{\"9\":1,\"53\":1}}],[\"analyses\",{\"1\":{\"10\":2}}],[\"analysis\",{\"1\":{\"10\":4,\"19\":1,\"31\":1}}],[\"annotating\",{\"1\":{\"164\":1,\"239\":1}}],[\"annotations\",{\"1\":{\"96\":1}}],[\"annotation\",{\"1\":{\"61\":1,\"96\":1,\"106\":1}}],[\"annotate\",{\"1\":{\"164\":1}}],[\"announced\",{\"1\":{\"35\":1}}],[\"announcements\",{\"1\":{\"21\":1}}],[\"annoying\",{\"1\":{\"35\":1,\"88\":1}}],[\"ann\",{\"1\":{\"18\":1}}],[\"animated\",{\"1\":{\"13\":1}}],[\"animations\",{\"1\":{\"13\":3}}],[\"angular\",{\"1\":{\"10\":1,\"22\":1}}],[\"anyway\",{\"1\":{\"94\":1,\"160\":1,\"164\":1}}],[\"anywhere\",{\"1\":{\"40\":1,\"89\":1,\"94\":1,\"96\":1,\"97\":2,\"179\":1}}],[\"anything\",{\"1\":{\"45\":1,\"53\":1,\"160\":1,\"161\":1,\"194\":1}}],[\"anyone\",{\"1\":{\"35\":1}}],[\"anymore\",{\"1\":{\"35\":1,\"85\":1,\"147\":1,\"161\":1,\"182\":1,\"223\":1}}],[\"any\",{\"1\":{\"9\":1,\"26\":1,\"41\":1,\"45\":1,\"46\":1,\"53\":3,\"57\":1,\"62\":1,\"66\":1,\"72\":1,\"78\":1,\"79\":2,\"80\":1,\"87\":1,\"89\":3,\"93\":1,\"95\":1,\"96\":3,\"102\":1,\"103\":1,\"104\":2,\"105\":1,\"106\":1,\"108\":1,\"110\":11,\"116\":1,\"124\":19,\"131\":1,\"133\":1,\"135\":1,\"136\":1,\"141\":1,\"143\":1,\"144\":1,\"146\":1,\"147\":1,\"148\":1,\"156\":1,\"160\":2,\"161\":1,\"170\":1,\"171\":5,\"176\":1,\"192\":5,\"196\":1,\"197\":2,\"207\":1,\"208\":1,\"210\":1,\"214\":1,\"225\":2,\"226\":1,\"230\":2,\"231\":2,\"237\":1,\"245\":1}}],[\"another\",{\"1\":{\"9\":1,\"10\":1,\"21\":1,\"33\":1,\"35\":1,\"50\":1,\"74\":1,\"89\":1,\"92\":2,\"94\":3,\"104\":1,\"107\":1,\"124\":1,\"134\":1,\"171\":1,\"183\":1,\"190\":1,\"193\":1,\"200\":1,\"205\":1,\"209\":1,\"215\":1,\"227\":1,\"231\":1,\"243\":1,\"247\":1}}],[\"an\",{\"0\":{\"114\":1,\"234\":1},\"1\":{\"4\":2,\"5\":2,\"6\":4,\"7\":1,\"8\":4,\"9\":6,\"10\":3,\"11\":11,\"12\":1,\"13\":1,\"15\":1,\"17\":2,\"18\":3,\"21\":15,\"22\":3,\"23\":2,\"24\":1,\"25\":1,\"26\":1,\"30\":9,\"32\":1,\"34\":3,\"35\":2,\"43\":1,\"44\":1,\"45\":1,\"47\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"57\":2,\"58\":5,\"59\":4,\"60\":2,\"61\":3,\"63\":2,\"64\":3,\"66\":4,\"68\":2,\"69\":3,\"70\":4,\"72\":1,\"73\":1,\"74\":3,\"77\":1,\"78\":3,\"80\":1,\"83\":1,\"85\":1,\"87\":5,\"88\":4,\"89\":8,\"90\":3,\"92\":3,\"96\":6,\"97\":3,\"98\":1,\"99\":4,\"101\":1,\"103\":1,\"104\":6,\"105\":6,\"106\":5,\"107\":2,\"110\":11,\"115\":1,\"118\":1,\"121\":1,\"122\":2,\"123\":1,\"124\":4,\"130\":1,\"133\":1,\"134\":1,\"135\":1,\"141\":3,\"142\":1,\"143\":1,\"146\":2,\"147\":5,\"148\":1,\"151\":1,\"160\":2,\"166\":3,\"168\":1,\"169\":1,\"170\":1,\"171\":2,\"175\":1,\"177\":1,\"181\":2,\"185\":1,\"186\":4,\"187\":2,\"188\":2,\"189\":3,\"190\":11,\"191\":6,\"192\":5,\"193\":1,\"194\":7,\"195\":1,\"197\":2,\"199\":2,\"201\":2,\"202\":1,\"205\":1,\"206\":1,\"214\":1,\"217\":1,\"218\":2,\"220\":1,\"223\":1,\"228\":3,\"230\":1,\"232\":2,\"234\":2,\"235\":9,\"237\":1,\"239\":1,\"240\":1,\"245\":1,\"249\":3,\"250\":1}}],[\"anded\",{\"1\":{\"209\":1}}],[\"andes\",{\"1\":{\"25\":1}}],[\"androidmanifest\",{\"1\":{\"11\":1}}],[\"android\",{\"1\":{\"11\":2,\"25\":1}}],[\"and\",{\"0\":{\"47\":1,\"61\":1,\"91\":1,\"182\":1,\"225\":1},\"1\":{\"0\":1,\"1\":1,\"2\":2,\"3\":2,\"4\":24,\"5\":14,\"6\":40,\"7\":19,\"8\":21,\"9\":55,\"10\":34,\"11\":124,\"12\":8,\"13\":20,\"14\":6,\"15\":24,\"16\":19,\"17\":33,\"18\":10,\"20\":1,\"21\":108,\"22\":34,\"23\":6,\"24\":17,\"25\":35,\"26\":6,\"27\":1,\"28\":3,\"29\":21,\"30\":35,\"31\":25,\"32\":10,\"33\":18,\"34\":21,\"35\":4,\"36\":46,\"37\":5,\"40\":5,\"41\":8,\"42\":1,\"43\":4,\"44\":1,\"45\":3,\"46\":3,\"47\":3,\"48\":1,\"49\":2,\"51\":4,\"52\":3,\"53\":11,\"54\":2,\"55\":4,\"56\":2,\"57\":4,\"58\":7,\"59\":9,\"60\":2,\"61\":7,\"62\":1,\"63\":6,\"64\":3,\"65\":2,\"66\":9,\"67\":2,\"68\":3,\"69\":11,\"70\":1,\"71\":3,\"72\":5,\"73\":1,\"74\":10,\"75\":10,\"76\":1,\"77\":6,\"78\":6,\"79\":2,\"80\":3,\"81\":1,\"82\":13,\"83\":7,\"84\":5,\"85\":7,\"86\":7,\"87\":15,\"88\":5,\"89\":15,\"90\":1,\"91\":5,\"92\":8,\"93\":1,\"94\":6,\"95\":3,\"96\":10,\"97\":4,\"98\":2,\"99\":5,\"100\":2,\"102\":6,\"103\":3,\"104\":5,\"105\":8,\"106\":6,\"107\":3,\"108\":4,\"109\":1,\"110\":12,\"112\":2,\"113\":1,\"115\":3,\"116\":3,\"117\":1,\"119\":1,\"121\":2,\"122\":4,\"123\":1,\"124\":14,\"129\":2,\"130\":1,\"131\":3,\"133\":1,\"134\":5,\"135\":8,\"136\":1,\"138\":2,\"139\":4,\"140\":7,\"141\":11,\"142\":1,\"143\":6,\"144\":1,\"145\":2,\"146\":5,\"147\":23,\"148\":2,\"149\":1,\"150\":3,\"151\":4,\"152\":2,\"153\":1,\"154\":2,\"155\":2,\"156\":2,\"158\":1,\"159\":4,\"160\":3,\"161\":5,\"162\":6,\"163\":4,\"164\":11,\"165\":2,\"166\":5,\"167\":4,\"168\":14,\"169\":7,\"170\":9,\"171\":16,\"173\":2,\"174\":5,\"175\":2,\"176\":1,\"177\":19,\"178\":1,\"179\":7,\"180\":1,\"181\":4,\"182\":2,\"183\":4,\"184\":3,\"185\":8,\"186\":13,\"187\":10,\"188\":10,\"190\":6,\"191\":2,\"192\":16,\"193\":5,\"194\":5,\"195\":10,\"196\":5,\"197\":9,\"198\":5,\"199\":3,\"200\":2,\"201\":4,\"202\":3,\"204\":3,\"205\":2,\"207\":1,\"208\":10,\"209\":8,\"210\":12,\"211\":10,\"212\":9,\"213\":3,\"214\":2,\"215\":6,\"216\":1,\"217\":3,\"218\":8,\"219\":1,\"220\":6,\"221\":1,\"222\":3,\"223\":3,\"224\":3,\"225\":5,\"226\":5,\"227\":7,\"228\":7,\"229\":10,\"230\":8,\"231\":5,\"232\":6,\"233\":5,\"234\":3,\"235\":7,\"237\":7,\"238\":3,\"239\":9,\"240\":9,\"241\":1,\"243\":6,\"244\":2,\"245\":5,\"246\":2,\"247\":5,\"248\":11,\"249\":6,\"250\":3,\"251\":1}}],[\"aside\",{\"1\":{\"96\":1}}],[\"asics\",{\"1\":{\"25\":1,\"33\":1}}],[\"asic\",{\"1\":{\"25\":1}}],[\"asked\",{\"1\":{\"196\":1,\"228\":1}}],[\"ask\",{\"1\":{\"69\":1,\"84\":1,\"135\":1,\"207\":1,\"213\":1}}],[\"asf\",{\"1\":{\"36\":2}}],[\"asap\",{\"1\":{\"35\":2}}],[\"asymmetric\",{\"1\":{\"21\":1}}],[\"asynchronously\",{\"1\":{\"116\":1}}],[\"asynchronous\",{\"1\":{\"4\":2,\"7\":2,\"9\":1,\"17\":1,\"21\":3,\"29\":3,\"30\":3}}],[\"async\",{\"1\":{\"4\":1,\"5\":1,\"7\":2,\"9\":1,\"21\":2}}],[\"as15169\",{\"1\":{\"21\":1}}],[\"asn\",{\"1\":{\"14\":2,\"21\":4}}],[\"ascii\",{\"1\":{\"14\":4}}],[\"aslr\",{\"1\":{\"11\":3}}],[\"astwrapperpsielement\",{\"1\":{\"59\":1,\"61\":2,\"74\":4,\"75\":1,\"77\":1,\"79\":1,\"82\":1,\"83\":1}}],[\"astnode\",{\"1\":{\"58\":3,\"59\":1,\"61\":2,\"63\":1,\"64\":1,\"66\":1,\"74\":1,\"75\":2,\"77\":1,\"79\":1,\"82\":2,\"83\":1}}],[\"astbuilder\",{\"1\":{\"57\":1}}],[\"asts\",{\"1\":{\"9\":1}}],[\"ast\",{\"0\":{\"58\":1},\"1\":{\"9\":1,\"10\":2,\"50\":1,\"56\":1,\"57\":8,\"58\":11,\"59\":6,\"60\":1,\"61\":1,\"63\":2,\"64\":2,\"68\":2,\"69\":1,\"70\":1,\"72\":3,\"73\":1}}],[\"asmnostackframe\",{\"1\":{\"130\":2,\"131\":1,\"188\":1,\"203\":1,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"223\":1}}],[\"asm\",{\"1\":{\"9\":2,\"130\":1,\"131\":1,\"144\":1,\"164\":1,\"177\":2,\"181\":1,\"188\":2,\"191\":2,\"192\":2,\"193\":1,\"196\":1,\"200\":1,\"203\":1,\"205\":1,\"206\":1,\"209\":3,\"210\":2,\"211\":1,\"212\":1,\"213\":1,\"215\":2,\"221\":1,\"223\":1,\"240\":5,\"241\":1,\"245\":3}}],[\"asgi\",{\"1\":{\"7\":1}}],[\"ass\",{\"1\":{\"35\":1}}],[\"associative\",{\"1\":{\"109\":7,\"110\":1}}],[\"associativity\",{\"0\":{\"109\":1}}],[\"association\",{\"1\":{\"30\":1,\"32\":1,\"36\":3}}],[\"associate\",{\"1\":{\"45\":1,\"47\":1}}],[\"associated\",{\"1\":{\"18\":1,\"46\":2,\"58\":1,\"63\":1,\"83\":2,\"159\":1,\"248\":1}}],[\"associates\",{\"1\":{\"9\":1,\"11\":1}}],[\"assistance\",{\"1\":{\"35\":1}}],[\"assistant\",{\"1\":{\"33\":1}}],[\"assist\",{\"1\":{\"28\":1}}],[\"assisted\",{\"1\":{\"28\":1}}],[\"assign\",{\"1\":{\"191\":1,\"217\":1,\"239\":1}}],[\"assigning\",{\"1\":{\"106\":1}}],[\"assigns\",{\"1\":{\"21\":2}}],[\"assigned\",{\"1\":{\"10\":1,\"11\":1,\"36\":2}}],[\"assignment\",{\"1\":{\"10\":1,\"103\":3,\"104\":4}}],[\"assignments\",{\"1\":{\"10\":1}}],[\"assuming\",{\"1\":{\"124\":1,\"136\":1,\"166\":1,\"225\":1}}],[\"assumptions\",{\"1\":{\"235\":1,\"237\":1}}],[\"assumption\",{\"1\":{\"88\":1,\"229\":1,\"234\":1}}],[\"assumes\",{\"1\":{\"179\":2}}],[\"assume\",{\"1\":{\"9\":1,\"35\":1,\"76\":1,\"122\":1,\"181\":1,\"185\":1,\"237\":1}}],[\"assurance\",{\"1\":{\"6\":1}}],[\"asset\",{\"1\":{\"24\":1}}],[\"assets\",{\"1\":{\"6\":1,\"13\":1}}],[\"assemblers\",{\"1\":{\"9\":1,\"10\":1}}],[\"assembler\",{\"1\":{\"9\":4,\"21\":1,\"188\":1}}],[\"assemblies\",{\"1\":{\"9\":1}}],[\"assembly\",{\"1\":{\"9\":3,\"10\":1,\"115\":1,\"122\":1,\"130\":2,\"164\":1,\"181\":1,\"209\":1,\"212\":1,\"223\":1,\"239\":2,\"243\":1,\"244\":1,\"246\":1}}],[\"assertionerror\",{\"1\":{\"64\":1}}],[\"assertions\",{\"1\":{\"43\":1}}],[\"asserting\",{\"1\":{\"9\":1,\"35\":1,\"63\":1}}],[\"assert\",{\"1\":{\"9\":3,\"63\":2,\"140\":3,\"170\":1,\"171\":2}}],[\"aspect\",{\"1\":{\"32\":1}}],[\"asp\",{\"1\":{\"4\":1,\"7\":6,\"8\":1,\"17\":1}}],[\"as\",{\"1\":{\"4\":1,\"5\":2,\"6\":2,\"7\":1,\"8\":2,\"9\":5,\"10\":3,\"11\":4,\"13\":1,\"14\":2,\"15\":2,\"17\":3,\"21\":10,\"22\":4,\"24\":5,\"25\":4,\"26\":1,\"30\":4,\"32\":1,\"33\":1,\"35\":10,\"36\":1,\"40\":1,\"44\":3,\"45\":1,\"46\":1,\"47\":3,\"49\":4,\"52\":1,\"53\":2,\"54\":2,\"55\":1,\"57\":2,\"58\":4,\"59\":2,\"61\":2,\"63\":3,\"64\":1,\"65\":1,\"66\":3,\"67\":1,\"69\":3,\"71\":5,\"72\":2,\"74\":1,\"77\":3,\"78\":4,\"80\":1,\"82\":2,\"84\":2,\"85\":8,\"86\":2,\"87\":6,\"88\":6,\"89\":7,\"91\":1,\"92\":2,\"94\":1,\"95\":6,\"96\":8,\"97\":4,\"98\":2,\"100\":1,\"101\":3,\"102\":3,\"103\":1,\"104\":3,\"105\":4,\"106\":3,\"107\":4,\"109\":2,\"110\":3,\"116\":5,\"117\":1,\"122\":1,\"123\":1,\"124\":2,\"127\":1,\"129\":1,\"133\":1,\"135\":8,\"138\":1,\"139\":4,\"140\":2,\"141\":2,\"146\":2,\"147\":4,\"151\":3,\"162\":4,\"163\":1,\"166\":1,\"171\":1,\"174\":1,\"175\":1,\"177\":1,\"180\":1,\"182\":2,\"185\":4,\"186\":2,\"187\":2,\"188\":2,\"190\":2,\"191\":3,\"192\":3,\"194\":2,\"195\":3,\"196\":2,\"197\":4,\"198\":1,\"199\":1,\"200\":1,\"202\":1,\"203\":1,\"205\":2,\"209\":2,\"210\":3,\"211\":1,\"212\":2,\"214\":1,\"215\":1,\"225\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":2,\"233\":3,\"235\":1,\"237\":4,\"239\":1,\"240\":1,\"246\":2,\"247\":4,\"248\":3,\"249\":1}}],[\"abc\",{\"1\":{\"107\":4}}],[\"able\",{\"1\":{\"72\":1,\"74\":1,\"85\":1,\"88\":1,\"95\":1,\"116\":1,\"131\":1,\"134\":1,\"140\":1,\"144\":1,\"148\":1,\"166\":1,\"167\":1,\"194\":1,\"197\":1,\"210\":1,\"222\":4,\"223\":2,\"226\":1,\"229\":1,\"231\":1}}],[\"abort\",{\"1\":{\"192\":3}}],[\"above\",{\"1\":{\"58\":2,\"69\":1,\"72\":1,\"73\":1,\"77\":1,\"78\":1,\"80\":1,\"86\":1,\"87\":1,\"89\":1,\"97\":1,\"104\":3,\"110\":1,\"150\":1,\"151\":1,\"174\":1,\"179\":1,\"181\":1,\"187\":2,\"194\":1,\"227\":1,\"228\":3}}],[\"about\",{\"1\":{\"3\":1,\"10\":1,\"21\":1,\"32\":1,\"35\":2,\"39\":2,\"44\":1,\"48\":1,\"66\":1,\"85\":1,\"87\":1,\"96\":1,\"102\":2,\"106\":1,\"123\":1,\"124\":2,\"148\":4,\"150\":1,\"173\":1,\"176\":1,\"182\":1,\"185\":1,\"186\":1,\"190\":1,\"214\":1,\"216\":1,\"227\":2,\"233\":4,\"234\":1,\"235\":1,\"237\":1,\"240\":1,\"246\":1,\"249\":1}}],[\"abs\",{\"1\":{\"228\":34}}],[\"absence\",{\"1\":{\"99\":1}}],[\"absolute\",{\"1\":{\"24\":1,\"225\":2}}],[\"abstracted\",{\"1\":{\"246\":1}}],[\"abstract\",{\"1\":{\"9\":2,\"10\":1,\"11\":1,\"50\":1,\"51\":12,\"52\":1,\"57\":2,\"74\":1,\"75\":1,\"77\":1,\"79\":1,\"82\":1,\"83\":1}}],[\"abstractions\",{\"1\":{\"5\":1}}],[\"abstraction\",{\"0\":{\"218\":1},\"1\":{\"4\":1,\"9\":1,\"11\":3}}],[\"abiversion\",{\"1\":{\"235\":1}}],[\"ability\",{\"1\":{\"176\":1,\"195\":1,\"224\":1}}],[\"abis\",{\"1\":{\"164\":1}}],[\"abi\",{\"1\":{\"9\":1,\"10\":1,\"11\":3,\"25\":1,\"123\":1,\"147\":4,\"164\":7,\"208\":2,\"234\":2}}],[\"abac\",{\"1\":{\"22\":1}}],[\"aba\",{\"1\":{\"9\":1}}],[\"atx\",{\"1\":{\"33\":4}}],[\"atapi\",{\"1\":{\"31\":1}}],[\"ata\",{\"1\":{\"31\":4}}],[\"atari\",{\"1\":{\"11\":1}}],[\"atm\",{\"1\":{\"21\":2,\"35\":2}}],[\"atop\",{\"1\":{\"21\":1}}],[\"atomicity\",{\"1\":{\"17\":1}}],[\"atomic\",{\"1\":{\"9\":1}}],[\"attention\",{\"1\":{\"104\":1,\"193\":1}}],[\"attestation\",{\"1\":{\"33\":1}}],[\"attempt\",{\"1\":{\"11\":1,\"171\":4}}],[\"attaching\",{\"1\":{\"30\":2}}],[\"attach\",{\"1\":{\"30\":1}}],[\"attached\",{\"1\":{\"21\":1,\"22\":1,\"24\":1,\"31\":1}}],[\"attack\",{\"1\":{\"22\":1}}],[\"attacks\",{\"1\":{\"22\":1}}],[\"attribute\",{\"1\":{\"22\":2,\"109\":1,\"153\":1,\"159\":1,\"164\":1,\"191\":3,\"192\":2,\"193\":1,\"206\":1,\"249\":1}}],[\"attributes\",{\"1\":{\"12\":1,\"17\":1,\"22\":1,\"68\":4,\"70\":1,\"154\":1}}],[\"at\",{\"1\":{\"4\":1,\"9\":2,\"10\":2,\"11\":10,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":2,\"18\":1,\"20\":3,\"21\":6,\"22\":1,\"24\":1,\"25\":4,\"27\":3,\"29\":2,\"32\":2,\"33\":1,\"34\":2,\"35\":1,\"36\":1,\"43\":1,\"45\":1,\"55\":1,\"57\":1,\"63\":3,\"66\":1,\"70\":1,\"72\":2,\"75\":2,\"76\":1,\"77\":1,\"79\":1,\"80\":1,\"83\":1,\"84\":1,\"85\":2,\"86\":4,\"87\":6,\"88\":6,\"89\":21,\"94\":1,\"95\":2,\"96\":4,\"97\":5,\"106\":1,\"110\":6,\"124\":6,\"131\":1,\"135\":1,\"144\":2,\"147\":25,\"148\":1,\"150\":2,\"151\":1,\"156\":2,\"166\":1,\"168\":1,\"170\":4,\"171\":19,\"172\":1,\"173\":1,\"174\":8,\"176\":5,\"177\":2,\"178\":4,\"179\":5,\"181\":1,\"183\":2,\"188\":1,\"190\":1,\"191\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":2,\"197\":5,\"199\":2,\"200\":1,\"205\":1,\"212\":1,\"215\":1,\"221\":1,\"223\":4,\"224\":2,\"225\":5,\"226\":5,\"227\":5,\"228\":12,\"229\":7,\"230\":4,\"231\":5,\"237\":2,\"238\":1,\"239\":1,\"240\":1,\"246\":1,\"248\":5,\"249\":3,\"250\":2}}],[\"a\",{\"0\":{\"41\":1,\"70\":1,\"123\":1,\"148\":1,\"202\":1,\"220\":1,\"221\":1,\"226\":1},\"1\":{\"1\":3,\"2\":1,\"3\":1,\"4\":9,\"5\":15,\"6\":12,\"7\":21,\"8\":7,\"9\":33,\"10\":21,\"11\":54,\"12\":1,\"13\":6,\"14\":2,\"15\":11,\"16\":4,\"17\":14,\"18\":6,\"20\":4,\"21\":61,\"22\":8,\"23\":1,\"24\":11,\"25\":13,\"26\":1,\"28\":1,\"29\":4,\"30\":20,\"31\":6,\"32\":5,\"33\":14,\"34\":6,\"35\":26,\"36\":2,\"40\":5,\"41\":5,\"43\":3,\"44\":1,\"45\":2,\"46\":5,\"47\":3,\"49\":4,\"50\":2,\"51\":5,\"52\":7,\"53\":9,\"54\":1,\"55\":2,\"56\":1,\"57\":8,\"58\":15,\"59\":9,\"60\":1,\"61\":6,\"62\":4,\"63\":16,\"64\":3,\"65\":1,\"66\":12,\"67\":6,\"68\":10,\"69\":4,\"70\":5,\"71\":1,\"72\":9,\"73\":3,\"74\":9,\"75\":8,\"76\":2,\"77\":13,\"78\":3,\"79\":5,\"80\":2,\"81\":1,\"82\":17,\"83\":6,\"84\":4,\"85\":7,\"86\":4,\"87\":19,\"88\":4,\"89\":31,\"90\":3,\"92\":11,\"93\":1,\"94\":14,\"95\":18,\"96\":20,\"97\":19,\"98\":8,\"99\":9,\"101\":8,\"102\":13,\"103\":4,\"104\":6,\"105\":8,\"106\":13,\"107\":5,\"108\":1,\"109\":2,\"110\":11,\"112\":3,\"113\":1,\"115\":1,\"116\":5,\"117\":3,\"119\":1,\"121\":3,\"122\":6,\"123\":12,\"124\":22,\"125\":1,\"127\":1,\"128\":1,\"129\":2,\"130\":2,\"131\":2,\"132\":5,\"133\":5,\"134\":3,\"135\":19,\"136\":4,\"137\":2,\"138\":2,\"139\":15,\"140\":3,\"141\":13,\"142\":2,\"143\":5,\"144\":5,\"145\":2,\"146\":11,\"147\":27,\"148\":8,\"149\":1,\"150\":7,\"151\":3,\"153\":2,\"156\":2,\"159\":1,\"160\":2,\"161\":5,\"162\":9,\"163\":4,\"164\":5,\"166\":7,\"167\":6,\"168\":22,\"169\":5,\"170\":7,\"171\":11,\"172\":3,\"173\":4,\"174\":13,\"175\":3,\"176\":12,\"177\":18,\"179\":4,\"180\":5,\"181\":6,\"182\":5,\"183\":3,\"184\":2,\"185\":20,\"186\":22,\"187\":18,\"188\":9,\"189\":7,\"190\":19,\"191\":8,\"192\":10,\"193\":8,\"194\":9,\"195\":3,\"196\":8,\"197\":8,\"198\":2,\"199\":2,\"200\":3,\"201\":9,\"202\":5,\"203\":1,\"204\":4,\"205\":6,\"206\":3,\"207\":2,\"208\":3,\"209\":6,\"210\":2,\"211\":4,\"212\":4,\"213\":8,\"215\":5,\"216\":1,\"217\":8,\"218\":16,\"219\":1,\"220\":10,\"221\":1,\"222\":6,\"223\":9,\"224\":4,\"225\":11,\"226\":14,\"227\":7,\"228\":12,\"229\":6,\"230\":6,\"231\":3,\"232\":7,\"233\":2,\"234\":15,\"235\":6,\"237\":14,\"238\":7,\"239\":14,\"240\":4,\"241\":4,\"242\":2,\"243\":6,\"244\":1,\"245\":4,\"246\":2,\"247\":2,\"248\":13,\"249\":6,\"250\":2,\"251\":1}}],[\"ovmfx64\",{\"1\":{\"134\":1}}],[\"ovmf\",{\"0\":{\"134\":1},\"1\":{\"134\":19,\"135\":4,\"136\":2,\"143\":2,\"148\":2,\"196\":2}}],[\"overrun\",{\"1\":{\"192\":2}}],[\"overriding\",{\"1\":{\"108\":1}}],[\"override\",{\"1\":{\"47\":4,\"61\":3,\"63\":1,\"64\":8,\"66\":1,\"74\":3,\"75\":4,\"77\":2,\"78\":2,\"79\":2,\"82\":2,\"83\":5,\"95\":4,\"186\":1}}],[\"overwrite\",{\"1\":{\"146\":1}}],[\"overwhelmed\",{\"1\":{\"40\":1}}],[\"overhead\",{\"1\":{\"146\":1,\"240\":1}}],[\"overcome\",{\"1\":{\"123\":1}}],[\"overclocking\",{\"1\":{\"30\":1}}],[\"oversight\",{\"1\":{\"107\":1}}],[\"oversees\",{\"1\":{\"36\":2}}],[\"overview\",{\"0\":{\"57\":1}}],[\"overflows\",{\"1\":{\"22\":1}}],[\"overflow\",{\"1\":{\"9\":1,\"35\":1,\"105\":1,\"192\":2}}],[\"overlap\",{\"1\":{\"168\":1}}],[\"overlapswithprev\",{\"1\":{\"171\":2}}],[\"overlapswithcurr\",{\"1\":{\"171\":2}}],[\"overlaps\",{\"1\":{\"9\":1,\"168\":2,\"171\":2}}],[\"overlapping\",{\"1\":{\"5\":1,\"171\":2}}],[\"overall\",{\"1\":{\"6\":1}}],[\"over\",{\"1\":{\"4\":2,\"5\":1,\"6\":1,\"7\":1,\"9\":2,\"10\":1,\"11\":1,\"12\":1,\"17\":1,\"21\":47,\"22\":2,\"24\":1,\"25\":1,\"30\":3,\"31\":1,\"32\":1,\"33\":1,\"66\":1,\"74\":1,\"75\":2,\"77\":4,\"78\":1,\"94\":1,\"124\":1,\"135\":2,\"147\":1,\"159\":1,\"165\":1,\"169\":2,\"170\":1,\"185\":1,\"213\":1,\"230\":2,\"234\":1,\"235\":3,\"237\":1}}],[\"ok\",{\"1\":{\"66\":1,\"124\":2,\"147\":4,\"176\":1,\"177\":1,\"205\":1,\"227\":1,\"237\":1}}],[\"okr\",{\"1\":{\"6\":1}}],[\"omitted\",{\"1\":{\"63\":1}}],[\"omg\",{\"1\":{\"4\":1,\"36\":1}}],[\"ourselves\",{\"1\":{\"124\":2,\"141\":1,\"172\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"225\":1}}],[\"our\",{\"1\":{\"44\":1,\"45\":4,\"49\":1,\"51\":1,\"52\":1,\"59\":1,\"60\":1,\"61\":2,\"62\":1,\"64\":1,\"65\":2,\"66\":2,\"69\":2,\"70\":1,\"71\":1,\"72\":2,\"74\":2,\"75\":1,\"76\":1,\"77\":2,\"78\":2,\"82\":2,\"83\":3,\"87\":2,\"88\":2,\"89\":4,\"94\":1,\"95\":1,\"100\":1,\"102\":1,\"104\":1,\"105\":1,\"110\":1,\"116\":1,\"117\":3,\"120\":1,\"121\":6,\"123\":3,\"124\":4,\"131\":4,\"132\":1,\"133\":1,\"134\":1,\"135\":7,\"136\":2,\"139\":1,\"141\":2,\"143\":2,\"146\":1,\"147\":3,\"148\":2,\"155\":1,\"156\":1,\"160\":1,\"161\":1,\"162\":2,\"163\":1,\"164\":1,\"166\":1,\"169\":1,\"173\":1,\"177\":2,\"178\":2,\"180\":1,\"183\":2,\"185\":1,\"186\":2,\"191\":1,\"192\":1,\"193\":1,\"196\":1,\"197\":1,\"208\":1,\"210\":1,\"213\":2,\"214\":1,\"215\":1,\"223\":1,\"229\":3,\"232\":1,\"234\":1,\"235\":2,\"237\":1,\"241\":1,\"244\":2,\"245\":2,\"246\":5,\"248\":1}}],[\"outstanding\",{\"1\":{\"31\":1}}],[\"outside\",{\"1\":{\"5\":1,\"22\":1,\"171\":2,\"239\":1}}],[\"outages\",{\"1\":{\"24\":1}}],[\"outage\",{\"1\":{\"19\":1,\"35\":1}}],[\"outline\",{\"1\":{\"13\":1,\"29\":1}}],[\"outlines\",{\"1\":{\"13\":1}}],[\"outlook\",{\"1\":{\"4\":2}}],[\"outputstring\",{\"1\":{\"138\":2,\"139\":5,\"140\":4}}],[\"outputs\",{\"1\":{\"9\":1,\"10\":1,\"12\":1,\"18\":1,\"30\":1}}],[\"output\",{\"0\":{\"144\":1},\"1\":{\"9\":1,\"13\":1,\"18\":1,\"20\":1,\"21\":1,\"22\":1,\"29\":1,\"30\":1,\"33\":1,\"34\":1,\"72\":2,\"124\":1,\"129\":1,\"133\":1,\"135\":1,\"138\":1,\"140\":2,\"141\":3,\"144\":1,\"147\":12,\"148\":3,\"151\":2,\"152\":1,\"154\":1,\"159\":1,\"160\":2,\"161\":1,\"165\":1,\"166\":1,\"182\":1,\"183\":1,\"197\":1,\"200\":2,\"213\":2,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"231\":1}}],[\"out\",{\"0\":{\"222\":1,\"227\":1},\"1\":{\"9\":3,\"10\":1,\"16\":1,\"21\":2,\"23\":2,\"29\":1,\"34\":1,\"35\":2,\"49\":1,\"51\":1,\"78\":1,\"79\":1,\"80\":1,\"82\":1,\"87\":1,\"88\":2,\"89\":1,\"90\":2,\"92\":3,\"95\":1,\"97\":1,\"100\":1,\"101\":1,\"105\":1,\"110\":1,\"124\":8,\"131\":1,\"133\":1,\"136\":1,\"143\":2,\"144\":1,\"147\":3,\"148\":2,\"160\":2,\"163\":2,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"179\":2,\"191\":1,\"192\":1,\"193\":2,\"196\":13,\"197\":1,\"201\":1,\"204\":1,\"205\":1,\"210\":1,\"212\":1,\"214\":1,\"222\":1,\"223\":1,\"226\":2,\"227\":3,\"228\":2,\"240\":1,\"246\":1,\"248\":1}}],[\"outcomes\",{\"1\":{\"6\":1,\"9\":1,\"35\":1}}],[\"outdated\",{\"1\":{\"3\":1}}],[\"oasis\",{\"1\":{\"36\":3}}],[\"oauth\",{\"1\":{\"22\":2}}],[\"oem\",{\"1\":{\"33\":3,\"34\":1}}],[\"oxide\",{\"1\":{\"33\":1}}],[\"oidc\",{\"1\":{\"22\":2}}],[\"oids\",{\"1\":{\"21\":1}}],[\"ohm\",{\"1\":{\"30\":1}}],[\"oh\",{\"1\":{\"21\":1}}],[\"owasp\",{\"1\":{\"36\":3}}],[\"owl\",{\"1\":{\"15\":1}}],[\"owner\",{\"1\":{\"35\":1}}],[\"own\",{\"1\":{\"5\":2,\"9\":1,\"14\":1,\"22\":2,\"35\":1,\"40\":1,\"51\":2,\"77\":1,\"93\":1,\"102\":1,\"124\":1,\"147\":3,\"162\":1,\"178\":1,\"180\":1,\"201\":1,\"208\":1,\"219\":1,\"222\":1,\"229\":1,\"231\":1}}],[\"o2\",{\"1\":{\"10\":1}}],[\"otoh\",{\"1\":{\"35\":2}}],[\"otool\",{\"1\":{\"10\":1,\"11\":1}}],[\"ot\",{\"1\":{\"35\":2}}],[\"otu4\",{\"1\":{\"21\":1}}],[\"otn\",{\"1\":{\"21\":2}}],[\"otf\",{\"1\":{\"13\":2}}],[\"otp\",{\"1\":{\"9\":2,\"22\":2}}],[\"otherwise\",{\"1\":{\"78\":2,\"79\":1,\"105\":1,\"110\":1,\"124\":1,\"160\":1,\"185\":1,\"210\":1,\"212\":1}}],[\"others\",{\"1\":{\"10\":1,\"16\":1,\"35\":1,\"80\":1,\"191\":1,\"192\":1}}],[\"other\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":3,\"17\":1,\"34\":4,\"35\":1,\"41\":1,\"51\":1,\"53\":1,\"59\":1,\"64\":1,\"77\":1,\"80\":1,\"83\":2,\"84\":1,\"87\":1,\"89\":3,\"92\":1,\"93\":2,\"94\":1,\"95\":1,\"96\":1,\"97\":3,\"101\":1,\"103\":1,\"104\":3,\"107\":4,\"109\":2,\"115\":1,\"116\":1,\"121\":1,\"135\":2,\"140\":1,\"146\":2,\"147\":7,\"160\":2,\"161\":1,\"171\":7,\"185\":1,\"188\":2,\"192\":2,\"194\":1,\"201\":1,\"212\":1,\"215\":1,\"225\":2,\"229\":1,\"230\":1,\"233\":1,\"238\":1,\"239\":2,\"242\":2,\"247\":1,\"248\":1}}],[\"oduk\",{\"1\":{\"21\":1}}],[\"odbc\",{\"1\":{\"9\":2}}],[\"odd\",{\"1\":{\"9\":1,\"85\":1,\"86\":1,\"99\":1}}],[\"o\",{\"1\":{\"9\":10,\"10\":2,\"11\":3,\"15\":2,\"30\":4,\"31\":1,\"33\":5,\"99\":1,\"123\":12,\"124\":16,\"147\":17,\"148\":2,\"179\":7,\"192\":1,\"196\":6,\"201\":1,\"210\":1,\"225\":1,\"226\":2,\"227\":1,\"228\":9,\"229\":4,\"234\":2,\"247\":3,\"248\":1,\"253\":1}}],[\"ooo\",{\"1\":{\"35\":2}}],[\"oops\",{\"1\":{\"147\":1}}],[\"oop\",{\"1\":{\"9\":1}}],[\"oom\",{\"1\":{\"9\":3}}],[\"oo\",{\"1\":{\"5\":1}}],[\"octnum\",{\"1\":{\"99\":3}}],[\"octdigit\",{\"1\":{\"99\":3}}],[\"octal\",{\"1\":{\"98\":2,\"99\":1}}],[\"octane\",{\"1\":{\"11\":1}}],[\"oci\",{\"1\":{\"24\":3}}],[\"ocr\",{\"1\":{\"18\":2}}],[\"oc\",{\"1\":{\"11\":1,\"21\":4}}],[\"occasionally\",{\"1\":{\"177\":1}}],[\"occam\",{\"1\":{\"5\":1}}],[\"occupy\",{\"1\":{\"248\":1}}],[\"occupies\",{\"1\":{\"10\":1,\"11\":1,\"88\":1,\"185\":1,\"202\":1}}],[\"occur\",{\"1\":{\"193\":1,\"194\":1,\"249\":1}}],[\"occurrences\",{\"1\":{\"84\":3}}],[\"occurs\",{\"1\":{\"11\":1,\"186\":1,\"188\":1,\"190\":1,\"194\":1}}],[\"ocaml\",{\"1\":{\"8\":1,\"9\":1}}],[\"ocp\",{\"1\":{\"5\":2}}],[\"ocx\",{\"1\":{\"4\":2}}],[\"oldnames\",{\"1\":{\"123\":2}}],[\"old\",{\"1\":{\"21\":2,\"34\":1,\"123\":1,\"186\":2,\"240\":1}}],[\"older\",{\"1\":{\"4\":1,\"29\":1,\"30\":1}}],[\"olap\",{\"1\":{\"17\":1}}],[\"oltp\",{\"1\":{\"17\":2,\"36\":1}}],[\"oled\",{\"1\":{\"32\":2}}],[\"ole\",{\"1\":{\"4\":4,\"9\":2,\"17\":2}}],[\"osabi\",{\"1\":{\"235\":1}}],[\"osalloc\",{\"1\":{\"124\":1}}],[\"osvusercode\",{\"1\":{\"197\":4}}],[\"osvkernelstack\",{\"1\":{\"151\":1,\"156\":2,\"162\":1,\"197\":2}}],[\"osvkerneldata\",{\"1\":{\"151\":1,\"162\":3,\"197\":2}}],[\"osvkernelcode\",{\"1\":{\"151\":1,\"156\":2,\"162\":1,\"197\":3}}],[\"osv\",{\"1\":{\"151\":1}}],[\"oss\",{\"1\":{\"37\":2}}],[\"ossec\",{\"1\":{\"22\":1}}],[\"oscilloscopes\",{\"1\":{\"30\":1}}],[\"ospf\",{\"1\":{\"21\":3}}],[\"osi\",{\"1\":{\"21\":7,\"36\":2,\"37\":1}}],[\"oses\",{\"1\":{\"5\":1,\"11\":3,\"25\":2,\"34\":1}}],[\"osf\",{\"1\":{\"4\":1,\"11\":1}}],[\"os\",{\"0\":{\"114\":1,\"116\":1,\"250\":1},\"1\":{\"4\":1,\"7\":1,\"8\":1,\"11\":46,\"14\":1,\"17\":5,\"22\":2,\"24\":2,\"25\":2,\"26\":5,\"27\":1,\"28\":1,\"31\":2,\"33\":6,\"34\":15,\"115\":2,\"116\":3,\"117\":1,\"120\":1,\"122\":4,\"124\":23,\"130\":1,\"131\":2,\"133\":1,\"136\":1,\"143\":1,\"147\":6,\"148\":1,\"151\":1,\"171\":1,\"185\":2,\"223\":1,\"224\":1,\"234\":3,\"245\":3,\"246\":1,\"250\":1}}],[\"obligations\",{\"1\":{\"23\":1}}],[\"obtaining\",{\"1\":{\"127\":1}}],[\"obtain\",{\"1\":{\"21\":1,\"23\":1}}],[\"obviously\",{\"1\":{\"74\":1,\"117\":1,\"148\":1}}],[\"obvious\",{\"1\":{\"13\":1,\"88\":1}}],[\"objdump\",{\"1\":{\"10\":2,\"11\":3,\"147\":2,\"228\":2}}],[\"obj\",{\"1\":{\"10\":2}}],[\"objective\",{\"1\":{\"19\":3}}],[\"objectives\",{\"1\":{\"6\":2}}],[\"objectid\",{\"1\":{\"15\":1}}],[\"objects\",{\"1\":{\"4\":1,\"9\":4,\"11\":1,\"17\":7,\"21\":1,\"34\":2,\"58\":1}}],[\"object\",{\"1\":{\"4\":4,\"5\":1,\"7\":1,\"8\":1,\"9\":3,\"10\":3,\"11\":11,\"15\":5,\"17\":4,\"22\":1,\"36\":2,\"47\":5,\"58\":2,\"61\":3,\"72\":5,\"74\":1,\"77\":1,\"78\":1,\"79\":5,\"82\":2,\"95\":1,\"99\":1,\"101\":1,\"106\":1,\"110\":1,\"123\":2,\"133\":1,\"138\":3,\"139\":1,\"147\":15,\"151\":3,\"152\":1,\"153\":4,\"154\":2,\"156\":1,\"157\":1,\"158\":1,\"159\":2,\"160\":1,\"162\":3,\"168\":2,\"175\":9,\"177\":1,\"181\":1,\"187\":6,\"190\":3,\"197\":1,\"202\":2,\"212\":2,\"213\":2,\"215\":1,\"217\":2,\"218\":3,\"222\":1,\"224\":1,\"225\":2,\"227\":6,\"228\":5,\"230\":3,\"235\":9,\"237\":3,\"239\":1,\"248\":1,\"249\":1}}],[\"observability\",{\"1\":{\"21\":1}}],[\"observables\",{\"1\":{\"5\":1}}],[\"obsolete\",{\"1\":{\"3\":1,\"17\":1,\"29\":2,\"30\":1,\"31\":3,\"190\":1,\"247\":1}}],[\"orxor\",{\"1\":{\"103\":1}}],[\"oracle\",{\"1\":{\"17\":2,\"25\":1}}],[\"orchestration\",{\"1\":{\"24\":1}}],[\"orchestrate\",{\"1\":{\"5\":1}}],[\"orc\",{\"1\":{\"15\":2}}],[\"organic\",{\"1\":{\"32\":1}}],[\"organizations\",{\"0\":{\"36\":1}}],[\"organization\",{\"1\":{\"15\":2,\"36\":4,\"71\":1}}],[\"organized\",{\"1\":{\"13\":1,\"17\":1}}],[\"organize\",{\"1\":{\"9\":1,\"11\":1,\"143\":1}}],[\"org\",{\"1\":{\"15\":2,\"18\":1,\"21\":1,\"36\":1,\"43\":2,\"55\":3,\"118\":2,\"133\":1}}],[\"origins\",{\"1\":{\"22\":1}}],[\"originating\",{\"1\":{\"25\":1}}],[\"originate\",{\"1\":{\"21\":1,\"248\":1}}],[\"originaltext\",{\"1\":{\"106\":4}}],[\"original\",{\"1\":{\"11\":1,\"25\":1,\"32\":1,\"33\":1,\"35\":1,\"92\":1,\"104\":1,\"162\":1,\"169\":1}}],[\"originally\",{\"1\":{\"11\":2,\"21\":1,\"25\":1,\"201\":1}}],[\"origin\",{\"1\":{\"15\":1,\"22\":1,\"24\":1}}],[\"oriented\",{\"1\":{\"4\":3,\"8\":3,\"9\":1,\"15\":2,\"21\":2,\"22\":1,\"36\":1}}],[\"orm\",{\"1\":{\"9\":2,\"17\":1}}],[\"orb\",{\"1\":{\"4\":1}}],[\"or\",{\"1\":{\"4\":1,\"5\":1,\"6\":3,\"7\":2,\"8\":1,\"9\":19,\"10\":9,\"11\":11,\"13\":9,\"14\":1,\"17\":6,\"18\":2,\"20\":1,\"21\":17,\"22\":8,\"23\":1,\"24\":2,\"25\":2,\"26\":2,\"29\":2,\"30\":4,\"31\":3,\"32\":2,\"33\":2,\"34\":5,\"35\":17,\"50\":1,\"52\":2,\"53\":1,\"54\":1,\"57\":1,\"58\":2,\"68\":1,\"70\":1,\"75\":2,\"77\":1,\"78\":2,\"79\":1,\"83\":1,\"85\":1,\"87\":1,\"88\":1,\"89\":10,\"92\":1,\"95\":3,\"97\":2,\"98\":2,\"99\":3,\"101\":1,\"102\":1,\"103\":3,\"104\":3,\"105\":3,\"106\":1,\"110\":1,\"118\":1,\"123\":2,\"124\":1,\"128\":1,\"130\":1,\"142\":2,\"160\":1,\"168\":1,\"169\":2,\"170\":1,\"171\":2,\"172\":1,\"173\":2,\"174\":1,\"177\":3,\"183\":1,\"185\":10,\"186\":2,\"187\":3,\"188\":1,\"189\":2,\"190\":2,\"192\":7,\"193\":1,\"194\":3,\"197\":1,\"201\":1,\"202\":3,\"206\":1,\"207\":1,\"208\":1,\"209\":3,\"213\":1,\"218\":1,\"225\":1,\"229\":2,\"230\":3,\"232\":1,\"233\":1,\"234\":1,\"235\":2,\"238\":1,\"239\":4,\"240\":3,\"247\":1,\"248\":1,\"249\":1}}],[\"orders\",{\"1\":{\"17\":1}}],[\"orderline\",{\"1\":{\"17\":1}}],[\"ordering\",{\"1\":{\"9\":2}}],[\"ordered\",{\"1\":{\"9\":2,\"10\":2}}],[\"orderplaced\",{\"1\":{\"4\":1}}],[\"order\",{\"1\":{\"4\":1,\"9\":6,\"14\":1,\"17\":2,\"54\":1,\"57\":1,\"75\":1,\"77\":1,\"88\":1,\"105\":1,\"107\":1,\"108\":1,\"124\":1,\"135\":2,\"147\":9,\"159\":1,\"162\":1,\"166\":1,\"174\":1,\"177\":1,\"187\":2,\"199\":1,\"211\":1,\"234\":1}}],[\"opcode\",{\"1\":{\"192\":3}}],[\"opcodes\",{\"1\":{\"24\":1}}],[\"opr\",{\"1\":{\"104\":13,\"107\":3,\"109\":3}}],[\"op0expr\",{\"1\":{\"105\":2,\"107\":1,\"109\":2,\"110\":1}}],[\"op0\",{\"1\":{\"103\":1,\"104\":2,\"105\":1,\"106\":1,\"107\":1,\"109\":2,\"110\":1}}],[\"op1expr\",{\"1\":{\"105\":2,\"107\":1,\"109\":2,\"110\":1}}],[\"op1\",{\"1\":{\"103\":1,\"104\":3,\"105\":1,\"106\":1,\"107\":1,\"109\":2,\"110\":1}}],[\"op10rightexpr\",{\"1\":{\"109\":2}}],[\"op10leftexpr\",{\"1\":{\"109\":2}}],[\"op10expr\",{\"1\":{\"105\":2,\"109\":2,\"110\":1}}],[\"op10\",{\"1\":{\"103\":1,\"104\":2,\"105\":1,\"106\":1,\"109\":11,\"110\":1}}],[\"op2expr\",{\"1\":{\"105\":2,\"107\":1}}],[\"op2\",{\"1\":{\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":13,\"109\":4}}],[\"op3expr\",{\"1\":{\"105\":2}}],[\"op3\",{\"1\":{\"103\":1,\"104\":2,\"105\":1,\"106\":1,\"109\":1}}],[\"op4expr\",{\"1\":{\"105\":2}}],[\"op4\",{\"1\":{\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"109\":1}}],[\"op5expr\",{\"1\":{\"105\":2}}],[\"op5\",{\"1\":{\"103\":1,\"104\":9,\"105\":1,\"106\":1,\"109\":1}}],[\"op6expr\",{\"1\":{\"105\":2}}],[\"op6\",{\"1\":{\"103\":1,\"104\":7,\"105\":3,\"106\":2,\"109\":2}}],[\"op7expr\",{\"1\":{\"105\":2}}],[\"op7\",{\"1\":{\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"109\":1}}],[\"op8expr\",{\"1\":{\"105\":2}}],[\"op8\",{\"1\":{\"103\":1,\"104\":3,\"105\":1,\"106\":1,\"109\":1}}],[\"op9expr\",{\"1\":{\"105\":2}}],[\"op9\",{\"1\":{\"103\":1,\"104\":5,\"105\":1,\"106\":1,\"109\":1}}],[\"opinion\",{\"1\":{\"35\":4,\"57\":1}}],[\"opposed\",{\"1\":{\"35\":1,\"69\":1,\"122\":1,\"191\":1,\"202\":1}}],[\"opposite\",{\"1\":{\"5\":1,\"104\":1}}],[\"opportunities\",{\"1\":{\"35\":1}}],[\"opacity\",{\"1\":{\"32\":1}}],[\"opt\",{\"1\":{\"10\":1,\"23\":2,\"134\":2}}],[\"optind\",{\"1\":{\"97\":2}}],[\"optical\",{\"1\":{\"18\":1,\"21\":6,\"31\":2}}],[\"optimally\",{\"1\":{\"10\":1}}],[\"optimizing\",{\"1\":{\"9\":1}}],[\"optimizer\",{\"1\":{\"17\":1}}],[\"optimized\",{\"1\":{\"11\":2,\"15\":2,\"16\":1,\"17\":2,\"29\":2,\"32\":1,\"105\":2}}],[\"optimize\",{\"1\":{\"7\":1,\"9\":1,\"31\":1,\"35\":1,\"147\":2}}],[\"optimizations\",{\"1\":{\"9\":1,\"10\":2}}],[\"optimization\",{\"1\":{\"7\":1,\"10\":10,\"25\":1,\"35\":1,\"146\":1}}],[\"options\",{\"0\":{\"146\":1},\"1\":{\"11\":2,\"36\":1,\"43\":1,\"53\":5,\"115\":1,\"135\":1,\"151\":1,\"170\":1,\"237\":1}}],[\"optional\",{\"1\":{\"9\":1,\"10\":3,\"13\":1,\"14\":1,\"15\":1,\"24\":1,\"25\":1,\"89\":1,\"97\":1,\"99\":1,\"115\":1,\"177\":1}}],[\"optionally\",{\"1\":{\"4\":1,\"46\":1,\"95\":1,\"97\":1}}],[\"option\",{\"1\":{\"9\":2,\"11\":1,\"21\":1,\"29\":1,\"34\":2,\"58\":1,\"124\":1,\"135\":3,\"170\":1,\"176\":1,\"177\":2,\"181\":1,\"197\":1,\"218\":1,\"237\":2}}],[\"op\",{\"1\":{\"9\":1,\"35\":2,\"106\":6,\"108\":1,\"109\":3}}],[\"ops\",{\"1\":{\"9\":1,\"19\":1,\"25\":2,\"28\":2,\"35\":1}}],[\"operand\",{\"1\":{\"105\":1,\"185\":1}}],[\"operands\",{\"1\":{\"9\":1,\"10\":1,\"105\":2}}],[\"operator\",{\"1\":{\"21\":1,\"35\":1,\"70\":1,\"99\":1,\"102\":3,\"103\":7,\"104\":13,\"105\":2,\"106\":13,\"107\":4,\"108\":1,\"109\":4,\"110\":6,\"139\":1,\"168\":1,\"181\":1}}],[\"operators\",{\"0\":{\"103\":1,\"104\":1,\"106\":1,\"107\":1},\"1\":{\"5\":1,\"9\":1,\"10\":1,\"52\":1,\"99\":1,\"102\":11,\"103\":12,\"104\":7,\"105\":2,\"106\":5,\"107\":6,\"108\":1,\"109\":6,\"110\":2,\"168\":1,\"175\":1}}],[\"operated\",{\"1\":{\"21\":2}}],[\"operate\",{\"1\":{\"6\":1,\"248\":1}}],[\"operational\",{\"1\":{\"28\":1}}],[\"operation\",{\"1\":{\"9\":3,\"185\":1}}],[\"operations\",{\"0\":{\"19\":1},\"1\":{\"5\":1,\"8\":1,\"9\":1,\"11\":1,\"17\":1,\"20\":2,\"22\":2,\"24\":1,\"26\":2,\"28\":4,\"79\":1,\"102\":1,\"124\":1,\"192\":1,\"207\":1}}],[\"operating\",{\"0\":{\"11\":1},\"1\":{\"1\":1,\"4\":1,\"11\":29,\"13\":1,\"21\":2,\"34\":1,\"122\":1,\"124\":2,\"151\":1,\"185\":1,\"194\":1,\"201\":2,\"223\":1,\"250\":1}}],[\"openmode\",{\"1\":{\"154\":1}}],[\"openmpi\",{\"1\":{\"24\":1}}],[\"openex\",{\"1\":{\"153\":1}}],[\"opened\",{\"1\":{\"5\":1,\"21\":1}}],[\"openprotocolinformation\",{\"1\":{\"151\":1}}],[\"openprotocol\",{\"1\":{\"151\":1}}],[\"openpgp\",{\"1\":{\"22\":1}}],[\"opening\",{\"1\":{\"96\":1,\"108\":1,\"153\":1,\"154\":1,\"197\":2}}],[\"openid\",{\"1\":{\"22\":1}}],[\"openjdk\",{\"1\":{\"42\":1}}],[\"openvolume\",{\"1\":{\"152\":1,\"153\":4,\"197\":1}}],[\"openvpn\",{\"1\":{\"21\":1}}],[\"openvms\",{\"1\":{\"11\":2,\"25\":1}}],[\"openness\",{\"1\":{\"16\":1}}],[\"opentype\",{\"1\":{\"13\":2}}],[\"opensbi\",{\"1\":{\"34\":2}}],[\"opens\",{\"1\":{\"13\":1}}],[\"openbsd\",{\"1\":{\"11\":1}}],[\"opencl\",{\"1\":{\"10\":1,\"32\":1}}],[\"opengl\",{\"1\":{\"10\":4}}],[\"openapi\",{\"1\":{\"7\":2,\"47\":2}}],[\"open\",{\"0\":{\"37\":1,\"158\":1},\"1\":{\"4\":1,\"5\":2,\"6\":1,\"7\":1,\"8\":1,\"9\":4,\"11\":6,\"13\":2,\"16\":3,\"18\":1,\"21\":7,\"24\":3,\"25\":1,\"30\":1,\"31\":2,\"34\":1,\"35\":2,\"36\":7,\"37\":4,\"45\":1,\"65\":1,\"89\":1,\"123\":2,\"134\":2,\"151\":1,\"153\":2,\"154\":6,\"197\":3}}],[\"oformat=binary\",{\"1\":{\"147\":1,\"148\":1,\"196\":1,\"226\":1}}],[\"often\",{\"1\":{\"6\":1,\"7\":1,\"9\":2,\"10\":2,\"11\":2,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"21\":1,\"25\":1,\"29\":1,\"30\":1,\"32\":2,\"33\":1,\"85\":1,\"228\":1}}],[\"offs\",{\"1\":{\"35\":1}}],[\"offset32\",{\"1\":{\"190\":2,\"206\":1}}],[\"offset16\",{\"1\":{\"190\":2,\"206\":1}}],[\"offset00\",{\"1\":{\"190\":2,\"206\":1}}],[\"offset=0x143\",{\"1\":{\"123\":1}}],[\"offsets\",{\"1\":{\"51\":1,\"228\":1,\"233\":1,\"248\":3}}],[\"offset\",{\"1\":{\"11\":1,\"15\":1,\"53\":1,\"147\":6,\"168\":5,\"174\":3,\"176\":1,\"177\":4,\"185\":1,\"186\":2,\"187\":3,\"188\":1,\"190\":10,\"206\":4,\"225\":2,\"226\":1,\"228\":8,\"229\":2,\"230\":3,\"234\":1,\"235\":6,\"237\":2,\"248\":4}}],[\"offloads\",{\"1\":{\"33\":1}}],[\"offload\",{\"1\":{\"33\":1}}],[\"offline\",{\"1\":{\"7\":1,\"10\":1,\"13\":1,\"35\":1}}],[\"offered\",{\"1\":{\"30\":1,\"185\":1}}],[\"offers\",{\"1\":{\"13\":1}}],[\"offering\",{\"1\":{\"5\":1,\"13\":1,\"16\":1,\"21\":1,\"31\":1}}],[\"off\",{\"1\":{\"6\":1,\"17\":1,\"21\":2,\"30\":1,\"35\":5,\"124\":3,\"146\":1,\"147\":2,\"149\":1,\"226\":1,\"228\":2,\"229\":1,\"234\":1}}],[\"official\",{\"1\":{\"11\":1,\"40\":1,\"89\":1,\"134\":1}}],[\"officially\",{\"1\":{\"6\":1}}],[\"offices\",{\"1\":{\"21\":1}}],[\"office\",{\"1\":{\"4\":1,\"5\":1,\"8\":1,\"9\":2,\"16\":1,\"21\":2,\"35\":1}}],[\"of\",{\"1\":{\"0\":1,\"1\":1,\"2\":1,\"3\":1,\"4\":5,\"5\":10,\"6\":6,\"7\":5,\"8\":4,\"9\":18,\"10\":10,\"11\":29,\"12\":2,\"13\":1,\"14\":5,\"15\":4,\"16\":3,\"17\":5,\"18\":3,\"19\":1,\"20\":5,\"21\":19,\"22\":13,\"23\":3,\"24\":2,\"25\":3,\"26\":1,\"27\":1,\"29\":3,\"30\":3,\"31\":5,\"32\":4,\"33\":2,\"34\":2,\"35\":18,\"36\":4,\"37\":2,\"40\":4,\"41\":5,\"43\":3,\"44\":2,\"45\":2,\"46\":1,\"47\":1,\"50\":5,\"51\":4,\"52\":9,\"53\":10,\"55\":1,\"56\":1,\"57\":8,\"58\":21,\"59\":7,\"60\":2,\"61\":6,\"62\":2,\"63\":8,\"64\":3,\"65\":1,\"66\":6,\"67\":1,\"68\":8,\"69\":2,\"70\":8,\"71\":4,\"72\":6,\"73\":2,\"74\":5,\"75\":5,\"76\":2,\"77\":22,\"78\":21,\"79\":8,\"82\":4,\"83\":3,\"84\":1,\"85\":17,\"86\":4,\"87\":11,\"88\":6,\"89\":23,\"90\":2,\"91\":1,\"92\":9,\"93\":1,\"94\":8,\"95\":2,\"96\":9,\"97\":7,\"98\":4,\"99\":1,\"102\":7,\"103\":7,\"104\":13,\"105\":7,\"106\":4,\"108\":3,\"110\":10,\"115\":2,\"116\":2,\"118\":1,\"121\":1,\"122\":1,\"124\":10,\"125\":1,\"127\":2,\"129\":1,\"130\":1,\"131\":1,\"133\":1,\"135\":5,\"136\":1,\"139\":2,\"140\":1,\"141\":2,\"142\":2,\"143\":2,\"144\":1,\"146\":3,\"147\":29,\"148\":4,\"150\":6,\"151\":11,\"152\":1,\"153\":5,\"154\":5,\"156\":3,\"157\":1,\"158\":2,\"159\":3,\"160\":2,\"161\":1,\"162\":6,\"163\":2,\"164\":2,\"165\":3,\"166\":2,\"167\":1,\"168\":10,\"169\":2,\"170\":4,\"171\":6,\"172\":2,\"173\":5,\"174\":11,\"175\":1,\"176\":2,\"177\":11,\"178\":2,\"179\":7,\"180\":1,\"181\":6,\"182\":1,\"183\":3,\"184\":3,\"185\":12,\"186\":12,\"187\":8,\"188\":4,\"189\":5,\"190\":7,\"191\":2,\"192\":3,\"193\":3,\"194\":4,\"195\":4,\"196\":2,\"197\":7,\"198\":1,\"199\":5,\"200\":1,\"201\":6,\"202\":1,\"203\":1,\"204\":1,\"206\":7,\"209\":3,\"210\":4,\"213\":1,\"215\":2,\"216\":2,\"217\":2,\"218\":4,\"220\":2,\"221\":1,\"222\":4,\"225\":5,\"226\":3,\"227\":7,\"228\":6,\"229\":8,\"230\":12,\"231\":2,\"232\":2,\"233\":5,\"234\":12,\"235\":24,\"237\":15,\"238\":2,\"239\":6,\"240\":8,\"243\":1,\"246\":3,\"247\":3,\"248\":12,\"249\":2}}],[\"online\",{\"1\":{\"11\":1,\"17\":3,\"21\":1,\"26\":1,\"35\":2,\"36\":1}}],[\"only\",{\"1\":{\"4\":2,\"7\":1,\"9\":1,\"21\":1,\"22\":1,\"29\":4,\"32\":1,\"35\":3,\"43\":1,\"53\":1,\"64\":1,\"67\":1,\"73\":2,\"74\":1,\"76\":1,\"77\":3,\"78\":1,\"79\":3,\"83\":3,\"87\":2,\"89\":4,\"92\":1,\"94\":1,\"95\":1,\"96\":2,\"97\":1,\"99\":1,\"100\":1,\"102\":1,\"104\":1,\"105\":1,\"109\":1,\"122\":1,\"124\":2,\"141\":2,\"146\":3,\"147\":3,\"151\":1,\"160\":2,\"177\":1,\"185\":6,\"186\":4,\"187\":1,\"188\":2,\"190\":2,\"194\":2,\"195\":2,\"199\":1,\"201\":1,\"220\":1,\"226\":1,\"228\":3,\"229\":1,\"230\":2,\"232\":1,\"235\":7,\"239\":1,\"247\":1}}],[\"onward\",{\"1\":{\"11\":1}}],[\"onyx\",{\"1\":{\"11\":1}}],[\"onreadystatechange\",{\"1\":{\"7\":1}}],[\"ontologies\",{\"1\":{\"15\":2}}],[\"ontology\",{\"1\":{\"15\":3}}],[\"onto\",{\"1\":{\"6\":1,\"191\":2}}],[\"ones\",{\"1\":{\"58\":1,\"77\":1,\"79\":1,\"123\":1,\"124\":1,\"226\":1,\"230\":1,\"234\":1}}],[\"one\",{\"1\":{\"5\":1,\"6\":2,\"8\":1,\"9\":2,\"10\":2,\"11\":2,\"13\":1,\"14\":1,\"15\":2,\"20\":1,\"21\":3,\"22\":3,\"29\":1,\"35\":2,\"52\":1,\"53\":2,\"55\":1,\"64\":1,\"72\":3,\"74\":1,\"77\":4,\"80\":1,\"82\":2,\"83\":2,\"85\":1,\"87\":4,\"89\":3,\"93\":1,\"94\":2,\"95\":1,\"99\":3,\"102\":1,\"103\":2,\"104\":2,\"109\":2,\"112\":1,\"115\":1,\"134\":2,\"141\":3,\"146\":2,\"147\":3,\"148\":2,\"150\":1,\"151\":1,\"163\":1,\"164\":1,\"171\":1,\"175\":1,\"183\":1,\"185\":2,\"186\":1,\"187\":1,\"193\":2,\"194\":1,\"198\":1,\"201\":2,\"205\":2,\"211\":1,\"213\":2,\"214\":1,\"215\":3,\"216\":1,\"217\":2,\"218\":1,\"220\":1,\"222\":1,\"223\":1,\"228\":1,\"229\":3,\"230\":1,\"233\":1,\"237\":2,\"247\":2}}],[\"once\",{\"1\":{\"5\":1,\"10\":3,\"21\":1,\"22\":1,\"29\":1,\"31\":1,\"35\":1,\"65\":1,\"79\":1,\"87\":1,\"89\":1,\"96\":2,\"162\":1,\"178\":1,\"194\":1,\"216\":1,\"222\":1,\"227\":1,\"231\":1,\"235\":1,\"240\":1}}],[\"on\",{\"1\":{\"0\":1,\"1\":1,\"4\":3,\"5\":2,\"6\":2,\"7\":7,\"8\":8,\"9\":8,\"10\":5,\"11\":53,\"12\":1,\"13\":1,\"14\":5,\"15\":3,\"16\":2,\"17\":10,\"18\":3,\"20\":1,\"21\":29,\"22\":5,\"24\":3,\"25\":8,\"26\":5,\"27\":1,\"28\":2,\"29\":7,\"30\":16,\"31\":3,\"32\":4,\"33\":5,\"34\":6,\"35\":7,\"36\":1,\"40\":2,\"41\":1,\"42\":1,\"44\":3,\"49\":1,\"50\":1,\"53\":1,\"54\":2,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"63\":2,\"66\":1,\"67\":1,\"68\":1,\"69\":3,\"71\":1,\"72\":6,\"75\":6,\"77\":3,\"78\":1,\"79\":2,\"82\":2,\"83\":2,\"84\":1,\"85\":1,\"86\":2,\"87\":2,\"89\":4,\"93\":1,\"94\":1,\"95\":1,\"97\":2,\"104\":1,\"105\":1,\"106\":1,\"116\":1,\"121\":1,\"122\":5,\"123\":5,\"124\":15,\"128\":2,\"132\":1,\"133\":1,\"134\":2,\"135\":3,\"141\":3,\"143\":1,\"144\":1,\"147\":2,\"148\":1,\"149\":1,\"150\":1,\"151\":2,\"154\":1,\"160\":1,\"162\":3,\"166\":1,\"173\":1,\"175\":1,\"177\":2,\"181\":1,\"186\":5,\"189\":1,\"190\":2,\"192\":1,\"194\":2,\"199\":1,\"200\":1,\"201\":2,\"209\":1,\"211\":1,\"212\":3,\"220\":2,\"222\":2,\"224\":1,\"225\":3,\"226\":1,\"227\":1,\"228\":1,\"231\":2,\"234\":2,\"237\":3,\"239\":1,\"247\":1,\"248\":2,\"250\":2}}],[\"wl\",{\"1\":{\"123\":3,\"124\":10,\"133\":1,\"143\":2}}],[\"w3\",{\"1\":{\"36\":1}}],[\"w3c\",{\"1\":{\"7\":2,\"12\":1,\"15\":3,\"36\":1}}],[\"wtf\",{\"1\":{\"35\":2}}],[\"w^x\",{\"1\":{\"22\":1}}],[\"won\",{\"1\":{\"69\":1,\"70\":1,\"76\":1,\"124\":1,\"141\":2,\"151\":1,\"160\":1,\"183\":1,\"194\":2,\"195\":1,\"198\":1,\"210\":1,\"229\":1,\"231\":1,\"239\":1,\"248\":1}}],[\"wouldn\",{\"1\":{\"175\":1}}],[\"would\",{\"1\":{\"55\":1,\"57\":1,\"59\":1,\"63\":1,\"70\":1,\"74\":1,\"77\":2,\"79\":1,\"89\":3,\"95\":3,\"96\":4,\"97\":1,\"99\":1,\"104\":1,\"110\":2,\"116\":1,\"188\":1,\"192\":1,\"210\":1}}],[\"wow64\",{\"1\":{\"25\":2}}],[\"woff2\",{\"1\":{\"13\":3}}],[\"woff\",{\"1\":{\"13\":3}}],[\"worry\",{\"1\":{\"124\":1,\"148\":2,\"234\":1,\"249\":1}}],[\"worrying\",{\"1\":{\"35\":1,\"66\":1,\"246\":1}}],[\"worth\",{\"1\":{\"35\":2}}],[\"worm\",{\"1\":{\"31\":2}}],[\"worst\",{\"1\":{\"9\":1}}],[\"worldcom\",{\"1\":{\"21\":1}}],[\"worldwide\",{\"1\":{\"21\":1}}],[\"world\",{\"1\":{\"7\":1,\"24\":1,\"35\":1,\"36\":2,\"60\":1,\"61\":1,\"65\":1,\"70\":1,\"76\":1,\"139\":2,\"140\":1,\"145\":1,\"161\":1}}],[\"worktree\",{\"1\":{\"35\":1}}],[\"workaround\",{\"1\":{\"35\":1,\"87\":1,\"175\":1}}],[\"worked\",{\"1\":{\"35\":1,\"147\":1,\"170\":1}}],[\"workers\",{\"1\":{\"17\":1}}],[\"worker\",{\"1\":{\"7\":1}}],[\"workshops\",{\"1\":{\"36\":1}}],[\"works\",{\"1\":{\"35\":1,\"51\":1,\"56\":1,\"66\":1,\"74\":1,\"77\":1,\"78\":2,\"87\":2,\"88\":1,\"96\":1,\"109\":1,\"144\":1,\"169\":1,\"172\":1,\"173\":1,\"181\":1,\"209\":1,\"214\":1,\"227\":1,\"230\":3,\"231\":1,\"243\":2,\"246\":1}}],[\"workstation\",{\"1\":{\"21\":1,\"31\":1,\"36\":1}}],[\"workstations\",{\"1\":{\"10\":1,\"11\":3,\"25\":6,\"29\":1,\"31\":2}}],[\"workgroup\",{\"1\":{\"22\":1}}],[\"workgroups\",{\"1\":{\"11\":2,\"21\":1}}],[\"workloads\",{\"1\":{\"11\":4,\"20\":1,\"24\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"32\":1}}],[\"work\",{\"1\":{\"6\":1,\"9\":1,\"10\":1,\"21\":1,\"22\":1,\"35\":5,\"36\":1,\"52\":1,\"57\":1,\"59\":1,\"60\":1,\"74\":1,\"76\":1,\"83\":1,\"87\":1,\"105\":1,\"110\":1,\"143\":1,\"147\":2,\"163\":1,\"171\":2,\"186\":1,\"227\":1,\"246\":1,\"251\":1}}],[\"working\",{\"1\":{\"6\":1,\"29\":1,\"35\":1,\"36\":4,\"41\":1,\"55\":1,\"57\":1,\"59\":2,\"65\":1,\"89\":2,\"91\":1,\"95\":1,\"101\":1,\"135\":2,\"141\":1,\"148\":1,\"171\":1,\"172\":1,\"188\":1,\"191\":1,\"192\":1,\"193\":1,\"195\":1,\"197\":1,\"200\":1,\"212\":1,\"215\":1}}],[\"workflows\",{\"1\":{\"4\":1,\"6\":1,\"7\":1,\"9\":1,\"13\":1}}],[\"workflow\",{\"1\":{\"4\":2}}],[\"words\",{\"1\":{\"13\":1}}],[\"wordpress\",{\"1\":{\"7\":1,\"8\":1}}],[\"word\",{\"1\":{\"4\":1,\"9\":1,\"13\":1}}],[\"wpo\",{\"1\":{\"10\":1}}],[\"wpf\",{\"1\":{\"9\":2}}],[\"wysiwyg\",{\"1\":{\"9\":1}}],[\"w\",{\"1\":{\"9\":1,\"24\":1,\"139\":4,\"140\":2,\"147\":2,\"154\":1,\"185\":1,\"197\":2,\"234\":1,\"235\":1,\"237\":2}}],[\"wrmsr\",{\"1\":{\"209\":1}}],[\"wrote\",{\"1\":{\"137\":1}}],[\"wrong\",{\"1\":{\"35\":1,\"183\":1}}],[\"wraps\",{\"1\":{\"61\":1,\"244\":1}}],[\"wrap\",{\"1\":{\"21\":1}}],[\"wrapping\",{\"1\":{\"15\":1,\"141\":1}}],[\"wrapper\",{\"1\":{\"21\":1,\"59\":1,\"245\":1}}],[\"wrappers\",{\"1\":{\"9\":1,\"245\":1}}],[\"wrapped\",{\"1\":{\"13\":1}}],[\"written\",{\"1\":{\"45\":1,\"68\":1,\"102\":2,\"110\":1,\"127\":1}}],[\"writing\",{\"0\":{\"114\":1,\"245\":1},\"1\":{\"6\":2,\"7\":2,\"9\":2,\"10\":1,\"11\":1,\"33\":1,\"59\":1,\"115\":1,\"124\":1,\"132\":3,\"143\":1,\"171\":1,\"209\":1,\"248\":1}}],[\"writable\",{\"1\":{\"5\":1,\"134\":1,\"185\":2,\"187\":1,\"235\":1}}],[\"writeregister\",{\"1\":{\"248\":1,\"249\":1}}],[\"writers\",{\"1\":{\"17\":1}}],[\"writemsr\",{\"1\":{\"209\":5}}],[\"writethrough\",{\"1\":{\"175\":4}}],[\"writetostderr\",{\"1\":{\"124\":1}}],[\"writeex\",{\"1\":{\"153\":1}}],[\"write\",{\"1\":{\"4\":1,\"5\":1,\"6\":1,\"9\":1,\"10\":2,\"11\":3,\"12\":1,\"17\":3,\"22\":1,\"31\":1,\"85\":1,\"122\":1,\"127\":1,\"134\":1,\"144\":1,\"147\":3,\"153\":1,\"164\":1,\"175\":4,\"177\":6,\"185\":1,\"192\":1,\"209\":1,\"228\":1,\"232\":1,\"234\":2,\"235\":1,\"237\":2,\"244\":2,\"246\":2,\"248\":1,\"249\":1}}],[\"writes\",{\"1\":{\"4\":1,\"17\":3,\"127\":1}}],[\"wss\",{\"1\":{\"21\":2}}],[\"ws\",{\"1\":{\"21\":2}}],[\"wsdl\",{\"1\":{\"7\":3}}],[\"wsgi\",{\"1\":{\"7\":3}}],[\"www\",{\"1\":{\"7\":1,\"21\":1}}],[\"wc\",{\"1\":{\"148\":2}}],[\"wcgw\",{\"1\":{\"35\":2}}],[\"wcag\",{\"1\":{\"7\":2}}],[\"wcf\",{\"1\":{\"4\":2}}],[\"wa\",{\"1\":{\"147\":4,\"188\":4,\"200\":5,\"210\":10,\"212\":2,\"226\":6,\"228\":8,\"229\":3,\"234\":6}}],[\"wattage\",{\"1\":{\"33\":1}}],[\"watchdog\",{\"1\":{\"26\":2}}],[\"wazuh\",{\"1\":{\"22\":1}}],[\"wait\",{\"1\":{\"192\":2}}],[\"waitforevent\",{\"1\":{\"151\":1}}],[\"waits\",{\"1\":{\"11\":2}}],[\"wais\",{\"1\":{\"21\":2}}],[\"wanted\",{\"1\":{\"147\":2}}],[\"want\",{\"1\":{\"69\":1,\"70\":1,\"72\":1,\"79\":1,\"84\":1,\"88\":1,\"124\":2,\"139\":1,\"140\":1,\"144\":1,\"147\":4,\"148\":1,\"151\":1,\"162\":2,\"166\":1,\"171\":1,\"176\":1,\"187\":1,\"195\":1,\"196\":1,\"209\":1,\"225\":1,\"229\":2,\"231\":1}}],[\"wan\",{\"1\":{\"21\":7}}],[\"wavelengths\",{\"1\":{\"21\":2}}],[\"wavelength\",{\"1\":{\"21\":1}}],[\"walk\",{\"0\":{\"77\":1},\"1\":{\"77\":2,\"78\":1}}],[\"wal\",{\"1\":{\"17\":2}}],[\"warning\",{\"1\":{\"40\":1,\"106\":1,\"131\":1}}],[\"warehousing\",{\"1\":{\"17\":1}}],[\"warehouse\",{\"1\":{\"17\":4}}],[\"war\",{\"1\":{\"11\":1}}],[\"warp\",{\"1\":{\"11\":1,\"33\":1}}],[\"waste\",{\"1\":{\"237\":1}}],[\"wasn\",{\"1\":{\"78\":1,\"95\":1}}],[\"was\",{\"1\":{\"11\":2,\"21\":1,\"25\":2,\"35\":3,\"40\":1,\"53\":2,\"66\":2,\"79\":1,\"87\":1,\"88\":2,\"89\":1,\"96\":1,\"107\":1,\"141\":2,\"147\":1,\"150\":1,\"151\":2,\"171\":1,\"201\":1,\"212\":1,\"215\":1,\"221\":1,\"227\":1,\"230\":1,\"231\":1,\"237\":1,\"240\":1}}],[\"wasm\",{\"1\":{\"7\":1}}],[\"ways\",{\"1\":{\"167\":1,\"204\":1}}],[\"wayland\",{\"1\":{\"11\":1}}],[\"way\",{\"1\":{\"5\":1,\"13\":1,\"35\":1,\"72\":1,\"74\":2,\"85\":1,\"86\":1,\"89\":2,\"95\":2,\"96\":1,\"110\":1,\"117\":2,\"118\":1,\"123\":1,\"124\":2,\"141\":1,\"144\":1,\"146\":1,\"147\":2,\"148\":1,\"168\":1,\"169\":1,\"176\":2,\"177\":1,\"183\":1,\"185\":2,\"186\":1,\"194\":2,\"205\":3,\"207\":1,\"211\":1,\"213\":2,\"217\":1,\"218\":2,\"232\":1,\"234\":1}}],[\"why\",{\"1\":{\"48\":1,\"57\":1,\"74\":1,\"75\":1,\"97\":1,\"115\":1,\"123\":1,\"130\":1,\"159\":1,\"164\":1,\"183\":1,\"185\":1,\"188\":1,\"199\":1}}],[\"whatwg\",{\"1\":{\"36\":1}}],[\"what\",{\"0\":{\"225\":1},\"1\":{\"9\":2,\"35\":3,\"41\":1,\"75\":3,\"86\":1,\"87\":1,\"89\":1,\"93\":1,\"94\":1,\"96\":3,\"123\":1,\"124\":1,\"135\":2,\"143\":2,\"145\":1,\"147\":10,\"148\":1,\"154\":1,\"162\":2,\"166\":1,\"168\":1,\"170\":4,\"171\":1,\"179\":1,\"183\":1,\"189\":1,\"195\":1,\"196\":1,\"197\":1,\"201\":1,\"205\":2,\"213\":1,\"214\":1,\"215\":1,\"223\":1,\"225\":1,\"227\":5,\"228\":3,\"229\":1,\"232\":1,\"243\":2}}],[\"whatsapp\",{\"1\":{\"9\":1}}],[\"white\",{\"1\":{\"53\":2,\"62\":1,\"64\":1,\"87\":3,\"88\":1,\"89\":1,\"95\":1}}],[\"whitespace\",{\"1\":{\"53\":2,\"58\":2,\"85\":5,\"87\":3,\"88\":3,\"89\":9,\"94\":1,\"95\":1,\"106\":7,\"107\":2}}],[\"whitelists\",{\"1\":{\"22\":1}}],[\"which\",{\"1\":{\"9\":1,\"10\":1,\"22\":2,\"26\":1,\"32\":1,\"35\":1,\"41\":3,\"43\":1,\"45\":1,\"46\":2,\"50\":2,\"52\":4,\"53\":1,\"55\":1,\"57\":2,\"58\":6,\"59\":3,\"61\":6,\"63\":2,\"64\":1,\"69\":1,\"70\":3,\"72\":2,\"74\":1,\"75\":1,\"77\":3,\"78\":2,\"79\":2,\"80\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":2,\"86\":1,\"87\":1,\"88\":2,\"89\":3,\"92\":2,\"94\":2,\"95\":4,\"96\":5,\"97\":1,\"99\":1,\"102\":2,\"104\":2,\"105\":4,\"106\":2,\"107\":1,\"110\":1,\"112\":1,\"115\":2,\"116\":1,\"123\":7,\"124\":12,\"129\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"138\":1,\"139\":4,\"141\":3,\"144\":1,\"147\":3,\"148\":2,\"150\":3,\"151\":3,\"153\":3,\"156\":2,\"159\":2,\"160\":2,\"162\":1,\"167\":2,\"169\":1,\"171\":2,\"173\":1,\"174\":4,\"175\":1,\"176\":1,\"177\":4,\"179\":4,\"180\":2,\"181\":1,\"183\":1,\"184\":1,\"185\":11,\"186\":2,\"187\":4,\"188\":3,\"189\":5,\"190\":6,\"191\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":2,\"198\":1,\"200\":5,\"201\":2,\"205\":1,\"208\":1,\"210\":2,\"218\":2,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"228\":5,\"230\":3,\"233\":1,\"234\":2,\"235\":2,\"236\":1,\"238\":1,\"239\":3,\"243\":5,\"245\":1,\"246\":1,\"248\":1,\"249\":3,\"251\":1}}],[\"while\",{\"1\":{\"9\":1,\"21\":1,\"43\":1,\"53\":1,\"57\":2,\"58\":1,\"66\":1,\"68\":1,\"69\":1,\"77\":1,\"85\":1,\"87\":3,\"89\":1,\"96\":1,\"104\":2,\"106\":2,\"110\":3,\"124\":1,\"146\":1,\"160\":1,\"163\":1,\"169\":1,\"170\":1,\"171\":1,\"190\":1,\"193\":1,\"197\":1,\"201\":2,\"206\":1,\"230\":1,\"247\":1,\"248\":1,\"249\":1}}],[\"whois\",{\"1\":{\"21\":3,\"36\":1}}],[\"whole\",{\"1\":{\"10\":1,\"61\":1,\"226\":1}}],[\"whose\",{\"1\":{\"9\":1,\"10\":1,\"109\":1}}],[\"who\",{\"1\":{\"6\":1,\"171\":1}}],[\"whether\",{\"1\":{\"25\":1,\"35\":1,\"46\":1,\"66\":1,\"77\":2,\"78\":1,\"79\":1,\"88\":1,\"106\":1,\"174\":1,\"185\":9,\"186\":1,\"240\":1,\"247\":1,\"249\":1}}],[\"wheeler\",{\"1\":{\"16\":1}}],[\"whenever\",{\"1\":{\"71\":1}}],[\"when\",{\"1\":{\"6\":2,\"9\":1,\"14\":1,\"21\":2,\"22\":2,\"24\":1,\"35\":2,\"40\":1,\"45\":3,\"53\":1,\"58\":2,\"63\":1,\"64\":1,\"66\":1,\"70\":1,\"72\":1,\"74\":1,\"75\":3,\"77\":3,\"78\":1,\"84\":1,\"85\":1,\"87\":3,\"88\":1,\"89\":1,\"92\":1,\"95\":3,\"96\":8,\"99\":2,\"104\":1,\"106\":1,\"107\":1,\"121\":1,\"124\":4,\"139\":3,\"140\":1,\"141\":2,\"146\":1,\"158\":1,\"171\":1,\"172\":1,\"185\":4,\"186\":5,\"187\":3,\"188\":5,\"189\":1,\"190\":4,\"191\":2,\"192\":1,\"193\":2,\"194\":1,\"201\":4,\"204\":1,\"208\":2,\"209\":1,\"211\":1,\"212\":1,\"215\":1,\"216\":1,\"217\":2,\"221\":1,\"224\":1,\"227\":1,\"239\":5,\"240\":4,\"241\":1,\"242\":1,\"243\":1,\"247\":1,\"248\":1,\"249\":1}}],[\"whereas\",{\"1\":{\"107\":1,\"159\":1,\"164\":1}}],[\"where\",{\"1\":{\"5\":4,\"7\":3,\"9\":1,\"10\":3,\"15\":1,\"17\":1,\"21\":2,\"25\":2,\"32\":1,\"33\":1,\"51\":1,\"52\":1,\"57\":1,\"63\":2,\"69\":2,\"72\":1,\"75\":1,\"76\":1,\"79\":1,\"82\":3,\"83\":1,\"85\":2,\"86\":1,\"87\":1,\"88\":2,\"89\":4,\"90\":1,\"96\":1,\"97\":4,\"102\":1,\"112\":1,\"116\":1,\"122\":1,\"124\":2,\"133\":1,\"148\":1,\"149\":1,\"151\":1,\"166\":2,\"172\":1,\"173\":1,\"180\":1,\"186\":1,\"187\":1,\"194\":1,\"196\":1,\"197\":2,\"201\":1,\"208\":1,\"210\":2,\"217\":1,\"228\":1,\"229\":3,\"230\":1,\"231\":1,\"232\":1,\"235\":1,\"237\":1,\"239\":1,\"240\":2}}],[\"wfh\",{\"1\":{\"35\":2}}],[\"wfw\",{\"1\":{\"11\":1}}],[\"wf\",{\"1\":{\"4\":1}}],[\"wildcard\",{\"1\":{\"147\":1}}],[\"willing\",{\"1\":{\"87\":1,\"148\":1}}],[\"will\",{\"1\":{\"0\":1,\"41\":2,\"43\":1,\"45\":1,\"50\":1,\"52\":4,\"53\":3,\"54\":1,\"56\":2,\"58\":1,\"59\":2,\"60\":3,\"61\":7,\"63\":3,\"64\":1,\"66\":2,\"68\":1,\"69\":6,\"70\":3,\"71\":1,\"72\":4,\"74\":4,\"78\":4,\"79\":2,\"80\":1,\"81\":1,\"82\":2,\"84\":2,\"86\":2,\"89\":1,\"93\":1,\"95\":1,\"96\":1,\"105\":2,\"106\":2,\"116\":7,\"122\":1,\"124\":4,\"129\":1,\"131\":1,\"134\":1,\"141\":2,\"143\":2,\"144\":4,\"145\":1,\"146\":3,\"147\":4,\"148\":5,\"159\":1,\"160\":1,\"162\":1,\"167\":1,\"168\":8,\"169\":1,\"177\":5,\"179\":1,\"180\":1,\"181\":2,\"183\":1,\"185\":4,\"186\":4,\"187\":7,\"189\":1,\"190\":2,\"192\":3,\"193\":2,\"194\":1,\"195\":2,\"196\":1,\"198\":2,\"202\":1,\"205\":1,\"209\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":2,\"218\":1,\"224\":1,\"225\":2,\"228\":2,\"231\":1,\"232\":1,\"235\":2,\"236\":1,\"237\":2,\"238\":2,\"239\":6,\"240\":1,\"241\":1,\"244\":1,\"246\":2,\"247\":1,\"249\":5}}],[\"wihtout\",{\"1\":{\"94\":1}}],[\"wish\",{\"1\":{\"85\":1}}],[\"wii\",{\"1\":{\"25\":1}}],[\"wi\",{\"1\":{\"21\":1,\"22\":1,\"36\":1}}],[\"wireguard\",{\"1\":{\"21\":1}}],[\"wireless\",{\"1\":{\"21\":1}}],[\"wire\",{\"1\":{\"15\":1,\"31\":2}}],[\"win\",{\"1\":{\"35\":1}}],[\"wins\",{\"1\":{\"21\":3}}],[\"winrar\",{\"1\":{\"16\":1}}],[\"windir\",{\"1\":{\"13\":1}}],[\"windowing\",{\"1\":{\"11\":1}}],[\"window\",{\"1\":{\"5\":3,\"11\":2,\"16\":2,\"21\":1,\"29\":1,\"35\":1,\"43\":1,\"45\":2,\"84\":1,\"161\":1}}],[\"windows\",{\"1\":{\"4\":7,\"5\":4,\"7\":2,\"8\":2,\"9\":8,\"11\":27,\"13\":8,\"14\":4,\"17\":1,\"21\":10,\"22\":2,\"25\":3,\"30\":1,\"33\":3,\"35\":1,\"123\":12,\"124\":14,\"131\":1,\"133\":1,\"143\":2,\"164\":1}}],[\"winhelp\",{\"1\":{\"13\":1}}],[\"win32\",{\"1\":{\"11\":1}}],[\"wizards\",{\"1\":{\"9\":1}}],[\"wipe\",{\"1\":{\"22\":1}}],[\"wip\",{\"1\":{\"6\":2}}],[\"wimp\",{\"1\":{\"5\":2,\"11\":2}}],[\"widestrs\",{\"1\":{\"139\":1}}],[\"widespread\",{\"1\":{\"14\":1,\"21\":1}}],[\"widecstringobj\",{\"1\":{\"139\":4}}],[\"widecstring\",{\"1\":{\"138\":2,\"139\":11,\"154\":1,\"197\":1}}],[\"widevine\",{\"1\":{\"22\":1}}],[\"widely\",{\"1\":{\"6\":1,\"8\":1,\"11\":2,\"13\":3,\"16\":4,\"20\":1,\"21\":2,\"22\":2,\"25\":3,\"30\":1,\"31\":2,\"36\":1,\"147\":1}}],[\"wide\",{\"1\":{\"5\":1,\"7\":1,\"11\":1,\"17\":2,\"21\":3,\"28\":1,\"29\":3,\"34\":1,\"36\":1,\"139\":3,\"248\":2}}],[\"without\",{\"1\":{\"6\":1,\"7\":2,\"11\":1,\"17\":1,\"19\":1,\"21\":8,\"24\":2,\"25\":2,\"29\":1,\"30\":1,\"33\":1,\"35\":2,\"48\":1,\"63\":1,\"66\":1,\"95\":1,\"96\":1,\"102\":1,\"124\":1,\"139\":1,\"143\":1,\"147\":1,\"148\":2,\"160\":1,\"195\":1,\"201\":1,\"215\":1,\"222\":1,\"246\":1,\"249\":1}}],[\"within\",{\"1\":{\"5\":1,\"9\":1,\"10\":4,\"17\":1,\"20\":1,\"21\":1,\"23\":1,\"29\":1,\"30\":1,\"31\":1,\"53\":1,\"77\":1,\"78\":1,\"85\":1,\"110\":4,\"171\":1,\"174\":2,\"175\":1,\"205\":1,\"210\":1,\"214\":2,\"217\":1}}],[\"with\",{\"0\":{\"229\":1},\"1\":{\"2\":1,\"4\":7,\"5\":2,\"6\":9,\"7\":13,\"8\":5,\"9\":28,\"10\":13,\"11\":38,\"12\":6,\"13\":8,\"14\":9,\"15\":11,\"16\":14,\"17\":13,\"18\":5,\"19\":1,\"20\":2,\"21\":36,\"22\":8,\"23\":2,\"24\":11,\"25\":10,\"26\":2,\"27\":1,\"28\":1,\"29\":11,\"30\":11,\"31\":7,\"32\":5,\"33\":7,\"34\":2,\"35\":5,\"36\":4,\"37\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":3,\"46\":2,\"47\":1,\"48\":1,\"49\":2,\"55\":1,\"57\":3,\"58\":3,\"59\":3,\"60\":1,\"61\":1,\"62\":2,\"63\":3,\"64\":1,\"65\":3,\"66\":2,\"68\":1,\"69\":1,\"71\":3,\"75\":1,\"77\":1,\"78\":4,\"82\":5,\"83\":3,\"84\":1,\"85\":4,\"86\":1,\"87\":1,\"88\":2,\"89\":7,\"92\":1,\"94\":8,\"95\":4,\"96\":4,\"97\":2,\"98\":2,\"99\":3,\"100\":2,\"101\":4,\"102\":1,\"103\":4,\"104\":5,\"105\":2,\"107\":1,\"108\":1,\"109\":4,\"110\":1,\"112\":1,\"115\":2,\"116\":4,\"119\":1,\"121\":2,\"123\":1,\"124\":8,\"125\":1,\"131\":1,\"133\":1,\"135\":4,\"139\":1,\"140\":1,\"141\":1,\"147\":1,\"150\":1,\"151\":1,\"155\":1,\"158\":2,\"159\":1,\"160\":2,\"161\":1,\"164\":3,\"166\":1,\"168\":1,\"169\":1,\"170\":3,\"171\":5,\"174\":1,\"176\":1,\"179\":1,\"182\":1,\"185\":2,\"186\":3,\"187\":1,\"188\":3,\"190\":2,\"191\":1,\"192\":1,\"194\":2,\"197\":1,\"200\":1,\"206\":2,\"208\":2,\"209\":1,\"210\":2,\"212\":1,\"214\":1,\"222\":3,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"235\":2,\"236\":1,\"237\":4,\"239\":2,\"241\":1,\"246\":1,\"247\":1,\"248\":2}}],[\"were\",{\"1\":{\"77\":1,\"125\":1,\"131\":1,\"147\":1,\"223\":1}}],[\"went\",{\"1\":{\"40\":1,\"183\":1}}],[\"weak\",{\"1\":{\"37\":1}}],[\"weaken\",{\"1\":{\"5\":1}}],[\"well\",{\"1\":{\"35\":1,\"44\":1,\"45\":1,\"47\":1,\"49\":1,\"69\":1,\"77\":1,\"84\":2,\"85\":1,\"89\":1,\"92\":1,\"95\":1,\"96\":2,\"100\":1,\"105\":1,\"147\":1,\"151\":1,\"154\":1,\"163\":1,\"177\":1,\"180\":1,\"183\":1,\"195\":1,\"200\":1,\"227\":1,\"233\":1,\"237\":1,\"247\":1}}],[\"welch\",{\"1\":{\"16\":1}}],[\"welcome\",{\"1\":{\"0\":1,\"45\":2,\"250\":1}}],[\"week\",{\"1\":{\"35\":4}}],[\"weechat\",{\"1\":{\"21\":1}}],[\"we\",{\"1\":{\"35\":5,\"41\":7,\"42\":2,\"43\":13,\"45\":6,\"46\":1,\"47\":8,\"48\":3,\"49\":4,\"50\":1,\"51\":2,\"52\":3,\"53\":7,\"54\":1,\"55\":6,\"56\":2,\"57\":1,\"59\":3,\"60\":2,\"61\":15,\"62\":3,\"63\":5,\"64\":6,\"65\":1,\"66\":10,\"68\":2,\"69\":11,\"70\":6,\"71\":10,\"72\":9,\"73\":4,\"74\":11,\"75\":8,\"76\":3,\"77\":11,\"78\":9,\"79\":15,\"80\":4,\"81\":1,\"82\":12,\"83\":5,\"84\":4,\"85\":10,\"86\":8,\"87\":29,\"88\":10,\"89\":26,\"90\":4,\"92\":12,\"93\":2,\"94\":2,\"95\":5,\"96\":25,\"97\":8,\"98\":1,\"99\":4,\"100\":4,\"101\":4,\"102\":5,\"104\":14,\"105\":3,\"106\":9,\"107\":3,\"108\":1,\"109\":1,\"110\":11,\"116\":1,\"117\":7,\"118\":2,\"119\":3,\"120\":1,\"121\":5,\"122\":5,\"123\":16,\"124\":48,\"125\":1,\"127\":4,\"128\":1,\"129\":1,\"130\":4,\"131\":7,\"132\":4,\"133\":6,\"134\":7,\"135\":16,\"136\":2,\"137\":2,\"138\":3,\"139\":12,\"140\":11,\"141\":16,\"142\":1,\"143\":9,\"144\":7,\"145\":5,\"146\":3,\"147\":43,\"148\":8,\"149\":4,\"150\":7,\"151\":14,\"152\":5,\"153\":4,\"154\":9,\"155\":3,\"156\":5,\"157\":2,\"158\":2,\"159\":7,\"160\":20,\"161\":9,\"162\":13,\"163\":6,\"164\":12,\"165\":2,\"166\":12,\"167\":1,\"168\":5,\"169\":6,\"170\":5,\"171\":10,\"172\":7,\"173\":2,\"174\":6,\"175\":7,\"176\":14,\"177\":21,\"178\":5,\"179\":8,\"180\":5,\"181\":13,\"182\":6,\"183\":9,\"184\":1,\"185\":8,\"186\":6,\"187\":13,\"188\":14,\"189\":2,\"190\":10,\"191\":12,\"192\":8,\"193\":15,\"194\":6,\"195\":6,\"196\":4,\"197\":13,\"198\":8,\"199\":5,\"200\":18,\"201\":1,\"202\":3,\"203\":2,\"204\":1,\"205\":1,\"206\":6,\"208\":7,\"209\":6,\"210\":13,\"211\":11,\"212\":10,\"213\":6,\"214\":9,\"215\":8,\"216\":2,\"217\":3,\"218\":9,\"220\":3,\"221\":1,\"222\":5,\"223\":18,\"224\":2,\"225\":4,\"226\":6,\"227\":9,\"228\":10,\"229\":18,\"230\":16,\"231\":12,\"232\":3,\"234\":7,\"235\":7,\"236\":3,\"237\":20,\"238\":1,\"239\":16,\"240\":11,\"241\":2,\"242\":2,\"243\":3,\"244\":3,\"245\":1,\"246\":8,\"247\":1,\"248\":12,\"249\":7}}],[\"west\",{\"1\":{\"24\":1}}],[\"weird\",{\"1\":{\"124\":1}}],[\"weight\",{\"1\":{\"9\":1}}],[\"weighted\",{\"1\":{\"9\":1}}],[\"weinberger\",{\"1\":{\"8\":1}}],[\"wet\",{\"1\":{\"5\":1}}],[\"websocket\",{\"1\":{\"21\":3}}],[\"websites\",{\"1\":{\"7\":1}}],[\"website\",{\"1\":{\"7\":1}}],[\"webrtc\",{\"1\":{\"21\":2}}],[\"webgpu\",{\"1\":{\"10\":1}}],[\"webassembly\",{\"1\":{\"7\":1}}],[\"web\",{\"0\":{\"7\":1},\"1\":{\"0\":1,\"4\":3,\"5\":1,\"6\":2,\"7\":23,\"8\":1,\"13\":7,\"14\":1,\"15\":4,\"20\":4,\"21\":7,\"22\":1,\"35\":1,\"36\":6}}],[\"hvf\",{\"1\":{\"134\":1}}],[\"h>\",{\"1\":{\"124\":2}}],[\"hn\",{\"1\":{\"35\":1}}],[\"hba\",{\"1\":{\"30\":1}}],[\"hbas\",{\"1\":{\"21\":1,\"30\":1}}],[\"hbase\",{\"1\":{\"17\":1}}],[\"hbm3\",{\"1\":{\"29\":1}}],[\"hbm2\",{\"1\":{\"29\":1}}],[\"hbm\",{\"1\":{\"29\":1}}],[\"hsts\",{\"1\":{\"22\":1}}],[\"hs256\",{\"1\":{\"22\":1}}],[\"hsm\",{\"1\":{\"22\":3}}],[\"hdr\",{\"1\":{\"151\":1}}],[\"hdl\",{\"1\":{\"33\":1}}],[\"hdlc\",{\"1\":{\"21\":4}}],[\"hdmi\",{\"1\":{\"32\":3,\"33\":1}}],[\"hdcp\",{\"1\":{\"32\":3}}],[\"hd\",{\"1\":{\"32\":2}}],[\"hdds\",{\"1\":{\"31\":5}}],[\"hdd\",{\"1\":{\"31\":3,\"135\":2}}],[\"hdf5\",{\"1\":{\"15\":2}}],[\"hlt=0\",{\"1\":{\"200\":1,\"210\":1,\"212\":1}}],[\"hlt=1\",{\"1\":{\"188\":1,\"210\":1}}],[\"hlt\",{\"1\":{\"130\":1,\"131\":1,\"205\":2,\"209\":1,\"210\":2,\"215\":1}}],[\"hll\",{\"1\":{\"17\":1}}],[\"hlsl\",{\"1\":{\"10\":3}}],[\"hh\",{\"1\":{\"13\":1}}],[\"hybrid\",{\"1\":{\"11\":1,\"121\":1}}],[\"hyper\",{\"1\":{\"24\":1,\"28\":1}}],[\"hyperloglog\",{\"1\":{\"17\":1}}],[\"hypervisor\",{\"1\":{\"11\":3,\"27\":1}}],[\"hyperplanes\",{\"1\":{\"9\":1}}],[\"hypertext\",{\"1\":{\"7\":2,\"8\":1,\"21\":1,\"36\":1}}],[\"h\",{\"1\":{\"11\":1,\"36\":3,\"98\":1,\"102\":2,\"124\":2}}],[\"hmac\",{\"1\":{\"22\":3}}],[\"hma\",{\"1\":{\"11\":2}}],[\"hm\",{\"1\":{\"10\":1}}],[\"hpet\",{\"1\":{\"33\":2}}],[\"hp\",{\"1\":{\"9\":1,\"11\":2,\"25\":5}}],[\"hpc\",{\"1\":{\"8\":1,\"24\":1,\"27\":1,\"28\":1}}],[\"hour\",{\"1\":{\"153\":1}}],[\"hourly\",{\"1\":{\"35\":1}}],[\"hobby\",{\"1\":{\"116\":1}}],[\"however\",{\"1\":{\"40\":1,\"52\":1,\"57\":1,\"72\":1,\"77\":2,\"95\":1,\"97\":1,\"99\":1,\"104\":1,\"124\":3,\"127\":1,\"146\":1,\"177\":1,\"179\":1,\"185\":2,\"186\":1,\"207\":1,\"225\":1,\"234\":1}}],[\"how\",{\"1\":{\"35\":2,\"40\":1,\"56\":2,\"58\":2,\"59\":1,\"66\":2,\"74\":1,\"75\":1,\"78\":3,\"87\":1,\"110\":1,\"112\":1,\"124\":1,\"139\":1,\"145\":1,\"147\":4,\"150\":1,\"159\":2,\"160\":1,\"164\":1,\"172\":1,\"173\":1,\"174\":2,\"176\":2,\"179\":1,\"193\":1,\"200\":1,\"201\":1,\"227\":1,\"228\":1,\"229\":2,\"234\":1,\"238\":1,\"239\":2,\"249\":1}}],[\"honest\",{\"1\":{\"35\":1}}],[\"honeywell\",{\"1\":{\"11\":2}}],[\"honor\",{\"1\":{\"23\":1}}],[\"horizon\",{\"1\":{\"21\":1}}],[\"hope\",{\"1\":{\"35\":1}}],[\"hops\",{\"1\":{\"21\":1}}],[\"hop\",{\"1\":{\"21\":4}}],[\"homebrew\",{\"1\":{\"42\":1,\"134\":2}}],[\"home\",{\"1\":{\"11\":2,\"21\":3,\"24\":1,\"25\":1,\"35\":2,\"124\":22}}],[\"homoiconicity\",{\"1\":{\"8\":1}}],[\"hospitality\",{\"1\":{\"11\":1}}],[\"host1\",{\"1\":{\"24\":1}}],[\"hostnames\",{\"1\":{\"36\":1}}],[\"hostname\",{\"1\":{\"21\":1}}],[\"hosted\",{\"1\":{\"11\":1,\"24\":1,\"36\":1,\"122\":1}}],[\"hosts\",{\"1\":{\"11\":1,\"21\":4,\"22\":1,\"24\":1,\"31\":1}}],[\"hosting\",{\"1\":{\"11\":1,\"36\":1}}],[\"host\",{\"1\":{\"7\":2,\"9\":1,\"11\":1,\"21\":12,\"22\":2,\"24\":2,\"30\":4,\"31\":3,\"41\":1,\"124\":2}}],[\"hoist\",{\"1\":{\"10\":1}}],[\"hover\",{\"1\":{\"9\":1,\"66\":1}}],[\"hotplug\",{\"1\":{\"34\":1}}],[\"hotp\",{\"1\":{\"22\":1}}],[\"hotels\",{\"1\":{\"11\":1}}],[\"hotspot\",{\"1\":{\"10\":1}}],[\"hot\",{\"1\":{\"9\":1,\"10\":1,\"31\":1,\"34\":1}}],[\"holds\",{\"1\":{\"58\":1,\"78\":1,\"181\":1,\"201\":3}}],[\"holder\",{\"1\":{\"52\":1}}],[\"holding\",{\"1\":{\"17\":1}}],[\"hold\",{\"1\":{\"5\":1,\"70\":1,\"150\":1,\"156\":1,\"177\":1,\"185\":1,\"187\":2,\"201\":1,\"212\":1}}],[\"hth\",{\"1\":{\"35\":2}}],[\"htop\",{\"1\":{\"9\":1}}],[\"html5\",{\"1\":{\"12\":1}}],[\"html\",{\"1\":{\"7\":8,\"12\":3,\"13\":4,\"21\":1,\"36\":3,\"133\":1}}],[\"http=l7\",{\"1\":{\"21\":1}}],[\"httpclient\",{\"1\":{\"9\":1}}],[\"http\",{\"1\":{\"4\":1,\"7\":5,\"9\":3,\"14\":1,\"16\":2,\"21\":9,\"22\":1,\"36\":2,\"54\":1}}],[\"https\",{\"1\":{\"1\":1,\"7\":3,\"21\":5,\"22\":2,\"116\":1,\"118\":1,\"121\":1,\"133\":1,\"250\":2}}],[\"hurdle\",{\"1\":{\"123\":1}}],[\"huge\",{\"1\":{\"67\":1}}],[\"humble\",{\"1\":{\"35\":1}}],[\"humorously\",{\"1\":{\"35\":1}}],[\"humor\",{\"1\":{\"35\":1}}],[\"human\",{\"1\":{\"6\":2,\"13\":1,\"18\":4,\"33\":2}}],[\"huffman\",{\"1\":{\"16\":1}}],[\"hubs\",{\"1\":{\"21\":1}}],[\"hub\",{\"1\":{\"4\":1,\"24\":1,\"30\":2,\"32\":1,\"33\":1}}],[\"hci\",{\"1\":{\"6\":1,\"30\":3}}],[\"hi\",{\"1\":{\"201\":5}}],[\"higlight\",{\"1\":{\"96\":1}}],[\"highlight\",{\"1\":{\"139\":1}}],[\"highlight=efi\",{\"1\":{\"133\":1}}],[\"highlighted\",{\"1\":{\"75\":1,\"80\":3,\"96\":1,\"147\":1,\"229\":1}}],[\"highlighting\",{\"1\":{\"44\":1,\"49\":2,\"50\":1}}],[\"highlights\",{\"1\":{\"35\":1,\"75\":1}}],[\"highly\",{\"1\":{\"9\":1,\"11\":2,\"32\":1}}],[\"higher\",{\"0\":{\"178\":1},\"1\":{\"9\":1,\"20\":3,\"21\":2,\"29\":3,\"30\":1,\"31\":4,\"32\":1,\"57\":2,\"59\":1,\"102\":1,\"105\":1,\"108\":1,\"109\":1,\"173\":2,\"174\":3,\"177\":1,\"178\":3,\"179\":1,\"181\":3,\"183\":1,\"186\":1,\"188\":1,\"238\":1,\"252\":1}}],[\"highest\",{\"1\":{\"9\":1,\"21\":1,\"103\":1,\"105\":1,\"180\":1,\"194\":1,\"199\":2}}],[\"high\",{\"1\":{\"8\":2,\"9\":2,\"10\":2,\"11\":7,\"12\":1,\"16\":7,\"17\":2,\"19\":1,\"21\":7,\"24\":2,\"26\":1,\"27\":1,\"29\":6,\"30\":9,\"31\":3,\"32\":9,\"33\":3,\"34\":1,\"124\":1,\"202\":1,\"213\":1}}],[\"hint\",{\"1\":{\"196\":1}}],[\"hints\",{\"1\":{\"94\":1}}],[\"hindley\",{\"1\":{\"10\":1}}],[\"history\",{\"1\":{\"35\":2}}],[\"historically\",{\"1\":{\"14\":1,\"16\":1,\"21\":1,\"25\":2,\"30\":1,\"32\":1,\"36\":1}}],[\"historical\",{\"1\":{\"3\":3,\"4\":1,\"6\":1,\"8\":1,\"9\":1,\"11\":1,\"12\":1,\"14\":2,\"20\":1,\"21\":4,\"22\":1,\"24\":1,\"25\":3,\"28\":1,\"29\":1,\"30\":2,\"31\":1,\"32\":1,\"33\":1,\"34\":1}}],[\"hidden\",{\"1\":{\"35\":1,\"147\":1}}],[\"hid\",{\"1\":{\"30\":1,\"33\":3}}],[\"hides\",{\"1\":{\"11\":1}}],[\"hits\",{\"1\":{\"26\":1}}],[\"hipaa\",{\"1\":{\"23\":2}}],[\"himem\",{\"1\":{\"11\":1}}],[\"hierarchy\",{\"1\":{\"5\":1,\"21\":3,\"177\":1}}],[\"hierarchical\",{\"1\":{\"4\":1,\"11\":1,\"15\":1,\"17\":2,\"21\":1,\"26\":1,\"173\":1}}],[\"hence\",{\"1\":{\"159\":1,\"181\":1,\"209\":1}}],[\"hexnum\",{\"1\":{\"99\":3}}],[\"hexdigit\",{\"1\":{\"99\":3}}],[\"hex\",{\"1\":{\"98\":1,\"99\":1}}],[\"hexadecimal\",{\"1\":{\"98\":1,\"99\":1}}],[\"hedged\",{\"1\":{\"35\":1}}],[\"hewlett\",{\"1\":{\"25\":1}}],[\"heroku\",{\"1\":{\"24\":1}}],[\"here\",{\"1\":{\"0\":1,\"35\":1,\"43\":1,\"44\":1,\"47\":1,\"48\":1,\"52\":1,\"53\":1,\"63\":1,\"66\":1,\"68\":2,\"74\":1,\"80\":1,\"85\":1,\"87\":1,\"89\":1,\"92\":1,\"94\":1,\"96\":1,\"97\":1,\"98\":1,\"103\":1,\"110\":1,\"116\":1,\"124\":3,\"131\":1,\"135\":1,\"140\":1,\"143\":1,\"147\":2,\"150\":1,\"153\":1,\"161\":1,\"162\":2,\"163\":1,\"164\":1,\"166\":1,\"168\":1,\"171\":1,\"174\":2,\"176\":1,\"177\":1,\"179\":2,\"181\":2,\"185\":2,\"186\":2,\"187\":1,\"188\":1,\"190\":1,\"191\":1,\"192\":1,\"195\":1,\"197\":2,\"201\":1,\"209\":1,\"210\":1,\"214\":1,\"218\":1,\"223\":1,\"226\":1,\"228\":2,\"234\":2,\"239\":2,\"240\":2,\"248\":1}}],[\"heterogeneous\",{\"1\":{\"15\":1}}],[\"height\",{\"1\":{\"9\":1}}],[\"hell\",{\"1\":{\"35\":1}}],[\"hello\",{\"1\":{\"7\":1,\"8\":1,\"60\":1,\"61\":1,\"65\":1,\"66\":2,\"70\":1,\"72\":3,\"90\":1,\"94\":1,\"97\":1,\"102\":1,\"139\":2,\"140\":1,\"145\":1,\"161\":1,\"191\":2,\"206\":2,\"213\":2,\"214\":1,\"215\":1,\"222\":1,\"223\":1,\"228\":1,\"230\":2,\"231\":1,\"243\":5,\"246\":4}}],[\"helper\",{\"1\":{\"190\":1,\"191\":1,\"192\":1,\"220\":1}}],[\"helped\",{\"1\":{\"21\":1}}],[\"helps\",{\"1\":{\"35\":1}}],[\"helpful\",{\"1\":{\"35\":1}}],[\"help\",{\"1\":{\"3\":1,\"13\":2,\"35\":2,\"57\":1,\"82\":1,\"150\":1,\"188\":1}}],[\"hebrew\",{\"1\":{\"7\":1}}],[\"heat\",{\"1\":{\"29\":1}}],[\"health\",{\"1\":{\"23\":2,\"24\":1}}],[\"heavily\",{\"1\":{\"17\":1}}],[\"heavy\",{\"1\":{\"6\":1,\"12\":1,\"17\":2,\"21\":1}}],[\"heavyweight\",{\"1\":{\"4\":2}}],[\"heapmaxptr\",{\"1\":{\"124\":2}}],[\"heapbumpptr\",{\"1\":{\"124\":4}}],[\"heap\",{\"1\":{\"11\":1,\"22\":1,\"124\":5,\"148\":1,\"162\":2}}],[\"heads\",{\"1\":{\"31\":1}}],[\"head\",{\"1\":{\"14\":1,\"31\":3,\"35\":1,\"40\":1,\"147\":3,\"168\":6,\"169\":2,\"170\":2,\"171\":4,\"179\":1,\"182\":1,\"196\":1}}],[\"headings\",{\"1\":{\"12\":1}}],[\"headersize\",{\"1\":{\"138\":1}}],[\"headers\",{\"1\":{\"11\":1,\"14\":1,\"21\":1,\"22\":2,\"124\":5,\"147\":23,\"226\":2,\"228\":2,\"229\":2,\"234\":8,\"235\":2}}],[\"header\",{\"1\":{\"7\":1,\"11\":1,\"14\":1,\"22\":2,\"138\":1,\"147\":6,\"233\":3,\"234\":3,\"235\":29,\"237\":1}}],[\"headless\",{\"1\":{\"7\":2}}],[\"habit\",{\"1\":{\"158\":1}}],[\"hack\",{\"1\":{\"87\":1}}],[\"hackers\",{\"1\":{\"11\":1}}],[\"hacker\",{\"1\":{\"3\":1,\"11\":1,\"35\":1}}],[\"had\",{\"1\":{\"45\":1,\"89\":1,\"172\":1,\"194\":1,\"199\":1,\"222\":1,\"230\":1,\"239\":1,\"240\":1,\"246\":2}}],[\"hadoop\",{\"1\":{\"15\":1,\"36\":1}}],[\"having\",{\"1\":{\"35\":1,\"70\":1,\"148\":2,\"201\":1,\"216\":1,\"217\":1,\"222\":1}}],[\"haven\",{\"1\":{\"45\":1,\"74\":1,\"76\":1,\"232\":1}}],[\"have\",{\"1\":{\"10\":1,\"35\":1,\"40\":2,\"41\":1,\"44\":1,\"48\":1,\"58\":1,\"59\":1,\"61\":1,\"64\":1,\"66\":1,\"69\":4,\"71\":3,\"72\":1,\"73\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":2,\"82\":1,\"83\":2,\"85\":1,\"87\":2,\"88\":1,\"89\":6,\"90\":1,\"91\":1,\"95\":1,\"96\":2,\"97\":1,\"98\":3,\"99\":1,\"102\":1,\"104\":3,\"105\":2,\"106\":1,\"107\":1,\"108\":2,\"110\":2,\"119\":1,\"121\":2,\"122\":1,\"123\":5,\"124\":7,\"127\":1,\"130\":2,\"131\":1,\"132\":1,\"133\":1,\"135\":2,\"141\":3,\"142\":1,\"143\":1,\"144\":1,\"147\":5,\"148\":4,\"152\":1,\"154\":1,\"159\":1,\"160\":3,\"164\":2,\"166\":1,\"168\":1,\"171\":1,\"172\":2,\"174\":1,\"176\":2,\"177\":3,\"178\":1,\"180\":1,\"185\":2,\"186\":1,\"188\":1,\"191\":3,\"193\":1,\"194\":2,\"195\":2,\"197\":1,\"200\":1,\"201\":1,\"205\":1,\"208\":2,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":2,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":2,\"229\":2,\"230\":1,\"231\":3,\"232\":1,\"234\":1,\"236\":2,\"237\":5,\"241\":1,\"243\":2,\"244\":1,\"246\":1}}],[\"hang\",{\"1\":{\"193\":1}}],[\"hangs\",{\"1\":{\"26\":1}}],[\"handover\",{\"1\":{\"161\":1}}],[\"handful\",{\"1\":{\"124\":2}}],[\"handwritten\",{\"1\":{\"58\":1,\"69\":2,\"71\":1}}],[\"hand\",{\"1\":{\"35\":1,\"56\":1,\"59\":2,\"60\":1,\"66\":1,\"135\":1,\"192\":1,\"225\":1}}],[\"handheld\",{\"1\":{\"31\":1,\"33\":1}}],[\"hands\",{\"1\":{\"21\":2,\"164\":1}}],[\"handleprotocol\",{\"1\":{\"151\":6,\"152\":1}}],[\"handleelementrename\",{\"1\":{\"82\":3}}],[\"handled\",{\"1\":{\"36\":1,\"97\":1,\"104\":1,\"105\":1}}],[\"handler\",{\"0\":{\"193\":1,\"212\":1},\"1\":{\"26\":1,\"34\":2,\"83\":3,\"141\":1,\"151\":1,\"189\":2,\"190\":9,\"191\":9,\"192\":9,\"193\":6,\"205\":1,\"206\":6,\"208\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"249\":5}}],[\"handlers\",{\"0\":{\"191\":1},\"1\":{\"9\":1,\"24\":1,\"83\":1,\"116\":1,\"124\":1,\"190\":3,\"191\":3,\"192\":3,\"193\":1,\"213\":1}}],[\"handles\",{\"1\":{\"21\":1,\"87\":1,\"189\":1,\"190\":1}}],[\"handle\",{\"0\":{\"151\":1},\"1\":{\"7\":1,\"11\":2,\"23\":2,\"34\":2,\"63\":1,\"76\":1,\"83\":1,\"88\":2,\"89\":4,\"96\":1,\"97\":1,\"99\":1,\"104\":1,\"106\":3,\"107\":1,\"110\":2,\"133\":3,\"140\":1,\"141\":1,\"150\":1,\"151\":5,\"152\":3,\"166\":1,\"171\":1,\"177\":1,\"188\":1,\"208\":1,\"211\":1,\"218\":1,\"237\":1,\"240\":2}}],[\"handling\",{\"0\":{\"66\":1,\"110\":1,\"141\":1,\"166\":1,\"192\":1,\"242\":1},\"1\":{\"7\":1,\"11\":1,\"33\":1,\"34\":1,\"63\":2,\"66\":2,\"73\":1,\"96\":1,\"110\":1,\"183\":2,\"201\":1,\"246\":1}}],[\"haproxy\",{\"1\":{\"24\":1}}],[\"happened\",{\"1\":{\"35\":1,\"240\":1}}],[\"happens\",{\"1\":{\"10\":1,\"130\":1,\"135\":1,\"170\":4,\"186\":1,\"205\":2,\"213\":1,\"215\":1,\"227\":1,\"243\":2}}],[\"happen\",{\"1\":{\"9\":1}}],[\"happy\",{\"1\":{\"6\":1,\"87\":1,\"89\":1,\"124\":1}}],[\"harmonizing\",{\"1\":{\"21\":1}}],[\"harden\",{\"1\":{\"22\":1}}],[\"hardening\",{\"1\":{\"13\":1}}],[\"hard\",{\"1\":{\"11\":1,\"25\":1,\"31\":1,\"40\":1,\"105\":1,\"216\":1,\"228\":1}}],[\"hardware\",{\"0\":{\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1},\"1\":{\"9\":1,\"10\":2,\"11\":11,\"22\":3,\"24\":4,\"25\":1,\"26\":3,\"28\":3,\"30\":4,\"33\":11,\"34\":4,\"35\":1,\"122\":2,\"188\":1,\"189\":1,\"190\":1,\"192\":1,\"201\":1,\"207\":1,\"246\":2,\"247\":1,\"252\":1}}],[\"haul\",{\"1\":{\"21\":1}}],[\"ha\",{\"1\":{\"19\":1}}],[\"hatch\",{\"1\":{\"106\":1}}],[\"hat\",{\"1\":{\"11\":1}}],[\"halted\",{\"1\":{\"215\":1}}],[\"halting\",{\"1\":{\"130\":1,\"239\":1,\"243\":2,\"246\":1}}],[\"halts\",{\"1\":{\"130\":1,\"139\":1,\"243\":2}}],[\"halt\",{\"1\":{\"30\":1,\"130\":1,\"145\":1,\"183\":1,\"209\":1,\"215\":1,\"239\":2}}],[\"half\",{\"0\":{\"178\":1},\"1\":{\"21\":1,\"31\":1,\"32\":1,\"173\":4,\"174\":4,\"176\":1,\"177\":1,\"178\":3,\"179\":1,\"181\":4,\"183\":1,\"188\":1,\"218\":2,\"252\":1}}],[\"hal\",{\"1\":{\"11\":3}}],[\"hasn\",{\"1\":{\"160\":1}}],[\"hashset\",{\"1\":{\"162\":1}}],[\"hashsetof\",{\"1\":{\"79\":2}}],[\"hashes\",{\"1\":{\"22\":1}}],[\"hash\",{\"1\":{\"21\":1,\"22\":5,\"36\":1,\"226\":4,\"228\":4,\"229\":2,\"234\":6,\"235\":2}}],[\"has\",{\"1\":{\"9\":1,\"11\":1,\"35\":1,\"40\":1,\"41\":1,\"53\":1,\"58\":2,\"75\":2,\"77\":1,\"83\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"99\":1,\"102\":1,\"105\":2,\"106\":2,\"107\":1,\"109\":1,\"110\":2,\"122\":3,\"124\":1,\"127\":1,\"135\":2,\"142\":1,\"146\":1,\"147\":1,\"151\":1,\"162\":1,\"169\":1,\"172\":1,\"179\":1,\"185\":1,\"186\":3,\"190\":1,\"191\":1,\"206\":1,\"207\":1,\"210\":1,\"217\":1,\"224\":1,\"238\":1,\"248\":1}}],[\"haskell\",{\"1\":{\"8\":1,\"9\":2,\"10\":1}}],[\"hammouda<\",{\"1\":{\"44\":1}}],[\"hammouda\",{\"0\":{\"0\":1}}],[\"tm\",{\"1\":{\"228\":30}}],[\"tmul\",{\"1\":{\"28\":1}}],[\"tmux\",{\"1\":{\"11\":1}}],[\"tdoc\",{\"1\":{\"97\":1}}],[\"tdd\",{\"1\":{\"6\":2}}],[\"tbh\",{\"1\":{\"35\":2}}],[\"tbd\",{\"1\":{\"35\":2}}],[\"tba\",{\"1\":{\"35\":2}}],[\"tv\",{\"1\":{\"32\":1}}],[\"tvs\",{\"1\":{\"32\":5}}],[\"tn\",{\"1\":{\"32\":1}}],[\"t3\",{\"1\":{\"21\":1}}],[\"tfa\",{\"1\":{\"35\":2}}],[\"tftp\",{\"1\":{\"21\":4}}],[\"tflops\",{\"1\":{\"20\":1}}],[\"t1\",{\"1\":{\"21\":3}}],[\"tla\",{\"1\":{\"35\":2}}],[\"tl\",{\"1\":{\"35\":2}}],[\"tlb\",{\"1\":{\"26\":3}}],[\"tlbs\",{\"1\":{\"26\":1}}],[\"tlds\",{\"1\":{\"21\":1}}],[\"tld\",{\"1\":{\"21\":1}}],[\"tls\",{\"1\":{\"9\":1,\"21\":5,\"22\":10,\"36\":1,\"147\":2,\"234\":1,\"235\":2}}],[\"tp\",{\"1\":{\"177\":3}}],[\"tpc\",{\"1\":{\"36\":4}}],[\"tpm\",{\"1\":{\"30\":1,\"33\":2}}],[\"tpu\",{\"1\":{\"25\":1}}],[\"tps\",{\"1\":{\"20\":2}}],[\"tpf\",{\"1\":{\"11\":4}}],[\"t0\",{\"1\":{\"16\":1}}],[\"tgz\",{\"1\":{\"16\":2}}],[\"ttl\",{\"1\":{\"21\":2,\"30\":1}}],[\"tti\",{\"1\":{\"20\":2}}],[\"tts\",{\"1\":{\"18\":1}}],[\"ttc\",{\"1\":{\"13\":1}}],[\"ttfb\",{\"1\":{\"20\":2}}],[\"ttf\",{\"1\":{\"13\":2}}],[\"ttyl\",{\"1\":{\"35\":2}}],[\"ttyusb\",{\"1\":{\"30\":1}}],[\"ttys0\",{\"1\":{\"30\":1}}],[\"ttys\",{\"1\":{\"30\":1}}],[\"tty\",{\"1\":{\"11\":3}}],[\"tc\",{\"1\":{\"177\":3}}],[\"tcg\",{\"1\":{\"24\":2}}],[\"tcp=l4\",{\"1\":{\"21\":1}}],[\"tcpdump\",{\"1\":{\"21\":1}}],[\"tcp\",{\"1\":{\"11\":1,\"21\":22,\"36\":1}}],[\"tcb\",{\"1\":{\"11\":1}}],[\"tco\",{\"1\":{\"10\":1}}],[\"t=x\",{\"1\":{\"10\":1}}],[\"tuple\",{\"1\":{\"169\":1,\"197\":1,\"235\":3}}],[\"tube\",{\"1\":{\"32\":2}}],[\"tunnels\",{\"1\":{\"21\":2}}],[\"tunneling\",{\"1\":{\"21\":3}}],[\"tunnel\",{\"1\":{\"21\":2,\"24\":1}}],[\"tuning\",{\"1\":{\"18\":1}}],[\"tune\",{\"1\":{\"18\":3}}],[\"tuned\",{\"1\":{\"18\":1}}],[\"tunable\",{\"1\":{\"17\":1}}],[\"turing\",{\"1\":{\"36\":1}}],[\"turned\",{\"1\":{\"104\":2,\"146\":1}}],[\"turns\",{\"1\":{\"79\":1,\"87\":1,\"124\":3,\"160\":1,\"163\":1}}],[\"turn\",{\"1\":{\"30\":1,\"104\":1,\"193\":1,\"220\":1,\"239\":1}}],[\"turtle\",{\"1\":{\"15\":1}}],[\"turbo\",{\"1\":{\"9\":1}}],[\"tu\",{\"1\":{\"10\":1}}],[\"tui\",{\"1\":{\"9\":2}}],[\"tutorial\",{\"1\":{\"1\":1,\"250\":1}}],[\"tutorials\",{\"1\":{\"0\":1}}],[\"txt\",{\"1\":{\"8\":1,\"21\":1}}],[\"tsv\",{\"1\":{\"15\":2}}],[\"tssdescriptorhi\",{\"1\":{\"202\":2}}],[\"tssdescriptorlo\",{\"1\":{\"202\":2}}],[\"tssdescriptor\",{\"1\":{\"202\":3}}],[\"tss64\",{\"1\":{\"188\":1,\"200\":1,\"210\":2}}],[\"tss\",{\"0\":{\"202\":1,\"203\":1},\"1\":{\"11\":1,\"186\":1,\"188\":1,\"190\":1,\"192\":3,\"200\":1,\"201\":11,\"202\":12,\"203\":1,\"204\":3,\"211\":3,\"221\":2,\"223\":1,\"240\":1}}],[\"tsrs\",{\"1\":{\"11\":2}}],[\"tsr\",{\"1\":{\"11\":1}}],[\"tsc\",{\"1\":{\"7\":1}}],[\"ts\",{\"1\":{\"7\":1,\"192\":1}}],[\"typography\",{\"1\":{\"13\":2}}],[\"typographic\",{\"1\":{\"13\":1}}],[\"typing\",{\"1\":{\"9\":1,\"84\":2}}],[\"typically\",{\"1\":{\"8\":1,\"9\":2,\"10\":3,\"13\":1,\"16\":1,\"21\":3,\"30\":1,\"31\":1,\"32\":1,\"50\":1,\"51\":2,\"53\":2,\"58\":2,\"77\":1,\"83\":2,\"85\":2,\"94\":1,\"95\":1,\"97\":1,\"136\":1,\"144\":1,\"201\":1,\"225\":3,\"229\":1,\"238\":1,\"240\":1,\"248\":1}}],[\"typical\",{\"1\":{\"4\":1,\"59\":1,\"102\":1,\"116\":1,\"133\":1,\"225\":1}}],[\"type=\",{\"1\":{\"15\":1}}],[\"typeid\",{\"1\":{\"10\":1}}],[\"type\",{\"0\":{\"46\":1,\"47\":1,\"48\":1,\"49\":1},\"1\":{\"8\":2,\"9\":5,\"10\":4,\"12\":1,\"13\":1,\"14\":1,\"17\":1,\"21\":2,\"30\":1,\"43\":1,\"45\":1,\"46\":4,\"47\":5,\"48\":3,\"50\":1,\"53\":5,\"58\":10,\"61\":1,\"63\":1,\"64\":4,\"70\":1,\"97\":2,\"98\":1,\"99\":3,\"101\":1,\"103\":1,\"104\":2,\"105\":1,\"106\":1,\"115\":1,\"121\":2,\"127\":2,\"129\":1,\"131\":1,\"133\":1,\"138\":1,\"139\":3,\"140\":1,\"147\":10,\"151\":7,\"152\":2,\"153\":5,\"154\":2,\"156\":4,\"157\":1,\"158\":1,\"159\":2,\"160\":1,\"161\":4,\"162\":7,\"163\":2,\"164\":2,\"165\":5,\"168\":1,\"169\":2,\"175\":3,\"177\":4,\"180\":5,\"181\":4,\"183\":3,\"185\":8,\"187\":7,\"188\":2,\"190\":10,\"192\":1,\"197\":7,\"202\":3,\"212\":2,\"213\":1,\"214\":1,\"217\":3,\"218\":5,\"226\":1,\"227\":3,\"228\":7,\"229\":2,\"230\":8,\"234\":4,\"235\":10,\"237\":7,\"239\":3,\"248\":3,\"249\":2}}],[\"typeset\",{\"1\":{\"12\":1,\"13\":1}}],[\"typesetting\",{\"1\":{\"12\":2}}],[\"types\",{\"0\":{\"61\":1},\"1\":{\"7\":1,\"8\":1,\"9\":6,\"10\":2,\"12\":1,\"14\":1,\"15\":1,\"21\":2,\"32\":1,\"46\":1,\"52\":2,\"58\":4,\"61\":7,\"62\":2,\"68\":1,\"69\":1,\"70\":3,\"77\":4,\"79\":5,\"102\":1,\"124\":2,\"139\":1,\"140\":2,\"151\":5,\"156\":1,\"159\":1,\"168\":1,\"177\":2,\"187\":3,\"190\":2,\"225\":1,\"228\":1,\"230\":3,\"235\":3}}],[\"typescript\",{\"1\":{\"7\":1}}],[\"typedef\",{\"1\":{\"133\":5}}],[\"typedthreads\",{\"1\":{\"124\":1}}],[\"typed\",{\"1\":{\"7\":2,\"9\":1,\"10\":1,\"15\":1,\"115\":1,\"177\":1}}],[\"tedious\",{\"1\":{\"59\":1,\"140\":1,\"192\":1,\"244\":1}}],[\"terraform\",{\"1\":{\"24\":1}}],[\"terminology\",{\"1\":{\"72\":1,\"199\":1}}],[\"termination\",{\"1\":{\"21\":1,\"130\":1}}],[\"terminating\",{\"1\":{\"21\":1,\"242\":1}}],[\"terminators\",{\"1\":{\"30\":1}}],[\"terminator\",{\"1\":{\"14\":2}}],[\"terminatetask\",{\"1\":{\"242\":4}}],[\"terminated\",{\"1\":{\"139\":2,\"239\":4,\"240\":2,\"242\":2}}],[\"terminate\",{\"1\":{\"11\":1,\"14\":1,\"80\":1}}],[\"terminates\",{\"1\":{\"9\":1,\"21\":1,\"243\":2}}],[\"terminal\",{\"1\":{\"9\":2,\"11\":6,\"21\":2,\"144\":1,\"161\":1,\"188\":1,\"191\":1,\"192\":1}}],[\"terminalsymbol\",{\"1\":{\"103\":1}}],[\"terminals\",{\"1\":{\"9\":1,\"11\":4,\"21\":4}}],[\"terms\",{\"1\":{\"15\":1,\"168\":1,\"247\":1}}],[\"term\",{\"1\":{\"6\":1,\"11\":1,\"14\":1,\"35\":1,\"37\":2}}],[\"telnet\",{\"1\":{\"35\":1}}],[\"telling\",{\"1\":{\"123\":1,\"212\":1,\"231\":1}}],[\"tells\",{\"1\":{\"58\":3,\"124\":2,\"130\":1,\"147\":3,\"225\":1,\"228\":2,\"229\":4,\"234\":2}}],[\"tell\",{\"1\":{\"35\":1,\"43\":1,\"63\":1,\"69\":2,\"74\":3,\"75\":2,\"95\":1,\"106\":1,\"110\":1,\"123\":4,\"124\":2,\"131\":1,\"143\":1,\"147\":5,\"187\":1,\"188\":1,\"191\":1,\"197\":1,\"200\":1,\"203\":1,\"213\":1,\"228\":1}}],[\"telcos\",{\"1\":{\"21\":1}}],[\"telco\",{\"1\":{\"21\":6}}],[\"telephony\",{\"1\":{\"21\":1}}],[\"telephone\",{\"1\":{\"21\":2,\"33\":1}}],[\"telemetry\",{\"1\":{\"21\":2,\"24\":1}}],[\"teletype\",{\"1\":{\"11\":1}}],[\"telecommunication\",{\"1\":{\"36\":2}}],[\"telecommunications\",{\"1\":{\"21\":1}}],[\"telecom\",{\"1\":{\"9\":1,\"30\":1,\"36\":1}}],[\"te\",{\"1\":{\"21\":11}}],[\"tech\",{\"1\":{\"21\":1,\"35\":1}}],[\"technically\",{\"1\":{\"96\":1,\"124\":1,\"187\":1}}],[\"technical\",{\"1\":{\"36\":2}}],[\"techniques\",{\"1\":{\"18\":2}}],[\"technique\",{\"1\":{\"11\":2,\"15\":1,\"18\":1,\"21\":1,\"22\":1,\"185\":1}}],[\"technologies\",{\"1\":{\"13\":1,\"21\":1,\"22\":1,\"29\":1,\"36\":2}}],[\"technology\",{\"1\":{\"7\":1,\"9\":2,\"11\":2,\"25\":3,\"29\":1,\"31\":1,\"32\":3,\"33\":2,\"36\":4}}],[\"tesseract\",{\"1\":{\"18\":1}}],[\"tested\",{\"1\":{\"87\":1,\"171\":1}}],[\"testing\",{\"0\":{\"49\":1,\"65\":1,\"80\":1,\"84\":1},\"1\":{\"6\":6,\"7\":1,\"9\":1,\"22\":2,\"30\":1,\"36\":1,\"105\":1,\"191\":1,\"206\":1}}],[\"test\",{\"1\":{\"6\":6,\"9\":5,\"22\":1,\"30\":1,\"34\":1,\"45\":1,\"55\":1,\"64\":1,\"66\":1,\"71\":1,\"75\":2,\"80\":2,\"84\":1,\"88\":2,\"89\":3,\"90\":1,\"91\":1,\"92\":1,\"95\":1,\"96\":1,\"97\":2,\"100\":1,\"101\":1,\"105\":1,\"117\":1,\"120\":1,\"166\":1,\"191\":1,\"193\":1,\"197\":1,\"205\":1,\"210\":1}}],[\"teststring\",{\"1\":{\"138\":1}}],[\"tests\",{\"1\":{\"6\":8,\"9\":1}}],[\"tex\",{\"1\":{\"12\":3,\"13\":2}}],[\"textual\",{\"1\":{\"105\":1}}],[\"textures\",{\"1\":{\"32\":1}}],[\"textlength\",{\"1\":{\"74\":1}}],[\"textrange\",{\"1\":{\"74\":4,\"78\":3,\"82\":3}}],[\"textbook\",{\"1\":{\"9\":1}}],[\"text\",{\"1\":{\"7\":2,\"8\":1,\"9\":4,\"10\":1,\"11\":1,\"12\":1,\"13\":4,\"14\":4,\"15\":2,\"18\":9,\"21\":1,\"32\":1,\"35\":1,\"50\":1,\"53\":1,\"74\":2,\"75\":1,\"78\":1,\"82\":4,\"85\":1,\"87\":1,\"96\":1,\"123\":1,\"135\":1,\"147\":54,\"148\":4,\"179\":6,\"196\":5,\"226\":7,\"228\":1,\"229\":10,\"234\":2}}],[\"tend\",{\"1\":{\"185\":1}}],[\"ten\",{\"1\":{\"11\":1}}],[\"tenex\",{\"1\":{\"11\":2}}],[\"tensorflow\",{\"1\":{\"25\":1}}],[\"tensor\",{\"1\":{\"10\":1}}],[\"template\",{\"1\":{\"12\":1,\"177\":2,\"192\":2,\"240\":2}}],[\"templates\",{\"1\":{\"10\":1,\"97\":1,\"177\":1,\"240\":1}}],[\"temporarily\",{\"1\":{\"35\":1,\"80\":1,\"188\":1,\"226\":1,\"230\":1,\"237\":2}}],[\"temporaries\",{\"1\":{\"10\":1}}],[\"temporary\",{\"1\":{\"10\":1,\"17\":1,\"181\":1,\"237\":1}}],[\"teaching\",{\"1\":{\"11\":1,\"21\":1}}],[\"teaches\",{\"1\":{\"9\":1}}],[\"team\",{\"1\":{\"6\":1}}],[\"tr\",{\"1\":{\"188\":1,\"200\":1,\"201\":2,\"203\":1,\"210\":2}}],[\"trying\",{\"0\":{\"222\":1,\"227\":1},\"1\":{\"87\":1,\"123\":1,\"135\":1,\"205\":1}}],[\"try\",{\"1\":{\"58\":1,\"66\":1,\"78\":1,\"82\":1,\"84\":1,\"88\":1,\"89\":1,\"110\":1,\"124\":3,\"135\":2,\"141\":3,\"148\":1,\"166\":1,\"169\":1,\"170\":3,\"171\":2,\"179\":1,\"182\":1,\"192\":1,\"193\":2,\"197\":1,\"200\":1,\"204\":1,\"205\":4,\"206\":3,\"210\":1,\"212\":2,\"213\":1,\"214\":1,\"222\":1,\"223\":1,\"226\":1,\"227\":1,\"231\":2,\"246\":1}}],[\"trope\",{\"1\":{\"35\":1}}],[\"troubleshooting\",{\"1\":{\"21\":1}}],[\"troubled\",{\"1\":{\"11\":1}}],[\"tries\",{\"1\":{\"58\":1,\"87\":1}}],[\"tried\",{\"1\":{\"35\":1}}],[\"triggermode\",{\"1\":{\"248\":1}}],[\"triggered\",{\"1\":{\"34\":1,\"146\":1}}],[\"trigger\",{\"1\":{\"26\":1,\"45\":1,\"205\":1}}],[\"triggers\",{\"1\":{\"6\":1}}],[\"tricky\",{\"1\":{\"96\":1}}],[\"trick\",{\"1\":{\"22\":1,\"89\":1,\"135\":1}}],[\"trivial\",{\"1\":{\"21\":1,\"124\":1,\"176\":3}}],[\"triple\",{\"1\":{\"15\":1,\"96\":1}}],[\"triples\",{\"1\":{\"15\":1}}],[\"truly\",{\"1\":{\"35\":1}}],[\"trusted\",{\"1\":{\"33\":1}}],[\"trust\",{\"1\":{\"24\":1,\"214\":1}}],[\"trunks\",{\"1\":{\"21\":1}}],[\"trunk\",{\"1\":{\"21\":1}}],[\"trucluster\",{\"1\":{\"11\":1}}],[\"tru64\",{\"1\":{\"11\":1}}],[\"truetype\",{\"1\":{\"13\":3}}],[\"true\",{\"1\":{\"9\":1,\"32\":1,\"55\":1,\"66\":1,\"71\":1,\"77\":2,\"78\":3,\"79\":1,\"88\":2,\"102\":1,\"106\":2,\"110\":3,\"123\":1,\"124\":1,\"141\":1,\"187\":1,\"237\":1,\"248\":1}}],[\"treats\",{\"1\":{\"102\":1}}],[\"treated\",{\"1\":{\"96\":1,\"107\":1,\"116\":1}}],[\"treating\",{\"1\":{\"89\":2,\"162\":1}}],[\"treat\",{\"1\":{\"10\":1,\"85\":1,\"87\":1,\"95\":2,\"96\":1}}],[\"treewalkup\",{\"1\":{\"77\":7,\"78\":4}}],[\"treebuilt\",{\"1\":{\"63\":1,\"66\":1}}],[\"treeelement\",{\"1\":{\"58\":1}}],[\"trees\",{\"1\":{\"9\":1}}],[\"tree\",{\"0\":{\"77\":1},\"1\":{\"7\":1,\"9\":8,\"10\":3,\"17\":1,\"21\":1,\"41\":1,\"49\":1,\"50\":2,\"53\":1,\"57\":2,\"58\":1,\"59\":3,\"60\":2,\"61\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"69\":1,\"72\":2,\"74\":1,\"75\":1,\"77\":2,\"78\":1,\"88\":5,\"89\":1,\"90\":1,\"93\":3,\"94\":1,\"97\":1,\"105\":1,\"112\":2,\"174\":3}}],[\"trap\",{\"1\":{\"190\":6,\"192\":6}}],[\"traps\",{\"1\":{\"21\":2}}],[\"traditional\",{\"1\":{\"223\":1}}],[\"traditionally\",{\"1\":{\"122\":1,\"207\":1}}],[\"trade\",{\"1\":{\"35\":1}}],[\"tradeoff\",{\"1\":{\"17\":1}}],[\"traverse\",{\"1\":{\"69\":1,\"177\":1}}],[\"traversal\",{\"1\":{\"9\":4,\"15\":1}}],[\"travels\",{\"1\":{\"32\":1}}],[\"travan\",{\"1\":{\"31\":1}}],[\"training\",{\"1\":{\"28\":1}}],[\"train\",{\"1\":{\"18\":1}}],[\"trained\",{\"1\":{\"18\":2}}],[\"trailingcharacter\",{\"1\":{\"103\":1}}],[\"trailing\",{\"1\":{\"10\":1,\"24\":1,\"104\":1,\"106\":4,\"107\":2}}],[\"traceback\",{\"1\":{\"192\":1,\"193\":2,\"205\":3,\"206\":1}}],[\"trace\",{\"1\":{\"141\":5,\"166\":3,\"171\":1,\"192\":3}}],[\"traced\",{\"1\":{\"87\":1}}],[\"traces\",{\"1\":{\"11\":1,\"20\":1,\"141\":1}}],[\"tracing\",{\"1\":{\"20\":1,\"21\":1}}],[\"tracked\",{\"1\":{\"216\":1}}],[\"track\",{\"1\":{\"6\":2,\"11\":1,\"19\":1,\"85\":4,\"87\":1,\"95\":1,\"96\":2,\"110\":2,\"167\":1,\"169\":1,\"185\":1,\"216\":2,\"218\":3,\"219\":1,\"231\":1,\"237\":1,\"239\":3}}],[\"tracking\",{\"0\":{\"223\":1},\"1\":{\"6\":2,\"85\":1,\"110\":1,\"223\":1}}],[\"traffic\",{\"1\":{\"7\":1,\"21\":19,\"22\":2,\"24\":1,\"25\":1}}],[\"transmitter\",{\"1\":{\"30\":1}}],[\"transmitting\",{\"1\":{\"21\":2,\"30\":1}}],[\"transmission\",{\"1\":{\"9\":1,\"21\":3}}],[\"transit\",{\"1\":{\"21\":2}}],[\"transition\",{\"1\":{\"10\":1,\"21\":1,\"209\":1}}],[\"transitions\",{\"1\":{\"9\":1,\"10\":1}}],[\"transports\",{\"1\":{\"21\":2}}],[\"transport\",{\"1\":{\"21\":13,\"22\":3,\"36\":1}}],[\"transparency\",{\"1\":{\"13\":2,\"22\":1,\"32\":1}}],[\"transparent\",{\"1\":{\"11\":1,\"34\":1}}],[\"transpile\",{\"1\":{\"7\":1}}],[\"transformer\",{\"1\":{\"18\":3}}],[\"transforms\",{\"1\":{\"13\":1,\"17\":1}}],[\"transform\",{\"1\":{\"10\":1,\"12\":1,\"17\":3}}],[\"transformations\",{\"1\":{\"10\":1,\"12\":1,\"17\":1}}],[\"transformation\",{\"1\":{\"10\":1,\"14\":1}}],[\"transforming\",{\"1\":{\"9\":1,\"12\":1}}],[\"transferred\",{\"1\":{\"215\":1}}],[\"transferring\",{\"1\":{\"21\":1,\"207\":1}}],[\"transfers\",{\"1\":{\"10\":1,\"21\":1,\"29\":1,\"30\":1,\"33\":1}}],[\"transfer\",{\"1\":{\"5\":1,\"7\":1,\"9\":1,\"10\":1,\"17\":1,\"21\":10,\"31\":1,\"160\":1,\"161\":1,\"208\":1}}],[\"translating\",{\"1\":{\"10\":1}}],[\"translations\",{\"1\":{\"26\":1}}],[\"translation\",{\"1\":{\"8\":1,\"10\":1,\"18\":1,\"21\":1,\"24\":1,\"26\":2,\"31\":2,\"173\":1}}],[\"translates\",{\"1\":{\"24\":1}}],[\"translate\",{\"1\":{\"6\":1,\"173\":1,\"174\":1}}],[\"transaction\",{\"1\":{\"11\":6,\"17\":7,\"36\":2}}],[\"transactional\",{\"1\":{\"4\":2}}],[\"transactions\",{\"1\":{\"4\":2,\"11\":1,\"17\":4,\"20\":1}}],[\"trampolines\",{\"1\":{\"5\":1}}],[\"tweaked\",{\"1\":{\"54\":1}}],[\"two\",{\"1\":{\"5\":1,\"6\":1,\"17\":1,\"22\":2,\"33\":1,\"41\":1,\"52\":1,\"61\":2,\"62\":3,\"63\":1,\"68\":1,\"72\":1,\"73\":2,\"77\":1,\"79\":1,\"83\":1,\"85\":1,\"87\":5,\"89\":1,\"90\":2,\"92\":1,\"94\":1,\"99\":1,\"102\":4,\"104\":2,\"105\":1,\"107\":1,\"108\":1,\"110\":1,\"134\":1,\"147\":1,\"164\":1,\"166\":1,\"168\":1,\"173\":1,\"177\":1,\"185\":2,\"186\":1,\"190\":2,\"197\":1,\"200\":1,\"201\":1,\"202\":1,\"209\":1,\"210\":1,\"211\":1,\"217\":1,\"218\":1,\"225\":1,\"228\":1,\"231\":1,\"235\":1,\"237\":1,\"243\":1,\"245\":1,\"247\":1,\"249\":1}}],[\"twice\",{\"1\":{\"5\":2}}],[\"ti\",{\"1\":{\"186\":5}}],[\"tib\",{\"1\":{\"173\":6}}],[\"tibco\",{\"1\":{\"4\":1}}],[\"tie\",{\"1\":{\"162\":1}}],[\"tiers\",{\"1\":{\"33\":1}}],[\"tier\",{\"1\":{\"19\":1}}],[\"tips\",{\"1\":{\"45\":1}}],[\"til\",{\"1\":{\"35\":2}}],[\"tile\",{\"1\":{\"28\":1}}],[\"tiled\",{\"1\":{\"28\":1}}],[\"tianocore\",{\"1\":{\"134\":1,\"135\":1}}],[\"tia\",{\"1\":{\"35\":2}}],[\"titles\",{\"1\":{\"25\":1}}],[\"tightly\",{\"1\":{\"21\":1}}],[\"tiff\",{\"1\":{\"16\":1}}],[\"tiny\",{\"1\":{\"11\":1,\"24\":1}}],[\"tidied\",{\"1\":{\"71\":1}}],[\"tids\",{\"1\":{\"11\":1}}],[\"tid\",{\"1\":{\"11\":2}}],[\"ticks\",{\"1\":{\"11\":1,\"33\":2}}],[\"timings\",{\"1\":{\"32\":1}}],[\"timing\",{\"1\":{\"9\":1,\"32\":1}}],[\"timezone\",{\"1\":{\"153\":1}}],[\"timeframe\",{\"1\":{\"35\":1}}],[\"timekeeping\",{\"1\":{\"33\":1}}],[\"timelines\",{\"1\":{\"23\":1}}],[\"timed\",{\"1\":{\"21\":1}}],[\"timerdivideconfig\",{\"1\":{\"248\":1}}],[\"timercurrentcount\",{\"1\":{\"248\":1}}],[\"timerinitialcount\",{\"1\":{\"248\":1}}],[\"timers\",{\"1\":{\"30\":1,\"33\":2,\"34\":2}}],[\"timer\",{\"1\":{\"11\":1,\"33\":6,\"151\":1,\"194\":1,\"238\":1,\"246\":1,\"247\":1,\"248\":6,\"249\":1,\"252\":1}}],[\"timeshared\",{\"1\":{\"11\":1}}],[\"timesharing\",{\"1\":{\"11\":2}}],[\"timestamps\",{\"1\":{\"9\":1,\"33\":1}}],[\"times\",{\"1\":{\"9\":1,\"31\":1,\"36\":1,\"87\":2,\"89\":2,\"124\":2,\"174\":1}}],[\"time\",{\"1\":{\"5\":1,\"6\":1,\"9\":2,\"10\":6,\"11\":27,\"15\":1,\"16\":1,\"18\":2,\"19\":4,\"20\":5,\"21\":8,\"22\":5,\"29\":1,\"33\":2,\"35\":4,\"36\":1,\"40\":1,\"55\":2,\"67\":1,\"71\":1,\"72\":1,\"82\":1,\"87\":2,\"89\":2,\"92\":1,\"96\":1,\"105\":1,\"122\":1,\"124\":3,\"134\":1,\"140\":1,\"147\":1,\"150\":1,\"160\":1,\"161\":1,\"164\":1,\"213\":1,\"225\":2,\"227\":2,\"228\":1,\"229\":1,\"231\":1,\"232\":1,\"236\":1,\"238\":1,\"243\":1,\"246\":1}}],[\"t\",{\"1\":{\"5\":4,\"10\":7,\"11\":2,\"21\":4,\"24\":1,\"30\":1,\"35\":5,\"36\":2,\"40\":1,\"43\":1,\"45\":2,\"53\":2,\"55\":1,\"62\":1,\"63\":1,\"66\":1,\"69\":1,\"70\":2,\"71\":1,\"74\":1,\"76\":2,\"77\":1,\"78\":1,\"79\":1,\"80\":2,\"85\":1,\"87\":9,\"88\":5,\"89\":5,\"92\":1,\"93\":1,\"95\":3,\"96\":2,\"97\":1,\"104\":2,\"106\":1,\"110\":2,\"122\":1,\"123\":1,\"124\":14,\"127\":7,\"130\":1,\"131\":5,\"133\":1,\"135\":1,\"140\":4,\"141\":6,\"142\":1,\"144\":1,\"146\":2,\"147\":11,\"148\":1,\"151\":3,\"160\":2,\"161\":2,\"162\":3,\"163\":1,\"164\":1,\"168\":1,\"170\":1,\"172\":1,\"175\":2,\"176\":1,\"177\":4,\"183\":1,\"185\":3,\"186\":2,\"187\":4,\"191\":1,\"193\":1,\"194\":2,\"195\":2,\"196\":2,\"198\":2,\"200\":1,\"201\":1,\"207\":1,\"208\":2,\"209\":2,\"210\":1,\"211\":1,\"214\":2,\"215\":1,\"222\":1,\"223\":1,\"226\":1,\"229\":3,\"231\":1,\"232\":1,\"234\":3,\"235\":1,\"237\":2,\"239\":3,\"240\":1,\"242\":3,\"245\":1,\"248\":2,\"249\":1}}],[\"tap\",{\"1\":{\"134\":1}}],[\"tape\",{\"1\":{\"16\":1,\"31\":12}}],[\"tackle\",{\"1\":{\"183\":1,\"246\":1}}],[\"tackling\",{\"1\":{\"107\":1,\"231\":1}}],[\"tactic\",{\"1\":{\"35\":1}}],[\"taxii\",{\"1\":{\"36\":1}}],[\"taxonomy\",{\"1\":{\"21\":1}}],[\"taxonomies\",{\"1\":{\"15\":1}}],[\"taking\",{\"1\":{\"35\":1}}],[\"take\",{\"1\":{\"35\":1,\"71\":1,\"72\":1,\"74\":1,\"75\":2,\"77\":1,\"79\":1,\"85\":1,\"102\":3,\"124\":1,\"141\":1,\"147\":3,\"148\":1,\"150\":2,\"161\":1,\"163\":1,\"164\":1,\"172\":2,\"173\":1,\"179\":1,\"183\":1,\"194\":1,\"197\":1,\"213\":1,\"215\":1,\"226\":2,\"228\":4,\"229\":1,\"245\":1,\"246\":1}}],[\"takes\",{\"1\":{\"11\":1,\"43\":1,\"63\":1,\"77\":1,\"79\":1,\"89\":1,\"92\":1,\"110\":1,\"139\":1,\"182\":1,\"190\":1,\"212\":1,\"227\":1,\"228\":1,\"245\":2}}],[\"tanstaafl\",{\"1\":{\"35\":2}}],[\"tampering\",{\"1\":{\"22\":1}}],[\"tamper\",{\"1\":{\"22\":1}}],[\"talked\",{\"1\":{\"227\":1}}],[\"talking\",{\"1\":{\"102\":1}}],[\"talk\",{\"1\":{\"21\":1,\"35\":1,\"39\":1,\"102\":1}}],[\"talks\",{\"1\":{\"4\":1}}],[\"tar\",{\"1\":{\"16\":10}}],[\"targetrootoutputdir\",{\"1\":{\"71\":1}}],[\"targetoutputdir\",{\"1\":{\"55\":1}}],[\"targets\",{\"1\":{\"21\":1,\"22\":1,\"32\":1,\"43\":1,\"123\":2,\"124\":1,\"131\":1}}],[\"targeting\",{\"0\":{\"122\":1,\"125\":1},\"1\":{\"10\":1,\"35\":1,\"124\":2}}],[\"target\",{\"1\":{\"6\":1,\"19\":3,\"20\":2,\"25\":1,\"31\":1,\"35\":1,\"42\":1,\"43\":2,\"72\":3,\"77\":3,\"78\":5,\"121\":1,\"122\":1,\"123\":6,\"124\":12,\"132\":1,\"143\":2,\"147\":1,\"164\":1,\"186\":2,\"196\":1,\"209\":1,\"225\":1,\"230\":2,\"233\":1}}],[\"tagged\",{\"1\":{\"21\":1,\"25\":1}}],[\"tagging\",{\"1\":{\"6\":1,\"21\":1}}],[\"tag\",{\"1\":{\"18\":1,\"22\":1,\"58\":1,\"229\":1,\"230\":3}}],[\"tags\",{\"1\":{\"15\":1,\"229\":1}}],[\"tabs\",{\"1\":{\"15\":1}}],[\"tab\",{\"1\":{\"15\":2,\"49\":1,\"121\":1}}],[\"tabular\",{\"1\":{\"15\":2,\"18\":1}}],[\"tabletop\",{\"1\":{\"35\":1}}],[\"tablet\",{\"1\":{\"33\":1}}],[\"tablets\",{\"1\":{\"29\":1}}],[\"table\",{\"0\":{\"138\":1,\"187\":1,\"198\":1,\"213\":1},\"1\":{\"11\":4,\"17\":5,\"21\":2,\"31\":2,\"34\":10,\"103\":1,\"133\":5,\"137\":1,\"138\":2,\"147\":2,\"174\":9,\"175\":7,\"176\":3,\"177\":12,\"179\":1,\"181\":2,\"183\":1,\"184\":2,\"186\":2,\"188\":1,\"189\":3,\"190\":1,\"195\":5,\"198\":13,\"199\":2,\"200\":3,\"201\":2,\"213\":2,\"216\":1,\"217\":1,\"220\":3,\"221\":2,\"231\":1,\"233\":6,\"234\":1,\"235\":7,\"241\":1,\"248\":1}}],[\"tables\",{\"0\":{\"174\":1,\"175\":1,\"176\":1},\"1\":{\"9\":1,\"10\":2,\"11\":2,\"12\":1,\"15\":2,\"17\":4,\"24\":1,\"33\":2,\"34\":8,\"116\":1,\"164\":1,\"173\":2,\"174\":5,\"175\":2,\"176\":3,\"177\":6,\"178\":2,\"181\":6,\"188\":1,\"195\":1,\"237\":1}}],[\"tasm\",{\"1\":{\"9\":1}}],[\"taskpriority\",{\"1\":{\"248\":1}}],[\"task2\",{\"1\":{\"243\":2}}],[\"task1\",{\"1\":{\"243\":2}}],[\"taskregion\",{\"1\":{\"237\":8}}],[\"taskid\",{\"1\":{\"220\":2}}],[\"taskstate\",{\"1\":{\"239\":3,\"240\":4,\"242\":1}}],[\"taskstatesegmentselector\",{\"1\":{\"202\":1}}],[\"taskstatesegmentdescriptor\",{\"1\":{\"202\":2}}],[\"taskstatesegment\",{\"1\":{\"202\":2,\"223\":1}}],[\"taskstack\",{\"1\":{\"217\":4,\"218\":2,\"220\":1}}],[\"tasks\",{\"0\":{\"216\":1,\"243\":1},\"1\":{\"11\":5,\"18\":2,\"45\":1,\"55\":2,\"71\":1,\"201\":1,\"215\":1,\"217\":4,\"220\":3,\"221\":2,\"222\":1,\"223\":5,\"224\":1,\"230\":2,\"231\":5,\"236\":1,\"239\":11,\"240\":4,\"241\":1,\"242\":2,\"243\":12,\"244\":2,\"246\":4,\"252\":2}}],[\"task\",{\"0\":{\"201\":1,\"217\":1,\"220\":1,\"221\":1,\"223\":1,\"242\":1},\"1\":{\"9\":1,\"33\":1,\"35\":1,\"36\":1,\"45\":1,\"55\":3,\"65\":1,\"132\":1,\"143\":1,\"151\":1,\"185\":1,\"188\":1,\"190\":3,\"192\":1,\"197\":3,\"200\":1,\"201\":4,\"202\":2,\"203\":1,\"205\":1,\"215\":2,\"216\":1,\"217\":5,\"218\":2,\"220\":6,\"221\":10,\"222\":11,\"223\":17,\"224\":2,\"225\":1,\"226\":2,\"227\":3,\"229\":2,\"230\":8,\"231\":12,\"232\":1,\"235\":1,\"236\":2,\"237\":7,\"238\":9,\"239\":30,\"240\":11,\"241\":5,\"242\":5,\"243\":8,\"246\":1,\"252\":1,\"253\":1}}],[\"tailored\",{\"1\":{\"9\":1}}],[\"tailwind\",{\"1\":{\"7\":1}}],[\"tail\",{\"1\":{\"5\":1,\"10\":5}}],[\"thu\",{\"1\":{\"123\":1}}],[\"thus\",{\"1\":{\"104\":1,\"177\":1,\"209\":1,\"234\":1}}],[\"thwart\",{\"1\":{\"22\":1}}],[\"thoroughly\",{\"1\":{\"214\":1}}],[\"those\",{\"1\":{\"58\":1,\"68\":2,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"89\":1,\"94\":1,\"97\":1,\"106\":1,\"107\":2,\"109\":1,\"151\":1,\"164\":1,\"201\":1,\"228\":1,\"248\":1,\"249\":1}}],[\"though\",{\"1\":{\"32\":1,\"55\":1,\"72\":1,\"80\":1,\"83\":1,\"85\":1,\"104\":1,\"107\":1,\"184\":1,\"185\":1,\"205\":1,\"214\":1,\"229\":1}}],[\"thought\",{\"1\":{\"18\":1,\"40\":1}}],[\"thompson\",{\"1\":{\"10\":1}}],[\"thanks\",{\"1\":{\"35\":1,\"124\":1}}],[\"than\",{\"1\":{\"5\":2,\"11\":3,\"13\":1,\"16\":3,\"20\":1,\"21\":3,\"25\":1,\"29\":1,\"30\":1,\"31\":2,\"67\":1,\"85\":1,\"87\":5,\"93\":1,\"102\":2,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"147\":1,\"162\":1,\"169\":1,\"170\":3,\"171\":1,\"172\":1,\"173\":1,\"186\":1,\"206\":1,\"208\":1,\"216\":1,\"223\":1,\"230\":1,\"232\":1,\"235\":1,\"237\":1,\"246\":1,\"249\":1}}],[\"that\",{\"1\":{\"4\":2,\"5\":3,\"6\":5,\"7\":2,\"8\":2,\"9\":15,\"10\":7,\"11\":22,\"12\":1,\"13\":5,\"14\":2,\"15\":1,\"16\":2,\"17\":13,\"18\":1,\"21\":39,\"22\":6,\"23\":1,\"24\":4,\"25\":2,\"26\":6,\"28\":1,\"29\":8,\"30\":2,\"31\":2,\"32\":3,\"33\":10,\"34\":9,\"35\":9,\"36\":10,\"40\":2,\"41\":2,\"44\":2,\"45\":3,\"46\":1,\"47\":1,\"49\":1,\"51\":2,\"52\":4,\"53\":14,\"54\":3,\"55\":4,\"57\":1,\"58\":10,\"59\":3,\"60\":1,\"61\":5,\"63\":3,\"64\":1,\"66\":4,\"67\":1,\"68\":3,\"69\":2,\"70\":9,\"72\":5,\"73\":1,\"74\":10,\"75\":11,\"76\":1,\"77\":10,\"78\":2,\"79\":9,\"80\":3,\"81\":2,\"82\":4,\"83\":6,\"84\":2,\"85\":4,\"86\":1,\"87\":6,\"88\":6,\"89\":16,\"90\":2,\"92\":3,\"94\":5,\"95\":7,\"96\":3,\"97\":5,\"99\":2,\"101\":3,\"102\":6,\"103\":4,\"104\":7,\"105\":5,\"106\":5,\"107\":1,\"110\":6,\"113\":1,\"115\":1,\"116\":4,\"117\":2,\"118\":1,\"119\":1,\"120\":1,\"121\":2,\"122\":2,\"123\":5,\"124\":14,\"127\":1,\"129\":1,\"130\":2,\"131\":4,\"132\":1,\"133\":1,\"134\":3,\"135\":9,\"136\":1,\"138\":1,\"140\":3,\"141\":4,\"143\":3,\"144\":4,\"145\":1,\"146\":2,\"147\":21,\"148\":2,\"150\":3,\"151\":2,\"152\":2,\"159\":1,\"160\":6,\"161\":5,\"162\":5,\"163\":2,\"164\":6,\"165\":1,\"166\":3,\"167\":1,\"168\":2,\"169\":3,\"170\":1,\"171\":3,\"173\":2,\"175\":2,\"176\":2,\"177\":10,\"178\":1,\"179\":5,\"180\":2,\"181\":5,\"182\":1,\"183\":2,\"184\":1,\"185\":3,\"186\":6,\"187\":2,\"188\":2,\"189\":1,\"190\":5,\"191\":4,\"192\":4,\"193\":3,\"194\":4,\"195\":3,\"196\":2,\"197\":5,\"198\":1,\"199\":1,\"200\":4,\"201\":4,\"202\":2,\"205\":2,\"206\":2,\"208\":3,\"209\":3,\"210\":5,\"212\":6,\"213\":3,\"214\":3,\"215\":2,\"216\":1,\"218\":4,\"222\":2,\"223\":4,\"224\":2,\"225\":5,\"226\":3,\"227\":7,\"228\":8,\"229\":6,\"230\":8,\"231\":4,\"232\":2,\"233\":2,\"234\":6,\"235\":3,\"236\":3,\"237\":9,\"238\":7,\"239\":3,\"240\":2,\"241\":1,\"243\":3,\"244\":2,\"247\":1,\"248\":3,\"249\":1}}],[\"threw\",{\"1\":{\"87\":1}}],[\"three\",{\"1\":{\"35\":1,\"53\":1,\"58\":3,\"76\":1,\"79\":1,\"86\":2,\"87\":1,\"91\":1,\"99\":1,\"102\":1,\"110\":1,\"124\":2,\"185\":2,\"187\":2,\"190\":1,\"201\":1,\"210\":1,\"243\":1,\"244\":1,\"246\":1}}],[\"threats\",{\"1\":{\"22\":1}}],[\"threaded\",{\"1\":{\"11\":1,\"21\":1,\"116\":1}}],[\"threads\",{\"1\":{\"11\":1,\"25\":3,\"26\":2,\"33\":2,\"122\":1,\"124\":7}}],[\"thread\",{\"1\":{\"9\":6,\"11\":6,\"35\":2,\"215\":1}}],[\"threading\",{\"1\":{\"4\":1}}],[\"thresholds\",{\"1\":{\"20\":1}}],[\"throw\",{\"1\":{\"64\":2,\"82\":2}}],[\"throws\",{\"1\":{\"9\":1,\"87\":1}}],[\"throughput\",{\"1\":{\"11\":2,\"20\":4,\"29\":1,\"30\":1,\"31\":3}}],[\"through\",{\"1\":{\"4\":1,\"6\":1,\"9\":3,\"10\":1,\"21\":5,\"24\":1,\"40\":1,\"41\":1,\"57\":1,\"59\":2,\"109\":1,\"110\":1,\"118\":1,\"137\":1,\"139\":1,\"151\":1,\"163\":1,\"172\":1,\"176\":1,\"184\":1,\"186\":2,\"188\":1,\"194\":2,\"201\":1,\"207\":1,\"209\":1,\"213\":1,\"248\":1,\"250\":1}}],[\"thin\",{\"1\":{\"30\":1}}],[\"think\",{\"1\":{\"18\":1,\"59\":1,\"116\":2,\"176\":1}}],[\"things\",{\"1\":{\"24\":1,\"47\":1,\"64\":1,\"75\":1,\"104\":1,\"124\":1,\"161\":1,\"169\":1,\"180\":1,\"181\":1,\"183\":1,\"185\":2,\"186\":1,\"198\":1,\"207\":1,\"209\":1,\"216\":2,\"217\":1}}],[\"thing\",{\"1\":{\"6\":1,\"35\":1,\"72\":1,\"74\":1,\"79\":1,\"88\":1,\"93\":1,\"94\":1,\"109\":1,\"112\":1,\"124\":1,\"147\":1,\"148\":1,\"183\":1,\"193\":1,\"194\":1,\"197\":1,\"220\":1,\"222\":1,\"223\":1,\"234\":1}}],[\"third\",{\"1\":{\"4\":1,\"11\":1,\"53\":1,\"87\":1,\"99\":1,\"104\":1,\"176\":1,\"185\":1,\"208\":1,\"243\":1}}],[\"this\",{\"1\":{\"1\":1,\"3\":1,\"35\":2,\"39\":1,\"40\":1,\"43\":1,\"45\":1,\"47\":2,\"50\":1,\"51\":1,\"52\":3,\"53\":4,\"54\":1,\"55\":3,\"56\":1,\"57\":1,\"59\":1,\"60\":1,\"61\":1,\"63\":2,\"64\":2,\"66\":2,\"67\":1,\"69\":2,\"70\":3,\"71\":2,\"72\":4,\"74\":7,\"75\":2,\"76\":5,\"77\":8,\"78\":4,\"79\":5,\"81\":1,\"82\":8,\"83\":8,\"85\":4,\"87\":7,\"88\":6,\"89\":14,\"90\":1,\"92\":5,\"93\":2,\"94\":3,\"95\":5,\"96\":6,\"97\":2,\"98\":1,\"101\":1,\"102\":1,\"104\":1,\"105\":3,\"106\":5,\"107\":1,\"109\":1,\"110\":7,\"112\":1,\"116\":3,\"117\":1,\"122\":1,\"123\":3,\"124\":13,\"130\":3,\"132\":1,\"133\":1,\"135\":3,\"137\":1,\"138\":3,\"139\":4,\"140\":4,\"141\":4,\"142\":1,\"143\":2,\"144\":4,\"145\":2,\"146\":8,\"147\":18,\"148\":5,\"150\":3,\"153\":2,\"154\":3,\"155\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":5,\"161\":3,\"162\":4,\"163\":1,\"164\":4,\"166\":2,\"168\":1,\"169\":1,\"171\":1,\"172\":3,\"173\":3,\"174\":2,\"175\":3,\"176\":3,\"177\":2,\"178\":1,\"179\":1,\"181\":2,\"182\":1,\"183\":1,\"184\":1,\"185\":21,\"186\":3,\"187\":3,\"188\":1,\"189\":1,\"190\":1,\"191\":4,\"192\":1,\"193\":4,\"194\":6,\"195\":1,\"196\":1,\"197\":5,\"198\":2,\"199\":2,\"200\":3,\"201\":6,\"202\":1,\"203\":1,\"204\":1,\"205\":5,\"206\":3,\"207\":2,\"208\":4,\"209\":1,\"210\":2,\"211\":1,\"212\":1,\"213\":3,\"214\":3,\"215\":3,\"217\":4,\"218\":3,\"220\":3,\"223\":3,\"224\":2,\"225\":5,\"226\":4,\"227\":6,\"228\":3,\"229\":1,\"230\":1,\"231\":3,\"232\":1,\"234\":2,\"235\":7,\"237\":2,\"238\":4,\"239\":1,\"240\":2,\"241\":2,\"242\":1,\"243\":1,\"244\":1,\"245\":1,\"246\":2,\"247\":2,\"248\":4,\"249\":3,\"250\":2,\"251\":1}}],[\"thermal\",{\"1\":{\"248\":2}}],[\"therefore\",{\"1\":{\"225\":2}}],[\"there\",{\"1\":{\"35\":1,\"49\":1,\"55\":1,\"58\":1,\"63\":1,\"68\":1,\"76\":2,\"77\":1,\"79\":1,\"85\":3,\"87\":3,\"88\":2,\"89\":5,\"97\":1,\"99\":1,\"102\":1,\"103\":1,\"104\":1,\"110\":1,\"112\":1,\"122\":1,\"124\":1,\"130\":1,\"134\":2,\"141\":1,\"147\":7,\"148\":1,\"167\":1,\"169\":1,\"170\":2,\"182\":1,\"183\":1,\"185\":1,\"190\":2,\"191\":1,\"201\":1,\"204\":1,\"209\":1,\"214\":1,\"222\":1,\"225\":1,\"226\":2,\"227\":1,\"228\":2,\"229\":5,\"234\":1,\"237\":1,\"239\":2,\"243\":2,\"247\":1,\"248\":1,\"249\":1}}],[\"theory\",{\"1\":{\"187\":1}}],[\"theorem\",{\"1\":{\"8\":1}}],[\"these\",{\"1\":{\"52\":1,\"58\":4,\"85\":1,\"86\":1,\"92\":1,\"94\":1,\"103\":1,\"104\":2,\"105\":1,\"110\":1,\"116\":1,\"123\":1,\"124\":3,\"143\":1,\"146\":1,\"147\":5,\"151\":1,\"173\":1,\"174\":1,\"177\":2,\"180\":1,\"185\":1,\"193\":1,\"207\":2,\"208\":1,\"216\":2,\"228\":2,\"230\":1,\"243\":1,\"244\":1,\"245\":1}}],[\"thesauruses\",{\"1\":{\"15\":1}}],[\"they\",{\"1\":{\"9\":1,\"56\":1,\"58\":4,\"63\":1,\"78\":1,\"85\":2,\"91\":2,\"92\":2,\"94\":1,\"95\":4,\"96\":4,\"97\":5,\"99\":1,\"104\":1,\"106\":1,\"107\":1,\"108\":3,\"115\":1,\"124\":1,\"140\":2,\"164\":1,\"169\":1,\"171\":1,\"174\":1,\"177\":2,\"184\":1,\"185\":7,\"187\":1,\"207\":2,\"208\":1,\"209\":1,\"213\":1,\"225\":1,\"228\":2,\"229\":1,\"231\":1,\"237\":1,\"240\":1,\"248\":1}}],[\"then\",{\"1\":{\"6\":1,\"10\":2,\"11\":2,\"17\":1,\"18\":1,\"21\":1,\"25\":1,\"26\":1,\"43\":1,\"58\":1,\"59\":1,\"63\":2,\"74\":2,\"79\":1,\"82\":1,\"85\":1,\"87\":1,\"96\":1,\"101\":1,\"104\":2,\"106\":1,\"109\":3,\"110\":1,\"118\":1,\"130\":1,\"135\":2,\"139\":1,\"141\":1,\"147\":1,\"159\":1,\"170\":1,\"171\":1,\"175\":1,\"187\":2,\"190\":1,\"191\":1,\"192\":3,\"193\":2,\"194\":1,\"199\":1,\"210\":1,\"218\":1,\"221\":1,\"225\":1,\"228\":1,\"230\":1,\"238\":1,\"239\":1,\"241\":1,\"243\":6,\"248\":1,\"249\":1}}],[\"their\",{\"1\":{\"5\":1,\"11\":2,\"15\":1,\"17\":1,\"21\":2,\"23\":1,\"50\":1,\"51\":1,\"58\":1,\"59\":1,\"75\":1,\"77\":2,\"82\":1,\"103\":1,\"104\":2,\"143\":1,\"176\":1,\"185\":4,\"188\":1,\"210\":2,\"234\":1,\"237\":2}}],[\"themselves\",{\"1\":{\"168\":1,\"177\":1}}],[\"them\",{\"1\":{\"4\":1,\"5\":1,\"13\":3,\"17\":1,\"18\":1,\"21\":1,\"22\":1,\"27\":1,\"45\":1,\"47\":1,\"48\":1,\"61\":2,\"66\":1,\"69\":1,\"75\":1,\"77\":2,\"79\":1,\"85\":1,\"88\":1,\"89\":1,\"94\":1,\"95\":2,\"97\":1,\"100\":1,\"104\":2,\"107\":2,\"109\":1,\"116\":2,\"123\":1,\"124\":3,\"125\":1,\"127\":1,\"129\":1,\"131\":2,\"133\":1,\"134\":1,\"143\":1,\"147\":1,\"151\":1,\"158\":2,\"164\":1,\"171\":4,\"174\":1,\"176\":2,\"177\":3,\"179\":1,\"184\":1,\"185\":3,\"187\":1,\"194\":1,\"207\":1,\"209\":1,\"211\":1,\"212\":1,\"213\":1,\"223\":1,\"230\":1,\"231\":1,\"232\":1,\"237\":2,\"240\":2,\"243\":1,\"245\":1,\"246\":1,\"248\":2}}],[\"the\",{\"0\":{\"45\":1,\"48\":1,\"49\":1,\"51\":1,\"54\":1,\"55\":1,\"65\":1,\"68\":1,\"69\":1,\"71\":1,\"73\":1,\"121\":1,\"131\":1,\"135\":1,\"139\":1,\"147\":1,\"149\":1,\"155\":1,\"161\":1,\"179\":1,\"182\":1,\"188\":1,\"197\":1,\"203\":1,\"215\":1,\"223\":1,\"230\":1,\"245\":1,\"246\":1,\"249\":1},\"1\":{\"0\":1,\"1\":1,\"3\":2,\"4\":4,\"5\":5,\"6\":5,\"7\":12,\"8\":6,\"9\":35,\"10\":18,\"11\":72,\"12\":5,\"13\":4,\"14\":6,\"15\":4,\"16\":2,\"17\":12,\"18\":1,\"21\":40,\"22\":13,\"23\":2,\"24\":4,\"25\":18,\"26\":10,\"27\":2,\"28\":4,\"29\":4,\"30\":13,\"31\":6,\"32\":4,\"33\":10,\"34\":26,\"35\":33,\"36\":7,\"39\":1,\"40\":8,\"41\":25,\"42\":1,\"43\":24,\"44\":14,\"45\":18,\"46\":12,\"47\":13,\"48\":10,\"49\":12,\"50\":10,\"51\":24,\"52\":29,\"53\":50,\"54\":18,\"55\":16,\"56\":6,\"57\":28,\"58\":77,\"59\":32,\"60\":8,\"61\":24,\"62\":2,\"63\":33,\"64\":15,\"65\":10,\"66\":30,\"67\":5,\"68\":19,\"69\":26,\"70\":29,\"71\":20,\"72\":42,\"73\":8,\"74\":41,\"75\":43,\"76\":17,\"77\":69,\"78\":67,\"79\":47,\"80\":23,\"82\":56,\"83\":27,\"84\":22,\"85\":36,\"86\":18,\"87\":67,\"88\":39,\"89\":77,\"90\":12,\"91\":6,\"92\":26,\"93\":9,\"94\":18,\"95\":13,\"96\":36,\"97\":28,\"98\":5,\"99\":12,\"100\":5,\"101\":14,\"102\":6,\"103\":6,\"104\":39,\"105\":25,\"106\":39,\"107\":10,\"108\":8,\"109\":12,\"110\":43,\"112\":6,\"113\":3,\"115\":1,\"116\":7,\"117\":1,\"118\":3,\"119\":1,\"121\":2,\"122\":8,\"123\":25,\"124\":70,\"125\":2,\"127\":6,\"128\":2,\"129\":2,\"130\":10,\"131\":10,\"132\":1,\"133\":9,\"134\":9,\"135\":41,\"136\":2,\"137\":5,\"138\":11,\"139\":16,\"140\":14,\"141\":26,\"142\":4,\"143\":27,\"144\":20,\"145\":6,\"146\":25,\"147\":143,\"148\":37,\"149\":3,\"150\":39,\"151\":37,\"152\":9,\"153\":16,\"154\":20,\"155\":5,\"156\":12,\"157\":9,\"158\":7,\"159\":21,\"160\":26,\"161\":19,\"162\":41,\"163\":17,\"164\":30,\"165\":7,\"166\":14,\"167\":1,\"168\":23,\"169\":21,\"170\":19,\"171\":27,\"172\":3,\"173\":14,\"174\":42,\"175\":8,\"176\":12,\"177\":62,\"178\":12,\"179\":28,\"180\":10,\"181\":36,\"182\":14,\"183\":9,\"184\":5,\"185\":47,\"186\":60,\"187\":55,\"188\":50,\"189\":11,\"190\":41,\"191\":26,\"192\":35,\"193\":22,\"194\":30,\"195\":36,\"196\":19,\"197\":41,\"198\":20,\"199\":20,\"200\":25,\"201\":29,\"202\":11,\"203\":3,\"204\":3,\"205\":6,\"206\":19,\"207\":7,\"208\":21,\"209\":29,\"210\":28,\"211\":11,\"212\":21,\"213\":14,\"214\":12,\"215\":17,\"216\":6,\"217\":11,\"218\":21,\"219\":2,\"220\":14,\"221\":12,\"222\":10,\"223\":15,\"224\":4,\"225\":27,\"226\":15,\"227\":43,\"228\":56,\"229\":46,\"230\":45,\"231\":22,\"232\":9,\"233\":17,\"234\":23,\"235\":70,\"236\":7,\"237\":68,\"238\":12,\"239\":47,\"240\":18,\"241\":9,\"242\":10,\"243\":16,\"244\":2,\"245\":5,\"246\":10,\"247\":17,\"248\":40,\"249\":40,\"250\":2,\"251\":2,\"252\":1}}],[\"tohashset\",{\"1\":{\"162\":1}}],[\"told\",{\"1\":{\"124\":1,\"232\":1}}],[\"tolerant\",{\"1\":{\"17\":1}}],[\"tolerance\",{\"1\":{\"9\":1,\"17\":1}}],[\"tostring\",{\"1\":{\"61\":2}}],[\"together\",{\"1\":{\"59\":1,\"147\":1,\"181\":1,\"220\":1}}],[\"toggle\",{\"1\":{\"30\":1,\"33\":1,\"35\":1,\"87\":2,\"89\":1}}],[\"todo\",{\"1\":{\"38\":1,\"58\":1,\"75\":1,\"177\":1,\"211\":1,\"218\":1}}],[\"today\",{\"1\":{\"4\":1,\"11\":2,\"12\":1,\"14\":1,\"21\":1,\"31\":2,\"35\":2}}],[\"took\",{\"1\":{\"160\":1,\"163\":1}}],[\"too\",{\"1\":{\"35\":1,\"89\":1,\"124\":1,\"164\":1,\"220\":1}}],[\"toolchain\",{\"0\":{\"119\":1},\"1\":{\"10\":1,\"11\":1,\"36\":1,\"119\":1}}],[\"toolchains\",{\"1\":{\"10\":2,\"25\":1}}],[\"tool\",{\"0\":{\"136\":1},\"1\":{\"10\":1,\"11\":1,\"13\":1,\"43\":1,\"45\":1,\"53\":1,\"84\":1,\"135\":1,\"136\":1}}],[\"tools\",{\"1\":{\"6\":3,\"9\":3,\"11\":3,\"13\":1,\"15\":2,\"17\":1,\"18\":2,\"29\":1,\"33\":1,\"41\":2,\"65\":1}}],[\"tooling\",{\"1\":{\"6\":1,\"9\":1,\"10\":1,\"11\":3,\"40\":1}}],[\"towidecstring\",{\"1\":{\"139\":4}}],[\"tower\",{\"1\":{\"33\":1}}],[\"toward\",{\"1\":{\"6\":1,\"10\":1}}],[\"totypedarray\",{\"1\":{\"79\":1}}],[\"totp\",{\"1\":{\"22\":3}}],[\"totalfreepages\",{\"1\":{\"165\":4,\"169\":4,\"183\":4}}],[\"total\",{\"1\":{\"9\":1,\"11\":1,\"165\":3,\"169\":2,\"170\":7,\"171\":4,\"183\":2,\"188\":1,\"237\":1,\"247\":1}}],[\"toil\",{\"1\":{\"19\":1}}],[\"tom\",{\"1\":{\"13\":1}}],[\"toml\",{\"1\":{\"13\":3}}],[\"touch\",{\"1\":{\"11\":1}}],[\"tokentext\",{\"1\":{\"106\":1}}],[\"tokentype\",{\"1\":{\"52\":1,\"53\":5,\"54\":1,\"62\":2,\"63\":2,\"66\":2,\"87\":3,\"88\":1,\"89\":1,\"110\":5}}],[\"tokenize\",{\"1\":{\"50\":1,\"53\":2}}],[\"tokenizer\",{\"1\":{\"10\":1}}],[\"tokens=\",{\"1\":{\"70\":1}}],[\"tokenset\",{\"1\":{\"52\":1,\"58\":4,\"64\":6,\"95\":6}}],[\"tokens\",{\"0\":{\"86\":1},\"1\":{\"16\":1,\"22\":1,\"49\":1,\"50\":3,\"51\":1,\"52\":2,\"53\":2,\"57\":4,\"58\":10,\"62\":1,\"63\":2,\"65\":1,\"66\":2,\"68\":1,\"69\":1,\"70\":1,\"85\":4,\"86\":4,\"87\":5,\"88\":2,\"89\":9,\"91\":1,\"94\":1,\"96\":1,\"99\":2,\"100\":1,\"104\":3,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"110\":6,\"116\":1}}],[\"token\",{\"0\":{\"61\":1},\"1\":{\"11\":1,\"18\":1,\"21\":2,\"22\":5,\"51\":2,\"52\":2,\"53\":5,\"61\":4,\"62\":1,\"63\":3,\"66\":4,\"68\":2,\"69\":1,\"70\":1,\"75\":3,\"82\":3,\"85\":3,\"86\":4,\"87\":6,\"88\":6,\"89\":9,\"92\":1,\"95\":1,\"96\":9,\"97\":3,\"100\":1,\"101\":2,\"104\":4,\"106\":2,\"107\":1,\"110\":4}}],[\"tongue\",{\"1\":{\"5\":1,\"35\":2}}],[\"tophysaddr\",{\"1\":{\"168\":4,\"169\":1,\"170\":2,\"171\":3,\"182\":1}}],[\"topmnodeptr\",{\"1\":{\"168\":2,\"169\":1,\"170\":1,\"171\":3,\"182\":1}}],[\"topology\",{\"1\":{\"21\":1}}],[\"topologically\",{\"1\":{\"9\":1}}],[\"topological\",{\"1\":{\"9\":2}}],[\"topics\",{\"1\":{\"39\":1}}],[\"topic\",{\"1\":{\"17\":2,\"35\":1,\"40\":1}}],[\"tops\",{\"1\":{\"11\":10}}],[\"top\",{\"0\":{\"88\":1},\"1\":{\"5\":1,\"18\":2,\"21\":1,\"36\":1,\"57\":1,\"59\":1,\"77\":1,\"86\":2,\"87\":3,\"88\":3,\"89\":2,\"124\":2,\"131\":1,\"141\":1,\"143\":1,\"164\":2,\"166\":1,\"181\":1,\"194\":1,\"195\":2,\"199\":1,\"245\":1}}],[\"to\",{\"0\":{\"72\":1,\"124\":1,\"139\":1,\"163\":1,\"200\":1,\"205\":1,\"221\":1},\"1\":{\"0\":1,\"3\":1,\"4\":6,\"5\":8,\"6\":20,\"7\":12,\"8\":2,\"9\":25,\"10\":27,\"11\":58,\"12\":2,\"13\":7,\"14\":6,\"15\":8,\"16\":1,\"17\":20,\"18\":12,\"19\":2,\"20\":4,\"21\":87,\"22\":22,\"23\":3,\"24\":11,\"25\":8,\"26\":5,\"27\":2,\"28\":2,\"29\":5,\"30\":20,\"31\":12,\"32\":11,\"33\":20,\"34\":21,\"35\":20,\"36\":1,\"40\":6,\"41\":10,\"42\":1,\"43\":12,\"44\":2,\"45\":5,\"46\":3,\"47\":1,\"48\":5,\"49\":5,\"50\":5,\"51\":6,\"52\":6,\"53\":11,\"54\":6,\"55\":9,\"56\":1,\"57\":4,\"58\":14,\"59\":6,\"60\":2,\"61\":11,\"62\":2,\"63\":7,\"64\":3,\"65\":2,\"66\":15,\"67\":1,\"68\":1,\"69\":10,\"70\":3,\"71\":4,\"72\":15,\"73\":5,\"74\":14,\"75\":17,\"76\":5,\"77\":14,\"78\":14,\"79\":10,\"80\":6,\"81\":2,\"82\":13,\"83\":11,\"84\":8,\"85\":13,\"86\":9,\"87\":28,\"88\":12,\"89\":30,\"90\":6,\"91\":3,\"92\":7,\"93\":3,\"94\":8,\"95\":10,\"96\":16,\"97\":16,\"98\":2,\"99\":2,\"100\":1,\"101\":8,\"102\":4,\"103\":1,\"104\":13,\"105\":10,\"106\":13,\"107\":6,\"108\":3,\"109\":4,\"110\":20,\"112\":2,\"115\":1,\"116\":10,\"117\":4,\"118\":2,\"119\":3,\"121\":3,\"122\":8,\"123\":16,\"124\":63,\"125\":1,\"127\":4,\"128\":1,\"129\":2,\"130\":5,\"131\":2,\"132\":1,\"133\":7,\"134\":10,\"135\":21,\"136\":2,\"137\":3,\"138\":5,\"139\":16,\"140\":15,\"141\":13,\"142\":4,\"143\":7,\"144\":20,\"145\":2,\"146\":5,\"147\":49,\"148\":17,\"149\":1,\"150\":24,\"151\":11,\"152\":1,\"153\":5,\"154\":8,\"155\":1,\"156\":10,\"157\":3,\"159\":9,\"160\":20,\"161\":10,\"162\":21,\"163\":9,\"164\":12,\"165\":1,\"166\":9,\"167\":2,\"168\":21,\"169\":8,\"170\":5,\"171\":21,\"172\":6,\"173\":5,\"174\":21,\"175\":6,\"176\":11,\"177\":32,\"178\":4,\"179\":5,\"180\":8,\"181\":17,\"182\":8,\"183\":4,\"184\":4,\"185\":10,\"186\":19,\"187\":14,\"188\":16,\"189\":1,\"190\":17,\"191\":12,\"192\":7,\"193\":7,\"194\":19,\"195\":17,\"196\":9,\"197\":20,\"198\":9,\"199\":9,\"200\":16,\"201\":19,\"202\":7,\"203\":3,\"204\":7,\"205\":10,\"206\":10,\"207\":3,\"208\":9,\"209\":12,\"210\":20,\"211\":15,\"212\":13,\"213\":9,\"214\":6,\"215\":6,\"216\":3,\"217\":8,\"218\":19,\"219\":2,\"220\":10,\"221\":10,\"222\":13,\"223\":16,\"224\":3,\"225\":6,\"226\":10,\"227\":17,\"228\":17,\"229\":12,\"230\":20,\"231\":15,\"232\":3,\"233\":4,\"234\":12,\"235\":17,\"236\":3,\"237\":31,\"238\":7,\"239\":27,\"240\":12,\"241\":11,\"242\":3,\"243\":16,\"244\":3,\"245\":4,\"246\":10,\"247\":2,\"248\":16,\"249\":15}}]],\"version\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
